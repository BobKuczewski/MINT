0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 POP HL
0000                 PUSH HL
0000                 LD DE,val1
0000                 OR A
0000                 SBC HL,DE
0000                 LD A,L
0000                 OR H
0000                 JR Z,expect%%M
0000                 CALL printStr
0000                 .cstr msg1,"\r\nActual: "
0000                 CALL printdec
0000                 CALL printStr
0000                 .cstr "\r\nExpected: "
0000                 LD HL,val1
0000                 CALL printdec
0000                 HALT
0000                 .cstr
0000                expect%%M:
0000                 POP HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 CALL enter
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 0B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 0B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 0B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 0B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 0B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 0B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 0B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 0B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 0B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 0B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 0B               LD   (RST08),HL   
0094   22 38 0B               LD   (RST10),HL   
0097   22 3A 0B               LD   (RST18),HL   
009A   22 3C 0B               LD   (RST20),HL   
009D   22 3E 0B               LD   (RST28),HL   
00A0   22 40 0B               LD   (RST30),HL   
00A3   22 44 0B               LD   (INTVEC),HL   
00A6   22 46 0B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 0B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 0B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 0A               LD   SP,DSTACK   
00C6   CD 10 03               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;       MINT Minimal Interpreter for the Z80
00CC                             ; 
00CC                             ;       Ken Boak, John Hardy and Craig Jones.
00CC                             ; 
00CC                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00CC                             ; 
00CC                             ;       see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   
00CC                TRUE:     EQU   1   
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                NSNUM:    EQU   5   ; namespaces
00CC                NSSIZE:   EQU   $80   
00CC                .macro LITDAT,len
00CC                             ; 
00CC                 DB len
00CC                .endm
00CC                 
00CC                .macro REPDAT,len,data
00CC                             ; 
00CC                 DB (len | $80)
00CC                 DB data
00CC                .endm
00CC                 
00CC                .macro ENDDAT,
00CC                             ; 
00CC                 DB 0
00CC                .endm
00CC                 
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mint and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                BACKSP_:      
0180   5C 63 40 30 3D 30 3D 28 5C 63 40 31 2D 5C 63 21 60 08 20 08 60 29 3B DB   "\\c@0=0=(\\c@1-\\c!`\b \b`);"   
0197                REEDIT_:      
0197   5C 65 5C 40 5C 23 36 3B DB   "\\e\\@\\#6;"   
019F                EDIT_:       
019F   60 3F 60 3F 5C 23 35 5C 23 36 3B 00 .CSTR   "`?`?\\#5\\#6;"   
01AB                LIST_:       
01AB   5C 24 32 36 28 5C 69 40 36 35 2B 5C 23 36 5C 63 40 30 3E 28 5C 24 29 29 5C 23 35 3B 00 .CSTR   "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;"   
01C8                PRINTSTACK_:      
01C8   5C 23 34 5C 23 35 3B 00 .CSTR   "\\#4\\#5;"   
01D0                TOGGLEBASE_:      
01D0   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
01DA                             ; ***********************************************************************
01DA                             ; Initial values for user mintVars		
01DA                             ; ***********************************************************************		
01DA                IALTVARS:      
01DA   00 0A                  DW   dStack   ; a vS0
01DC   00 00                  DW   FALSE   ; b vBase16
01DE   00 00                  DW   0   ; c vTIBPtr
01E0   C0 0B                  DW   NS0   ; d vNS
01E2   41 00                  DW   65   ; e vLastDef "A"
01E4   00 00                  DW   0   ; f
01E6   00 06                  DW   page6   ; g
01E8   40 0E                  DW   HEAP   ; h vHeapPtr
01EA                IOPCODES:      
01EA                          ;*Macro unroll:  LITDAT 4
01EA   04                     DB   4   
01EB   69                     DB   lsb(exit_)   ;   NUL
01EC   86                     DB   lsb(nop_)   ;   SOH
01ED   86                     DB   lsb(nop_)   ;   STX
01EE   66                     DB   lsb(etx_)   ;   ETX
01EF                          ;*Macro unroll:  REPDAT 29, lsb(nop_)
01EF   9D                     DB   (29 | $80)   
01F0   86                     DB   lsb(nop_)   
01F1                          ;*Macro unroll:  LITDAT 15
01F1   0F                     DB   15   
01F2   AB                     DB   lsb(store_)   ;   !
01F3   61                     DB   lsb(dup_)   ;   "
01F4   F9                     DB   lsb(hex_)   ;    #
01F5   B2                     DB   lsb(swap_)   ;    $
01F6   89                     DB   lsb(over_)   ;    %
01F7   00                     DB   lsb(and_)   ;    &
01F8   5E                     DB   lsb(drop_)   ;    '
01F9   F7                     DB   lsb(begin_)   ;    (
01FA   28                     DB   lsb(again_)   ;    )
01FB   83                     DB   lsb(mul_)   ;    *
01FC   22                     DB   lsb(add_)   ;    +
01FD   58                     DB   lsb(hdot_)   ;    ,
01FE   B7                     DB   lsb(sub_)   ;    -
01FF   4D                     DB   lsb(dot_)   ;    .
0200   F5                     DB   lsb(div_)   ;    /
0201                          ;*Macro unroll:  REPDAT 10, lsb(num_)
0201   8A                     DB   (10 | $80)   
0202   F0                     DB   lsb(num_)   
0203                          ;*Macro unroll:  LITDAT 7
0203   07                     DB   7   
0204   4A                     DB   lsb(def_)   ;    :
0205   90                     DB   lsb(ret_)   ;    ;
0206   D5                     DB   lsb(lt_)   ;    <
0207   C5                     DB   lsb(eq_)   ;    =
0208   D1                     DB   lsb(gt_)   ;    >
0209   7A                     DB   lsb(key_)   ;    ?   ( -- val )  read a char from input
020A   73                     DB   lsb(fetch_)   ;    @
020B                          ;*Macro unroll:  REPDAT 26, lsb(call_)
020B   9A                     DB   (26 | $80)   
020C   40                     DB   lsb(call_)   
020D                          ;*Macro unroll:  LITDAT 6
020D   06                     DB   6   
020E   2B                     DB   lsb(arrDef_)   ;    [
020F   FB                     DB   lsb(alt_)   ;    \
0210   3D                     DB   lsb(arrEnd_)   ;    ]
0211   14                     DB   lsb(xor_)   ;    ^
0212   BF                     DB   lsb(neg_)   ;    _
0213   F3                     DB   lsb(str_)   ;    `
0214                          ;*Macro unroll:  REPDAT 26, lsb(var_)
0214   9A                     DB   (26 | $80)   
0215   E6                     DB   lsb(var_)   
0216                          ;*Macro unroll:  LITDAT 5
0216   05                     DB   5   
0217   9E                     DB   lsb(shl_)   ;    {
0218   0B                     DB   lsb(or_)   ;    |
0219   A3                     DB   lsb(shr_)   ;    }
021A   97                     DB   lsb(rot_)   ;    ~ ( a b c -- b c a ) rotate
021B   86                     DB   lsb(nop_)   ;    backspace
021C                          ;*Macro unroll:  LITDAT 17
021C   11                     DB   17   
021D   00                     DB   lsb(EMPTY)   ; NUL ^@
021E   00                     DB   lsb(EMPTY)   ; SOH ^A  1
021F   D0                     DB   lsb(toggleBase_)   ; STX ^B  2
0220   00                     DB   lsb(EMPTY)   ; ETX ^C  3
0221   00                     DB   lsb(EMPTY)   ; EOT ^D  4
0222   9F                     DB   lsb(edit_)   ; ENQ ^E  5
0223   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0224   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0225   80                     DB   lsb(backsp_)   ; BS  ^H  8
0226   00                     DB   lsb(EMPTY)   ; TAB ^I  9
0227   97                     DB   lsb(reedit_)   ; LF  ^J 10
0228   00                     DB   lsb(EMPTY)   ; VT  ^K 11
0229   AB                     DB   lsb(list_)   ; FF  ^L 12
022A   00                     DB   lsb(EMPTY)   ; CR  ^M 13
022B   00                     DB   lsb(EMPTY)   ; SO  ^N 14
022C   00                     DB   lsb(EMPTY)   ; SI  ^O 15
022D   C8                     DB   lsb(printStack_)   ; DLE ^P 16
022E                          ;*Macro unroll:  REPDAT 15, lsb(EMPTY)
022E   8F                     DB   (15 | $80)   
022F   00                     DB   lsb(EMPTY)   
0230                          ;*Macro unroll:  LITDAT 5
0230   05                     DB   5   
0231   08                     DB   lsb(aNop_)   ;a0    SP
0232   08                     DB   lsb(aNop_)   ;a1    \!
0233   08                     DB   lsb(aNop_)   ;a2    \"
0234   EE                     DB   lsb(util_)   ;a3    \#  utility command
0235   C3                     DB   lsb(newln_)   ;a4    \$  prints a newline to output
0236                          ;*Macro unroll:  REPDAT 3, lsb(aNop_)
0236   83                     DB   (3 | $80)   
0237   08                     DB   lsb(aNop_)   
0238                          ;*Macro unroll:  LITDAT 8
0238   08                     DB   8   
0239   7A                     DB   lsb(ifte_)   ;a8    (  ( b -- )
023A   08                     DB   lsb(aNop_)   ;a9    )
023B   08                     DB   lsb(aNop_)   ;aa    *
023C   08                     DB   lsb(aNop_)   ;ab    +
023D   3C                     DB   lsb(emit_)   ;ac    ,  ( b -- ) prints a char
023E   08                     DB   lsb(aNop_)   ;ad    -
023F   D1                     DB   lsb(prnStr_)   ;ae    .  ( b -- )
0240   08                     DB   lsb(aNop_)   ;af    /
0241                          ;*Macro unroll:  REPDAT 5, lsb(NSRef_)
0241   85                     DB   (5 | $80)   
0242   9B                     DB   lsb(NSRef_)   
0243                          ;*Macro unroll:  REPDAT 5, lsb(aNop_)
0243   85                     DB   (5 | $80)   
0244   08                     DB   lsb(aNop_)   
0245                          ;*Macro unroll:  LITDAT 7
0245   07                     DB   7   
0246   0A                     DB   lsb(anonDef_)   ;ba    :
0247   08                     DB   lsb(aNop_)   ;bb    ;
0248   8C                     DB   lsb(inPort_)   ;bc    <  ( port -- val )
0249   97                     DB   lsb(loopidx_)   ;bd    =  ( -- adr) returns address of index variable
024A   C8                     DB   lsb(outPort_)   ;be    >  ( val port -- )
024B   63                     DB   lsb(getRef_)   ;bf    ?
024C   27                     DB   lsb(cFetch_)   ;c0    @
024D                          ;*Macro unroll:  REPDAT 26, lsb(aNop_)
024D   9A                     DB   (26 | $80)   
024E   08                     DB   lsb(aNop_)   
024F                          ;*Macro unroll:  LITDAT 6
024F   06                     DB   6   
0250   22                     DB   lsb(cArrDef_)   ;db    [
0251   2E                     DB   lsb(comment_)   ;dc    \  comment text, skips reading until end of line
0252   08                     DB   lsb(aNop_)   ;dd    ]
0253   6B                     DB   lsb(go_)   ;de    ^  ( -- ? ) execute mint definition
0254   13                     DB   lsb(break_)   ;df    _  break loop if true
0255   D7                     DB   lsb(strDef_)   ;e0    `  ( -- adr ) defines a string \` string `
0256                          ;*Macro unroll:  REPDAT 8, lsb(altVar_)  ;e1
0256   88                     DB   (8 | $80)   ;e1
0257   00                     DB   lsb(altVar_)   
0258                          ;*Macro unroll:  LITDAT 1
0258   01                     DB   1   
0259   97                     DB   lsb(loopidx_)   ;e9    i  ; returns index variable of current loop
025A                          ;*Macro unroll:  REPDAT 17, lsb(altVar_)
025A   91                     DB   (17 | $80)   
025B   00                     DB   lsb(altVar_)   
025C                          ;*Macro unroll:  LITDAT 5
025C   05                     DB   5   
025D   E5                     DB   lsb(NSEnter_)   ;fb    {
025E   08                     DB   lsb(aNop_)   ;fc    |
025F   BB                     DB   lsb(NSExit_)   ;fd    }
0260   08                     DB   lsb(aNop_)   ;fe    ~
0261   08                     DB   lsb(aNop_)   ;ff    BS		
0262                          ;*Macro unroll:  ENDDAT
0262   00                     DB   0   
0263                ETX:         ;=12
0263   21 00 F6               LD   HL,-DSTACK   
0266   39                     ADD   HL,SP   
0267   30 03                  JR   NC,etx1   
0269   31 00 0A               LD   SP,DSTACK   
026C                ETX1:        
026C   18 15                  JR   interpret   
026E                START:       
026E   31 00 0A               LD   SP,DSTACK   
0271   CD 10 03               CALL   init   
0274   CD 5D 03               CALL   printStr   
0277   4D 49 4E 54 20 56 31 2E 31 0D 0A 00 .CSTR   "MINT V1.1\r\n"   
0283                INTERPRET:      
0283   CD 94 07               CALL   prompt   
0286   01 00 00               LD   BC,0   ; load BC with offset into TIB
0289   ED 43 84 0B            LD   (vTIBPtr),BC   
028D                INTERPRET2:      ; calc nesting (a macro might have changed it)
028D   1E 00                  LD   E,0   ; initilize nesting value
028F   C5                     PUSH   BC   ; save offset into TIB,
0290                             ; BC is also the count of chars in TIB
0290   21 00 08               LD   HL,TIB   ; HL is start of TIB
0293   18 06                  JR   interpret4   
0295                INTERPRET3:      
0295   7E                     LD   A,(HL)   ; A = char in TIB
0296   23                     INC   HL   ; inc pointer into TIB
0297   0B                     DEC   BC   ; dec count of chars in TIB
0298   CD CE 03               CALL   nesting   ; update nesting value
029B                INTERPRET4:      
029B   79                     LD   A,C   ; is count zero?
029C   B0                     OR   B   
029D   20 F6                  JR   NZ,interpret3   ; if not loop
029F   C1                     POP   BC   ; restore offset into TIB
02A0                             ; *******************************************************************
02A0                             ; Wait for a character from the serial input (keyboard)
02A0                             ; and store it in the text buffer. Keep accepting characters,
02A0                             ; increasing the instruction pointer BC - until a newline received.
02A0                             ; *******************************************************************
02A0                WAITCHAR:      
02A0   CD 81 00               CALL   getchar   ; loop around waiting for character
02A3   FE 20                  CP   $20   
02A5   30 21                  JR   NC,waitchar1   
02A7   FE 00                  CP   $0   ; is it end of string?
02A9   28 41                  JR   Z,waitchar4   
02AB   FE 0D                  CP   "\r"   ; carriage return?
02AD   28 27                  JR   Z,waitchar3   
02AF                             ; LD D,0
02AF                MACRO:       ;=25
02AF   ED 43 84 0B            LD   (vTIBPtr),BC   
02B3   21 80 0A               LD   HL,ctrlCodes   
02B6   85                     ADD   A,L   
02B7   6F                     LD   L,A   
02B8   5E                     LD   E,(HL)   
02B9   16 01                  LD   D,msb(macros)   
02BB   D5                     PUSH   DE   
02BC   CD 54 03               CALL   ENTER   
02BF   5C 5E 00               .CSTR   "\\^"   
02C2   ED 4B 84 0B            LD   BC,(vTIBPtr)   
02C6   18 C5                  JR   interpret2   
02C8                WAITCHAR1:      
02C8   21 00 08               LD   HL,TIB   
02CB   09                     ADD   HL,BC   
02CC   77                     LD   (HL),A   ; store the character in textbuf
02CD   03                     INC   BC   
02CE   CD 85 00               CALL   putchar   ; echo character to screen
02D1   CD CE 03               CALL   nesting   
02D4   18 CA                  JR   waitchar   ; wait for next character
02D6                WAITCHAR3:      
02D6   21 00 08               LD   HL,TIB   
02D9   09                     ADD   HL,BC   
02DA   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
02DC   23                     INC   HL   
02DD   36 0A                  LD   (HL),"\n"   
02DF   23                     INC   HL   ; ????
02E0   03                     INC   BC   
02E1   03                     INC   BC   
02E2   CD 9D 07               CALL   crlf   ; echo character to screen
02E5   7B                     LD   A,E   ; if zero nesting append and ETX after \r
02E6   B7                     OR   A   
02E7   20 B7                  JR   NZ,waitchar   
02E9   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
02EB   03                     INC   BC   
02EC                WAITCHAR4:      
02EC   ED 43 84 0B            LD   (vTIBPtr),BC   
02F0   01 00 08               LD   BC,TIB   ; Instructions stored on heap at address HERE
02F3   0B                     DEC   BC   
02F4                             ; ********************************************************************************
02F4                             ; 
02F4                             ; Dispatch Routine.
02F4                             ; 
02F4                             ; Get the next character and form a 1 byte jump address
02F4                             ; 
02F4                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
02F4                             ; jump to the selected function.
02F4                             ; 
02F4                             ; Individual handler routines will deal with each category:
02F4                             ; 
02F4                             ; 1. Detect characters A-Z and jump to the User Command handler routine
02F4                             ; 
02F4                             ; 2. Detect characters a-z and jump to the variable handler routine
02F4                             ; 
02F4                             ; 3. All other characters are punctuation and cause a jump to the associated
02F4                             ; primitive code.
02F4                             ; 
02F4                             ; Instruction Pointer IP BC is incremented
02F4                             ; 
02F4                             ; *********************************************************************************
02F4                NEXT:        ;=9
02F4   03                     INC   BC   ;       Increment the IP
02F5   0A                     LD   A,(BC)   ;       Get the next character and dispatch
02F6   6F                     LD   L,A   ;       Index into table
02F7   26 0A                  LD   H,msb(opcodes)   ;       Start address of jump table
02F9   6E                     LD   L,(HL)   ;       get low jump address
02FA   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
02FC   E9                     JP   (HL)   ;       Jump to routine
02FD                             ; ARRAY compilation routine
02FD                COMPNEXT:      ;=20
02FD   D1                     POP   DE   ; DE = return address
02FE   2A 8E 0B               LD   HL,(vHeapPtr)   ; load heap ptr
0301   73                     LD   (HL),E   ; store lsb
0302   3A 02 0B               LD   A,(vByteMode)   
0305   23                     INC   HL   
0306   B7                     OR   A   
0307   20 02                  JR   NZ,compNext1   
0309   72                     LD   (HL),D   
030A   23                     INC   HL   
030B                COMPNEXT1:      
030B   22 8E 0B               LD   (vHeapPtr),HL   ; save heap ptr
030E   18 E4                  JR   NEXT   
0310                INIT:        ;=68
0310   DD 21 80 09            LD   IX,RSTACK   
0314   FD 21 F4 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
0318   21 DA 01               LD   HL,ialtVars   
031B   11 80 0B               LD   DE,altVars   
031E   01 10 00               LD   BC,8 * 2   
0321   ED B0                  LDIR      
0323   21 C0 0B               LD   HL,NS0   ; init namespaces to 0
0326   54 5D                  LD   DE,HL   
0328   13                     INC   DE   
0329   36 00                  LD   (HL),0   
032B   01 80 02               LD   BC,NSNUM*NSSIZE   
032E   ED B0                  LDIR      
0330                INITOPS:      
0330   21 EA 01               LD   HL,iOpcodes   
0333   11 00 0A               LD   DE,opcodes   
0336   01 00 01               LD   BC,256   
0339                INITOPS1:      
0339   7E                     LD   A,(HL)   
033A   23                     INC   HL   
033B   CB 27                  SLA   A   
033D   C8                     RET   Z   
033E   38 09                  JR   C,initOps2   
0340   CB 3F                  SRL   A   
0342   4F                     LD   C,A   
0343   06 00                  LD   B,0   
0345   ED B0                  LDIR      
0347   18 F0                  JR   initOps1   
0349                INITOPS2:      
0349   CB 3F                  SRL   A   
034B   47                     LD   B,A   
034C   7E                     LD   A,(HL)   
034D   23                     INC   HL   
034E                INITOPS2A:      
034E   12                     LD   (DE),A   
034F   13                     INC   DE   
0350   10 FC                  DJNZ   initOps2a   
0352   18 E5                  JR   initOps1   
0354                ENTER:       ;=9
0354   60 69                  LD   HL,BC   
0356   CD A4 07               CALL   rpush   ; save Instruction Pointer
0359   C1                     POP   BC   
035A   0B                     DEC   BC   
035B   FD E9                  JP   (IY)   
035D                PRINTSTR:      ;=14
035D   E3                     EX   (SP),HL   
035E   CD 68 03               CALL   putStr   
0361   23                     INC   HL   
0362   E3                     EX   (SP),HL   
0363   C9                     RET      
0364                PUTSTR0:      
0364   CD 85 00               CALL   putchar   
0367   23                     INC   HL   
0368                PUTSTR:      
0368   7E                     LD   A,(HL)   
0369   B7                     OR   A   
036A   20 F8                  JR   NZ,putStr0   
036C   C9                     RET      
036D                NSLOOKUP:      
036D   16 00                  LD   D,0   
036F                NSLOOKUP0:      
036F   FE 61                  CP   "a"   
0371   30 06                  JR   NC,NSLookup2   
0373                NSLOOKUP1:      
0373   D6 41                  SUB   "A"   
0375   1E 00                  LD   E,0   
0377   18 04                  JR   NSLookup3   
0379                NSLOOKUP2:      
0379   D6 61                  SUB   "a"   
037B   1E 34                  LD   E,26*2   
037D                NSLOOKUP3:      
037D   87                     ADD   A,A   
037E   83                     ADD   A,E   
037F   2A 86 0B               LD   HL,(vNS)   
0382   85                     ADD   A,L   
0383   6F                     LD   L,A   
0384   3E 00                  LD   A,0   
0386   8C                     ADC   A,H   
0387   67                     LD   H,A   
0388   AF                     XOR   A   
0389   B3                     OR   E   ; sets Z flag if A-Z
038A   C9                     RET      
038B                PRINTDEC:      ;=36
038B   11 F0 D8               LD   DE,-10000   
038E   CD A4 03               CALL   printdec1   
0391   11 18 FC               LD   DE,-1000   
0394   CD A4 03               CALL   printdec1   
0397   11 9C FF               LD   DE,-100   
039A   CD A4 03               CALL   printdec1   
039D   1E F6                  LD   E,-10   
039F   CD A4 03               CALL   printdec1   
03A2   1E FF                  LD   E,-1   
03A4                PRINTDEC1:      
03A4   3E 2F                  LD   A,"0"-1   
03A6                PRINTDEC2:      
03A6   3C                     INC   A   
03A7   19                     ADD   HL,DE   
03A8   38 FC                  JR   C,printdec2   
03AA   ED 52                  SBC   HL,DE   
03AC   C3 85 00               JP   putchar   
03AF                PRINTHEX:      ;=31
03AF                             ; Display HL as a 16-bit number in hex.
03AF   C5                     PUSH   BC   ; preserve the IP
03B0   7C                     LD   A,H   
03B1   CD BA 03               CALL   printhex2   
03B4   7D                     LD   A,L   
03B5   CD BA 03               CALL   printhex2   
03B8   C1                     POP   BC   
03B9   C9                     RET      
03BA                PRINTHEX2:      
03BA   4F                     LD   C,A   
03BB   1F                     RRA      
03BC   1F                     RRA      
03BD   1F                     RRA      
03BE   1F                     RRA      
03BF   CD C3 03               CALL   printhex3   
03C2   79                     LD   A,C   
03C3                PRINTHEX3:      
03C3   E6 0F                  AND   0x0F   
03C5   C6 90                  ADD   A,0x90   
03C7   27                     DAA      
03C8   CE 40                  ADC   A,0x40   
03CA   27                     DAA      
03CB   C3 85 00               JP   putchar   
03CE                             ; **************************************************************************
03CE                             ; calculate nesting value
03CE                             ; A is char to be tested,
03CE                             ; E is the nesting value (initially 0)
03CE                             ; E is increased by ( and [
03CE                             ; E is decreased by ) and ]
03CE                             ; E has its bit 7 toggled by `
03CE                             ; limited to 127 levels
03CE                             ; **************************************************************************
03CE                NESTING:      ;=44
03CE   FE 60                  CP   "`"   
03D0   20 0A                  JR   NZ,nesting1   
03D2   CB 7B                  BIT   7,E   
03D4   28 03                  JR   Z,nesting1a   
03D6   CB BB                  RES   7,E   
03D8   C9                     RET      
03D9                NESTING1A:      
03D9   CB FB                  SET   7,E   
03DB   C9                     RET      
03DC                NESTING1:      
03DC   CB 7B                  BIT   7,E   
03DE   C0                     RET   NZ   
03DF   FE 3A                  CP   ":"   
03E1   28 08                  JR   Z,nesting2   
03E3   FE 5B                  CP   "["   
03E5   28 04                  JR   Z,nesting2   
03E7   FE 28                  CP   "("   
03E9   20 02                  JR   NZ,nesting3   
03EB                NESTING2:      
03EB   1C                     INC   E   
03EC   C9                     RET      
03ED                NESTING3:      
03ED   FE 3B                  CP   ";"   
03EF   28 07                  JR   Z,nesting4   
03F1   FE 5D                  CP   "]"   
03F3   28 03                  JR   Z,nesting4   
03F5   FE 29                  CP   ")"   
03F7   C0                     RET   NZ   
03F8                NESTING4:      
03F8   1D                     DEC   E   
03F9   C9                     RET      
03FA                             ; **********************************************************************			
03FA                             ; Page 4 primitive routines
03FA                             ; **********************************************************************
03FA                          ALIGN   $100   
0400                PAGE4:       
0400                AND_:        
0400   D1                     POP   DE   ;     Bitwise AND the top 2 elements of the stack
0401   E1                     POP   HL   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   HL   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                OR_:         
040B   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
040C   E1                     POP   HL   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                XOR_:        
0414   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0415                XOR1:        
0415   E1                     POP   HL   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                INV_:        ; Bitwise INVert the top member of the stack
041D   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0420   18 F3                  JR   xor1   
0422                ADD_:        ; Add the top 2 members of the stack
0422   D1                     POP   DE   
0423   E1                     POP   HL   
0424   19                     ADD   HL,DE   
0425   E5                     PUSH   HL   
0426   FD E9                  JP   (IY)   
0428   C3 C1 05     AGAIN_:   JP   again   
042B                ARRDEF_:      
042B                ARRDEF:      ;=18
042B   3E 00                  LD   A,FALSE   
042D                ARRDEF1:      
042D   FD 21 FD 02            LD   IY,compNEXT   
0431   32 02 0B               LD   (vByteMode),A   
0434   2A 8E 0B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0437   CD A4 07               CALL   rpush   ; save start of array \[  \]
043A   C3 F4 02               JP   NEXT   ; hardwired to NEXT
043D   C3 84 05     ARREND_:   JP   arrEnd   
0440                CALL_:       
0440   0A                     LD   A,(BC)   
0441   CD 73 03               CALL   NSLookup1   
0444   5E                     LD   E,(HL)   
0445   23                     INC   HL   
0446   56                     LD   D,(HL)   
0447   C3 6C 06               JP   go1   
044A   C3 A0 05     DEF_:     JP   def   
044D                DOT_:        
044D   E1                     POP   HL   
044E   CD 8B 03               CALL   printdec   
0451                DOT2:        
0451   3E 20                  LD   A," "   
0453   CD 85 00               CALL   putChar   
0456   FD E9                  JP   (IY)   
0458                HDOT_:       ; print hexadecimal
0458   E1                     POP   HL   
0459   CD AF 03               CALL   printhex   
045C   18 F3                  JR   dot2   
045E                DROP_:       ; Discard the top member of the stack
045E   E1                     POP   HL   
045F   FD E9                  JP   (IY)   
0461                DUP_:        
0461   E1                     POP   HL   ; Duplicate the top member of the stack
0462   E5                     PUSH   HL   
0463   E5                     PUSH   HL   
0464   FD E9                  JP   (IY)   
0466                ETX_:        
0466   C3 63 02               JP   ETX   
0469                EXIT_:       
0469   03                     INC   BC   
046A   50 59                  LD   DE,BC   
046C   CD AF 07               CALL   rpop   ; Restore Instruction pointer
046F   44 4D                  LD   BC,HL   
0471   EB                     EX   DE,HL   
0472   E9                     JP   (HL)   
0473                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0473   E1                     POP   HL   
0474                FETCH1:      
0474   5E                     LD   E,(HL)   
0475   23                     INC   HL   
0476   56                     LD   D,(HL)   
0477   D5                     PUSH   DE   
0478   FD E9                  JP   (IY)   
047A                KEY_:        
047A   CD 81 00               CALL   getchar   
047D   26 00                  LD   H,0   
047F   6F                     LD   L,A   
0480   E5                     PUSH   HL   
0481   FD E9                  JP   (IY)   
0483   C3 56 07     MUL_:     JP   mul   
0486                NOP_:        
0486   C3 F4 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0489                OVER_:       
0489   E1                     POP   HL   ; Duplicate 2nd element of the stack
048A   D1                     POP   DE   
048B   D5                     PUSH   DE   
048C   E5                     PUSH   HL   
048D   D5                     PUSH   DE   ; And push it to top of stack
048E   FD E9                  JP   (IY)   
0490                RET_:        
0490   CD AF 07               CALL   rpop   ; Restore Instruction pointer
0493   44 4D                  LD   BC,HL   
0495   FD E9                  JP   (IY)   
0497                ROT_:        ; a b c -- b c a
0497   D1                     POP   DE   ; a b                   de = c
0498   E1                     POP   HL   ; a                     hl = b
0499   E3                     EX   (SP),HL   ; b                     hl = a
049A   D5                     PUSH   DE   ; b c
049B   E5                     PUSH   HL   ; b c a
049C   FD E9                  JP   (IY)   
049E                             ;  Left shift { is multiply by 2		
049E                SHL_:        
049E   E1                     POP   HL   ; Duplicate the top member of the stack
049F   29                     ADD   HL,HL   
04A0   E5                     PUSH   HL   ; shift left fallthrough into add_
04A1   FD E9                  JP   (IY)   ; 
04A3                             ;  Right shift } is a divide by 2		
04A3                SHR_:        
04A3   E1                     POP   HL   ; Get the top member of the stack
04A4                SHR1:        
04A4   CB 3C                  SRL   H   
04A6   CB 1D                  RR   L   
04A8   E5                     PUSH   HL   
04A9   FD E9                  JP   (IY)   ; 
04AB                STORE_:      ; Store the value at the address placed on the top of the stack
04AB   E1                     POP   HL   
04AC   D1                     POP   DE   
04AD   73                     LD   (HL),E   
04AE   23                     INC   HL   
04AF   72                     LD   (HL),D   
04B0   FD E9                  JP   (IY)   
04B2                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
04B2                SWAP_:       
04B2   E1                     POP   HL   
04B3   E3                     EX   (SP),HL   
04B4   E5                     PUSH   HL   
04B5   FD E9                  JP   (IY)   
04B7                SUB_:        ; Subtract the value 2nd on stack from top of stack
04B7   D1                     POP   DE   ; 
04B8   E1                     POP   HL   ;      Entry point for INVert
04B9                SUB2:        
04B9   A7                     AND   A   ;      Entry point for NEGate
04BA   ED 52                  SBC   HL,DE   ; 15t
04BC   E5                     PUSH   HL   ; 
04BD   FD E9                  JP   (IY)   ; 
04BF                             ; 5
04BF                NEG_:        
04BF   21 00 00               LD   HL,0   ; NEGate the value on top of stack (2's complement)
04C2   D1                     POP   DE   ; 
04C3   18 F4                  JR   sub2   ; use the SUBtract routine
04C5                EQ_:         
04C5   E1                     POP   HL   
04C6   D1                     POP   DE   
04C7   A7                     AND   A   ; reset the carry flag
04C8   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04CA   28 16                  JR   Z,equal   
04CC   21 00 00               LD   HL,0   
04CF   18 12                  JR   less   ; HL = 1
04D1                GT_:         
04D1   D1                     POP   DE   
04D2   E1                     POP   HL   
04D3   18 02                  JR   cmp_   
04D5                LT_:         
04D5   E1                     POP   HL   
04D6   D1                     POP   DE   
04D7                CMP_:        
04D7   A7                     AND   A   ; reset the carry flag
04D8   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04DA   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04DC   21 00 00               LD   HL,0   
04DF   FA E3 04               JP   M,less   
04E2                EQUAL:       
04E2   2C                     INC   L   ; HL = 1
04E3                LESS:        
04E3   E5                     PUSH   HL   
04E4   FD E9                  JP   (IY)   
04E6                VAR_:        
04E6   0A                     LD   A,(BC)   
04E7   CD 79 03               CALL   NSLookup2   
04EA   E5                     PUSH   HL   
04EB   FD E9                  JP   (IY)   
04ED   C3 08 05               JP   str   
04F0   C3 72 07     NUM_:     JP   num   
04F3   18 13        STR_:     JR   str   
04F5   18 20        DIV_:     JR   div   
04F7   18 40        BEGIN_:   JR   begin   
04F9   18 6C        HEX_:     JR   hex   
04FB                ALT_:        
04FB                             ;*******************************************************************
04FB                             ; Page 5 primitive routines
04FB                             ;*******************************************************************
04FB                             ;falls through
04FB                ALT:         ;=11
04FB   03                     INC   BC   
04FC   0A                     LD   A,(BC)   
04FD   21 80 0A               LD   HL,altCodes   
0500   85                     ADD   A,L   
0501   6F                     LD   L,A   
0502                ALT2:        
0502   7E                     LD   A,(HL)   ;       get low jump address
0503   2A 8C 0B               LD   HL,(vAltPage)   
0506   6F                     LD   L,A   
0507   E9                     JP   (HL)   ;       Jump to routine
0508                STR:         ;=15
0508   03                     INC   BC   
0509                STR1:        
0509   0A                     LD   A,(BC)   
050A   03                     INC   BC   
050B   FE 60                  CP   "`"   ; ` is the string terminator
050D   28 05                  JR   Z,str2   
050F   CD 85 00               CALL   putchar   
0512   18 F5                  JR   str1   
0514                STR2:        
0514   0B                     DEC   BC   
0515   FD E9                  JP   (IY)   
0517                             ; ********************************************************************
0517                             ; 16-bit division subroutine.
0517                             ; 
0517                             ; BC: divisor, DE: dividend, HL: remainder
0517                             ; *********************************************************************
0517                             ; This divides DE by BC, storing the result in DE, remainder in HL
0517                             ; *********************************************************************
0517                             ; 1382 cycles
0517                             ; 35 bytes (reduced from 48)
0517                             ; 
0517                DIV:         ;=24
0517   D1                     POP   DE   ; get first value
0518   E1                     POP   HL   ; get 2nd value
0519   C5                     PUSH   BC   ; Preserve the IP
051A   44                     LD   B,H   ; BC = 2nd value
051B   4D                     LD   C,L   
051C                             ; 
051C   21 00 00               LD   HL,0   ; Zero the remainder
051F   3E 10                  LD   A,16   ; Loop counter
0521                DIV1:        ;shift the bits from BC (numerator) into HL (accumulator)
0521   CB 21                  SLA   C   
0523   CB 10                  RL   B   
0525   ED 6A                  ADC   HL,HL   
0527   ED 52                  SBC   HL,DE   ;Check if remainder >= denominator (HL>=DE)
0529   38 03                  JR   C,div2   
052B   0C                     INC   C   
052C   18 01                  JR   div3   
052E                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
052E   19                     ADD   hl,de   
052F                DIV3:        
052F   3D                     DEC   A   
0530   20 EF                  JR   NZ,div1   
0532   50                     LD   D,B   ; Result from BC to DE
0533   59                     LD   E,C   
0534                DIV4:        
0534   C1                     POP   BC   ; Restore the IP
0535   D5                     PUSH   DE   ; Push Result
0536   E5                     PUSH   HL   ; Push remainder
0537   FD E9                  JP   (IY)   
0539                             ; *************************************
0539                             ; Loop Handling Code
0539                             ; *************************************
0539                             ;=23
0539                BEGIN:       ; Left parentesis begins a loop
0539   E1                     POP   HL   
053A   7D                     LD   A,L   ; zero?
053B   B4                     OR   H   
053C   28 1C                  JR   Z,begin1   
053E   2B                     DEC   HL   
053F   11 FA FF               LD   DE,-6   
0542   DD 19                  ADD   IX,DE   
0544   DD 36 00 00            LD   (IX+0),0   ; loop var
0548   DD 36 01 00            LD   (IX+1),0   
054C   DD 75 02               LD   (IX+2),L   ; loop limit
054F   DD 74 03               LD   (IX+3),H   
0552   DD 71 04               LD   (IX+4),C   ; loop address
0555   DD 70 05               LD   (IX+5),B   
0558   FD E9                  JP   (IY)   
055A                BEGIN1:      
055A   1E 01                  LD   E,1   
055C                BEGIN2:      
055C   03                     INC   BC   
055D   0A                     LD   A,(BC)   
055E   CD CE 03               CALL   nesting   
0561   AF                     XOR   A   
0562   B3                     OR   E   
0563   20 F7                  JR   NZ,begin2   
0565                BEGIN3:      
0565   FD E9                  JP   (IY)   
0567                HEX:         ;=26
0567   21 00 00               LD   HL,0   ;     Clear HL to accept the number
056A                HEX1:        
056A   03                     INC   BC   
056B   0A                     LD   A,(BC)   ;     Get the character which is a numeral
056C   CB 77                  BIT   6,A   ;       is it uppercase alpha?
056E   28 02                  JR   Z,hex2   ; no a decimal
0570   D6 07                  SUB   7   ; sub 7  to make $A - $F
0572                HEX2:        
0572   D6 30                  SUB   $30   ;       Form decimal digit
0574   DA 90 07               JP   C,num2   
0577   FE 10                  CP   $0F+1   
0579   D2 90 07               JP   NC,num2   
057C   29                     ADD   HL,HL   ;        2X ; Multiply digit(s) in HL by 16
057D   29                     ADD   HL,HL   ;        4X
057E   29                     ADD   HL,HL   ;        8X
057F   29                     ADD   HL,HL   ;       16X
0580   85                     ADD   A,L   ;       Add into bottom of HL
0581   6F                     LD   L,A   ; 
0582   18 E6                  JR   hex1   
0584                ARREND:      ;=27
0584   CD AF 07               CALL   rpop   ; DE = start of array
0587   E5                     PUSH   HL   
0588   EB                     EX   DE,HL   
0589   2A 8E 0B               LD   HL,(vHeapPtr)   ; HL = heap ptr
058C   B7                     OR   A   
058D   ED 52                  SBC   HL,DE   ; bytes on heap
058F   3A 02 0B               LD   A,(vByteMode)   
0592   B7                     OR   A   
0593   20 04                  JR   NZ,arrEnd2   
0595   CB 3C                  SRL   H   ; BC = m words
0597   CB 1D                  RR   L   
0599                ARREND2:      
0599   E5                     PUSH   HL   
059A   FD 21 F4 02            LD   IY,NEXT   
059E   FD E9                  JP   (IY)   ; hardwired to NEXT
05A0                             ; **************************************************************************
05A0                             ; def is used to create a colon definition
05A0                             ; When a colon is detected, the next character (usually uppercase alpha)
05A0                             ; is looked up in the vector table to get its associated code field address
05A0                             ; This CFA is updated to point to the character after uppercase alpha
05A0                             ; The remainder of the characters are then skipped until after a semicolon
05A0                             ; is found.
05A0                             ; ***************************************************************************
05A0                             ; def:                                ; Create a colon definition
05A0                             ;         INC BC
05A0                             ;         LD  A,(BC)                  ; Get the next character
05A0                             ;         LD (vLastDef),A
05A0                             ;         INC BC
05A0                             ;         CALL NSLookup
05A0                             ;         LD DE,(vHeapPtr)            ; start of defintion
05A0                             ;         LD (HL),E                   ; Save low byte of address in CFA
05A0                             ;         INC HL
05A0                             ;         LD (HL),D                   ; Save high byte of address in CFA+1
05A0                             ; def1:                               ; Skip to end of definition
05A0                             ;         LD A,(BC)                   ; Get the next character
05A0                             ;         INC BC                      ; Point to next character
05A0                             ;         LD (DE),A
05A0                             ;         INC DE
05A0                             ;         CP ";"                      ; Is it a semicolon
05A0                             ;         JR Z, def2                  ; end the definition
05A0                             ;         JR  def1                    ; get the next element
05A0                             ; def2:
05A0                             ;         DEC BC
05A0                             ; def3:
05A0                             ;         LD (vHeapPtr),DE            ; bump heap ptr to after definiton
05A0                             ;         JP (IY)
05A0                DEF:         ; Create a colon definition
05A0   03                     INC   BC   
05A1   0A                     LD   A,(BC)   ; Get the next character
05A2   32 88 0B               LD   (vLastDef),A   
05A5   CD 6D 03               CALL   NSLookup   
05A8   ED 5B 8E 0B            LD   DE,(vHeapPtr)   ; start of defintion
05AC   73                     LD   (HL),E   ; Save low byte of address in CFA
05AD   23                     INC   HL   
05AE   72                     LD   (HL),D   ; Save high byte of address in CFA+1
05AF   03                     INC   BC   
05B0                DEF1:        ; Skip to end of definition
05B0   0A                     LD   A,(BC)   ; Get the next character
05B1   03                     INC   BC   ; Point to next character
05B2   12                     LD   (DE),A   
05B3   13                     INC   DE   
05B4   FE 3B                  CP   ";"   ; Is it a semicolon
05B6   28 02                  JR   Z,def2   ; end the definition
05B8   18 F6                  JR   def1   ; get the next element
05BA                DEF2:        
05BA   0B                     DEC   BC   
05BB                DEF3:        
05BB   ED 53 8E 0B            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
05BF   FD E9                  JP   (IY)   
05C1                AGAIN:       ;=51
05C1   DD 5E 00               LD   E,(IX+0)   ; peek loop var
05C4   DD 56 01               LD   D,(IX+1)   
05C7   7A                     LD   A,D   ; check if IFTEMode
05C8   A3                     AND   E   
05C9   3C                     INC   A   
05CA   20 07                  JR   NZ,again1   
05CC   13                     INC   DE   
05CD   D5                     PUSH   DE   ; push FALSE condition
05CE   11 02 00               LD   DE,2   
05D1   18 1D                  JR   again3   ; drop IFTEMode
05D3                AGAIN1:      
05D3   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
05D6   DD 66 03               LD   H,(IX+3)   
05D9   B7                     OR   A   
05DA   ED 52                  SBC   HL,DE   
05DC   28 0F                  JR   Z,again2   
05DE   13                     INC   DE   
05DF   DD 73 00               LD   (IX+0),E   ; poke loop var
05E2   DD 72 01               LD   (IX+1),D   
05E5   DD 4E 04               LD   C,(IX+4)   ; peek loop address
05E8   DD 46 05               LD   B,(IX+5)   
05EB   FD E9                  JP   (IY)   
05ED                AGAIN2:      
05ED   11 06 00               LD   DE,6   ; drop loop frame
05F0                AGAIN3:      
05F0   DD 19                  ADD   IX,DE   
05F2   FD E9                  JP   (IY)   
05F4                             ; **************************************************************************
05F4                             ; Page 6 Alt primitives
05F4                             ; **************************************************************************
05F4                          ALIGN   $100   
0600                PAGE6:       
0600                ALTVAR_:      
0600   0A                     LD   A,(BC)   
0601   D6 21                  SUB   "a" - ((altVars - mintVars)/2)   
0603   87                     ADD   A,A   
0604   26 0B                  LD   H,msb(mintVars)   
0606   6F                     LD   L,A   
0607   E5                     PUSH   HL   
0608                ANOP_:       
0608   FD E9                  JP   (IY)   
060A                ANONDEF_:      ;= 7
060A   03                     INC   BC   
060B   ED 5B 8E 0B            LD   DE,(vHeapPtr)   ; start of defintion
060F   D5                     PUSH   DE   
0610   C3 B0 05               JP   def1   
0613                BREAK_:      
0613   E1                     POP   HL   
0614   7D                     LD   A,L   ; zero?
0615   B4                     OR   H   
0616   20 02                  JR   NZ,break1   
0618   FD E9                  JP   (IY)   
061A                BREAK1:      
061A   11 06 00               LD   DE,6   ; drop loop frame
061D   DD 19                  ADD   IX,DE   
061F   C3 5A 05               JP   begin1   ; skip to end of loop
0622                CARRDEF_:      ; define a byte array
0622   3E 01                  LD   A,TRUE   
0624   C3 2D 04               JP   arrDef1   
0627                CFETCH_:      
0627   E1                     POP   HL   
0628   16 00                  LD   D,0   
062A   5E                     LD   E,(HL)   
062B   D5                     PUSH   DE   
062C   FD E9                  JP   (IY)   
062E                COMMENT_:      
062E   03                     INC   BC   ; point to next char
062F   0A                     LD   A,(BC)   
0630   FE 0D                  CP   "\r"   ; terminate at cr
0632   20 FA                  JR   NZ,comment_   
0634   0B                     DEC   BC   
0635   FD E9                  JP   (IY)   
0637                CSTORE_:      
0637   E1                     POP   HL   
0638   D1                     POP   DE   
0639   73                     LD   (HL),E   
063A   FD E9                  JP   (IY)   
063C                EMIT_:       
063C   E1                     POP   HL   
063D   7D                     LD   A,L   
063E   CD 85 00               CALL   putchar   
0641   FD E9                  JP   (IY)   
0643                EXEC_:       
0643   CD 48 06               CALL   exec1   
0646   FD E9                  JP   (IY)   
0648                EXEC1:       
0648   E1                     POP   HL   
0649   E3                     EX   (SP),HL   
064A   E9                     JP   (HL)   
064B                DEPTH_:      
064B   21 00 00               LD   HL,0   
064E   39                     ADD   HL,SP   
064F   EB                     EX   DE,HL   
0650   21 00 0A               LD   HL,DSTACK   
0653   B7                     OR   A   
0654   ED 52                  SBC   HL,DE   
0656   C3 A4 04               JP   shr1   
0659                EDITDEF_:      
0659   CD BA 07               CALL   editDef   
065C   FD E9                  JP   (IY)   
065E                PROMPT_:      
065E   CD 94 07               CALL   prompt   
0661   FD E9                  JP   (IY)   
0663                GETREF_:      
0663                GETREF:      ;=8
0663   03                     INC   BC   
0664   0A                     LD   A,(BC)   
0665   CD 6D 03               CALL   NSLookup   
0668   C3 74 04               JP   fetch1   
066B                GO_:         
066B   D1                     POP   DE   
066C                GO1:         
066C   7A                     LD   A,D   
066D   B3                     OR   E   
066E   28 08                  JR   Z,go2   
0670   60 69                  LD   HL,BC   
0672   CD A4 07               CALL   rpush   ; save Instruction Pointer
0675   42 4B                  LD   BC,DE   
0677   0B                     DEC   BC   
0678                GO2:         
0678   FD E9                  JP   (IY)   
067A                IFTE_:       
067A   D1                     POP   DE   
067B   7B                     LD   A,E   
067C   B2                     OR   D   
067D   20 05                  JR   NZ,ifte1   
067F   13                     INC   DE   
0680   D5                     PUSH   DE   ; push TRUE on stack for else clause
0681   C3 5A 05               JP   begin1   ; skip to closing ) works with \) too
0684                IFTE1:       
0684   21 FF FF               LD   HL,-1   ; push -1 on return stack to indicate IFTEMode
0687   CD A4 07               CALL   rpush   
068A   FD E9                  JP   (IY)   
068C                INPORT_:      
068C   E1                     POP   HL   
068D   79                     LD   A,C   
068E   4D                     LD   C,L   
068F   ED 68                  IN   L,(C)   
0691   26 00                  LD   H,0   
0693   4F                     LD   C,A   
0694   E5                     PUSH   HL   
0695   FD E9                  JP   (IY)   
0697                LOOPIDX_:      
0697   DD E5                  PUSH   IX   
0699   FD E9                  JP   (IY)   
069B                NSREF_:      ;=25
069B   FD 21 B9 07            LD   IY,rpop2   ; rewire NEXT to simply return
069F   CD 38 07               CALL   NSEnter1   ; enter namespace return here on NEXT
06A2   0A                     LD   A,(BC)   
06A3   CD 6D 03               CALL   NSLookup   
06A6   20 0E                  JR   NZ,NSRef2   
06A8   E5                     PUSH   HL   
06A9   FD 21 F4 02            LD   IY,NEXT   ; restore NEXT
06AD   CD 54 03               CALL   enter   ; enter MINT interpreter with TOS=command
06B0   40 5C 5E 00            .CSTR   "@\\^"   ; execute and restore namespace
06B4   18 05                  JR   NSExit_   
06B6                NSREF2:      ;=25
06B6   E5                     PUSH   HL   
06B7   FD 21 F4 02            LD   IY,NEXT   ; restore NEXT
06BB                NSEXIT_:      
06BB   CD AF 07               CALL   rpop   
06BE   22 86 0B               LD   (vNS),HL   
06C1   FD E9                  JP   (IY)   
06C3                NEWLN_:      
06C3   CD 9D 07               CALL   crlf   
06C6   FD E9                  JP   (IY)   
06C8                OUTPORT_:      
06C8   E1                     POP   HL   
06C9   59                     LD   E,C   
06CA   4D                     LD   C,L   
06CB   E1                     POP   HL   
06CC   ED 69                  OUT   (C),L   
06CE   4B                     LD   C,E   
06CF   FD E9                  JP   (IY)   
06D1                PRNSTR_:      
06D1                PRNSTR:      
06D1   E1                     POP   HL   
06D2   CD 68 03               CALL   putStr   
06D5   FD E9                  JP   (IY)   
06D7                STRDEF_:      
06D7   18 48                  JR   strDef   
06D9                RPUSH_:      
06D9   E1                     POP   HL   
06DA   CD A4 07               CALL   rpush   
06DD   FD E9                  JP   (IY)   
06DF                RPOP_:       
06DF   CD AF 07               CALL   rpop   
06E2   E5                     PUSH   HL   
06E3   FD E9                  JP   (IY)   
06E5                NSENTER_:      
06E5   18 50                  JR   NSEnter   
06E7                UTILTABLE:      
06E7   43                     DB   lsb(exec_)   ;0    ( adr -- )
06E8   D9                     DB   lsb(rpush_)   ;1    ( n -- )      push TOS onto return stack
06E9   DF                     DB   lsb(rpop_)   ;2    ( -- n )      pop TOS off return stack
06EA   4B                     DB   lsb(depth_)   ;3    ( -- val )    depth of data stack
06EB   F8                     DB   lsb(printStk_)   ;4    ( -- )        non-destructively prints stack
06EC   5E                     DB   lsb(prompt_)   ;5    ( -- )        print MINT prompt
06ED   59                     DB   lsb(editDef_)   ;6    ( char -- )   edit command
06EE                UTIL_:       
06EE                UTIL:        ;= 13
06EE   03                     INC   BC   
06EF   0A                     LD   A,(BC)   
06F0   D6 30                  SUB   "0"   
06F2   2E E7                  LD   L,lsb(utilTable)   ; H already contains msb(page6)
06F4   85                     ADD   A,L   
06F5   6F                     LD   L,A   
06F6   6E                     LD   L,(HL)   ; H already contains msb(page6)
06F7   E9                     JP   (HL)   
06F8                PRINTSTK_:      
06F8                             ; **************************************************************************
06F8                             ; Page 6 primitive routines continued  (page 7)
06F8                             ; **************************************************************************
06F8                             ; falls through to following page
06F8                PRINTSTK:      ;=40
06F8                             ; MINT: \a@2- \#3 1- ("@ \b@ \(,)(.) 2-) '
06F8   CD 54 03               CALL   ENTER   
06FB   60 3D 3E 20 60 5C 61 40 32 2D 5C 23 33 20 31 2D 28 22 40 5C 62 40 5C 28 2C 29 28 2E 29 32 2D 29 27 5C 24 00 .CSTR   "`=> `\\a@2-\\#3 1-(",$22,"@\\b@\\(,)(.)2-)'\\$"   
071F   FD E9                  JP   (IY)   
0721                STRDEF:      ;= 21
0721   ED 5B 8E 0B            LD   DE,(vHeapPtr)   ; HL = heap ptr
0725   D5                     PUSH   DE   ; save start of string
0726   03                     INC   BC   ; point to next char
0727   18 03                  JR   strDef2   
0729                STRDEF1:      
0729   12                     LD   (DE),A   
072A   13                     INC   DE   ; increase count
072B   03                     INC   BC   ; point to next char
072C                STRDEF2:      
072C   0A                     LD   A,(BC)   
072D   FE 60                  CP   "`"   ; ` is the string terminator
072F   20 F8                  JR   NZ,strDef1   
0731   AF                     XOR   A   ; write null to terminate string
0732   12                     LD   (DE),A   
0733   13                     INC   DE   
0734   C3 BB 05               JP   def3   
0737                NSENTER:      
0737   03                     INC   BC   
0738                NSENTER1:      
0738   0A                     LD   A,(BC)   ; read NS ASCII code
0739   D6 30                  SUB   "0"   ; convert to number
073B   03                     INC   BC   
073C   57                     LD   D,A   ; multiply by 64
073D   1E 00                  LD   E,0   
073F   CB 3A                  SRL   D   
0741   CB 1B                  RR   E   
0743   CB 3A                  SRL   D   
0745   CB 1B                  RR   E   
0747   2A 86 0B               LD   HL,(vNS)   ; 
074A   CD A4 07               CALL   rpush   
074D   21 C0 0B               LD   HL,NS0   
0750   19                     ADD   HL,DE   
0751   22 86 0B               LD   (vNS),HL   
0754   FD E9                  JP   (IY)   
0756                             ;*******************************************************************
0756                             ; Page 5 primitive routines continued
0756                             ;*******************************************************************
0756                             ; ********************************************************************
0756                             ; 16-bit multiply
0756                MUL:         ;=19
0756   D1                     POP   DE   ; get first value
0757   E1                     POP   HL   
0758   C5                     PUSH   BC   ; Preserve the IP
0759   44                     LD   B,H   ; BC = 2nd value
075A   4D                     LD   C,L   
075B   21 00 00               LD   HL,0   
075E   3E 10                  LD   A,16   
0760                MUL2:        
0760   29                     ADD   HL,HL   
0761   CB 13                  RL   E   
0763   CB 12                  RL   D   
0765   30 04                  JR   NC,$+6   
0767   09                     ADD   HL,BC   
0768   30 01                  JR   NC,$+3   
076A   13                     INC   DE   
076B   3D                     DEC   A   
076C   20 F2                  JR   NZ,mul2   
076E   C1                     POP   BC   ; Restore the IP
076F   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
0770   FD E9                  JP   (IY)   
0772                             ; ********************************************************************************
0772                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
0772                             ; Read the first character.
0772                             ;			
0772                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
0772                             ; and then added into the L register. (HL forms a 16-bit accumulator)
0772                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
0772                             ; and then add in the next digit. Repeat this until a non-number character is
0772                             ; detected. Add in the final digit so that HL contains the converted number.
0772                             ; Push HL onto the stack and proceed to the dispatch routine.
0772                             ; ********************************************************************************
0772                NUM:         ;=23
0772   21 00 00               LD   HL,$0000   ;     Clear HL to accept the number
0775   0A                     LD   A,(BC)   ;     Get the character which is a numeral
0776                NUM1:        ; corrected KB 24/11/21
0776   D6 30                  SUB   $30   ;       Form decimal digit
0778   85                     ADD   A,L   ;       Add into bottom of HL
0779   6F                     LD   L,A   ; 
077A   3E 00                  LD   A,00   ;       Clear A
077C   8C                     ADC   A,H   ; Add with carry H-reg
077D   67                     LD   H,A   ; Put result in H-reg
077E   03                     INC   BC   ;       Increment IP
077F   0A                     LD   A,(BC)   ;       and get the next character
0780   FE 30                  CP   $30   ;       Less than $30
0782   38 0C                  JR   C,num2   ;       Not a number / end of number
0784   FE 3A                  CP   $3A   ;       Greater or equal to $3A
0786   30 08                  JR   NC,num2   ;       Not a number / end of number
0788                             ; Multiply digit(s) in HL by 10
0788   29                     ADD   HL,HL   ;        2X
0789   5D                     LD   E,L   ;        LD DE,HL
078A   54                     LD   D,H   ; 
078B   29                     ADD   HL,HL   ;        4X
078C   29                     ADD   HL,HL   ;        8X
078D   19                     ADD   HL,DE   ;        2X  + 8X  = 10X
078E                             ; 52t cycles
078E   18 E6                  JR   num1   
0790                NUM2:        
0790   0B                     DEC   BC   
0791   E5                     PUSH   HL   ;       Put the number on the stack
0792   FD E9                  JP   (IY)   ; and process the next character
0794                             ;*******************************************************************
0794                             ; Subroutines
0794                             ;*******************************************************************
0794                PROMPT:      ;=9
0794   CD 5D 03               CALL   printStr   
0797   0D 0A 3E 20 00         .CSTR   "\r\n> "   
079C   C9                     RET      
079D                CRLF:        ;=7
079D   CD 5D 03               CALL   printStr   
07A0   0D 0A 00               .CSTR   "\r\n"   
07A3   C9                     RET      
07A4                RPUSH:       ;=11
07A4   DD 2B                  DEC   IX   
07A6   DD 74 00               LD   (IX+0),H   
07A9   DD 2B                  DEC   IX   
07AB   DD 75 00               LD   (IX+0),L   
07AE   C9                     RET      
07AF                RPOP:        ;=11
07AF   DD 6E 00               LD   L,(IX+0)   
07B2   DD 23                  INC   IX   
07B4   DD 66 00               LD   H,(IX+0)   
07B7   DD 23                  INC   IX   
07B9                RPOP2:       
07B9   C9                     RET      
07BA                EDITDEF:      ;=50 lookup up def based on number
07BA   E1                     POP   HL   ; pop ret address
07BB   E3                     EX   (SP),HL   ; swap with TOS
07BC   7D                     LD   A,L   
07BD   08                     EX   AF,AF'   
07BE   7D                     LD   A,L   
07BF   CD 6D 03               CALL   NSLookup   
07C2   5E                     LD   E,(HL)   
07C3   23                     INC   HL   
07C4   56                     LD   D,(HL)   
07C5   7A                     LD   A,D   
07C6   B3                     OR   E   
07C7   21 00 08               LD   HL,TIB   
07CA   28 14                  JR   Z,editDef3   
07CC   3E 3A                  LD   A,":"   
07CE   CD EA 07               CALL   writeChar   
07D1   08                     EX   AF,AF'   
07D2   CD EA 07               CALL   writeChar   
07D5   18 01                  JR   editDef2   
07D7                EDITDEF1:      
07D7   13                     INC   DE   
07D8                EDITDEF2:      
07D8   1A                     LD   A,(DE)   
07D9   CD EA 07               CALL   writeChar   
07DC   FE 3B                  CP   ";"   
07DE   20 F7                  JR   NZ,editDef1   
07E0                EDITDEF3:      
07E0   11 00 08               LD   DE,TIB   
07E3   B7                     OR   A   
07E4   ED 52                  SBC   HL,DE   
07E6   22 84 0B               LD   (vTIBPtr),HL   
07E9   C9                     RET      
07EA                WRITECHAR:      ;=5
07EA   77                     LD   (HL),A   
07EB   23                     INC   HL   
07EC   C3 85 00               JP   putchar   
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                          ALIGN   $100   
0A00                OPCODES:      
0A00                          DS   $80   
0A80                CTRLCODES:      
0A80                ALTCODES:      
0A80                          DS   $80   
0B00                          ALIGN   $100   
0B00                MINTVARS:      
0B00                          DS   2   ; 
0B02                VBYTEMODE:   DS   2   ; 
0B04                          DS   $30   
0B34                TBPTR:    DS   2   ; reserved for tests
0B36                RST08:    DS   2   
0B38                RST10:    DS   2   
0B3A                RST18:    DS   2   
0B3C                RST20:    DS   2   
0B3E                RST28:    DS   2   
0B40                RST30:    DS   2   ; 
0B42                BAUD:     DS   2   ; 
0B44                INTVEC:   DS   2   ; 
0B46                NMIVEC:   DS   2   ; 
0B48                GETCVEC:   DS   2   ; 
0B4A                PUTCVEC:   DS   2   ; 
0B4C                ALTDEFS:      
0B4C                          DS   26*2   
0B80                ALTVARS:      
0B80                VS0:      DS   2   ; a
0B82                VBASE16:   DS   2   ; b
0B84                VTIBPTR:   DS   2   ; c
0B86                VNS:      DS   2   ; d
0B88                VLASTDEF:   DS   2   ; e
0B8A                          DS   2   ; f
0B8C                VALTPAGE:   DS   2   ; g
0B8E                VHEAPPTR:   DS   2   ; h
0B90                          DS   2   ; i
0B92                          DS   2   ; j
0B94                          DS   2   ; k
0B96                          DS   2   ; l
0B98                          DS   2   ; m
0B9A                          DS   2   ; n
0B9C                          DS   2   ; o
0B9E                          DS   2   ; p
0BA0                          DS   2   ; q
0BA2                          DS   2   ; r
0BA4                          DS   2   ; s
0BA6                          DS   2   ; t
0BA8                          DS   2   ; u
0BAA                          DS   2   ; v
0BAC                          DS   2   ; w
0BAE                          DS   2   ; x
0BB0                          DS   2   ; y
0BB2                          DS   2   ; z
0BB4                             ; ****************************************************************
0BB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
0BB4                             ; ****************************************************************
0BB4                          ALIGN   $40   
0BA8                          .ORG   $-($80-26*2*2)   
0BA8                          DS   ($80-26*2*2)   ; 12 bytes free vars for NS 0
0BC0                NS0:      DS   NSSIZE * NSNUM   
0E40                NS1:      EQU   NS0 + NSSIZE   
0E40                HEAP:        
0E40                             ; 
4000                          .ORG   $4000   
4000                             ; 
4000                TESTSSTART:      
4000                             ; 
4000                             ; CALL printStr
4000                             ; .cstr "Done!!\r\n"
4000                             ; HALT
4000                             ; 
4000                          ;*Macro unroll:  test "1", 1
4000   CD 54 03               CALL   enter   
4003   31 00                  .CSTR   "1"   
4005                          ;*Macro unroll:  expect "1",1
4005   E1                     POP   HL   
4006   E5                     PUSH   HL   
4007   11 01 00               LD   DE,1   
400A   B7                     OR   A   
400B   ED 52                  SBC   HL,DE   
400D   7D                     LD   A,L   
400E   B4                     OR   H   
400F   28 2A                  JR   Z,expectM_0_1876S29   
4011   CD 5D 03               CALL   printStr   
4014   31 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1","\r\nActual: "   
4020   CD 8B 03               CALL   printdec   
4023   CD 5D 03               CALL   printStr   
4026   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4033   21 01 00               LD   HL,1   
4036   CD 8B 03               CALL   printdec   
4039   76                     HALT      
403A   00                     .CSTR      
403B                EXPECTM_0_1876S29:      
403B   E1                     POP   HL   
403C                          ;*Macro unroll:  test "0", 0
403C   CD 54 03               CALL   enter   
403F   30 00                  .CSTR   "0"   
4041                          ;*Macro unroll:  expect "0",0
4041   E1                     POP   HL   
4042   E5                     PUSH   HL   
4043   11 00 00               LD   DE,0   
4046   B7                     OR   A   
4047   ED 52                  SBC   HL,DE   
4049   7D                     LD   A,L   
404A   B4                     OR   H   
404B   28 2A                  JR   Z,expectM_0_1877S29   
404D   CD 5D 03               CALL   printStr   
4050   30 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0","\r\nActual: "   
405C   CD 8B 03               CALL   printdec   
405F   CD 5D 03               CALL   printStr   
4062   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
406F   21 00 00               LD   HL,0   
4072   CD 8B 03               CALL   printdec   
4075   76                     HALT      
4076   00                     .CSTR      
4077                EXPECTM_0_1877S29:      
4077   E1                     POP   HL   
4078                          ;*Macro unroll:  test "10", 10
4078   CD 54 03               CALL   enter   
407B   31 30 00               .CSTR   "10"   
407E                          ;*Macro unroll:  expect "10",10
407E   E1                     POP   HL   
407F   E5                     PUSH   HL   
4080   11 0A 00               LD   DE,10   
4083   B7                     OR   A   
4084   ED 52                  SBC   HL,DE   
4086   7D                     LD   A,L   
4087   B4                     OR   H   
4088   28 2B                  JR   Z,expectM_0_1878S29   
408A   CD 5D 03               CALL   printStr   
408D   31 30 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "10","\r\nActual: "   
409A   CD 8B 03               CALL   printdec   
409D   CD 5D 03               CALL   printStr   
40A0   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
40AD   21 0A 00               LD   HL,10   
40B0   CD 8B 03               CALL   printdec   
40B3   76                     HALT      
40B4   00                     .CSTR      
40B5                EXPECTM_0_1878S29:      
40B5   E1                     POP   HL   
40B6                          ;*Macro unroll:  test "#10", $10
40B6   CD 54 03               CALL   enter   
40B9   23 31 30 00            .CSTR   "#10"   
40BD                          ;*Macro unroll:  expect "#10",$10
40BD   E1                     POP   HL   
40BE   E5                     PUSH   HL   
40BF   11 10 00               LD   DE,$10   
40C2   B7                     OR   A   
40C3   ED 52                  SBC   HL,DE   
40C5   7D                     LD   A,L   
40C6   B4                     OR   H   
40C7   28 2C                  JR   Z,expectM_0_1879S29   
40C9   CD 5D 03               CALL   printStr   
40CC   23 31 30 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "#10","\r\nActual: "   
40DA   CD 8B 03               CALL   printdec   
40DD   CD 5D 03               CALL   printStr   
40E0   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
40ED   21 10 00               LD   HL,$10   
40F0   CD 8B 03               CALL   printdec   
40F3   76                     HALT      
40F4   00                     .CSTR      
40F5                EXPECTM_0_1879S29:      
40F5   E1                     POP   HL   
40F6                          ;*Macro unroll:  test "#FF", $FF
40F6   CD 54 03               CALL   enter   
40F9   23 46 46 00            .CSTR   "#FF"   
40FD                          ;*Macro unroll:  expect "#FF",$FF
40FD   E1                     POP   HL   
40FE   E5                     PUSH   HL   
40FF   11 FF 00               LD   DE,$FF   
4102   B7                     OR   A   
4103   ED 52                  SBC   HL,DE   
4105   7D                     LD   A,L   
4106   B4                     OR   H   
4107   28 2C                  JR   Z,expectM_0_1880S29   
4109   CD 5D 03               CALL   printStr   
410C   23 46 46 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "#FF","\r\nActual: "   
411A   CD 8B 03               CALL   printdec   
411D   CD 5D 03               CALL   printStr   
4120   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
412D   21 FF 00               LD   HL,$FF   
4130   CD 8B 03               CALL   printdec   
4133   76                     HALT      
4134   00                     .CSTR      
4135                EXPECTM_0_1880S29:      
4135   E1                     POP   HL   
4136                          ;*Macro unroll:  test "2 3=", 0
4136   CD 54 03               CALL   enter   
4139   32 20 33 3D 00         .CSTR   "2 3="   
413E                          ;*Macro unroll:  expect "2 3=",0
413E   E1                     POP   HL   
413F   E5                     PUSH   HL   
4140   11 00 00               LD   DE,0   
4143   B7                     OR   A   
4144   ED 52                  SBC   HL,DE   
4146   7D                     LD   A,L   
4147   B4                     OR   H   
4148   28 2D                  JR   Z,expectM_0_1881S29   
414A   CD 5D 03               CALL   printStr   
414D   32 20 33 3D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "2 3=","\r\nActual: "   
415C   CD 8B 03               CALL   printdec   
415F   CD 5D 03               CALL   printStr   
4162   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
416F   21 00 00               LD   HL,0   
4172   CD 8B 03               CALL   printdec   
4175   76                     HALT      
4176   00                     .CSTR      
4177                EXPECTM_0_1881S29:      
4177   E1                     POP   HL   
4178                          ;*Macro unroll:  test "3 3=", 1
4178   CD 54 03               CALL   enter   
417B   33 20 33 3D 00         .CSTR   "3 3="   
4180                          ;*Macro unroll:  expect "3 3=",1
4180   E1                     POP   HL   
4181   E5                     PUSH   HL   
4182   11 01 00               LD   DE,1   
4185   B7                     OR   A   
4186   ED 52                  SBC   HL,DE   
4188   7D                     LD   A,L   
4189   B4                     OR   H   
418A   28 2D                  JR   Z,expectM_0_1882S29   
418C   CD 5D 03               CALL   printStr   
418F   33 20 33 3D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 3=","\r\nActual: "   
419E   CD 8B 03               CALL   printdec   
41A1   CD 5D 03               CALL   printStr   
41A4   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
41B1   21 01 00               LD   HL,1   
41B4   CD 8B 03               CALL   printdec   
41B7   76                     HALT      
41B8   00                     .CSTR      
41B9                EXPECTM_0_1882S29:      
41B9   E1                     POP   HL   
41BA                          ;*Macro unroll:  test "2 3<", 1
41BA   CD 54 03               CALL   enter   
41BD   32 20 33 3C 00         .CSTR   "2 3<"   
41C2                          ;*Macro unroll:  expect "2 3<",1
41C2   E1                     POP   HL   
41C3   E5                     PUSH   HL   
41C4   11 01 00               LD   DE,1   
41C7   B7                     OR   A   
41C8   ED 52                  SBC   HL,DE   
41CA   7D                     LD   A,L   
41CB   B4                     OR   H   
41CC   28 2D                  JR   Z,expectM_0_1883S29   
41CE   CD 5D 03               CALL   printStr   
41D1   32 20 33 3C 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "2 3<","\r\nActual: "   
41E0   CD 8B 03               CALL   printdec   
41E3   CD 5D 03               CALL   printStr   
41E6   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
41F3   21 01 00               LD   HL,1   
41F6   CD 8B 03               CALL   printdec   
41F9   76                     HALT      
41FA   00                     .CSTR      
41FB                EXPECTM_0_1883S29:      
41FB   E1                     POP   HL   
41FC                          ;*Macro unroll:  test "3 3<", 0
41FC   CD 54 03               CALL   enter   
41FF   33 20 33 3C 00         .CSTR   "3 3<"   
4204                          ;*Macro unroll:  expect "3 3<",0
4204   E1                     POP   HL   
4205   E5                     PUSH   HL   
4206   11 00 00               LD   DE,0   
4209   B7                     OR   A   
420A   ED 52                  SBC   HL,DE   
420C   7D                     LD   A,L   
420D   B4                     OR   H   
420E   28 2D                  JR   Z,expectM_0_1884S29   
4210   CD 5D 03               CALL   printStr   
4213   33 20 33 3C 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 3<","\r\nActual: "   
4222   CD 8B 03               CALL   printdec   
4225   CD 5D 03               CALL   printStr   
4228   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4235   21 00 00               LD   HL,0   
4238   CD 8B 03               CALL   printdec   
423B   76                     HALT      
423C   00                     .CSTR      
423D                EXPECTM_0_1884S29:      
423D   E1                     POP   HL   
423E                          ;*Macro unroll:  test "3 3>", 0
423E   CD 54 03               CALL   enter   
4241   33 20 33 3E 00         .CSTR   "3 3>"   
4246                          ;*Macro unroll:  expect "3 3>",0
4246   E1                     POP   HL   
4247   E5                     PUSH   HL   
4248   11 00 00               LD   DE,0   
424B   B7                     OR   A   
424C   ED 52                  SBC   HL,DE   
424E   7D                     LD   A,L   
424F   B4                     OR   H   
4250   28 2D                  JR   Z,expectM_0_1885S29   
4252   CD 5D 03               CALL   printStr   
4255   33 20 33 3E 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 3>","\r\nActual: "   
4264   CD 8B 03               CALL   printdec   
4267   CD 5D 03               CALL   printStr   
426A   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4277   21 00 00               LD   HL,0   
427A   CD 8B 03               CALL   printdec   
427D   76                     HALT      
427E   00                     .CSTR      
427F                EXPECTM_0_1885S29:      
427F   E1                     POP   HL   
4280                          ;*Macro unroll:  test "4 3>", 1
4280   CD 54 03               CALL   enter   
4283   34 20 33 3E 00         .CSTR   "4 3>"   
4288                          ;*Macro unroll:  expect "4 3>",1
4288   E1                     POP   HL   
4289   E5                     PUSH   HL   
428A   11 01 00               LD   DE,1   
428D   B7                     OR   A   
428E   ED 52                  SBC   HL,DE   
4290   7D                     LD   A,L   
4291   B4                     OR   H   
4292   28 2D                  JR   Z,expectM_0_1886S29   
4294   CD 5D 03               CALL   printStr   
4297   34 20 33 3E 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "4 3>","\r\nActual: "   
42A6   CD 8B 03               CALL   printdec   
42A9   CD 5D 03               CALL   printStr   
42AC   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
42B9   21 01 00               LD   HL,1   
42BC   CD 8B 03               CALL   printdec   
42BF   76                     HALT      
42C0   00                     .CSTR      
42C1                EXPECTM_0_1886S29:      
42C1   E1                     POP   HL   
42C2                          ;*Macro unroll:  test "1 2+", 3
42C2   CD 54 03               CALL   enter   
42C5   31 20 32 2B 00         .CSTR   "1 2+"   
42CA                          ;*Macro unroll:  expect "1 2+",3
42CA   E1                     POP   HL   
42CB   E5                     PUSH   HL   
42CC   11 03 00               LD   DE,3   
42CF   B7                     OR   A   
42D0   ED 52                  SBC   HL,DE   
42D2   7D                     LD   A,L   
42D3   B4                     OR   H   
42D4   28 2D                  JR   Z,expectM_0_1887S29   
42D6   CD 5D 03               CALL   printStr   
42D9   31 20 32 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1 2+","\r\nActual: "   
42E8   CD 8B 03               CALL   printdec   
42EB   CD 5D 03               CALL   printStr   
42EE   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
42FB   21 03 00               LD   HL,3   
42FE   CD 8B 03               CALL   printdec   
4301   76                     HALT      
4302   00                     .CSTR      
4303                EXPECTM_0_1887S29:      
4303   E1                     POP   HL   
4304                          ;*Macro unroll:  test "123 456+", 123+456
4304   CD 54 03               CALL   enter   
4307   31 32 33 20 34 35 36 2B 00 .CSTR   "123 456+"   
4310                          ;*Macro unroll:  expect "123 456+",123+456
4310   E1                     POP   HL   
4311   E5                     PUSH   HL   
4312   11 43 02               LD   DE,123+456   
4315   B7                     OR   A   
4316   ED 52                  SBC   HL,DE   
4318   7D                     LD   A,L   
4319   B4                     OR   H   
431A   28 31                  JR   Z,expectM_0_1888S29   
431C   CD 5D 03               CALL   printStr   
431F   31 32 33 20 34 35 36 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "123 456+","\r\nActual: "   
4332   CD 8B 03               CALL   printdec   
4335   CD 5D 03               CALL   printStr   
4338   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4345   21 43 02               LD   HL,123+456   
4348   CD 8B 03               CALL   printdec   
434B   76                     HALT      
434C   00                     .CSTR      
434D                EXPECTM_0_1888S29:      
434D   E1                     POP   HL   
434E                          ;*Macro unroll:  test "64 128+", 64+128
434E   CD 54 03               CALL   enter   
4351   36 34 20 31 32 38 2B 00 .CSTR   "64 128+"   
4359                          ;*Macro unroll:  expect "64 128+",64+128
4359   E1                     POP   HL   
435A   E5                     PUSH   HL   
435B   11 C0 00               LD   DE,64+128   
435E   B7                     OR   A   
435F   ED 52                  SBC   HL,DE   
4361   7D                     LD   A,L   
4362   B4                     OR   H   
4363   28 30                  JR   Z,expectM_0_1889S29   
4365   CD 5D 03               CALL   printStr   
4368   36 34 20 31 32 38 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "64 128+","\r\nActual: "   
437A   CD 8B 03               CALL   printdec   
437D   CD 5D 03               CALL   printStr   
4380   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
438D   21 C0 00               LD   HL,64+128   
4390   CD 8B 03               CALL   printdec   
4393   76                     HALT      
4394   00                     .CSTR      
4395                EXPECTM_0_1889S29:      
4395   E1                     POP   HL   
4396                          ;*Macro unroll:  test "5 3-", 2
4396   CD 54 03               CALL   enter   
4399   35 20 33 2D 00         .CSTR   "5 3-"   
439E                          ;*Macro unroll:  expect "5 3-",2
439E   E1                     POP   HL   
439F   E5                     PUSH   HL   
43A0   11 02 00               LD   DE,2   
43A3   B7                     OR   A   
43A4   ED 52                  SBC   HL,DE   
43A6   7D                     LD   A,L   
43A7   B4                     OR   H   
43A8   28 2D                  JR   Z,expectM_0_1890S29   
43AA   CD 5D 03               CALL   printStr   
43AD   35 20 33 2D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "5 3-","\r\nActual: "   
43BC   CD 8B 03               CALL   printdec   
43BF   CD 5D 03               CALL   printStr   
43C2   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
43CF   21 02 00               LD   HL,2   
43D2   CD 8B 03               CALL   printdec   
43D5   76                     HALT      
43D6   00                     .CSTR      
43D7                EXPECTM_0_1890S29:      
43D7   E1                     POP   HL   
43D8                          ;*Macro unroll:  test "1_ 2+",1
43D8   CD 54 03               CALL   enter   
43DB   31 5F 20 32 2B 00      .CSTR   "1_ 2+"   
43E1                          ;*Macro unroll:  expect "1_ 2+",1
43E1   E1                     POP   HL   
43E2   E5                     PUSH   HL   
43E3   11 01 00               LD   DE,1   
43E6   B7                     OR   A   
43E7   ED 52                  SBC   HL,DE   
43E9   7D                     LD   A,L   
43EA   B4                     OR   H   
43EB   28 2E                  JR   Z,expectM_0_1891S29   
43ED   CD 5D 03               CALL   printStr   
43F0   31 5F 20 32 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1_ 2+","\r\nActual: "   
4400   CD 8B 03               CALL   printdec   
4403   CD 5D 03               CALL   printStr   
4406   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4413   21 01 00               LD   HL,1   
4416   CD 8B 03               CALL   printdec   
4419   76                     HALT      
441A   00                     .CSTR      
441B                EXPECTM_0_1891S29:      
441B   E1                     POP   HL   
441C                          ;*Macro unroll:  test "1_1+",0
441C   CD 54 03               CALL   enter   
441F   31 5F 31 2B 00         .CSTR   "1_1+"   
4424                          ;*Macro unroll:  expect "1_1+",0
4424   E1                     POP   HL   
4425   E5                     PUSH   HL   
4426   11 00 00               LD   DE,0   
4429   B7                     OR   A   
442A   ED 52                  SBC   HL,DE   
442C   7D                     LD   A,L   
442D   B4                     OR   H   
442E   28 2D                  JR   Z,expectM_0_1892S29   
4430   CD 5D 03               CALL   printStr   
4433   31 5F 31 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1_1+","\r\nActual: "   
4442   CD 8B 03               CALL   printdec   
4445   CD 5D 03               CALL   printStr   
4448   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4455   21 00 00               LD   HL,0   
4458   CD 8B 03               CALL   printdec   
445B   76                     HALT      
445C   00                     .CSTR      
445D                EXPECTM_0_1892S29:      
445D   E1                     POP   HL   
445E                          ;*Macro unroll:  test "3 5&", 1
445E   CD 54 03               CALL   enter   
4461   33 20 35 26 00         .CSTR   "3 5&"   
4466                          ;*Macro unroll:  expect "3 5&",1
4466   E1                     POP   HL   
4467   E5                     PUSH   HL   
4468   11 01 00               LD   DE,1   
446B   B7                     OR   A   
446C   ED 52                  SBC   HL,DE   
446E   7D                     LD   A,L   
446F   B4                     OR   H   
4470   28 2D                  JR   Z,expectM_0_1893S29   
4472   CD 5D 03               CALL   printStr   
4475   33 20 35 26 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 5&","\r\nActual: "   
4484   CD 8B 03               CALL   printdec   
4487   CD 5D 03               CALL   printStr   
448A   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4497   21 01 00               LD   HL,1   
449A   CD 8B 03               CALL   printdec   
449D   76                     HALT      
449E   00                     .CSTR      
449F                EXPECTM_0_1893S29:      
449F   E1                     POP   HL   
44A0                          ;*Macro unroll:  test "3 5|", 7
44A0   CD 54 03               CALL   enter   
44A3   33 20 35 7C 00         .CSTR   "3 5|"   
44A8                          ;*Macro unroll:  expect "3 5|",7
44A8   E1                     POP   HL   
44A9   E5                     PUSH   HL   
44AA   11 07 00               LD   DE,7   
44AD   B7                     OR   A   
44AE   ED 52                  SBC   HL,DE   
44B0   7D                     LD   A,L   
44B1   B4                     OR   H   
44B2   28 2D                  JR   Z,expectM_0_1894S29   
44B4   CD 5D 03               CALL   printStr   
44B7   33 20 35 7C 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 5|","\r\nActual: "   
44C6   CD 8B 03               CALL   printdec   
44C9   CD 5D 03               CALL   printStr   
44CC   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
44D9   21 07 00               LD   HL,7   
44DC   CD 8B 03               CALL   printdec   
44DF   76                     HALT      
44E0   00                     .CSTR      
44E1                EXPECTM_0_1894S29:      
44E1   E1                     POP   HL   
44E2                          ;*Macro unroll:  test "1{", 2
44E2   CD 54 03               CALL   enter   
44E5   31 7B 00               .CSTR   "1{"   
44E8                          ;*Macro unroll:  expect "1{",2
44E8   E1                     POP   HL   
44E9   E5                     PUSH   HL   
44EA   11 02 00               LD   DE,2   
44ED   B7                     OR   A   
44EE   ED 52                  SBC   HL,DE   
44F0   7D                     LD   A,L   
44F1   B4                     OR   H   
44F2   28 2B                  JR   Z,expectM_0_1895S29   
44F4   CD 5D 03               CALL   printStr   
44F7   31 7B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1{","\r\nActual: "   
4504   CD 8B 03               CALL   printdec   
4507   CD 5D 03               CALL   printStr   
450A   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4517   21 02 00               LD   HL,2   
451A   CD 8B 03               CALL   printdec   
451D   76                     HALT      
451E   00                     .CSTR      
451F                EXPECTM_0_1895S29:      
451F   E1                     POP   HL   
4520                          ;*Macro unroll:  test "1}", 0
4520   CD 54 03               CALL   enter   
4523   31 7D 00               .CSTR   "1}"   
4526                          ;*Macro unroll:  expect "1}",0
4526   E1                     POP   HL   
4527   E5                     PUSH   HL   
4528   11 00 00               LD   DE,0   
452B   B7                     OR   A   
452C   ED 52                  SBC   HL,DE   
452E   7D                     LD   A,L   
452F   B4                     OR   H   
4530   28 2B                  JR   Z,expectM_0_1896S29   
4532   CD 5D 03               CALL   printStr   
4535   31 7D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1}","\r\nActual: "   
4542   CD 8B 03               CALL   printdec   
4545   CD 5D 03               CALL   printStr   
4548   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4555   21 00 00               LD   HL,0   
4558   CD 8B 03               CALL   printdec   
455B   76                     HALT      
455C   00                     .CSTR      
455D                EXPECTM_0_1896S29:      
455D   E1                     POP   HL   
455E                          ;*Macro unroll:  test "2}", 1
455E   CD 54 03               CALL   enter   
4561   32 7D 00               .CSTR   "2}"   
4564                          ;*Macro unroll:  expect "2}",1
4564   E1                     POP   HL   
4565   E5                     PUSH   HL   
4566   11 01 00               LD   DE,1   
4569   B7                     OR   A   
456A   ED 52                  SBC   HL,DE   
456C   7D                     LD   A,L   
456D   B4                     OR   H   
456E   28 2B                  JR   Z,expectM_0_1897S29   
4570   CD 5D 03               CALL   printStr   
4573   32 7D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "2}","\r\nActual: "   
4580   CD 8B 03               CALL   printdec   
4583   CD 5D 03               CALL   printStr   
4586   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4593   21 01 00               LD   HL,1   
4596   CD 8B 03               CALL   printdec   
4599   76                     HALT      
459A   00                     .CSTR      
459B                EXPECTM_0_1897S29:      
459B   E1                     POP   HL   
459C                          ;*Macro unroll:  test "1 2 3 ' +", 3
459C   CD 54 03               CALL   enter   
459F   31 20 32 20 33 20 27 20 2B 00 .CSTR   "1 2 3 ' +"   
45A9                          ;*Macro unroll:  expect "1 2 3 ' +",3
45A9   E1                     POP   HL   
45AA   E5                     PUSH   HL   
45AB   11 03 00               LD   DE,3   
45AE   B7                     OR   A   
45AF   ED 52                  SBC   HL,DE   
45B1   7D                     LD   A,L   
45B2   B4                     OR   H   
45B3   28 32                  JR   Z,expectM_0_1898S29   
45B5   CD 5D 03               CALL   printStr   
45B8   31 20 32 20 33 20 27 20 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1 2 3 ' +","\r\nActual: "   
45CC   CD 8B 03               CALL   printdec   
45CF   CD 5D 03               CALL   printStr   
45D2   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
45DF   21 03 00               LD   HL,3   
45E2   CD 8B 03               CALL   printdec   
45E5   76                     HALT      
45E6   00                     .CSTR      
45E7                EXPECTM_0_1898S29:      
45E7   E1                     POP   HL   
45E8                          ;*Macro unroll:  test "2 3*", 6
45E8   CD 54 03               CALL   enter   
45EB   32 20 33 2A 00         .CSTR   "2 3*"   
45F0                          ;*Macro unroll:  expect "2 3*",6
45F0   E1                     POP   HL   
45F1   E5                     PUSH   HL   
45F2   11 06 00               LD   DE,6   
45F5   B7                     OR   A   
45F6   ED 52                  SBC   HL,DE   
45F8   7D                     LD   A,L   
45F9   B4                     OR   H   
45FA   28 2D                  JR   Z,expectM_0_1899S29   
45FC   CD 5D 03               CALL   printStr   
45FF   32 20 33 2A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "2 3*","\r\nActual: "   
460E   CD 8B 03               CALL   printdec   
4611   CD 5D 03               CALL   printStr   
4614   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4621   21 06 00               LD   HL,6   
4624   CD 8B 03               CALL   printdec   
4627   76                     HALT      
4628   00                     .CSTR      
4629                EXPECTM_0_1899S29:      
4629   E1                     POP   HL   
462A                          ;*Macro unroll:  test "1 2 3+*", 5
462A   CD 54 03               CALL   enter   
462D   31 20 32 20 33 2B 2A 00 .CSTR   "1 2 3+*"   
4635                          ;*Macro unroll:  expect "1 2 3+*",5
4635   E1                     POP   HL   
4636   E5                     PUSH   HL   
4637   11 05 00               LD   DE,5   
463A   B7                     OR   A   
463B   ED 52                  SBC   HL,DE   
463D   7D                     LD   A,L   
463E   B4                     OR   H   
463F   28 30                  JR   Z,expectM_0_1900S29   
4641   CD 5D 03               CALL   printStr   
4644   31 20 32 20 33 2B 2A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1 2 3+*","\r\nActual: "   
4656   CD 8B 03               CALL   printdec   
4659   CD 5D 03               CALL   printStr   
465C   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4669   21 05 00               LD   HL,5   
466C   CD 8B 03               CALL   printdec   
466F   76                     HALT      
4670   00                     .CSTR      
4671                EXPECTM_0_1900S29:      
4671   E1                     POP   HL   
4672   CD 54 03               CALL   enter   
4675   31 20 33 22 2B 00      .CSTR   "1 3",$22,"+"   
467B                          ;*Macro unroll:  expect "1 3 DUP +", 6
467B   E1                     POP   HL   
467C   E5                     PUSH   HL   
467D   11 06 00               LD   DE,6   
4680   B7                     OR   A   
4681   ED 52                  SBC   HL,DE   
4683   7D                     LD   A,L   
4684   B4                     OR   H   
4685   28 32                  JR   Z,expectM_1903S50   
4687   CD 5D 03               CALL   printStr   
468A   31 20 33 20 44 55 50 20 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1 3 DUP +","\r\nActual: "   
469E   CD 8B 03               CALL   printdec   
46A1   CD 5D 03               CALL   printStr   
46A4   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
46B1   21 06 00               LD   HL,6   
46B4   CD 8B 03               CALL   printdec   
46B7   76                     HALT      
46B8   00                     .CSTR      
46B9                EXPECTM_1903S50:      
46B9   E1                     POP   HL   
46BA                          ;*Macro unroll:  test "5 2/'", 2
46BA   CD 54 03               CALL   enter   
46BD   35 20 32 2F 27 00      .CSTR   "5 2/'"   
46C3                          ;*Macro unroll:  expect "5 2/'",2
46C3   E1                     POP   HL   
46C4   E5                     PUSH   HL   
46C5   11 02 00               LD   DE,2   
46C8   B7                     OR   A   
46C9   ED 52                  SBC   HL,DE   
46CB   7D                     LD   A,L   
46CC   B4                     OR   H   
46CD   28 2E                  JR   Z,expectM_0_1904S29   
46CF   CD 5D 03               CALL   printStr   
46D2   35 20 32 2F 27 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "5 2/'","\r\nActual: "   
46E2   CD 8B 03               CALL   printdec   
46E5   CD 5D 03               CALL   printStr   
46E8   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
46F5   21 02 00               LD   HL,2   
46F8   CD 8B 03               CALL   printdec   
46FB   76                     HALT      
46FC   00                     .CSTR      
46FD                EXPECTM_0_1904S29:      
46FD   E1                     POP   HL   
46FE                          ;*Macro unroll:  test "3 5$ -", 2
46FE   CD 54 03               CALL   enter   
4701   33 20 35 24 20 2D 00   .CSTR   "3 5$ -"   
4708                          ;*Macro unroll:  expect "3 5$ -",2
4708   E1                     POP   HL   
4709   E5                     PUSH   HL   
470A   11 02 00               LD   DE,2   
470D   B7                     OR   A   
470E   ED 52                  SBC   HL,DE   
4710   7D                     LD   A,L   
4711   B4                     OR   H   
4712   28 2F                  JR   Z,expectM_0_1905S29   
4714   CD 5D 03               CALL   printStr   
4717   33 20 35 24 20 2D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3 5$ -","\r\nActual: "   
4728   CD 8B 03               CALL   printdec   
472B   CD 5D 03               CALL   printStr   
472E   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
473B   21 02 00               LD   HL,2   
473E   CD 8B 03               CALL   printdec   
4741   76                     HALT      
4742   00                     .CSTR      
4743                EXPECTM_0_1905S29:      
4743   E1                     POP   HL   
4744                          ;*Macro unroll:  test "5 2/$ '", 1
4744   CD 54 03               CALL   enter   
4747   35 20 32 2F 24 20 27 00 .CSTR   "5 2/$ '"   
474F                          ;*Macro unroll:  expect "5 2/$ '",1
474F   E1                     POP   HL   
4750   E5                     PUSH   HL   
4751   11 01 00               LD   DE,1   
4754   B7                     OR   A   
4755   ED 52                  SBC   HL,DE   
4757   7D                     LD   A,L   
4758   B4                     OR   H   
4759   28 30                  JR   Z,expectM_0_1906S29   
475B   CD 5D 03               CALL   printStr   
475E   35 20 32 2F 24 20 27 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "5 2/$ '","\r\nActual: "   
4770   CD 8B 03               CALL   printdec   
4773   CD 5D 03               CALL   printStr   
4776   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4783   21 01 00               LD   HL,1   
4786   CD 8B 03               CALL   printdec   
4789   76                     HALT      
478A   00                     .CSTR      
478B                EXPECTM_0_1906S29:      
478B   E1                     POP   HL   
478C                          ;*Macro unroll:  test "2 3%++", 7
478C   CD 54 03               CALL   enter   
478F   32 20 33 25 2B 2B 00   .CSTR   "2 3%++"   
4796                          ;*Macro unroll:  expect "2 3%++",7
4796   E1                     POP   HL   
4797   E5                     PUSH   HL   
4798   11 07 00               LD   DE,7   
479B   B7                     OR   A   
479C   ED 52                  SBC   HL,DE   
479E   7D                     LD   A,L   
479F   B4                     OR   H   
47A0   28 2F                  JR   Z,expectM_0_1907S29   
47A2   CD 5D 03               CALL   printStr   
47A5   32 20 33 25 2B 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "2 3%++","\r\nActual: "   
47B6   CD 8B 03               CALL   printdec   
47B9   CD 5D 03               CALL   printStr   
47BC   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
47C9   21 07 00               LD   HL,7   
47CC   CD 8B 03               CALL   printdec   
47CF   76                     HALT      
47D0   00                     .CSTR      
47D1                EXPECTM_0_1907S29:      
47D1   E1                     POP   HL   
47D2                          ;*Macro unroll:  test "1 2 3~''", 2
47D2   CD 54 03               CALL   enter   
47D5   31 20 32 20 33 7E 27 27 00 .CSTR   "1 2 3~''"   
47DE                          ;*Macro unroll:  expect "1 2 3~''",2
47DE   E1                     POP   HL   
47DF   E5                     PUSH   HL   
47E0   11 02 00               LD   DE,2   
47E3   B7                     OR   A   
47E4   ED 52                  SBC   HL,DE   
47E6   7D                     LD   A,L   
47E7   B4                     OR   H   
47E8   28 31                  JR   Z,expectM_0_1908S29   
47EA   CD 5D 03               CALL   printStr   
47ED   31 20 32 20 33 7E 27 27 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1 2 3~''","\r\nActual: "   
4800   CD 8B 03               CALL   printdec   
4803   CD 5D 03               CALL   printStr   
4806   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4813   21 02 00               LD   HL,2   
4816   CD 8B 03               CALL   printdec   
4819   76                     HALT      
481A   00                     .CSTR      
481B                EXPECTM_0_1908S29:      
481B   E1                     POP   HL   
481C                          ;*Macro unroll:  test "1 2 3~+*", 8
481C   CD 54 03               CALL   enter   
481F   31 20 32 20 33 7E 2B 2A 00 .CSTR   "1 2 3~+*"   
4828                          ;*Macro unroll:  expect "1 2 3~+*",8
4828   E1                     POP   HL   
4829   E5                     PUSH   HL   
482A   11 08 00               LD   DE,8   
482D   B7                     OR   A   
482E   ED 52                  SBC   HL,DE   
4830   7D                     LD   A,L   
4831   B4                     OR   H   
4832   28 31                  JR   Z,expectM_0_1909S29   
4834   CD 5D 03               CALL   printStr   
4837   31 20 32 20 33 7E 2B 2A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1 2 3~+*","\r\nActual: "   
484A   CD 8B 03               CALL   printdec   
484D   CD 5D 03               CALL   printStr   
4850   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
485D   21 08 00               LD   HL,8   
4860   CD 8B 03               CALL   printdec   
4863   76                     HALT      
4864   00                     .CSTR      
4865                EXPECTM_0_1909S29:      
4865   E1                     POP   HL   
4866                          ;*Macro unroll:  test "10 11 12\\#3$ '$ '$ '", 4
4866   CD 54 03               CALL   enter   
4869   31 30 20 31 31 20 31 32 5C 23 33 24 20 27 24 20 27 24 20 27 00 .CSTR   "10 11 12\\#3$ '$ '$ '"   
487E                          ;*Macro unroll:  expect "10 11 12\\#3$ '$ '$ '",4
487E   E1                     POP   HL   
487F   E5                     PUSH   HL   
4880   11 04 00               LD   DE,4   
4883   B7                     OR   A   
4884   ED 52                  SBC   HL,DE   
4886   7D                     LD   A,L   
4887   B4                     OR   H   
4888   28 3D                  JR   Z,expectM_0_1910S29   
488A   CD 5D 03               CALL   printStr   
488D   31 30 20 31 31 20 31 32 5C 23 33 24 20 27 24 20 27 24 20 27 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "10 11 12\\#3$ '$ '$ '","\r\nActual: "   
48AC   CD 8B 03               CALL   printdec   
48AF   CD 5D 03               CALL   printStr   
48B2   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
48BF   21 04 00               LD   HL,4   
48C2   CD 8B 03               CALL   printdec   
48C5   76                     HALT      
48C6   00                     .CSTR      
48C7                EXPECTM_0_1910S29:      
48C7   E1                     POP   HL   
48C8                          ;*Macro unroll:  test "2a!a@",2
48C8   CD 54 03               CALL   enter   
48CB   32 61 21 61 40 00      .CSTR   "2a!a@"   
48D1                          ;*Macro unroll:  expect "2a!a@",2
48D1   E1                     POP   HL   
48D2   E5                     PUSH   HL   
48D3   11 02 00               LD   DE,2   
48D6   B7                     OR   A   
48D7   ED 52                  SBC   HL,DE   
48D9   7D                     LD   A,L   
48DA   B4                     OR   H   
48DB   28 2E                  JR   Z,expectM_0_1911S29   
48DD   CD 5D 03               CALL   printStr   
48E0   32 61 21 61 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "2a!a@","\r\nActual: "   
48F0   CD 8B 03               CALL   printdec   
48F3   CD 5D 03               CALL   printStr   
48F6   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4903   21 02 00               LD   HL,2   
4906   CD 8B 03               CALL   printdec   
4909   76                     HALT      
490A   00                     .CSTR      
490B                EXPECTM_0_1911S29:      
490B   E1                     POP   HL   
490C                          ;*Macro unroll:  test "3x! 1 x@+x! x@", 4
490C   CD 54 03               CALL   enter   
490F   33 78 21 20 31 20 78 40 2B 78 21 20 78 40 00 .CSTR   "3x! 1 x@+x! x@"   
491E                          ;*Macro unroll:  expect "3x! 1 x@+x! x@",4
491E   E1                     POP   HL   
491F   E5                     PUSH   HL   
4920   11 04 00               LD   DE,4   
4923   B7                     OR   A   
4924   ED 52                  SBC   HL,DE   
4926   7D                     LD   A,L   
4927   B4                     OR   H   
4928   28 37                  JR   Z,expectM_0_1912S29   
492A   CD 5D 03               CALL   printStr   
492D   33 78 21 20 31 20 78 40 2B 78 21 20 78 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3x! 1 x@+x! x@","\r\nActual: "   
4946   CD 8B 03               CALL   printdec   
4949   CD 5D 03               CALL   printStr   
494C   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4959   21 04 00               LD   HL,4   
495C   CD 8B 03               CALL   printdec   
495F   76                     HALT      
4960   00                     .CSTR      
4961                EXPECTM_0_1912S29:      
4961   E1                     POP   HL   
4962                          ;*Macro unroll:  test "3x! 1_ x@+x! x@", 2
4962   CD 54 03               CALL   enter   
4965   33 78 21 20 31 5F 20 78 40 2B 78 21 20 78 40 00 .CSTR   "3x! 1_ x@+x! x@"   
4975                          ;*Macro unroll:  expect "3x! 1_ x@+x! x@",2
4975   E1                     POP   HL   
4976   E5                     PUSH   HL   
4977   11 02 00               LD   DE,2   
497A   B7                     OR   A   
497B   ED 52                  SBC   HL,DE   
497D   7D                     LD   A,L   
497E   B4                     OR   H   
497F   28 38                  JR   Z,expectM_0_1913S29   
4981   CD 5D 03               CALL   printStr   
4984   33 78 21 20 31 5F 20 78 40 2B 78 21 20 78 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "3x! 1_ x@+x! x@","\r\nActual: "   
499E   CD 8B 03               CALL   printdec   
49A1   CD 5D 03               CALL   printStr   
49A4   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
49B1   21 02 00               LD   HL,2   
49B4   CD 8B 03               CALL   printdec   
49B7   76                     HALT      
49B8   00                     .CSTR      
49B9                EXPECTM_0_1913S29:      
49B9   E1                     POP   HL   
49BA                          ;*Macro unroll:  test ":X1; X", 1
49BA   CD 54 03               CALL   enter   
49BD   3A 58 31 3B 20 58 00   .CSTR   ":X1; X"   
49C4                          ;*Macro unroll:  expect ":X1; X",1
49C4   E1                     POP   HL   
49C5   E5                     PUSH   HL   
49C6   11 01 00               LD   DE,1   
49C9   B7                     OR   A   
49CA   ED 52                  SBC   HL,DE   
49CC   7D                     LD   A,L   
49CD   B4                     OR   H   
49CE   28 2F                  JR   Z,expectM_0_1914S29   
49D0   CD 5D 03               CALL   printStr   
49D3   3A 58 31 3B 20 58 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   ":X1; X","\r\nActual: "   
49E4   CD 8B 03               CALL   printdec   
49E7   CD 5D 03               CALL   printStr   
49EA   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
49F7   21 01 00               LD   HL,1   
49FA   CD 8B 03               CALL   printdec   
49FD   76                     HALT      
49FE   00                     .CSTR      
49FF                EXPECTM_0_1914S29:      
49FF   E1                     POP   HL   
4A00                          ;*Macro unroll:  test ":A100;A", 100
4A00   CD 54 03               CALL   enter   
4A03   3A 41 31 30 30 3B 41 00 .CSTR   ":A100;A"   
4A0B                          ;*Macro unroll:  expect ":A100;A",100
4A0B   E1                     POP   HL   
4A0C   E5                     PUSH   HL   
4A0D   11 64 00               LD   DE,100   
4A10   B7                     OR   A   
4A11   ED 52                  SBC   HL,DE   
4A13   7D                     LD   A,L   
4A14   B4                     OR   H   
4A15   28 30                  JR   Z,expectM_0_1915S29   
4A17   CD 5D 03               CALL   printStr   
4A1A   3A 41 31 30 30 3B 41 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   ":A100;A","\r\nActual: "   
4A2C   CD 8B 03               CALL   printdec   
4A2F   CD 5D 03               CALL   printStr   
4A32   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4A3F   21 64 00               LD   HL,100   
4A42   CD 8B 03               CALL   printdec   
4A45   76                     HALT      
4A46   00                     .CSTR      
4A47                EXPECTM_0_1915S29:      
4A47   E1                     POP   HL   
4A48                          ;*Macro unroll:  test ":Aa!; 3A a@", 3
4A48   CD 54 03               CALL   enter   
4A4B   3A 41 61 21 3B 20 33 41 20 61 40 00 .CSTR   ":Aa!; 3A a@"   
4A57                          ;*Macro unroll:  expect ":Aa!; 3A a@",3
4A57   E1                     POP   HL   
4A58   E5                     PUSH   HL   
4A59   11 03 00               LD   DE,3   
4A5C   B7                     OR   A   
4A5D   ED 52                  SBC   HL,DE   
4A5F   7D                     LD   A,L   
4A60   B4                     OR   H   
4A61   28 34                  JR   Z,expectM_0_1916S29   
4A63   CD 5D 03               CALL   printStr   
4A66   3A 41 61 21 3B 20 33 41 20 61 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   ":Aa!; 3A a@","\r\nActual: "   
4A7C   CD 8B 03               CALL   printdec   
4A7F   CD 5D 03               CALL   printStr   
4A82   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4A8F   21 03 00               LD   HL,3   
4A92   CD 8B 03               CALL   printdec   
4A95   76                     HALT      
4A96   00                     .CSTR      
4A97                EXPECTM_0_1916S29:      
4A97   E1                     POP   HL   
4A98                          ;*Macro unroll:  test ":Aa!;:Ba@;4AB", 4
4A98   CD 54 03               CALL   enter   
4A9B   3A 41 61 21 3B 3A 42 61 40 3B 34 41 42 00 .CSTR   ":Aa!;:Ba@;4AB"   
4AA9                          ;*Macro unroll:  expect ":Aa!;:Ba@;4AB",4
4AA9   E1                     POP   HL   
4AAA   E5                     PUSH   HL   
4AAB   11 04 00               LD   DE,4   
4AAE   B7                     OR   A   
4AAF   ED 52                  SBC   HL,DE   
4AB1   7D                     LD   A,L   
4AB2   B4                     OR   H   
4AB3   28 36                  JR   Z,expectM_0_1917S29   
4AB5   CD 5D 03               CALL   printStr   
4AB8   3A 41 61 21 3B 3A 42 61 40 3B 34 41 42 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   ":Aa!;:Ba@;4AB","\r\nActual: "   
4AD0   CD 8B 03               CALL   printdec   
4AD3   CD 5D 03               CALL   printStr   
4AD6   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4AE3   21 04 00               LD   HL,4   
4AE6   CD 8B 03               CALL   printdec   
4AE9   76                     HALT      
4AEA   00                     .CSTR      
4AEB                EXPECTM_0_1917S29:      
4AEB   E1                     POP   HL   
4AEC                          ;*Macro unroll:  test "\\:2; \\^", 2
4AEC   CD 54 03               CALL   enter   
4AEF   5C 3A 32 3B 20 5C 5E 00 .CSTR   "\\:2; \\^"   
4AF7                          ;*Macro unroll:  expect "\\:2; \\^",2
4AF7   E1                     POP   HL   
4AF8   E5                     PUSH   HL   
4AF9   11 02 00               LD   DE,2   
4AFC   B7                     OR   A   
4AFD   ED 52                  SBC   HL,DE   
4AFF   7D                     LD   A,L   
4B00   B4                     OR   H   
4B01   28 30                  JR   Z,expectM_0_1918S29   
4B03   CD 5D 03               CALL   printStr   
4B06   5C 3A 32 3B 20 5C 5E 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\:2; \\^","\r\nActual: "   
4B18   CD 8B 03               CALL   printdec   
4B1B   CD 5D 03               CALL   printStr   
4B1E   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4B2B   21 02 00               LD   HL,2   
4B2E   CD 8B 03               CALL   printdec   
4B31   76                     HALT      
4B32   00                     .CSTR      
4B33                EXPECTM_0_1918S29:      
4B33   E1                     POP   HL   
4B34                          ;*Macro unroll:  test "[]$ '", 0
4B34   CD 54 03               CALL   enter   
4B37   5B 5D 24 20 27 00      .CSTR   "[]$ '"   
4B3D                          ;*Macro unroll:  expect "[]$ '",0
4B3D   E1                     POP   HL   
4B3E   E5                     PUSH   HL   
4B3F   11 00 00               LD   DE,0   
4B42   B7                     OR   A   
4B43   ED 52                  SBC   HL,DE   
4B45   7D                     LD   A,L   
4B46   B4                     OR   H   
4B47   28 2E                  JR   Z,expectM_0_1919S29   
4B49   CD 5D 03               CALL   printStr   
4B4C   5B 5D 24 20 27 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "[]$ '","\r\nActual: "   
4B5C   CD 8B 03               CALL   printdec   
4B5F   CD 5D 03               CALL   printStr   
4B62   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4B6F   21 00 00               LD   HL,0   
4B72   CD 8B 03               CALL   printdec   
4B75   76                     HALT      
4B76   00                     .CSTR      
4B77                EXPECTM_0_1919S29:      
4B77   E1                     POP   HL   
4B78                          ;*Macro unroll:  test "[3]$ '", 1
4B78   CD 54 03               CALL   enter   
4B7B   5B 33 5D 24 20 27 00   .CSTR   "[3]$ '"   
4B82                          ;*Macro unroll:  expect "[3]$ '",1
4B82   E1                     POP   HL   
4B83   E5                     PUSH   HL   
4B84   11 01 00               LD   DE,1   
4B87   B7                     OR   A   
4B88   ED 52                  SBC   HL,DE   
4B8A   7D                     LD   A,L   
4B8B   B4                     OR   H   
4B8C   28 2F                  JR   Z,expectM_0_1920S29   
4B8E   CD 5D 03               CALL   printStr   
4B91   5B 33 5D 24 20 27 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "[3]$ '","\r\nActual: "   
4BA2   CD 8B 03               CALL   printdec   
4BA5   CD 5D 03               CALL   printStr   
4BA8   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4BB5   21 01 00               LD   HL,1   
4BB8   CD 8B 03               CALL   printdec   
4BBB   76                     HALT      
4BBC   00                     .CSTR      
4BBD                EXPECTM_0_1920S29:      
4BBD   E1                     POP   HL   
4BBE                          ;*Macro unroll:  test "[3]'@", 3
4BBE   CD 54 03               CALL   enter   
4BC1   5B 33 5D 27 40 00      .CSTR   "[3]'@"   
4BC7                          ;*Macro unroll:  expect "[3]'@",3
4BC7   E1                     POP   HL   
4BC8   E5                     PUSH   HL   
4BC9   11 03 00               LD   DE,3   
4BCC   B7                     OR   A   
4BCD   ED 52                  SBC   HL,DE   
4BCF   7D                     LD   A,L   
4BD0   B4                     OR   H   
4BD1   28 2E                  JR   Z,expectM_0_1921S29   
4BD3   CD 5D 03               CALL   printStr   
4BD6   5B 33 5D 27 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "[3]'@","\r\nActual: "   
4BE6   CD 8B 03               CALL   printdec   
4BE9   CD 5D 03               CALL   printStr   
4BEC   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4BF9   21 03 00               LD   HL,3   
4BFC   CD 8B 03               CALL   printdec   
4BFF   76                     HALT      
4C00   00                     .CSTR      
4C01                EXPECTM_0_1921S29:      
4C01   E1                     POP   HL   
4C02                          ;*Macro unroll:  test "[1 2 3]'@", 1
4C02   CD 54 03               CALL   enter   
4C05   5B 31 20 32 20 33 5D 27 40 00 .CSTR   "[1 2 3]'@"   
4C0F                          ;*Macro unroll:  expect "[1 2 3]'@",1
4C0F   E1                     POP   HL   
4C10   E5                     PUSH   HL   
4C11   11 01 00               LD   DE,1   
4C14   B7                     OR   A   
4C15   ED 52                  SBC   HL,DE   
4C17   7D                     LD   A,L   
4C18   B4                     OR   H   
4C19   28 32                  JR   Z,expectM_0_1922S29   
4C1B   CD 5D 03               CALL   printStr   
4C1E   5B 31 20 32 20 33 5D 27 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "[1 2 3]'@","\r\nActual: "   
4C32   CD 8B 03               CALL   printdec   
4C35   CD 5D 03               CALL   printStr   
4C38   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4C45   21 01 00               LD   HL,1   
4C48   CD 8B 03               CALL   printdec   
4C4B   76                     HALT      
4C4C   00                     .CSTR      
4C4D                EXPECTM_0_1922S29:      
4C4D   E1                     POP   HL   
4C4E                          ;*Macro unroll:  test "[1 2 3]'2+@", 2
4C4E   CD 54 03               CALL   enter   
4C51   5B 31 20 32 20 33 5D 27 32 2B 40 00 .CSTR   "[1 2 3]'2+@"   
4C5D                          ;*Macro unroll:  expect "[1 2 3]'2+@",2
4C5D   E1                     POP   HL   
4C5E   E5                     PUSH   HL   
4C5F   11 02 00               LD   DE,2   
4C62   B7                     OR   A   
4C63   ED 52                  SBC   HL,DE   
4C65   7D                     LD   A,L   
4C66   B4                     OR   H   
4C67   28 34                  JR   Z,expectM_0_1923S29   
4C69   CD 5D 03               CALL   printStr   
4C6C   5B 31 20 32 20 33 5D 27 32 2B 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "[1 2 3]'2+@","\r\nActual: "   
4C82   CD 8B 03               CALL   printdec   
4C85   CD 5D 03               CALL   printStr   
4C88   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4C95   21 02 00               LD   HL,2   
4C98   CD 8B 03               CALL   printdec   
4C9B   76                     HALT      
4C9C   00                     .CSTR      
4C9D                EXPECTM_0_1923S29:      
4C9D   E1                     POP   HL   
4C9E                          ;*Macro unroll:  test "\\h@[1]''\\h@$-", 2
4C9E   CD 54 03               CALL   enter   
4CA1   5C 68 40 5B 31 5D 27 27 5C 68 40 24 2D 00 .CSTR   "\\h@[1]''\\h@$-"   
4CAF                          ;*Macro unroll:  expect "\\h@[1]''\\h@$-",2
4CAF   E1                     POP   HL   
4CB0   E5                     PUSH   HL   
4CB1   11 02 00               LD   DE,2   
4CB4   B7                     OR   A   
4CB5   ED 52                  SBC   HL,DE   
4CB7   7D                     LD   A,L   
4CB8   B4                     OR   H   
4CB9   28 36                  JR   Z,expectM_0_1924S29   
4CBB   CD 5D 03               CALL   printStr   
4CBE   5C 68 40 5B 31 5D 27 27 5C 68 40 24 2D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\h@[1]''\\h@$-","\r\nActual: "   
4CD6   CD 8B 03               CALL   printdec   
4CD9   CD 5D 03               CALL   printStr   
4CDC   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4CE9   21 02 00               LD   HL,2   
4CEC   CD 8B 03               CALL   printdec   
4CEF   76                     HALT      
4CF0   00                     .CSTR      
4CF1                EXPECTM_0_1924S29:      
4CF1   E1                     POP   HL   
4CF2                          ;*Macro unroll:  test "\\h@[1 2 3]''\\h@$-", 6
4CF2   CD 54 03               CALL   enter   
4CF5   5C 68 40 5B 31 20 32 20 33 5D 27 27 5C 68 40 24 2D 00 .CSTR   "\\h@[1 2 3]''\\h@$-"   
4D07                          ;*Macro unroll:  expect "\\h@[1 2 3]''\\h@$-",6
4D07   E1                     POP   HL   
4D08   E5                     PUSH   HL   
4D09   11 06 00               LD   DE,6   
4D0C   B7                     OR   A   
4D0D   ED 52                  SBC   HL,DE   
4D0F   7D                     LD   A,L   
4D10   B4                     OR   H   
4D11   28 3A                  JR   Z,expectM_0_1925S29   
4D13   CD 5D 03               CALL   printStr   
4D16   5C 68 40 5B 31 20 32 20 33 5D 27 27 5C 68 40 24 2D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\h@[1 2 3]''\\h@$-","\r\nActual: "   
4D32   CD 8B 03               CALL   printdec   
4D35   CD 5D 03               CALL   printStr   
4D38   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4D45   21 06 00               LD   HL,6   
4D48   CD 8B 03               CALL   printdec   
4D4B   76                     HALT      
4D4C   00                     .CSTR      
4D4D                EXPECTM_0_1925S29:      
4D4D   E1                     POP   HL   
4D4E                          ;*Macro unroll:  test "\\[]$ '", 0
4D4E   CD 54 03               CALL   enter   
4D51   5C 5B 5D 24 20 27 00   .CSTR   "\\[]$ '"   
4D58                          ;*Macro unroll:  expect "\\[]$ '",0
4D58   E1                     POP   HL   
4D59   E5                     PUSH   HL   
4D5A   11 00 00               LD   DE,0   
4D5D   B7                     OR   A   
4D5E   ED 52                  SBC   HL,DE   
4D60   7D                     LD   A,L   
4D61   B4                     OR   H   
4D62   28 2F                  JR   Z,expectM_0_1926S29   
4D64   CD 5D 03               CALL   printStr   
4D67   5C 5B 5D 24 20 27 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\[]$ '","\r\nActual: "   
4D78   CD 8B 03               CALL   printdec   
4D7B   CD 5D 03               CALL   printStr   
4D7E   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4D8B   21 00 00               LD   HL,0   
4D8E   CD 8B 03               CALL   printdec   
4D91   76                     HALT      
4D92   00                     .CSTR      
4D93                EXPECTM_0_1926S29:      
4D93   E1                     POP   HL   
4D94                          ;*Macro unroll:  test "\\[3]'\\@", 3
4D94   CD 54 03               CALL   enter   
4D97   5C 5B 33 5D 27 5C 40 00 .CSTR   "\\[3]'\\@"   
4D9F                          ;*Macro unroll:  expect "\\[3]'\\@",3
4D9F   E1                     POP   HL   
4DA0   E5                     PUSH   HL   
4DA1   11 03 00               LD   DE,3   
4DA4   B7                     OR   A   
4DA5   ED 52                  SBC   HL,DE   
4DA7   7D                     LD   A,L   
4DA8   B4                     OR   H   
4DA9   28 30                  JR   Z,expectM_0_1927S29   
4DAB   CD 5D 03               CALL   printStr   
4DAE   5C 5B 33 5D 27 5C 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\[3]'\\@","\r\nActual: "   
4DC0   CD 8B 03               CALL   printdec   
4DC3   CD 5D 03               CALL   printStr   
4DC6   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4DD3   21 03 00               LD   HL,3   
4DD6   CD 8B 03               CALL   printdec   
4DD9   76                     HALT      
4DDA   00                     .CSTR      
4DDB                EXPECTM_0_1927S29:      
4DDB   E1                     POP   HL   
4DDC                          ;*Macro unroll:  test "\\[3]$ '", 1
4DDC   CD 54 03               CALL   enter   
4DDF   5C 5B 33 5D 24 20 27 00 .CSTR   "\\[3]$ '"   
4DE7                          ;*Macro unroll:  expect "\\[3]$ '",1
4DE7   E1                     POP   HL   
4DE8   E5                     PUSH   HL   
4DE9   11 01 00               LD   DE,1   
4DEC   B7                     OR   A   
4DED   ED 52                  SBC   HL,DE   
4DEF   7D                     LD   A,L   
4DF0   B4                     OR   H   
4DF1   28 30                  JR   Z,expectM_0_1928S29   
4DF3   CD 5D 03               CALL   printStr   
4DF6   5C 5B 33 5D 24 20 27 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\[3]$ '","\r\nActual: "   
4E08   CD 8B 03               CALL   printdec   
4E0B   CD 5D 03               CALL   printStr   
4E0E   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4E1B   21 01 00               LD   HL,1   
4E1E   CD 8B 03               CALL   printdec   
4E21   76                     HALT      
4E22   00                     .CSTR      
4E23                EXPECTM_0_1928S29:      
4E23   E1                     POP   HL   
4E24                          ;*Macro unroll:  test "\\[1 2 3]'\\@", 1
4E24   CD 54 03               CALL   enter   
4E27   5C 5B 31 20 32 20 33 5D 27 5C 40 00 .CSTR   "\\[1 2 3]'\\@"   
4E33                          ;*Macro unroll:  expect "\\[1 2 3]'\\@",1
4E33   E1                     POP   HL   
4E34   E5                     PUSH   HL   
4E35   11 01 00               LD   DE,1   
4E38   B7                     OR   A   
4E39   ED 52                  SBC   HL,DE   
4E3B   7D                     LD   A,L   
4E3C   B4                     OR   H   
4E3D   28 34                  JR   Z,expectM_0_1929S29   
4E3F   CD 5D 03               CALL   printStr   
4E42   5C 5B 31 20 32 20 33 5D 27 5C 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\[1 2 3]'\\@","\r\nActual: "   
4E58   CD 8B 03               CALL   printdec   
4E5B   CD 5D 03               CALL   printStr   
4E5E   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4E6B   21 01 00               LD   HL,1   
4E6E   CD 8B 03               CALL   printdec   
4E71   76                     HALT      
4E72   00                     .CSTR      
4E73                EXPECTM_0_1929S29:      
4E73   E1                     POP   HL   
4E74                          ;*Macro unroll:  test "\\[1 2 3]'1+\\@", 2
4E74   CD 54 03               CALL   enter   
4E77   5C 5B 31 20 32 20 33 5D 27 31 2B 5C 40 00 .CSTR   "\\[1 2 3]'1+\\@"   
4E85                          ;*Macro unroll:  expect "\\[1 2 3]'1+\\@",2
4E85   E1                     POP   HL   
4E86   E5                     PUSH   HL   
4E87   11 02 00               LD   DE,2   
4E8A   B7                     OR   A   
4E8B   ED 52                  SBC   HL,DE   
4E8D   7D                     LD   A,L   
4E8E   B4                     OR   H   
4E8F   28 36                  JR   Z,expectM_0_1930S29   
4E91   CD 5D 03               CALL   printStr   
4E94   5C 5B 31 20 32 20 33 5D 27 31 2B 5C 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\[1 2 3]'1+\\@","\r\nActual: "   
4EAC   CD 8B 03               CALL   printdec   
4EAF   CD 5D 03               CALL   printStr   
4EB2   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4EBF   21 02 00               LD   HL,2   
4EC2   CD 8B 03               CALL   printdec   
4EC5   76                     HALT      
4EC6   00                     .CSTR      
4EC7                EXPECTM_0_1930S29:      
4EC7   E1                     POP   HL   
4EC8                          ;*Macro unroll:  test "\\h@\\[1 2 3]''\\h@$-", 3
4EC8   CD 54 03               CALL   enter   
4ECB   5C 68 40 5C 5B 31 20 32 20 33 5D 27 27 5C 68 40 24 2D 00 .CSTR   "\\h@\\[1 2 3]''\\h@$-"   
4EDE                          ;*Macro unroll:  expect "\\h@\\[1 2 3]''\\h@$-",3
4EDE   E1                     POP   HL   
4EDF   E5                     PUSH   HL   
4EE0   11 03 00               LD   DE,3   
4EE3   B7                     OR   A   
4EE4   ED 52                  SBC   HL,DE   
4EE6   7D                     LD   A,L   
4EE7   B4                     OR   H   
4EE8   28 3B                  JR   Z,expectM_0_1931S29   
4EEA   CD 5D 03               CALL   printStr   
4EED   5C 68 40 5C 5B 31 20 32 20 33 5D 27 27 5C 68 40 24 2D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\h@\\[1 2 3]''\\h@$-","\r\nActual: "   
4F0A   CD 8B 03               CALL   printdec   
4F0D   CD 5D 03               CALL   printStr   
4F10   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4F1D   21 03 00               LD   HL,3   
4F20   CD 8B 03               CALL   printdec   
4F23   76                     HALT      
4F24   00                     .CSTR      
4F25                EXPECTM_0_1931S29:      
4F25   E1                     POP   HL   
4F26                          ;*Macro unroll:  test "\\h@\\[1]''\\h@$-", 1
4F26   CD 54 03               CALL   enter   
4F29   5C 68 40 5C 5B 31 5D 27 27 5C 68 40 24 2D 00 .CSTR   "\\h@\\[1]''\\h@$-"   
4F38                          ;*Macro unroll:  expect "\\h@\\[1]''\\h@$-",1
4F38   E1                     POP   HL   
4F39   E5                     PUSH   HL   
4F3A   11 01 00               LD   DE,1   
4F3D   B7                     OR   A   
4F3E   ED 52                  SBC   HL,DE   
4F40   7D                     LD   A,L   
4F41   B4                     OR   H   
4F42   28 37                  JR   Z,expectM_0_1932S29   
4F44   CD 5D 03               CALL   printStr   
4F47   5C 68 40 5C 5B 31 5D 27 27 5C 68 40 24 2D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\h@\\[1]''\\h@$-","\r\nActual: "   
4F60   CD 8B 03               CALL   printdec   
4F63   CD 5D 03               CALL   printStr   
4F66   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4F73   21 01 00               LD   HL,1   
4F76   CD 8B 03               CALL   printdec   
4F79   76                     HALT      
4F7A   00                     .CSTR      
4F7B                EXPECTM_0_1932S29:      
4F7B   E1                     POP   HL   
4F7C                          ;*Macro unroll:  test "\\`A`\\@",65
4F7C   CD 54 03               CALL   enter   
4F7F   5C 60 41 60 5C 40 00   .CSTR   "\\`A`\\@"   
4F86                          ;*Macro unroll:  expect "\\`A`\\@",65
4F86   E1                     POP   HL   
4F87   E5                     PUSH   HL   
4F88   11 41 00               LD   DE,65   
4F8B   B7                     OR   A   
4F8C   ED 52                  SBC   HL,DE   
4F8E   7D                     LD   A,L   
4F8F   B4                     OR   H   
4F90   28 2F                  JR   Z,expectM_0_1933S29   
4F92   CD 5D 03               CALL   printStr   
4F95   5C 60 41 60 5C 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\`A`\\@","\r\nActual: "   
4FA6   CD 8B 03               CALL   printdec   
4FA9   CD 5D 03               CALL   printStr   
4FAC   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4FB9   21 41 00               LD   HL,65   
4FBC   CD 8B 03               CALL   printdec   
4FBF   76                     HALT      
4FC0   00                     .CSTR      
4FC1                EXPECTM_0_1933S29:      
4FC1   E1                     POP   HL   
4FC2                          ;*Macro unroll:  test "0 0(1+)", 0
4FC2   CD 54 03               CALL   enter   
4FC5   30 20 30 28 31 2B 29 00 .CSTR   "0 0(1+)"   
4FCD                          ;*Macro unroll:  expect "0 0(1+)",0
4FCD   E1                     POP   HL   
4FCE   E5                     PUSH   HL   
4FCF   11 00 00               LD   DE,0   
4FD2   B7                     OR   A   
4FD3   ED 52                  SBC   HL,DE   
4FD5   7D                     LD   A,L   
4FD6   B4                     OR   H   
4FD7   28 30                  JR   Z,expectM_0_1934S29   
4FD9   CD 5D 03               CALL   printStr   
4FDC   30 20 30 28 31 2B 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 0(1+)","\r\nActual: "   
4FEE   CD 8B 03               CALL   printdec   
4FF1   CD 5D 03               CALL   printStr   
4FF4   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
5001   21 00 00               LD   HL,0   
5004   CD 8B 03               CALL   printdec   
5007   76                     HALT      
5008   00                     .CSTR      
5009                EXPECTM_0_1934S29:      
5009   E1                     POP   HL   
500A                          ;*Macro unroll:  test "0 1(1+)", 1
500A   CD 54 03               CALL   enter   
500D   30 20 31 28 31 2B 29 00 .CSTR   "0 1(1+)"   
5015                          ;*Macro unroll:  expect "0 1(1+)",1
5015   E1                     POP   HL   
5016   E5                     PUSH   HL   
5017   11 01 00               LD   DE,1   
501A   B7                     OR   A   
501B   ED 52                  SBC   HL,DE   
501D   7D                     LD   A,L   
501E   B4                     OR   H   
501F   28 30                  JR   Z,expectM_0_1935S29   
5021   CD 5D 03               CALL   printStr   
5024   30 20 31 28 31 2B 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 1(1+)","\r\nActual: "   
5036   CD 8B 03               CALL   printdec   
5039   CD 5D 03               CALL   printStr   
503C   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
5049   21 01 00               LD   HL,1   
504C   CD 8B 03               CALL   printdec   
504F   76                     HALT      
5050   00                     .CSTR      
5051                EXPECTM_0_1935S29:      
5051   E1                     POP   HL   
5052                          ;*Macro unroll:  test "0 2(1+)", 2
5052   CD 54 03               CALL   enter   
5055   30 20 32 28 31 2B 29 00 .CSTR   "0 2(1+)"   
505D                          ;*Macro unroll:  expect "0 2(1+)",2
505D   E1                     POP   HL   
505E   E5                     PUSH   HL   
505F   11 02 00               LD   DE,2   
5062   B7                     OR   A   
5063   ED 52                  SBC   HL,DE   
5065   7D                     LD   A,L   
5066   B4                     OR   H   
5067   28 30                  JR   Z,expectM_0_1936S29   
5069   CD 5D 03               CALL   printStr   
506C   30 20 32 28 31 2B 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 2(1+)","\r\nActual: "   
507E   CD 8B 03               CALL   printdec   
5081   CD 5D 03               CALL   printStr   
5084   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
5091   21 02 00               LD   HL,2   
5094   CD 8B 03               CALL   printdec   
5097   76                     HALT      
5098   00                     .CSTR      
5099                EXPECTM_0_1936S29:      
5099   E1                     POP   HL   
509A                          ;*Macro unroll:  test "0 1(0(1+))", 0
509A   CD 54 03               CALL   enter   
509D   30 20 31 28 30 28 31 2B 29 29 00 .CSTR   "0 1(0(1+))"   
50A8                          ;*Macro unroll:  expect "0 1(0(1+))",0
50A8   E1                     POP   HL   
50A9   E5                     PUSH   HL   
50AA   11 00 00               LD   DE,0   
50AD   B7                     OR   A   
50AE   ED 52                  SBC   HL,DE   
50B0   7D                     LD   A,L   
50B1   B4                     OR   H   
50B2   28 33                  JR   Z,expectM_0_1937S29   
50B4   CD 5D 03               CALL   printStr   
50B7   30 20 31 28 30 28 31 2B 29 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 1(0(1+))","\r\nActual: "   
50CC   CD 8B 03               CALL   printdec   
50CF   CD 5D 03               CALL   printStr   
50D2   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
50DF   21 00 00               LD   HL,0   
50E2   CD 8B 03               CALL   printdec   
50E5   76                     HALT      
50E6   00                     .CSTR      
50E7                EXPECTM_0_1937S29:      
50E7   E1                     POP   HL   
50E8                          ;*Macro unroll:  test "0 1(1(1+))", 1
50E8   CD 54 03               CALL   enter   
50EB   30 20 31 28 31 28 31 2B 29 29 00 .CSTR   "0 1(1(1+))"   
50F6                          ;*Macro unroll:  expect "0 1(1(1+))",1
50F6   E1                     POP   HL   
50F7   E5                     PUSH   HL   
50F8   11 01 00               LD   DE,1   
50FB   B7                     OR   A   
50FC   ED 52                  SBC   HL,DE   
50FE   7D                     LD   A,L   
50FF   B4                     OR   H   
5100   28 33                  JR   Z,expectM_0_1938S29   
5102   CD 5D 03               CALL   printStr   
5105   30 20 31 28 31 28 31 2B 29 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 1(1(1+))","\r\nActual: "   
511A   CD 8B 03               CALL   printdec   
511D   CD 5D 03               CALL   printStr   
5120   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
512D   21 01 00               LD   HL,1   
5130   CD 8B 03               CALL   printdec   
5133   76                     HALT      
5134   00                     .CSTR      
5135                EXPECTM_0_1938S29:      
5135   E1                     POP   HL   
5136                          ;*Macro unroll:  test "0 2(1(1+))", 2
5136   CD 54 03               CALL   enter   
5139   30 20 32 28 31 28 31 2B 29 29 00 .CSTR   "0 2(1(1+))"   
5144                          ;*Macro unroll:  expect "0 2(1(1+))",2
5144   E1                     POP   HL   
5145   E5                     PUSH   HL   
5146   11 02 00               LD   DE,2   
5149   B7                     OR   A   
514A   ED 52                  SBC   HL,DE   
514C   7D                     LD   A,L   
514D   B4                     OR   H   
514E   28 33                  JR   Z,expectM_0_1939S29   
5150   CD 5D 03               CALL   printStr   
5153   30 20 32 28 31 28 31 2B 29 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 2(1(1+))","\r\nActual: "   
5168   CD 8B 03               CALL   printdec   
516B   CD 5D 03               CALL   printStr   
516E   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
517B   21 02 00               LD   HL,2   
517E   CD 8B 03               CALL   printdec   
5181   76                     HALT      
5182   00                     .CSTR      
5183                EXPECTM_0_1939S29:      
5183   E1                     POP   HL   
5184                          ;*Macro unroll:  test "0 2(2(1+))", 4
5184   CD 54 03               CALL   enter   
5187   30 20 32 28 32 28 31 2B 29 29 00 .CSTR   "0 2(2(1+))"   
5192                          ;*Macro unroll:  expect "0 2(2(1+))",4
5192   E1                     POP   HL   
5193   E5                     PUSH   HL   
5194   11 04 00               LD   DE,4   
5197   B7                     OR   A   
5198   ED 52                  SBC   HL,DE   
519A   7D                     LD   A,L   
519B   B4                     OR   H   
519C   28 33                  JR   Z,expectM_0_1940S29   
519E   CD 5D 03               CALL   printStr   
51A1   30 20 32 28 32 28 31 2B 29 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 2(2(1+))","\r\nActual: "   
51B6   CD 8B 03               CALL   printdec   
51B9   CD 5D 03               CALL   printStr   
51BC   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
51C9   21 04 00               LD   HL,4   
51CC   CD 8B 03               CALL   printdec   
51CF   76                     HALT      
51D0   00                     .CSTR      
51D1                EXPECTM_0_1940S29:      
51D1   E1                     POP   HL   
51D2                          ;*Macro unroll:  test "0 1(\\i@+)", 0
51D2   CD 54 03               CALL   enter   
51D5   30 20 31 28 5C 69 40 2B 29 00 .CSTR   "0 1(\\i@+)"   
51DF                          ;*Macro unroll:  expect "0 1(\\i@+)",0
51DF   E1                     POP   HL   
51E0   E5                     PUSH   HL   
51E1   11 00 00               LD   DE,0   
51E4   B7                     OR   A   
51E5   ED 52                  SBC   HL,DE   
51E7   7D                     LD   A,L   
51E8   B4                     OR   H   
51E9   28 32                  JR   Z,expectM_0_1941S29   
51EB   CD 5D 03               CALL   printStr   
51EE   30 20 31 28 5C 69 40 2B 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 1(\\i@+)","\r\nActual: "   
5202   CD 8B 03               CALL   printdec   
5205   CD 5D 03               CALL   printStr   
5208   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
5215   21 00 00               LD   HL,0   
5218   CD 8B 03               CALL   printdec   
521B   76                     HALT      
521C   00                     .CSTR      
521D                EXPECTM_0_1941S29:      
521D   E1                     POP   HL   
521E                          ;*Macro unroll:  test "0 2(\\i@+)", 1
521E   CD 54 03               CALL   enter   
5221   30 20 32 28 5C 69 40 2B 29 00 .CSTR   "0 2(\\i@+)"   
522B                          ;*Macro unroll:  expect "0 2(\\i@+)",1
522B   E1                     POP   HL   
522C   E5                     PUSH   HL   
522D   11 01 00               LD   DE,1   
5230   B7                     OR   A   
5231   ED 52                  SBC   HL,DE   
5233   7D                     LD   A,L   
5234   B4                     OR   H   
5235   28 32                  JR   Z,expectM_0_1942S29   
5237   CD 5D 03               CALL   printStr   
523A   30 20 32 28 5C 69 40 2B 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 2(\\i@+)","\r\nActual: "   
524E   CD 8B 03               CALL   printdec   
5251   CD 5D 03               CALL   printStr   
5254   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
5261   21 01 00               LD   HL,1   
5264   CD 8B 03               CALL   printdec   
5267   76                     HALT      
5268   00                     .CSTR      
5269                EXPECTM_0_1942S29:      
5269   E1                     POP   HL   
526A                          ;*Macro unroll:  test "0 3(\\i@+)", 3
526A   CD 54 03               CALL   enter   
526D   30 20 33 28 5C 69 40 2B 29 00 .CSTR   "0 3(\\i@+)"   
5277                          ;*Macro unroll:  expect "0 3(\\i@+)",3
5277   E1                     POP   HL   
5278   E5                     PUSH   HL   
5279   11 03 00               LD   DE,3   
527C   B7                     OR   A   
527D   ED 52                  SBC   HL,DE   
527F   7D                     LD   A,L   
5280   B4                     OR   H   
5281   28 32                  JR   Z,expectM_0_1943S29   
5283   CD 5D 03               CALL   printStr   
5286   30 20 33 28 5C 69 40 2B 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 3(\\i@+)","\r\nActual: "   
529A   CD 8B 03               CALL   printdec   
529D   CD 5D 03               CALL   printStr   
52A0   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
52AD   21 03 00               LD   HL,3   
52B0   CD 8B 03               CALL   printdec   
52B3   76                     HALT      
52B4   00                     .CSTR      
52B5                EXPECTM_0_1943S29:      
52B5   E1                     POP   HL   
52B6                          ;*Macro unroll:  test "0 2(2(\\i@ \\i6+@ ++))", 4
52B6   CD 54 03               CALL   enter   
52B9   30 20 32 28 32 28 5C 69 40 20 5C 69 36 2B 40 20 2B 2B 29 29 00 .CSTR   "0 2(2(\\i@ \\i6+@ ++))"   
52CE                          ;*Macro unroll:  expect "0 2(2(\\i@ \\i6+@ ++))",4
52CE   E1                     POP   HL   
52CF   E5                     PUSH   HL   
52D0   11 04 00               LD   DE,4   
52D3   B7                     OR   A   
52D4   ED 52                  SBC   HL,DE   
52D6   7D                     LD   A,L   
52D7   B4                     OR   H   
52D8   28 3D                  JR   Z,expectM_0_1944S29   
52DA   CD 5D 03               CALL   printStr   
52DD   30 20 32 28 32 28 5C 69 40 20 5C 69 36 2B 40 20 2B 2B 29 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0 2(2(\\i@ \\i6+@ ++))","\r\nActual: "   
52FC   CD 8B 03               CALL   printdec   
52FF   CD 5D 03               CALL   printStr   
5302   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
530F   21 04 00               LD   HL,4   
5312   CD 8B 03               CALL   printdec   
5315   76                     HALT      
5316   00                     .CSTR      
5317                EXPECTM_0_1944S29:      
5317   E1                     POP   HL   
5318                          ;*Macro unroll:  test "0t! 10(1 t@+t!) t@",10
5318   CD 54 03               CALL   enter   
531B   30 74 21 20 31 30 28 31 20 74 40 2B 74 21 29 20 74 40 00 .CSTR   "0t! 10(1 t@+t!) t@"   
532E                          ;*Macro unroll:  expect "0t! 10(1 t@+t!) t@",10
532E   E1                     POP   HL   
532F   E5                     PUSH   HL   
5330   11 0A 00               LD   DE,10   
5333   B7                     OR   A   
5334   ED 52                  SBC   HL,DE   
5336   7D                     LD   A,L   
5337   B4                     OR   H   
5338   28 3B                  JR   Z,expectM_0_1945S29   
533A   CD 5D 03               CALL   printStr   
533D   30 74 21 20 31 30 28 31 20 74 40 2B 74 21 29 20 74 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0t! 10(1 t@+t!) t@","\r\nActual: "   
535A   CD 8B 03               CALL   printdec   
535D   CD 5D 03               CALL   printStr   
5360   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
536D   21 0A 00               LD   HL,10   
5370   CD 8B 03               CALL   printdec   
5373   76                     HALT      
5374   00                     .CSTR      
5375                EXPECTM_0_1945S29:      
5375   E1                     POP   HL   
5376                          ;*Macro unroll:  test "0\\(100)(200)",200
5376   CD 54 03               CALL   enter   
5379   30 5C 28 31 30 30 29 28 32 30 30 29 00 .CSTR   "0\\(100)(200)"   
5386                          ;*Macro unroll:  expect "0\\(100)(200)",200
5386   E1                     POP   HL   
5387   E5                     PUSH   HL   
5388   11 C8 00               LD   DE,200   
538B   B7                     OR   A   
538C   ED 52                  SBC   HL,DE   
538E   7D                     LD   A,L   
538F   B4                     OR   H   
5390   28 35                  JR   Z,expectM_0_1946S29   
5392   CD 5D 03               CALL   printStr   
5395   30 5C 28 31 30 30 29 28 32 30 30 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0\\(100)(200)","\r\nActual: "   
53AC   CD 8B 03               CALL   printdec   
53AF   CD 5D 03               CALL   printStr   
53B2   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
53BF   21 C8 00               LD   HL,200   
53C2   CD 8B 03               CALL   printdec   
53C5   76                     HALT      
53C6   00                     .CSTR      
53C7                EXPECTM_0_1946S29:      
53C7   E1                     POP   HL   
53C8                          ;*Macro unroll:  test "1\\(100)(200)",100
53C8   CD 54 03               CALL   enter   
53CB   31 5C 28 31 30 30 29 28 32 30 30 29 00 .CSTR   "1\\(100)(200)"   
53D8                          ;*Macro unroll:  expect "1\\(100)(200)",100
53D8   E1                     POP   HL   
53D9   E5                     PUSH   HL   
53DA   11 64 00               LD   DE,100   
53DD   B7                     OR   A   
53DE   ED 52                  SBC   HL,DE   
53E0   7D                     LD   A,L   
53E1   B4                     OR   H   
53E2   28 35                  JR   Z,expectM_0_1947S29   
53E4   CD 5D 03               CALL   printStr   
53E7   31 5C 28 31 30 30 29 28 32 30 30 29 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1\\(100)(200)","\r\nActual: "   
53FE   CD 8B 03               CALL   printdec   
5401   CD 5D 03               CALL   printStr   
5404   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
5411   21 64 00               LD   HL,100   
5414   CD 8B 03               CALL   printdec   
5417   76                     HALT      
5418   00                     .CSTR      
5419                EXPECTM_0_1947S29:      
5419   E1                     POP   HL   
541A                          ;*Macro unroll:  test "0t! 10(\\i@ 4>\\_ \\i@ 1 t@+t!) t@",5
541A   CD 54 03               CALL   enter   
541D   30 74 21 20 31 30 28 5C 69 40 20 34 3E 5C 5F 20 5C 69 40 20 31 20 74 40 2B 74 21 29 20 74 40 00 .CSTR   "0t! 10(\\i@ 4>\\_ \\i@ 1 t@+t!) t@"   
543D                          ;*Macro unroll:  expect "0t! 10(\\i@ 4>\\_ \\i@ 1 t@+t!) t@",5
543D   E1                     POP   HL   
543E   E5                     PUSH   HL   
543F   11 05 00               LD   DE,5   
5442   B7                     OR   A   
5443   ED 52                  SBC   HL,DE   
5445   7D                     LD   A,L   
5446   B4                     OR   H   
5447   28 48                  JR   Z,expectM_0_1948S29   
5449   CD 5D 03               CALL   printStr   
544C   30 74 21 20 31 30 28 5C 69 40 20 34 3E 5C 5F 20 5C 69 40 20 31 20 74 40 2B 74 21 29 20 74 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0t! 10(\\i@ 4>\\_ \\i@ 1 t@+t!) t@","\r\nActual: "   
5476   CD 8B 03               CALL   printdec   
5479   CD 5D 03               CALL   printStr   
547C   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
5489   21 05 00               LD   HL,5   
548C   CD 8B 03               CALL   printdec   
548F   76                     HALT      
5490   00                     .CSTR      
5491                EXPECTM_0_1948S29:      
5491   E1                     POP   HL   
5492                          ;*Macro unroll:  test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
5492   CD 54 03               CALL   enter   
5495   30 74 21 20 5B 31 20 32 20 33 5D 20 24 20 61 21 20 28 20 61 40 20 5C 69 40 20 7B 2B 20 40 20 74 40 2B 74 21 20 29 20 74 40 00 .CSTR   "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@"   
54BF                          ;*Macro unroll:  expect "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@",6
54BF   E1                     POP   HL   
54C0   E5                     PUSH   HL   
54C1   11 06 00               LD   DE,6   
54C4   B7                     OR   A   
54C5   ED 52                  SBC   HL,DE   
54C7   7D                     LD   A,L   
54C8   B4                     OR   H   
54C9   28 52                  JR   Z,expectM_0_1949S29   
54CB   CD 5D 03               CALL   printStr   
54CE   30 74 21 20 5B 31 20 32 20 33 5D 20 24 20 61 21 20 28 20 61 40 20 5C 69 40 20 7B 2B 20 40 20 74 40 2B 74 21 20 29 20 74 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@","\r\nActual: "   
5502   CD 8B 03               CALL   printdec   
5505   CD 5D 03               CALL   printStr   
5508   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
5515   21 06 00               LD   HL,6   
5518   CD 8B 03               CALL   printdec   
551B   76                     HALT      
551C   00                     .CSTR      
551D                EXPECTM_0_1949S29:      
551D   E1                     POP   HL   
551E                          ;*Macro unroll:  test ":X10;\\0X", 10
551E   CD 54 03               CALL   enter   
5521   3A 58 31 30 3B 5C 30 58 00 .CSTR   ":X10;\\0X"   
552A                          ;*Macro unroll:  expect ":X10;\\0X",10
552A   E1                     POP   HL   
552B   E5                     PUSH   HL   
552C   11 0A 00               LD   DE,10   
552F   B7                     OR   A   
5530   ED 52                  SBC   HL,DE   
5532   7D                     LD   A,L   
5533   B4                     OR   H   
5534   28 31                  JR   Z,expectM_0_1950S29   
5536   CD 5D 03               CALL   printStr   
5539   3A 58 31 30 3B 5C 30 58 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   ":X10;\\0X","\r\nActual: "   
554C   CD 8B 03               CALL   printdec   
554F   CD 5D 03               CALL   printStr   
5552   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
555F   21 0A 00               LD   HL,10   
5562   CD 8B 03               CALL   printdec   
5565   76                     HALT      
5566   00                     .CSTR      
5567                EXPECTM_0_1950S29:      
5567   E1                     POP   HL   
5568                          ;*Macro unroll:  test ":X10; \\{1 :X100; \\} X", 10
5568   CD 54 03               CALL   enter   
556B   3A 58 31 30 3B 20 5C 7B 31 20 3A 58 31 30 30 3B 20 5C 7D 20 58 00 .CSTR   ":X10; \\{1 :X100; \\} X"   
5581                          ;*Macro unroll:  expect ":X10; \\{1 :X100; \\} X",10
5581   E1                     POP   HL   
5582   E5                     PUSH   HL   
5583   11 0A 00               LD   DE,10   
5586   B7                     OR   A   
5587   ED 52                  SBC   HL,DE   
5589   7D                     LD   A,L   
558A   B4                     OR   H   
558B   28 3E                  JR   Z,expectM_0_1951S29   
558D   CD 5D 03               CALL   printStr   
5590   3A 58 31 30 3B 20 5C 7B 31 20 3A 58 31 30 30 3B 20 5C 7D 20 58 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   ":X10; \\{1 :X100; \\} X","\r\nActual: "   
55B0   CD 8B 03               CALL   printdec   
55B3   CD 5D 03               CALL   printStr   
55B6   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
55C3   21 0A 00               LD   HL,10   
55C6   CD 8B 03               CALL   printdec   
55C9   76                     HALT      
55CA   00                     .CSTR      
55CB                EXPECTM_0_1951S29:      
55CB   E1                     POP   HL   
55CC                          ;*Macro unroll:  test ":X10; \\{1 :X100; X \\}", 100
55CC   CD 54 03               CALL   enter   
55CF   3A 58 31 30 3B 20 5C 7B 31 20 3A 58 31 30 30 3B 20 58 20 5C 7D 00 .CSTR   ":X10; \\{1 :X100; X \\}"   
55E5                          ;*Macro unroll:  expect ":X10; \\{1 :X100; X \\}",100
55E5   E1                     POP   HL   
55E6   E5                     PUSH   HL   
55E7   11 64 00               LD   DE,100   
55EA   B7                     OR   A   
55EB   ED 52                  SBC   HL,DE   
55ED   7D                     LD   A,L   
55EE   B4                     OR   H   
55EF   28 3E                  JR   Z,expectM_0_1952S29   
55F1   CD 5D 03               CALL   printStr   
55F4   3A 58 31 30 3B 20 5C 7B 31 20 3A 58 31 30 30 3B 20 58 20 5C 7D 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   ":X10; \\{1 :X100; X \\}","\r\nActual: "   
5614   CD 8B 03               CALL   printdec   
5617   CD 5D 03               CALL   printStr   
561A   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
5627   21 64 00               LD   HL,100   
562A   CD 8B 03               CALL   printdec   
562D   76                     HALT      
562E   00                     .CSTR      
562F                EXPECTM_0_1952S29:      
562F   E1                     POP   HL   
5630                          ;*Macro unroll:  test ":X10; \\{1 :X100; \\} \\1X", 100
5630   CD 54 03               CALL   enter   
5633   3A 58 31 30 3B 20 5C 7B 31 20 3A 58 31 30 30 3B 20 5C 7D 20 5C 31 58 00 .CSTR   ":X10; \\{1 :X100; \\} \\1X"   
564B                          ;*Macro unroll:  expect ":X10; \\{1 :X100; \\} \\1X",100
564B   E1                     POP   HL   
564C   E5                     PUSH   HL   
564D   11 64 00               LD   DE,100   
5650   B7                     OR   A   
5651   ED 52                  SBC   HL,DE   
5653   7D                     LD   A,L   
5654   B4                     OR   H   
5655   28 40                  JR   Z,expectM_0_1953S29   
5657   CD 5D 03               CALL   printStr   
565A   3A 58 31 30 3B 20 5C 7B 31 20 3A 58 31 30 30 3B 20 5C 7D 20 5C 31 58 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   ":X10; \\{1 :X100; \\} \\1X","\r\nActual: "   
567C   CD 8B 03               CALL   printdec   
567F   CD 5D 03               CALL   printStr   
5682   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
568F   21 64 00               LD   HL,100   
5692   CD 8B 03               CALL   printdec   
5695   76                     HALT      
5696   00                     .CSTR      
5697                EXPECTM_0_1953S29:      
5697   E1                     POP   HL   
5698                          ;*Macro unroll:  test "2 \\1x! \\1x@", 2
5698   CD 54 03               CALL   enter   
569B   32 20 5C 31 78 21 20 5C 31 78 40 00 .CSTR   "2 \\1x! \\1x@"   
56A7                          ;*Macro unroll:  expect "2 \\1x! \\1x@",2
56A7   E1                     POP   HL   
56A8   E5                     PUSH   HL   
56A9   11 02 00               LD   DE,2   
56AC   B7                     OR   A   
56AD   ED 52                  SBC   HL,DE   
56AF   7D                     LD   A,L   
56B0   B4                     OR   H   
56B1   28 34                  JR   Z,expectM_0_1954S29   
56B3   CD 5D 03               CALL   printStr   
56B6   32 20 5C 31 78 21 20 5C 31 78 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "2 \\1x! \\1x@","\r\nActual: "   
56CC   CD 8B 03               CALL   printdec   
56CF   CD 5D 03               CALL   printStr   
56D2   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
56DF   21 02 00               LD   HL,2   
56E2   CD 8B 03               CALL   printdec   
56E5   76                     HALT      
56E6   00                     .CSTR      
56E7                EXPECTM_0_1954S29:      
56E7   E1                     POP   HL   
56E8                          ;*Macro unroll:  test "\\{1 2x! \\} \\1x@", 2
56E8   CD 54 03               CALL   enter   
56EB   5C 7B 31 20 32 78 21 20 5C 7D 20 5C 31 78 40 00 .CSTR   "\\{1 2x! \\} \\1x@"   
56FB                          ;*Macro unroll:  expect "\\{1 2x! \\} \\1x@",2
56FB   E1                     POP   HL   
56FC   E5                     PUSH   HL   
56FD   11 02 00               LD   DE,2   
5700   B7                     OR   A   
5701   ED 52                  SBC   HL,DE   
5703   7D                     LD   A,L   
5704   B4                     OR   H   
5705   28 38                  JR   Z,expectM_0_1955S29   
5707   CD 5D 03               CALL   printStr   
570A   5C 7B 31 20 32 78 21 20 5C 7D 20 5C 31 78 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\{1 2x! \\} \\1x@","\r\nActual: "   
5724   CD 8B 03               CALL   printdec   
5727   CD 5D 03               CALL   printStr   
572A   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
5737   21 02 00               LD   HL,2   
573A   CD 8B 03               CALL   printdec   
573D   76                     HALT      
573E   00                     .CSTR      
573F                EXPECTM_0_1955S29:      
573F   E1                     POP   HL   
5740                          ;*Macro unroll:  test "\\{1 :A2x!; \\} \\1A \\1x@", 2
5740   CD 54 03               CALL   enter   
5743   5C 7B 31 20 3A 41 32 78 21 3B 20 5C 7D 20 5C 31 41 20 5C 31 78 40 00 .CSTR   "\\{1 :A2x!; \\} \\1A \\1x@"   
575A                          ;*Macro unroll:  expect "\\{1 :A2x!; \\} \\1A \\1x@",2
575A   E1                     POP   HL   
575B   E5                     PUSH   HL   
575C   11 02 00               LD   DE,2   
575F   B7                     OR   A   
5760   ED 52                  SBC   HL,DE   
5762   7D                     LD   A,L   
5763   B4                     OR   H   
5764   28 3F                  JR   Z,expectM_0_1956S29   
5766   CD 5D 03               CALL   printStr   
5769   5C 7B 31 20 3A 41 32 78 21 3B 20 5C 7D 20 5C 31 41 20 5C 31 78 40 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\\{1 :A2x!; \\} \\1A \\1x@","\r\nActual: "   
578A   CD 8B 03               CALL   printdec   
578D   CD 5D 03               CALL   printStr   
5790   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
579D   21 02 00               LD   HL,2   
57A0   CD 8B 03               CALL   printdec   
57A3   76                     HALT      
57A4   00                     .CSTR      
57A5                EXPECTM_0_1956S29:      
57A5   E1                     POP   HL   
57A6                             ; 
57A6   CD 54 03               CALL   enter   
57A9   60 44 6F 6E 65 21 60 00 .CSTR   "`Done!`"   
57B1   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 41 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 259 IN MINT.asm
                    > USED AT LINE 653 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 285 IN MINT.asm
                    > USED AT LINE 414 IN MINT.asm
                    > USED AT LINE 464 IN MINT.asm
                    > USED AT LINE 489 IN MINT.asm
                    > USED AT LINE 614 IN MINT.asm
                    > USED AT LINE 811 IN MINT.asm
                    > USED AT LINE 1089 IN MINT.asm
                    > USED AT LINE 1430 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 1062 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 73 IN MINT.asm
                    > USED AT LINE 590 IN MINT.asm
EMPTY:              0000 DEFINED AT LINE 18 IN MINT.asm
NSNUM:              0005 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 368 IN MINT.asm
                    > USED AT LINE 74 IN ram.asm
NSSIZE:             0080 DEFINED AT LINE 21 IN MINT.asm
                    > USED AT LINE 368 IN MINT.asm
                    > USED AT LINE 74 IN ram.asm
                    > USED AT LINE 75 IN ram.asm
MACROS:             0180 DEFINED AT LINE 47 IN MINT.asm
BACKSP_:            0180 DEFINED AT LINE 49 IN MINT.asm
REEDIT_:            0197 DEFINED AT LINE 52 IN MINT.asm
EDIT_:              019F DEFINED AT LINE 55 IN MINT.asm
LIST_:              01AB DEFINED AT LINE 58 IN MINT.asm
PRINTSTACK_:        01C8 DEFINED AT LINE 61 IN MINT.asm
TOGGLEBASE_:        01D0 DEFINED AT LINE 64 IN MINT.asm
IALTVARS:           01DA DEFINED AT LINE 71 IN MINT.asm
                    > USED AT LINE 359 IN MINT.asm
IOPCODES:           01EA DEFINED AT LINE 81 IN MINT.asm
                    > USED AT LINE 372 IN MINT.asm
ETX:                0263 DEFINED AT LINE 214 IN MINT.asm
                    > USED AT LINE 632 IN MINT.asm
ETX1:               026C DEFINED AT LINE 219 IN MINT.asm
                    > USED AT LINE 217 IN MINT.asm
START:              026E DEFINED AT LINE 222 IN MINT.asm
INTERPRET:          0283 DEFINED AT LINE 228 IN MINT.asm
                    > USED AT LINE 220 IN MINT.asm
INTERPRET2:         028D DEFINED AT LINE 234 IN MINT.asm
                    > USED AT LINE 278 IN MINT.asm
INTERPRET3:         0295 DEFINED AT LINE 241 IN MINT.asm
                    > USED AT LINE 250 IN MINT.asm
INTERPRET4:         029B DEFINED AT LINE 247 IN MINT.asm
                    > USED AT LINE 239 IN MINT.asm
WAITCHAR:           02A0 DEFINED AT LINE 258 IN MINT.asm
                    > USED AT LINE 287 IN MINT.asm
                    > USED AT LINE 301 IN MINT.asm
MACRO:              02AF DEFINED AT LINE 267 IN MINT.asm
WAITCHAR1:          02C8 DEFINED AT LINE 280 IN MINT.asm
                    > USED AT LINE 261 IN MINT.asm
WAITCHAR3:          02D6 DEFINED AT LINE 289 IN MINT.asm
                    > USED AT LINE 265 IN MINT.asm
WAITCHAR4:          02EC DEFINED AT LINE 305 IN MINT.asm
                    > USED AT LINE 263 IN MINT.asm
NEXT:               02F4 DEFINED AT LINE 332 IN MINT.asm
                    > USED AT LINE 354 IN MINT.asm
                    > USED AT LINE 358 IN MINT.asm
                    > USED AT LINE 596 IN MINT.asm
                    > USED AT LINE 662 IN MINT.asm
                    > USED AT LINE 934 IN MINT.asm
                    > USED AT LINE 1172 IN MINT.asm
                    > USED AT LINE 1178 IN MINT.asm
COMPNEXT:           02FD DEFINED AT LINE 342 IN MINT.asm
                    > USED AT LINE 592 IN MINT.asm
COMPNEXT1:          030B DEFINED AT LINE 352 IN MINT.asm
                    > USED AT LINE 349 IN MINT.asm
INIT:               0310 DEFINED AT LINE 356 IN MINT.asm
                    > USED AT LINE 9
                    > USED AT LINE 224 IN MINT.asm
INITOPS:            0330 DEFINED AT LINE 371 IN MINT.asm
INITOPS1:           0339 DEFINED AT LINE 376 IN MINT.asm
                    > USED AT LINE 386 IN MINT.asm
                    > USED AT LINE 397 IN MINT.asm
INITOPS2:           0349 DEFINED AT LINE 388 IN MINT.asm
                    > USED AT LINE 381 IN MINT.asm
INITOPS2A:          034E DEFINED AT LINE 393 IN MINT.asm
                    > USED AT LINE 396 IN MINT.asm
ENTER:              0354 DEFINED AT LINE 399 IN MINT.asm
                    > USED AT LINE 275 IN MINT.asm
                    > USED AT LINE 1173 IN MINT.asm
                    > USED AT LINE 1249 IN MINT.asm
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 48
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 27
                    > USED AT LINE 105
PRINTSTR:           035D DEFINED AT LINE 406 IN MINT.asm
                    > USED AT LINE 225 IN MINT.asm
                    > USED AT LINE 1371 IN MINT.asm
                    > USED AT LINE 1376 IN MINT.asm
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
                    > USED AT LINE 11
                    > USED AT LINE 15
PUTSTR0:            0364 DEFINED AT LINE 413 IN MINT.asm
                    > USED AT LINE 419 IN MINT.asm
PUTSTR:             0368 DEFINED AT LINE 416 IN MINT.asm
                    > USED AT LINE 408 IN MINT.asm
                    > USED AT LINE 1200 IN MINT.asm
NSLOOKUP:           036D DEFINED AT LINE 422 IN MINT.asm
                    > USED AT LINE 975 IN MINT.asm
                    > USED AT LINE 1122 IN MINT.asm
                    > USED AT LINE 1169 IN MINT.asm
                    > USED AT LINE 1401 IN MINT.asm
NSLOOKUP0:          036F DEFINED AT LINE 424 IN MINT.asm
NSLOOKUP1:          0373 DEFINED AT LINE 427 IN MINT.asm
                    > USED AT LINE 601 IN MINT.asm
NSLOOKUP2:          0379 DEFINED AT LINE 431 IN MINT.asm
                    > USED AT LINE 426 IN MINT.asm
                    > USED AT LINE 764 IN MINT.asm
NSLOOKUP3:          037D DEFINED AT LINE 434 IN MINT.asm
                    > USED AT LINE 430 IN MINT.asm
PRINTDEC:           038B DEFINED AT LINE 447 IN MINT.asm
                    > USED AT LINE 611 IN MINT.asm
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
                    > USED AT LINE 13
                    > USED AT LINE 18
PRINTDEC1:          03A4 DEFINED AT LINE 457 IN MINT.asm
                    > USED AT LINE 449 IN MINT.asm
                    > USED AT LINE 451 IN MINT.asm
                    > USED AT LINE 453 IN MINT.asm
                    > USED AT LINE 455 IN MINT.asm
PRINTDEC2:          03A6 DEFINED AT LINE 459 IN MINT.asm
                    > USED AT LINE 462 IN MINT.asm
PRINTHEX:           03AF DEFINED AT LINE 466 IN MINT.asm
                    > USED AT LINE 619 IN MINT.asm
PRINTHEX2:          03BA DEFINED AT LINE 475 IN MINT.asm
                    > USED AT LINE 470 IN MINT.asm
                    > USED AT LINE 472 IN MINT.asm
PRINTHEX3:          03C3 DEFINED AT LINE 483 IN MINT.asm
                    > USED AT LINE 481 IN MINT.asm
NESTING:            03CE DEFINED AT LINE 501 IN MINT.asm
                    > USED AT LINE 245 IN MINT.asm
                    > USED AT LINE 286 IN MINT.asm
                    > USED AT LINE 890 IN MINT.asm
NESTING1A:          03D9 DEFINED AT LINE 508 IN MINT.asm
                    > USED AT LINE 505 IN MINT.asm
NESTING1:           03DC DEFINED AT LINE 511 IN MINT.asm
                    > USED AT LINE 503 IN MINT.asm
NESTING2:           03EB DEFINED AT LINE 520 IN MINT.asm
                    > USED AT LINE 515 IN MINT.asm
                    > USED AT LINE 517 IN MINT.asm
NESTING3:           03ED DEFINED AT LINE 523 IN MINT.asm
                    > USED AT LINE 519 IN MINT.asm
NESTING4:           03F8 DEFINED AT LINE 530 IN MINT.asm
                    > USED AT LINE 525 IN MINT.asm
                    > USED AT LINE 527 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 538 IN MINT.asm
AND_:               0400 DEFINED AT LINE 540 IN MINT.asm
AND1:               0407 DEFINED AT LINE 548 IN MINT.asm
                    > USED AT LINE 562 IN MINT.asm
                    > USED AT LINE 573 IN MINT.asm
OR_:                040B DEFINED AT LINE 554 IN MINT.asm
XOR_:               0414 DEFINED AT LINE 564 IN MINT.asm
XOR1:               0415 DEFINED AT LINE 566 IN MINT.asm
                    > USED AT LINE 577 IN MINT.asm
INV_:               041D DEFINED AT LINE 575 IN MINT.asm
ADD_:               0422 DEFINED AT LINE 579 IN MINT.asm
AGAIN_:             0428 DEFINED AT LINE 586 IN MINT.asm
ARRDEF_:            042B DEFINED AT LINE 588 IN MINT.asm
ARRDEF:             042B DEFINED AT LINE 589 IN MINT.asm
ARRDEF1:            042D DEFINED AT LINE 591 IN MINT.asm
                    > USED AT LINE 1063 IN MINT.asm
ARREND_:            043D DEFINED AT LINE 597 IN MINT.asm
CALL_:              0440 DEFINED AT LINE 599 IN MINT.asm
DEF_:               044A DEFINED AT LINE 607 IN MINT.asm
DOT_:               044D DEFINED AT LINE 609 IN MINT.asm
DOT2:               0451 DEFINED AT LINE 612 IN MINT.asm
                    > USED AT LINE 620 IN MINT.asm
HDOT_:              0458 DEFINED AT LINE 617 IN MINT.asm
DROP_:              045E DEFINED AT LINE 622 IN MINT.asm
DUP_:               0461 DEFINED AT LINE 626 IN MINT.asm
ETX_:               0466 DEFINED AT LINE 631 IN MINT.asm
EXIT_:              0469 DEFINED AT LINE 634 IN MINT.asm
FETCH_:             0473 DEFINED AT LINE 642 IN MINT.asm
FETCH1:             0474 DEFINED AT LINE 644 IN MINT.asm
                    > USED AT LINE 1123 IN MINT.asm
KEY_:               047A DEFINED AT LINE 652 IN MINT.asm
MUL_:               0483 DEFINED AT LINE 659 IN MINT.asm
NOP_:               0486 DEFINED AT LINE 661 IN MINT.asm
OVER_:              0489 DEFINED AT LINE 665 IN MINT.asm
RET_:               0490 DEFINED AT LINE 673 IN MINT.asm
ROT_:               0497 DEFINED AT LINE 678 IN MINT.asm
SHL_:               049E DEFINED AT LINE 687 IN MINT.asm
SHR_:               04A3 DEFINED AT LINE 694 IN MINT.asm
SHR1:               04A4 DEFINED AT LINE 696 IN MINT.asm
                    > USED AT LINE 1107 IN MINT.asm
STORE_:             04AB DEFINED AT LINE 702 IN MINT.asm
SWAP_:              04B2 DEFINED AT LINE 711 IN MINT.asm
SUB_:               04B7 DEFINED AT LINE 717 IN MINT.asm
SUB2:               04B9 DEFINED AT LINE 721 IN MINT.asm
                    > USED AT LINE 730 IN MINT.asm
NEG_:               04BF DEFINED AT LINE 727 IN MINT.asm
EQ_:                04C5 DEFINED AT LINE 732 IN MINT.asm
GT_:                04D1 DEFINED AT LINE 741 IN MINT.asm
LT_:                04D5 DEFINED AT LINE 746 IN MINT.asm
CMP_:               04D7 DEFINED AT LINE 750 IN MINT.asm
                    > USED AT LINE 744 IN MINT.asm
EQUAL:              04E2 DEFINED AT LINE 756 IN MINT.asm
                    > USED AT LINE 737 IN MINT.asm
LESS:               04E3 DEFINED AT LINE 758 IN MINT.asm
                    > USED AT LINE 739 IN MINT.asm
                    > USED AT LINE 753 IN MINT.asm
                    > USED AT LINE 755 IN MINT.asm
VAR_:               04E6 DEFINED AT LINE 762 IN MINT.asm
NUM_:               04F0 DEFINED AT LINE 775 IN MINT.asm
STR_:               04F3 DEFINED AT LINE 780 IN MINT.asm
DIV_:               04F5 DEFINED AT LINE 781 IN MINT.asm
BEGIN_:             04F7 DEFINED AT LINE 782 IN MINT.asm
HEX_:               04F9 DEFINED AT LINE 783 IN MINT.asm
ALT_:               04FB DEFINED AT LINE 784 IN MINT.asm
ALT:                04FB DEFINED AT LINE 790 IN MINT.asm
ALT2:               0502 DEFINED AT LINE 796 IN MINT.asm
STR:                0508 DEFINED AT LINE 803 IN MINT.asm
                    > USED AT LINE 773 IN MINT.asm
                    > USED AT LINE 780 IN MINT.asm
STR1:               0509 DEFINED AT LINE 806 IN MINT.asm
                    > USED AT LINE 812 IN MINT.asm
STR2:               0514 DEFINED AT LINE 814 IN MINT.asm
                    > USED AT LINE 810 IN MINT.asm
DIV:                0517 DEFINED AT LINE 831 IN MINT.asm
                    > USED AT LINE 781 IN MINT.asm
DIV1:               0521 DEFINED AT LINE 841 IN MINT.asm
                    > USED AT LINE 854 IN MINT.asm
DIV2:               052E DEFINED AT LINE 850 IN MINT.asm
                    > USED AT LINE 847 IN MINT.asm
DIV3:               052F DEFINED AT LINE 852 IN MINT.asm
                    > USED AT LINE 849 IN MINT.asm
DIV4:               0534 DEFINED AT LINE 857 IN MINT.asm
BEGIN:              0539 DEFINED AT LINE 868 IN MINT.asm
                    > USED AT LINE 782 IN MINT.asm
BEGIN1:             055A DEFINED AT LINE 885 IN MINT.asm
                    > USED AT LINE 872 IN MINT.asm
                    > USED AT LINE 1059 IN MINT.asm
                    > USED AT LINE 1145 IN MINT.asm
BEGIN2:             055C DEFINED AT LINE 887 IN MINT.asm
                    > USED AT LINE 893 IN MINT.asm
BEGIN3:             0565 DEFINED AT LINE 894 IN MINT.asm
HEX:                0567 DEFINED AT LINE 897 IN MINT.asm
                    > USED AT LINE 783 IN MINT.asm
HEX1:               056A DEFINED AT LINE 899 IN MINT.asm
                    > USED AT LINE 916 IN MINT.asm
HEX2:               0572 DEFINED AT LINE 905 IN MINT.asm
                    > USED AT LINE 903 IN MINT.asm
ARREND:             0584 DEFINED AT LINE 920 IN MINT.asm
                    > USED AT LINE 597 IN MINT.asm
ARREND2:            0599 DEFINED AT LINE 932 IN MINT.asm
                    > USED AT LINE 929 IN MINT.asm
DEF:                05A0 DEFINED AT LINE 971 IN MINT.asm
                    > USED AT LINE 607 IN MINT.asm
DEF1:               05B0 DEFINED AT LINE 981 IN MINT.asm
                    > USED AT LINE 988 IN MINT.asm
                    > USED AT LINE 1048 IN MINT.asm
DEF2:               05BA DEFINED AT LINE 989 IN MINT.asm
                    > USED AT LINE 987 IN MINT.asm
DEF3:               05BB DEFINED AT LINE 991 IN MINT.asm
                    > USED AT LINE 1269 IN MINT.asm
AGAIN:              05C1 DEFINED AT LINE 995 IN MINT.asm
                    > USED AT LINE 586 IN MINT.asm
AGAIN1:             05D3 DEFINED AT LINE 1008 IN MINT.asm
                    > USED AT LINE 1002 IN MINT.asm
AGAIN2:             05ED DEFINED AT LINE 1020 IN MINT.asm
                    > USED AT LINE 1013 IN MINT.asm
AGAIN3:             05F0 DEFINED AT LINE 1022 IN MINT.asm
                    > USED AT LINE 1006 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 1031 IN MINT.asm
                    > USED AT LINE 78 IN MINT.asm
ALTVAR_:            0600 DEFINED AT LINE 1034 IN MINT.asm
ANOP_:              0608 DEFINED AT LINE 1041 IN MINT.asm
ANONDEF_:           060A DEFINED AT LINE 1044 IN MINT.asm
BREAK_:             0613 DEFINED AT LINE 1050 IN MINT.asm
BREAK1:             061A DEFINED AT LINE 1056 IN MINT.asm
                    > USED AT LINE 1054 IN MINT.asm
CARRDEF_:           0622 DEFINED AT LINE 1061 IN MINT.asm
CFETCH_:            0627 DEFINED AT LINE 1065 IN MINT.asm
COMMENT_:           062E DEFINED AT LINE 1072 IN MINT.asm
                    > USED AT LINE 1076 IN MINT.asm
CSTORE_:            0637 DEFINED AT LINE 1080 IN MINT.asm
EMIT_:              063C DEFINED AT LINE 1086 IN MINT.asm
EXEC_:              0643 DEFINED AT LINE 1092 IN MINT.asm
EXEC1:              0648 DEFINED AT LINE 1095 IN MINT.asm
                    > USED AT LINE 1093 IN MINT.asm
DEPTH_:             064B DEFINED AT LINE 1100 IN MINT.asm
EDITDEF_:           0659 DEFINED AT LINE 1109 IN MINT.asm
PROMPT_:            065E DEFINED AT LINE 1113 IN MINT.asm
GETREF_:            0663 DEFINED AT LINE 1118 IN MINT.asm
GETREF:             0663 DEFINED AT LINE 1119 IN MINT.asm
GO_:                066B DEFINED AT LINE 1125 IN MINT.asm
GO1:                066C DEFINED AT LINE 1127 IN MINT.asm
                    > USED AT LINE 605 IN MINT.asm
GO2:                0678 DEFINED AT LINE 1135 IN MINT.asm
                    > USED AT LINE 1130 IN MINT.asm
IFTE_:              067A DEFINED AT LINE 1138 IN MINT.asm
IFTE1:              0684 DEFINED AT LINE 1146 IN MINT.asm
                    > USED AT LINE 1142 IN MINT.asm
INPORT_:            068C DEFINED AT LINE 1151 IN MINT.asm
LOOPIDX_:           0697 DEFINED AT LINE 1161 IN MINT.asm
NSREF_:             069B DEFINED AT LINE 1165 IN MINT.asm
NSREF2:             06B6 DEFINED AT LINE 1176 IN MINT.asm
                    > USED AT LINE 1170 IN MINT.asm
NSEXIT_:            06BB DEFINED AT LINE 1179 IN MINT.asm
                    > USED AT LINE 1175 IN MINT.asm
NEWLN_:             06C3 DEFINED AT LINE 1184 IN MINT.asm
OUTPORT_:           06C8 DEFINED AT LINE 1188 IN MINT.asm
PRNSTR_:            06D1 DEFINED AT LINE 1197 IN MINT.asm
PRNSTR:             06D1 DEFINED AT LINE 1198 IN MINT.asm
STRDEF_:            06D7 DEFINED AT LINE 1203 IN MINT.asm
RPUSH_:             06D9 DEFINED AT LINE 1207 IN MINT.asm
RPOP_:              06DF DEFINED AT LINE 1212 IN MINT.asm
NSENTER_:           06E5 DEFINED AT LINE 1217 IN MINT.asm
UTILTABLE:          06E7 DEFINED AT LINE 1220 IN MINT.asm
UTIL_:              06EE DEFINED AT LINE 1229 IN MINT.asm
UTIL:               06EE DEFINED AT LINE 1230 IN MINT.asm
PRINTSTK_:          06F8 DEFINED AT LINE 1240 IN MINT.asm
PRINTSTK:           06F8 DEFINED AT LINE 1247 IN MINT.asm
STRDEF:             0721 DEFINED AT LINE 1253 IN MINT.asm
                    > USED AT LINE 1204 IN MINT.asm
STRDEF1:            0729 DEFINED AT LINE 1258 IN MINT.asm
                    > USED AT LINE 1265 IN MINT.asm
STRDEF2:            072C DEFINED AT LINE 1262 IN MINT.asm
                    > USED AT LINE 1257 IN MINT.asm
NSENTER:            0737 DEFINED AT LINE 1271 IN MINT.asm
                    > USED AT LINE 1218 IN MINT.asm
NSENTER1:           0738 DEFINED AT LINE 1273 IN MINT.asm
                    > USED AT LINE 1167 IN MINT.asm
MUL:                0756 DEFINED AT LINE 1297 IN MINT.asm
                    > USED AT LINE 659 IN MINT.asm
MUL2:               0760 DEFINED AT LINE 1306 IN MINT.asm
                    > USED AT LINE 1315 IN MINT.asm
NUM:                0772 DEFINED AT LINE 1332 IN MINT.asm
                    > USED AT LINE 775 IN MINT.asm
NUM1:               0776 DEFINED AT LINE 1336 IN MINT.asm
                    > USED AT LINE 1360 IN MINT.asm
NUM2:               0790 DEFINED AT LINE 1362 IN MINT.asm
                    > USED AT LINE 907 IN MINT.asm
                    > USED AT LINE 909 IN MINT.asm
                    > USED AT LINE 1348 IN MINT.asm
                    > USED AT LINE 1350 IN MINT.asm
PROMPT:             0794 DEFINED AT LINE 1370 IN MINT.asm
                    > USED AT LINE 229 IN MINT.asm
                    > USED AT LINE 1114 IN MINT.asm
CRLF:               079D DEFINED AT LINE 1375 IN MINT.asm
                    > USED AT LINE 298 IN MINT.asm
                    > USED AT LINE 1185 IN MINT.asm
RPUSH:              07A4 DEFINED AT LINE 1380 IN MINT.asm
                    > USED AT LINE 401 IN MINT.asm
                    > USED AT LINE 595 IN MINT.asm
                    > USED AT LINE 1132 IN MINT.asm
                    > USED AT LINE 1148 IN MINT.asm
                    > USED AT LINE 1209 IN MINT.asm
                    > USED AT LINE 1284 IN MINT.asm
RPOP:               07AF DEFINED AT LINE 1387 IN MINT.asm
                    > USED AT LINE 637 IN MINT.asm
                    > USED AT LINE 674 IN MINT.asm
                    > USED AT LINE 921 IN MINT.asm
                    > USED AT LINE 1180 IN MINT.asm
                    > USED AT LINE 1213 IN MINT.asm
RPOP2:              07B9 DEFINED AT LINE 1392 IN MINT.asm
                    > USED AT LINE 1166 IN MINT.asm
EDITDEF:            07BA DEFINED AT LINE 1395 IN MINT.asm
                    > USED AT LINE 1110 IN MINT.asm
EDITDEF1:           07D7 DEFINED AT LINE 1414 IN MINT.asm
                    > USED AT LINE 1420 IN MINT.asm
EDITDEF2:           07D8 DEFINED AT LINE 1416 IN MINT.asm
                    > USED AT LINE 1413 IN MINT.asm
EDITDEF3:           07E0 DEFINED AT LINE 1421 IN MINT.asm
                    > USED AT LINE 1408 IN MINT.asm
WRITECHAR:          07EA DEFINED AT LINE 1427 IN MINT.asm
                    > USED AT LINE 1410 IN MINT.asm
                    > USED AT LINE 1412 IN MINT.asm
                    > USED AT LINE 1418 IN MINT.asm
TIB:                0800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 238 IN MINT.asm
                    > USED AT LINE 281 IN MINT.asm
                    > USED AT LINE 290 IN MINT.asm
                    > USED AT LINE 307 IN MINT.asm
                    > USED AT LINE 1407 IN MINT.asm
                    > USED AT LINE 1422 IN MINT.asm
RSTACK:             0980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 357 IN MINT.asm
DSTACK:             0A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 72 IN MINT.asm
                    > USED AT LINE 215 IN MINT.asm
                    > USED AT LINE 218 IN MINT.asm
                    > USED AT LINE 223 IN MINT.asm
                    > USED AT LINE 1104 IN MINT.asm
STACK:              0A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
OPCODES:            0A00 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 373 IN MINT.asm
CTRLCODES:          0A80 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 269 IN MINT.asm
ALTCODES:           0A80 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 793 IN MINT.asm
MINTVARS:           0B00 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 1036 IN MINT.asm
VBYTEMODE:          0B02 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 346 IN MINT.asm
                    > USED AT LINE 593 IN MINT.asm
                    > USED AT LINE 927 IN MINT.asm
TBPTR:              0B34 DEFINED AT LINE 23 IN ram.asm
RST08:              0B36 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0B38 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0B3A DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0B3C DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0B3E DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0B40 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0B42 DEFINED AT LINE 31 IN ram.asm
INTVEC:             0B44 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0B46 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0B48 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0B4A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTDEFS:            0B4C DEFINED AT LINE 37 IN ram.asm
ALTVARS:            0B80 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 360 IN MINT.asm
                    > USED AT LINE 1036 IN MINT.asm
VS0:                0B80 DEFINED AT LINE 41 IN ram.asm
VBASE16:            0B82 DEFINED AT LINE 42 IN ram.asm
VTIBPTR:            0B84 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 232 IN MINT.asm
                    > USED AT LINE 268 IN MINT.asm
                    > USED AT LINE 277 IN MINT.asm
                    > USED AT LINE 306 IN MINT.asm
                    > USED AT LINE 1425 IN MINT.asm
VNS:                0B86 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 437 IN MINT.asm
                    > USED AT LINE 1181 IN MINT.asm
                    > USED AT LINE 1283 IN MINT.asm
                    > USED AT LINE 1287 IN MINT.asm
VLASTDEF:           0B88 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 974 IN MINT.asm
VALTPAGE:           0B8C DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 798 IN MINT.asm
VHEAPPTR:           0B8E DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 344 IN MINT.asm
                    > USED AT LINE 353 IN MINT.asm
                    > USED AT LINE 594 IN MINT.asm
                    > USED AT LINE 924 IN MINT.asm
                    > USED AT LINE 976 IN MINT.asm
                    > USED AT LINE 992 IN MINT.asm
                    > USED AT LINE 1046 IN MINT.asm
                    > USED AT LINE 1254 IN MINT.asm
NS0:                0BC0 DEFINED AT LINE 74 IN ram.asm
                    > USED AT LINE 75 IN MINT.asm
                    > USED AT LINE 364 IN MINT.asm
                    > USED AT LINE 1285 IN MINT.asm
                    > USED AT LINE 75 IN ram.asm
NS1:                0C40 DEFINED AT LINE 75 IN ram.asm
HEAP:               0E40 DEFINED AT LINE 76 IN ram.asm
                    > USED AT LINE 79 IN MINT.asm
TESTSSTART:         4000 DEFINED AT LINE 17
                    > USED AT LINE 10
EXPECTM_0_1876S29:  403B DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1877S29:  4077 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1878S29:  40B5 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1879S29:  40F5 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1880S29:  4135 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1881S29:  4177 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1882S29:  41B9 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1883S29:  41FB DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1884S29:  423D DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1885S29:  427F DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1886S29:  42C1 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1887S29:  4303 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1888S29:  434D DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1889S29:  4395 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1890S29:  43D7 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1891S29:  441B DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1892S29:  445D DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1893S29:  449F DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1894S29:  44E1 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1895S29:  451F DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1896S29:  455D DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1897S29:  459B DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1898S29:  45E7 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1899S29:  4629 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1900S29:  4671 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_1903S50:    46B9 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1904S29:  46FD DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1905S29:  4743 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1906S29:  478B DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1907S29:  47D1 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1908S29:  481B DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1909S29:  4865 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1910S29:  48C7 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1911S29:  490B DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1912S29:  4961 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1913S29:  49B9 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1914S29:  49FF DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1915S29:  4A47 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1916S29:  4A97 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1917S29:  4AEB DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1918S29:  4B33 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1919S29:  4B77 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1920S29:  4BBD DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1921S29:  4C01 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1922S29:  4C4D DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1923S29:  4C9D DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1924S29:  4CF1 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1925S29:  4D4D DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1926S29:  4D93 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1927S29:  4DDB DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1928S29:  4E23 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1929S29:  4E73 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1930S29:  4EC7 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1931S29:  4F25 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1932S29:  4F7B DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1933S29:  4FC1 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1934S29:  5009 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1935S29:  5051 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1936S29:  5099 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1937S29:  50E7 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1938S29:  5135 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1939S29:  5183 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1940S29:  51D1 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1941S29:  521D DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1942S29:  5269 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1943S29:  52B5 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1944S29:  5317 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1945S29:  5375 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1946S29:  53C7 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1947S29:  5419 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1948S29:  5491 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1949S29:  551D DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1950S29:  5567 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1951S29:  55CB DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1952S29:  562F DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1953S29:  5697 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1954S29:  56E7 DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1955S29:  573F DEFINED AT LINE 22
                    > USED AT LINE 9
EXPECTM_0_1956S29:  57A5 DEFINED AT LINE 22
                    > USED AT LINE 9
