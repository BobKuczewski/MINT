0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 80 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 82 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 84 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 86 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 88 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8A 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 8E 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 90 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                             ; 
0081                             ; 
0081                             ; putting this code here for now
0081                             ; needing to re-integrate support for RC2014
0081                             ; 
0081                             ; .if RC2014        
0081                             ; 
0081                             ; ; **************************************************************************
0081                             ; ; Serial Handling Etc
0081                             ; ; **************************************************************************
0081                             ; 
0081                             ; ; ************************SERIAL HANDLING ROUTINES**********************        
0081                             ; ;
0081                             ; ;        Includes drivers for 68B50 ACIA 
0081                             ; ;		 serial interface I/O primitive routines getchar and putchar
0081                             ; ;        printstring
0081                             ; ;        printdec
0081                             ; ;        printhex
0081                             ; ;        crlf         
0081                             ; 
0081                             ; ; **********************************************************************
0081                             ; ; **  Device Driver                             by Stephen C Cousins  **
0081                             ; ; **  Hardware:  RC2014                                               **
0081                             ; ; **  Interface: Serial 6850 ACIA                                     **
0081                             ; ; **********************************************************************
0081                             ; 
0081                             ; ; This module is the driver for the RC2014 serial I/O interface which is
0081                             ; ; based on the 6850 Asynchronous Communications Interface Adapter (ACIA)
0081                             ; ;
0081                             ; ; Base addresses for ACIA externally defined. eg:
0081                             ; kACIA1:    .EQU 0x80           ;Base address of serial ACIA #1
0081                             ; kACIA2:    .EQU 0x80           ;Base address of serial ACIA #2
0081                             ; ;
0081                             ; ; RC2014 addresses for 68B50 number 2:
0081                             ; ; 0x40   Control registers (read and write)
0081                             ; ; 0x41   Data registers (read and write)
0081                             ; ;
0081                             ; ; Control registers (read and write)
0081                             ; ; Bit   Control write              Control read
0081                             ; ;  0    Counter divide select 1    Receive data register full
0081                             ; ;  1    Counter divide select 2    Transmit data register empty
0081                             ; ;  2    Word select 1              Data carrier detect (/DCD) input
0081                             ; ;  3    Word seelct 2              Clear to send (/CTS) input
0081                             ; ;  4    Word select 3              Framing error
0081                             ; ;  5    Transmit contol 1          Receiver overrun
0081                             ; ;  6    Transmit control 2         Parity error
0081                             ; ;  7    Receive interrupt enable   Interrupt request
0081                             ; ;
0081                             ; ; Control register write
0081                             ; ; Bit   7   6   5   4   3   2   1   0
0081                             ; ;       |   |   |   |   |   |   |   |
0081                             ; ;       |   |   |   |   |   |   0   0     Clock divide 1
0081                             ; ;       |   |   |   |   |   |   0   1     Clock divide 16
0081                             ; ; >     |   |   |   |   |   |   1   0  >  Clock divide 64
0081                             ; ;       |   |   |   |   |   |   1   1     Master reset
0081                             ; ;       |   |   |   |   |   |
0081                             ; ;       |   |   |   0   0   0     7 data bits, even parity, 2 stop bits
0081                             ; ;       |   |   |   0   0   1     7 data bits, odd parity,  2 stop bits
0081                             ; ;       |   |   |   0   1   0     7 data bits, even parity, 1 stop bit
0081                             ; ;       |   |   |   0   1   1     7 data bits, odd parity,  1 stop bit
0081                             ; ;       |   |   |   1   0   0     8 data bits, no parity,   2 stop bits
0081                             ; ;       |   |   |   1   0   1  >  8 data bits, no parity,   1 stop bit
0081                             ; ;       |   |   |   1   1   0     8 data bits, even parity, 1 stop bit
0081                             ; ;       |   |   |   1   1   1     8 data bits, odd parity,  1 stop bit
0081                             ; ;       |   |   |
0081                             ; ;       |   0   0  >  /RTS = low (ready), tx interrupt disabled
0081                             ; ;       |   0   1     /RTS = low (ready), tx interrupt enabled
0081                             ; ;       |   1   0     /RTS = high (not ready), tx interrupt disabled 
0081                             ; ;       |   1   1     /RTS = low, tx break, tx interrupt disabled
0081                             ; ;       |
0081                             ; ;       0  >  Receive interrupt disabled
0081                             ; ;       1     Receive interrupt enabled
0081                             ; ;
0081                             ; ; Control register read
0081                             ; ; Bit   7   6   5   4   3   2   1   0
0081                             ; ;       |   |   |   |   |   |   |   |
0081                             ; ;       |   |   |   |   |   |   |   +-------  Receive data register full
0081                             ; ;       |   |   |   |   |   |   +-------  Transmit data register empty
0081                             ; ;       |   |   |   |   |   +-------  Data carrier detect (/DCD)
0081                             ; ;       |   |   |   |   +-------  Clear to send (/CTS)
0081                             ; ;       |   |   |   +-------  Framing error
0081                             ; ;       |   |   +-------  Receiver overrun 
0081                             ; ;       |   +-------  Parity error
0081                             ; ;       +-------  Interrupt request
0081                             ; 
0081                             ; ; 6850 #1 registers derived from base address (above)
0081                             ; kACIA1Cont: .EQU kACIA1+0       ;I/O address of control register
0081                             ; kACIA1Data: .EQU kACIA1+1       ;I/O address of data register
0081                             ; ; 6850 #2 registers derived from base address (above)
0081                             ; kACIA2Cont: .EQU kACIA2+0       ;I/O address of control register
0081                             ; kACIA2Data: .EQU kACIA2+1       ;I/O address of data register
0081                             ; 
0081                             ; ; Control register values
0081                             ; k6850Reset: .EQU 0b00000011     ;Master reset
0081                             ; k6850Init:  .EQU 0b00010110     ;No int, RTS low, 8+1, /64
0081                             ; 
0081                             ; ; Status (control) register bit numbers
0081                             ; k6850RxRdy: .EQU 0              ;Receive data available bit number
0081                             ; k6850TxRdy: .EQU 1              ;Transmit data empty bit number
0081                             ; 
0081                             ; ; Device detection, test 1
0081                             ; ; This test just reads from the devices' status (control) register
0081                             ; ; and looks for register bits in known states:
0081                             ; ; /CTS input bit = low
0081                             ; ; /DCD input bit = low
0081                             ; ; WARNING
0081                             ; ; Sometimes at power up the Tx data reg empty bit is zero, but
0081                             ; ; recovers after device initialised. So test 1 excludes this bit.
0081                             ; k6850Mask1: .EQU  0b00001100    ;Mask for known bits in control reg
0081                             ; k6850Test1: .EQU  0b00000000    ;Test value following masking
0081                             ; 
0081                             ; ; Device detection, test 2
0081                             ; ; This test just reads from the devices' status (control) register
0081                             ; ; and looks for register bits in known states:
0081                             ; ; /CTS input bit = low
0081                             ; ; /DCD input bit = low
0081                             ; ; Transmit data register empty bit = high
0081                             ; k6850Mask2: .EQU  0b00001110    ;Mask for known bits in control reg
0081                             ; k6850Test2: .EQU  0b00000010    ;Test value following masking
0081                             ; 
0081                             ; ; RC2014 serial 6850 initialise
0081                             ; ;   On entry: No parameters required
0081                             ; ;   On exit:  Z flagged if device is found and initialised
0081                             ; ;             AF BC DE HL not specified
0081                             ; ;             IX IY I AF" BC" DE" HL" preserved
0081                             ; ; If the device is found it is initialised
0081                             ; serial_init:
0081                             ; ; First look to see if the device is present
0081                             ; ; Test 1, just read from chip, do not write anything
0081                             ;         IN   A,(kACIA1Cont) ;Read status (control) register
0081                             ;         AND  k6850Mask1     ;Mask for known bits in control reg
0081                             ;         CP   k6850Test1     ;and check for known values
0081                             ;         RET  NZ             ;If not found return with NZ flag
0081                             ; ; Attempt to initialise the chip
0081                             ;         LD   A,k6850Reset   ;Master reset
0081                             ;         OUT  (kACIA1Cont),A ;Write to ACIA control register
0081                             ;         LD   A,k6850Init    ;No int, RTS low, 8+1, /64
0081                             ;         OUT  (kACIA1Cont),A ;Write to ACIA control register
0081                             ; ; Test 2, perform tests on chip following initialisation
0081                             ;         IN   A,(kACIA1Cont) ;Read status (control) register
0081                             ;         AND  k6850Mask2     ;Mask for known bits in control reg
0081                             ;         CP   k6850Test2     ;Test value following masking
0081                             ; ;           RET  NZ             ;Return not found NZ flagged
0081                             ;         RET                 ;Return Z if found, NZ if not
0081                             ; 
0081                             ; 
0081                             ; ; RC2014 serial 6850 input character
0081                             ; ;   On entry: No parameters required
0081                             ; ;   On exit:  A = Character input from the device
0081                             ; ;             NZ flagged if character input
0081                             ; ;             BC DE IX IY I AF" BC" DE" HL" preserved
0081                             ; ;             HL destroyed
0081                             ; ; This function does not return until a character is available
0081                             ; 
0081                             ; getchar:
0081                             ;         IN   A,(kACIA1Cont) ;Address of status register
0081                             ;         AND  $01            ;Receive byte available
0081                             ;         JR   Z, getchar     ;Return Z if no character
0081                             ;         IN   A,(kACIA1Data) ;Read data byte
0081                             ;         RET                 ;NZ flagged if character input
0081                             ; 
0081                             ; 
0081                             ; ; RC2014 serial 6850 output character
0081                             ; ;   On entry: A = Character to be output to the device
0081                             ; ;   On exit:  If character output successful (eg. device was ready)
0081                             ; ;               NZ flagged and A != 0
0081                             ; ;             If character output failed (eg. device busy)
0081                             ; ;               Z flagged and A = Character to output
0081                             ; ;             BC DE HL IX IY I AF" BC" DE" HL" preserved
0081                             ; putchar:
0081                             ;         PUSH BC
0081                             ;         LD   C,kACIA1Cont   ;ACIA control register
0081                             ;         IN   B,(C)          ;Read ACIA control register
0081                             ;         BIT  k6850TxRdy,B   ;Transmit register full?
0081                             ;         POP  BC
0081                             ;         JR  Z, putchar      ;Return Z as character not output
0081                             ;         OUT  (kACIA1Data),A ;Write data byte
0081                             ;         OR   0xFF           ;Return success A=0xFF and NZ flagged
0081                             ;         RET
0081                             ; 
0081                             ; .endif        
0081                             ; 
0081                GETCHAR:      
0081   2A 92 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 94 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 08               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 80 0A               LD   (RST08),HL   
0094   22 82 0A               LD   (RST10),HL   
0097   22 84 0A               LD   (RST18),HL   
009A   22 86 0A               LD   (RST20),HL   
009D   22 88 0A               LD   (RST28),HL   
00A0   22 8A 0A               LD   (RST30),HL   
00A3   22 8E 0A               LD   (INTVEC),HL   
00A6   22 90 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 92 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 94 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;        MINT1_18 Micro-Interpreter for the Z80
00C6                             ; 
00C6                             ;        Ken Boak John Hardy and Craig Jones  December 2nd 2021
00C6                             ; 
00C6                             ;		 Multiplication stack bug fixed
00C6                             ; 
00C6                             ;        Comparison Operators < and > return 0 (false) when equality is detected
00C6                             ;        Printhex routine shortened
00C6                             ; 
00C6                             ; 
00C6                             ;        Hex entry bug fixed 28-11-21
00C6                             ;        Decimal entry bug fixed  24-11-21
00C6                             ;        Division routine shortened by 13 bytes 24/11
00C6                             ; 
00C6                             ; 
00C6                             ;        Includes serial routines getchar and putchar
00C6                             ;        printstring
00C6                             ;        printdec
00C6                             ;        printhex
00C6                             ;        crlf
00C6                             ; 
00C6                             ;        Register Assignment:
00C6                             ; 
00C6                             ;        BC is the instruction pointer IP
00C6                             ;        DE is a working register and 2nd on stack NOS
00C6                             ;        HL is a working register and Top of stack TOS
00C6                             ;        SP is data stack pointer
00C6                             ;        IX is used to implement the return stack
00C6                             ;        IY is used as a jump back to NEXT
00C6                             ; 
00C6                             ;        All commands accessed via a byte wide look up table
00C6                             ; 
00C6                             ;        Heap used for command storage (HERE)
00C6                             ; 
00C6                             ;        Primitives are on two consecutive pages using a trampoline jump to the 2nd page.
00C6                             ; 
00C6                             ;        This allows single byte opcodes reducing the dispatch time from
00C6                             ;        64 t states to 33 t states
00C6                             ; 
00C6                             ; 
00C6                             ;        User defined commands and mintVars
00C6                             ; 
00C6                             ;        User Commands  A-Z
00C6                             ;        User mintVars a-z
00C6                             ; 
00C6                             ;        Commands now available:
00C6                             ; 
00C6                             ;        Maths
00C6                             ; 
00C6                             ;        +     ADD
00C6                             ;		 -     SUB
00C6                             ;        *     MUL     (max product 65535)
00C6                             ;        /     DIV     Returns quotient and remainder
00C6                             ;        _     NEG
00C6                             ; 
00C6                             ;        }     Shift Right (2/)
00C6                             ;        {     Shift Left  (2*)
00C6                             ; 
00C6                             ;        Comparison - compare the top two elements on the stack
00C6                             ;        Puts 1 on the stack if condition is true, 0 if false
00C6                             ; 
00C6                             ;        <     LT
00C6                             ;        =     EQ
00C6                             ;        >     GT
00C6                             ; 
00C6                             ;        Logic
00C6                             ; 
00C6                             ;        &     AND
00C6                             ;        |     OR
00C6                             ;        ^     XOR
00C6                             ;        ~     INV
00C6                             ; 
00C6                             ;        Stack
00C6                             ; 
00C6                             ;        "     DUP
00C6                             ;        '     DROP
00C6                             ;        $     SWAP
00C6                             ;		 %     OVER
00C6                             ;        .     DOT     (Print the value of the top of stack as a decimal)
00C6                             ;        ,     COMMA   (Print the value of the top of stack as a hexadecimal)
00C6                             ;		 #     HEX     Accept a hexadecimal number
00C6                             ; 
00C6                             ;        Memory
00C6                             ; 
00C6                             ;        @     FETCH
00C6                             ;        !     STORE
00C6                             ; 
00C6                             ;        User Definitions
00C6                             ; 
00C6                             ;        :     Start a user definition
00C6                             ;        ;     End a user definition
00C6                             ; 
00C6                             ;        \     QUIT    (Print OK and return to monitor)
00C6                             ; 
00C6                             ; 
00C6                             ;        Loops    - execute the code between parenthesis
00C6                             ; 
00C6                             ;        The user variable i is used as the loop counter
00C6                             ;        It is decremented every time the loop is executed
00C6                             ; 
00C6                             ;        10(repeat this code 10 times)
00C6                             ; 
00C6                             ;        0(skip this code)
00C6                             ; 
00C6                             ;        1(execute this code only once)
00C6                             ; 
00C6                             ;        a@ b@ = (_print this if a=b_)
00C6                             ; 
00C6                             ;       1000(i@.)    Print out the value of i from 999 to 0
00C6                             ; 
00C6                             ;       10(a@ 1+ a! a@ .)  Increment a 10 times and print it out
00C6                             ; 
00C6                             ;       User Commands are allocated to uppercase alpha characters A to Z
00C6                             ; 
00C6                             ;       A user command can be defined by starting with a colon and
00C6                             ;       ending with a semicolon
00C6                             ; 
00C6                             ;       Example  :A 123 456 + . ;
00C6                             ; 
00C6                             ;       The A character represents a fixed address for the User routine
00C6                             ;       The interpreter copies all the characters after the A to a text buffer
00C6                             ;       located at address A
00C6                             ;       Each time A is encountered (outside of a colon definition)
00C6                             ;       it will execute the code  located there i.e. 123 456 + .
00C6                             ; 
00C6                             ;       mintVars are associated with lowercase characters a-z
00C6                             ;       Each variable is allocated 2 bytes located on even addresses
00C6                             ;       They run contiguously from $A800 (a) to $A830 (z)
00C6                             ;       They are accessed using the fetch and store commands @ and !
00C6                             ; 
00C6                             ;       Examples:
00C6                             ; 
00C6                             ;       1234 a!     store 1234 in a
00C6                             ; 
00C6                             ;       b@ .        fetch the value from b and print it out
00C6                             ; 
00C6                             ;       a@ b@ + .   fetch values from a and b, add them together and print the sum
00C6                             ; 
00C6                             ;       a@ b!       copy the value in a and store it in b
00C6                             ; 
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                             ;ROMSTART    EQU $0
00C6                             ;RAMSTART    EQU $800
00C6                             ;EXTENDED    EQU 0
00C6                             ;ROMSIZE     EQU $800
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                             ;        .ORG ROMSTART
00C6                             ; 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
00C6                             ;        JP start
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180                MINT:        
0180   31 80 08               LD   SP,DSTACK   
0183   CD 9A 01               CALL   initialize   
0186   CD 70 02               CALL   ENTER   
0189   60 4D 49 4E 54 20 56 31 2E 30 60 5C 4E 00 .CSTR   "`MINT V1.0`\\N"   
0197   C3 D4 01               JP   interpret   
019A                INITIALIZE:      
019A   DD 21 00 09            LD   IX,RSTACK   
019E   FD 21 36 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01A2   21 60 03               LD   HL,iSysConsts   
01A5   11 00 0B               LD   DE,sysConsts   
01A8   01 20 00               LD   BC,16 * 2   
01AB   ED B0                  LDIR      
01AD   21 7C 0B               LD   HL,defs   
01B0   06 1A                  LD   B,26   
01B2                INIT1:       
01B2   36 8D                  LD   (HL),lsb(empty_)   
01B4   23                     INC   HL   
01B5   36 02                  LD   (HL),msb(empty_)   
01B7   23                     INC   HL   
01B8   10 F8                  DJNZ   init1   
01BA   C9                     RET      
01BB                MACRO:       
01BB   ED 43 14 0B            LD   (vTIBPtr),BC   
01BF   21 80 03               LD   HL,ctrlCodes   
01C2   85                     ADD   A,L   
01C3   6F                     LD   L,A   
01C4   5E                     LD   E,(HL)   
01C5   16 02                  LD   D,msb(macros)   
01C7   D5                     PUSH   DE   
01C8   CD 70 02               CALL   ENTER   
01CB   5C 47 00               .CSTR   "\\G"   
01CE   ED 4B 14 0B            LD   BC,(vTIBPtr)   
01D2   18 11                  JR   interpret2   
01D4                INTERPRET:      
01D4   CD 70 02               CALL   ENTER   
01D7   5C 4E 60 3E 20 60 00   .CSTR   "\\N`> `"   
01DE                INTERPRET1:      ; used by tests
01DE   01 00 00               LD   BC,0   ; load BC with offset into TIB
01E1   ED 43 14 0B            LD   (vTIBPtr),BC   
01E5                INTERPRET2:      ; calc nesting (a macro might have changed it)
01E5   1E 00                  LD   E,0   ; initilize nesting value
01E7   C5                     PUSH   BC   ; save offset into TIB,
01E8                             ; BC is also the count of chars in TIB
01E8   21 00 09               LD   HL,TIB   ; HL is start of TIB
01EB   18 06                  JR   interpret4   
01ED                INTERPRET3:      
01ED   7E                     LD   A,(HL)   ; A = char in TIB
01EE   23                     INC   HL   ; inc pointer into TIB
01EF   0B                     DEC   BC   ; dec count of chars in TIB
01F0   CD CD 07               CALL   nesting   ; update nesting value
01F3                INTERPRET4:      
01F3   79                     LD   A,C   ; is count zero?
01F4   B0                     OR   B   
01F5   20 F6                  JR   NZ,interpret3   ; if not loop
01F7   C1                     POP   BC   ; restore offset into TIB
01F8                             ; *******************************************************************
01F8                             ; Wait for a character from the serial input (keyboard)
01F8                             ; and store it in the text buffer. Keep accepting characters,
01F8                             ; increasing the instruction pointer BC - until a newline received.
01F8                             ; *******************************************************************
01F8                WAITCHAR:      
01F8   CD 81 00               CALL   getchar   ; loop around waiting for character
01FB   FE 20                  CP   $20   
01FD   30 0C                  JR   NC,waitchar1   
01FF   FE 00                  CP   $0   ; is it end of string?
0201   28 2B                  JR   Z,waitchar4   
0203   FE 0D                  CP   "\r"   ; carriage return?
0205   28 12                  JR   Z,waitchar3   
0207   16 00                  LD   D,0   
0209   18 B0                  JR   macro   
020B                WAITCHAR1:      
020B   21 00 09               LD   HL,TIB   
020E   09                     ADD   HL,BC   
020F   77                     LD   (HL),A   ; store the character in textbuf
0210   03                     INC   BC   
0211   CD 85 00               CALL   putchar   ; echo character to screen
0214   CD CD 07               CALL   nesting   
0217   18 DF                  JR   waitchar   ; wait for next character
0219                WAITCHAR3:      
0219   21 00 09               LD   HL,TIB   
021C   09                     ADD   HL,BC   
021D   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
021F   23                     INC   HL   
0220   36 0A                  LD   (HL),"\n"   
0222   03                     INC   BC   
0223   03                     INC   BC   
0224   CD EC 05               CALL   crlf   ; echo character to screen
0227   7B                     LD   A,E   ; if zero nesting append and ETX after \r
0228   B7                     OR   A   
0229   20 CD                  JR   NZ,waitchar   
022B   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
022D   03                     INC   BC   
022E                WAITCHAR4:      
022E   ED 43 14 0B            LD   (vTIBPtr),BC   
0232   01 00 09               LD   BC,TIB   ; Instructions stored on heap at address HERE
0235   0B                     DEC   BC   
0236                             ; Drop into the NEXT and dispatch routines
0236                             ; ********************************************************************************
0236                             ; 
0236                             ; Dispatch Routine.
0236                             ; 
0236                             ; Get the next character and form a 1 byte jump address
0236                             ; 
0236                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
0236                             ; jump to the selected function.
0236                             ; 
0236                             ; Individual handler routines will deal with each category:
0236                             ; 
0236                             ; 1. Detect characters A-Z and jump to the User Command handler routine
0236                             ; 
0236                             ; 2. Detect characters a-z and jump to the variable handler routine
0236                             ; 
0236                             ; 3. All other characters are punctuation and cause a jump to the associated
0236                             ; primitive code.
0236                             ; 
0236                             ; Instruction Pointer IP BC is incremented
0236                             ; 
0236                             ; *********************************************************************************
0236                NEXT:        
0236   03                     INC   BC   ; 6t    Increment the IP
0237   0A                     LD   A,(BC)   ; 7t    Get the next character and dispatch
0238                             ; 
0238                DISPATCH:      
0238   FE 00                  CP   0   ;       NULL? exit Mint
023A   CA 66 04               JP   Z,exit_   
023D   FE 03                  CP   $03   ;       ETX? interpret next line
023F   CA D4 01               JP   Z,interpret   
0242   D6 20                  SUB   " "   ; 7t    remove char offset
0244   38 F0                  JR   C,NEXT   ;       ignore char
0246   11 00 03               LD   DE,opcodes   ; 7t    Start address of jump table
0249   5F                     LD   E,A   ; 4t    Index into table
024A   1A                     LD   A,(DE)   ; 7t    get low jump address
024B   26 04                  LD   H,msb(page4)   ; 7t    Load H with the 1st page address
024D   6F                     LD   L,A   ; 4t    and put into L
024E   E9                     JP   (HL)   ; 4t    Jump to routine
024F                RPUSH:       
024F   DD 2B                  DEC   IX   
0251   DD 74 00               LD   (IX+0),H   
0254   DD 2B                  DEC   IX   
0256   DD 75 00               LD   (IX+0),L   
0259   C9                     RET      
025A                RPOP:        
025A   DD 6E 00               LD   L,(IX+0)   
025D   DD 23                  INC   IX   
025F   DD 66 00               LD   H,(IX+0)   
0262   DD 23                  INC   IX   
0264   C9                     RET      
0265                ALT1:        
0265   03                     INC   BC   
0266   0A                     LD   A,(BC)   
0267   21 80 03               LD   HL,altCodes   
026A   85                     ADD   A,L   
026B   6F                     LD   L,A   
026C   6E                     LD   L,(HL)   ; 7t    get low jump address
026D   26 06                  LD   H,msb(page6)   ; Load H with the 5th page address
026F   E9                     JP   (HL)   ; 4t    Jump to routine
0270                ENTER:       
0270   60 69                  LD   HL,BC   
0272   CD 4F 02               CALL   rpush   ; save Instruction Pointer
0275   C1                     POP   BC   
0276   0B                     DEC   BC   
0277   FD E9                  JP   (IY)   ; Execute code from User def
0279                             ; ARRAY compilation routine
0279                COMPNEXT:      
0279   D1                     POP   DE   ; DE = return address
027A   2A 1E 0B               LD   HL,(vHeapPtr)   ; load heap ptr
027D   73                     LD   (HL),E   ; store lsb
027E   3A 46 0B               LD   A,(vByteMode)   
0281   23                     INC   HL   
0282   B7                     OR   A   
0283   20 02                  JR   NZ,compNext1   
0285   72                     LD   (HL),D   
0286   23                     INC   HL   
0287                COMPNEXT1:      
0287   22 1E 0B               LD   (vHeapPtr),HL   ; save heap ptr
028A   C3 36 02               JP   NEXT   
028D                             ; **************************************************************************
028D                             ; Macros must be written in Mint and end with ;
028D                             ; this code must not span pages
028D                             ; **************************************************************************
028D                MACROS:      
028D                EMPTY_:      
028D   3B 00                  .CSTR   ";"   
028F                BACKSP_:      
028F   5C 63 40 30 3D 30 3D 28 31 5F 5C 63 5C 2B 38 5C 45 60 20 60 38 5C 45 29 3B 00 .CSTR   "\\c@0=0=(1_\\c\\+8\\E` `8\\E);"   
02A9                EDIT_:       
02A9   60 3F 60 5C 4B 5C 4E 60 3E 20 60 5C 5E 41 2D 5C 5A 3B 00 .CSTR   "`?`\\K\\N`> `\\^A-\\Z;"   
02BC                LIST_:       
02BC   5C 4E 32 36 28 5C 69 40 5C 5A 5C 63 40 30 3E 28 5C 4E 29 29 5C 4E 60 3E 20 60 3B 00 .CSTR   "\\N26(\\i@\\Z\\c@0>(\\N))\\N`> `;"   
02D8                PRINTSTACK_:      
02D8   60 3D 3E 20 60 5C 50 5C 4E 5C 4E 60 3E 20 60 3B 00 .CSTR   "`=> `\\P\\N\\N`> `;"   
02E9                TOGGLEBASE_:      
02E9   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
02F3                             ; **************************************************************************
02F3                             ; Page 2  Jump Tables
02F3                             ; **************************************************************************
02F3                          ALIGN   $100   
0300                OPCODES:      
0300   80                     DB   lsb(nop_)   ;    SP
0301   95                     DB   lsb(store_)   ;    !
0302   61                     DB   lsb(dup_)   ;    "
0303   77                     DB   lsb(hex_)   ;    #
0304   9C                     DB   lsb(swap_)   ;    $
0305   86                     DB   lsb(over_)   ;    %
0306   04                     DB   lsb(and_)   ;    &
0307   5E                     DB   lsb(drop_)   ;    '
0308   32                     DB   lsb(begin_)   ;    (
0309   E7                     DB   lsb(again_)   ;    )
030A   E9                     DB   lsb(mul_)   ;    *
030B   26                     DB   lsb(add_)   ;    +
030C   7A                     DB   lsb(hexp_)   ;    ,
030D   B4                     DB   lsb(sub_)   ;    -
030E   4A                     DB   lsb(dot_)   ;    .
030F   EB                     DB   lsb(div_)   ;    /
0310   83                     DB   lsb(num_)   ;    0
0311   83                     DB   lsb(num_)   ;    1
0312   83                     DB   lsb(num_)   ;    2
0313   83                     DB   lsb(num_)   ;    3
0314   83                     DB   lsb(num_)   ;    4
0315   83                     DB   lsb(num_)   ;    5
0316   83                     DB   lsb(num_)   ;    6
0317   83                     DB   lsb(num_)   ;    7
0318   83                     DB   lsb(num_)   ;    8
0319   83                     DB   lsb(num_)   ;    9
031A   47                     DB   lsb(def_)   ;    :
031B   8E                     DB   lsb(ret_)   ;    ;
031C   CC                     DB   lsb(lt_)   ;    <
031D   BC                     DB   lsb(eq_)   ;    =
031E   C8                     DB   lsb(gt_)   ;    >
031F   ED                     DB   lsb(getRef_)   ;    ?
0320   70                     DB   lsb(fetch_)   ;    @
0321   35                     DB   lsb(call_)   ;    A
0322   35                     DB   lsb(call_)   ;    B
0323   35                     DB   lsb(call_)   ;    C
0324   35                     DB   lsb(call_)   ;    D
0325   35                     DB   lsb(call_)   ;    E
0326   35                     DB   lsb(call_)   ;    F
0327   35                     DB   lsb(call_)   ;    G
0328   35                     DB   lsb(call_)   ;    H
0329   35                     DB   lsb(call_)   ;    I
032A   35                     DB   lsb(call_)   ;    J
032B   35                     DB   lsb(call_)   ;    K
032C   35                     DB   lsb(call_)   ;    L
032D   35                     DB   lsb(call_)   ;    M
032E   35                     DB   lsb(call_)   ;    N
032F   35                     DB   lsb(call_)   ;    O
0330   35                     DB   lsb(call_)   ;    P
0331   35                     DB   lsb(call_)   ;    Q
0332   35                     DB   lsb(call_)   ;    R
0333   35                     DB   lsb(call_)   ;    S
0334   35                     DB   lsb(call_)   ;    T
0335   35                     DB   lsb(call_)   ;    U
0336   35                     DB   lsb(call_)   ;    V
0337   35                     DB   lsb(call_)   ;    W
0338   35                     DB   lsb(call_)   ;    X
0339   35                     DB   lsb(call_)   ;    Y
033A   35                     DB   lsb(call_)   ;    Z
033B   2C                     DB   lsb(arrDef_)   ;    [
033C   00                     DB   lsb(alt_)   ;    \
033D   2F                     DB   lsb(arrEnd_)   ;    ]
033E   18                     DB   lsb(xor_)   ;    ^
033F   AE                     DB   lsb(neg_)   ;    _
0340   F8                     DB   lsb(str_)   ;    `
0341   DD                     DB   lsb(var_)   ;    a
0342   DD                     DB   lsb(var_)   ;    b
0343   DD                     DB   lsb(var_)   ;    c
0344   DD                     DB   lsb(var_)   ;    d
0345   DD                     DB   lsb(var_)   ;    e
0346   DD                     DB   lsb(var_)   ;    f
0347   DD                     DB   lsb(var_)   ;    g
0348   DD                     DB   lsb(var_)   ;    h
0349   DD                     DB   lsb(var_)   ;    i
034A   DD                     DB   lsb(var_)   ;    j
034B   DD                     DB   lsb(var_)   ;    k
034C   DD                     DB   lsb(var_)   ;    l
034D   DD                     DB   lsb(var_)   ;    m
034E   DD                     DB   lsb(var_)   ;    n
034F   DD                     DB   lsb(var_)   ;    o
0350   DD                     DB   lsb(var_)   ;    p
0351   DD                     DB   lsb(var_)   ;    q
0352   DD                     DB   lsb(var_)   ;    r
0353   DD                     DB   lsb(var_)   ;    s
0354   DD                     DB   lsb(var_)   ;    t
0355   DD                     DB   lsb(var_)   ;    u
0356   DD                     DB   lsb(var_)   ;    v
0357   DD                     DB   lsb(var_)   ;    w
0358   DD                     DB   lsb(var_)   ;    x
0359   DD                     DB   lsb(var_)   ;    y
035A   DD                     DB   lsb(var_)   ;    z
035B   A1                     DB   lsb(shl_)   ;    {
035C   0F                     DB   lsb(or_)   ;    |
035D   A6                     DB   lsb(shr_)   ;    }
035E   21                     DB   lsb(inv_)   ;    ~
035F   80                     DB   lsb(nop_)   ;    backspace
0360                             ; ***********************************************************************
0360                             ; Initial values for user mintVars		
0360                             ; ***********************************************************************		
0360                ISYSCONSTS:      
0360   80 08                  DW   dStack   ; \0 cS0
0362   00 09                  DW   TIB   ; \1 cTIB
0364   7C 0B                  DW   defs   ; \2 cDefs
0366   48 0B                  DW   vars   ; \3 cVars
0368   00 03                  DW   opcodes   ; \4 cOpcodes
036A   8D 02                  DW   macros   ; \5 cMacros
036C   10 0B                  DW   userVars   ; \6 cUserVars
036E   00 00                  DW   0   ; \7
0370                IUSERVARS:      
0370   65 02                  DW   alt1   ; a vAltCodes
0372   00 00                  DW   FALSE   ; b vBase16
0374   00 00                  DW   0   ; c vTIBPtr
0376   00 00                  DW   0   ; d putChar
0378   00 00                  DW   0   ; e enter
037A   00 00                  DW   0   ; f vIFTEMode
037C   00 00                  DW   0   ; g vByteMode
037E   C0 0B                  DW   HEAP   ; h vHeapPtr
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   8D                     DB   lsb(empty_)   ; NUL ^@
0381   8D                     DB   lsb(empty_)   ; SOH ^A
0382   E9                     DB   lsb(toggleBase_)   ; STX ^B
0383   8D                     DB   lsb(empty_)   ; ETX ^C
0384   8D                     DB   lsb(empty_)   ; EOT ^D
0385   A9                     DB   lsb(edit_)   ; ENQ ^E
0386   8D                     DB   lsb(empty_)   ; ACK ^F
0387   8D                     DB   lsb(empty_)   ; BEL ^G
0388   8F                     DB   lsb(backsp_)   ; BS  ^H
0389   8D                     DB   lsb(empty_)   ; TAB ^I
038A   8D                     DB   lsb(empty_)   ; LF  ^J
038B   8D                     DB   lsb(empty_)   ; VT  ^K
038C   BC                     DB   lsb(list_)   ; FF  ^L
038D   8D                     DB   lsb(empty_)   ; CR  ^M
038E   8D                     DB   lsb(empty_)   ; SO  ^N
038F   8D                     DB   lsb(empty_)   ; SI  ^O
0390   D8                     DB   lsb(printStack_)   ; DLE ^P
0391   8D                     DB   lsb(empty_)   ; DC1 ^Q
0392   8D                     DB   lsb(empty_)   ; DC2 ^R
0393   8D                     DB   lsb(empty_)   ; DC3 ^S
0394   8D                     DB   lsb(empty_)   ; DC4 ^T
0395   8D                     DB   lsb(empty_)   ; NAK ^U
0396   8D                     DB   lsb(empty_)   ; SYN ^V
0397   8D                     DB   lsb(empty_)   ; ETB ^W
0398   8D                     DB   lsb(empty_)   ; CAN ^X
0399   8D                     DB   lsb(empty_)   ; EM  ^Y
039A   8D                     DB   lsb(empty_)   ; SUB ^Z
039B   8D                     DB   lsb(empty_)   ; ESC ^[
039C   8D                     DB   lsb(empty_)   ; FS  ^\
039D   8D                     DB   lsb(empty_)   ; GS  ^]
039E   8D                     DB   lsb(empty_)   ; RS  ^^
039F   8D                     DB   lsb(empty_)   ; US  ^_)
03A0   0A                     DB   lsb(aNop_)   ; SP  ^`
03A1   21                     DB   lsb(cStore_)   ;    !
03A2   0A                     DB   lsb(aNop_)   ;    "
03A3   0A                     DB   lsb(aNop_)   ;    #
03A4   0A                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   0A                     DB   lsb(aNop_)   ;    %
03A6   0A                     DB   lsb(aNop_)   ;    &
03A7   0A                     DB   lsb(aNop_)   ;    '
03A8   3F                     DB   lsb(ifte_)   ;    (
03A9   0A                     DB   lsb(aNop_)   ;    )
03AA   0A                     DB   lsb(aNop_)   ;    *
03AB   70                     DB   lsb(incr_)   ;    +  ( adr -- ) decrements variable at address
03AC   0A                     DB   lsb(aNop_)   ;    ,
03AD   0A                     DB   lsb(aNop_)   ;    -
03AE   0A                     DB   lsb(aNop_)   ;    .
03AF   0A                     DB   lsb(aNop_)   ;    /
03B0   99                     DB   lsb(sysConst_)   ;    0  ( -- adr ) start of data stack constant
03B1   99                     DB   lsb(sysConst_)   ;    1  ; returns HERE variable
03B2   99                     DB   lsb(sysConst_)   ;    2  ( -- adr ) TIBPtr variable
03B3   99                     DB   lsb(sysConst_)   ;    3  ( -- adr ) isHex variable
03B4   99                     DB   lsb(sysConst_)   ;    4
03B5   99                     DB   lsb(sysConst_)   ;    5
03B6   99                     DB   lsb(sysConst_)   ;    6
03B7   99                     DB   lsb(sysConst_)   ;    7
03B8   0A                     DB   lsb(aNop_)   ;    8
03B9   0A                     DB   lsb(aNop_)   ;    9
03BA   0A                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   0A                     DB   lsb(aNop_)   ;    ;
03BC   0A                     DB   lsb(aNop_)   ;    <
03BD   0A                     DB   lsb(aNop_)   ;    =
03BE   0A                     DB   lsb(aNop_)   ;    >
03BF   0A                     DB   lsb(aNop_)   ;    ?
03C0   05                     DB   lsb(cFetch_)   ;    @
03C1   0A                     DB   lsb(aNop_)   ;    A
03C2   0A                     DB   lsb(aNop_)   ;    B
03C3   80                     DB   lsb(nop_)   ;    C
03C4   26                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   38                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   0A                     DB   lsb(aNop_)   ;    F
03C7   59                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   0A                     DB   lsb(aNop_)   ;    H
03C9   7B                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   0A                     DB   lsb(aNop_)   ;    J
03CB   90                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   A4                     DB   lsb(least_)   ;    L  ( a b -- c ) return the smallest value
03CD   AC                     DB   lsb(most_)   ;    M  ( a b -- c ) return the largest value
03CE   B8                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   BD                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   EA                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   8D                     DB   lsb(quit_)   ;    Q  quits from Mint REPL
03D2   C6                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   0A                     DB   lsb(aNop_)   ;    S
03D4   0A                     DB   lsb(aNop_)   ;    T
03D5   0A                     DB   lsb(aNop_)   ;    U
03D6   0A                     DB   lsb(aNop_)   ;    V
03D7   D9                     DB   lsb(while_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   51                     DB   lsb(exec_)   ;    X
03D9   0A                     DB   lsb(aNop_)   ;    Y
03DA   E8                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   14                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   0A                     DB   lsb(aNop_)   ;    ]
03DE   0C                     DB   lsb(charCode_)   ;    ^
03DF   CD                     DB   lsb(sign_)   ;    _)  ( n -- b ) returns true if -ve
03E0   0A                     DB   lsb(aNop_)   ;    `
03E1   62                     DB   lsb(userVar_)   ;    a
03E2   62                     DB   lsb(userVar_)   ;    b  ; base16 variable
03E3   62                     DB   lsb(userVar_)   ;    c  ; TIBPtr variable
03E4   62                     DB   lsb(userVar_)   ;    d
03E5   62                     DB   lsb(userVar_)   ;    e
03E6   62                     DB   lsb(userVar_)   ;    f
03E7   62                     DB   lsb(userVar_)   ;    g
03E8   62                     DB   lsb(userVar_)   ;    h  ; heap ptr variable
03E9   6C                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   86                     DB   lsb(j_)   ;    j  ; returns index variable of outer loop
03EB   62                     DB   lsb(userVar_)   ;    k
03EC   62                     DB   lsb(userVar_)   ;    l
03ED   62                     DB   lsb(userVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   62                     DB   lsb(userVar_)   ;    n
03EF   62                     DB   lsb(userVar_)   ;    o
03F0   62                     DB   lsb(userVar_)   ;    p
03F1   62                     DB   lsb(userVar_)   ;    q
03F2   62                     DB   lsb(userVar_)   ;    r
03F3   62                     DB   lsb(userVar_)   ;    s
03F4   62                     DB   lsb(userVar_)   ;    t
03F5   62                     DB   lsb(userVar_)   ;    u
03F6   62                     DB   lsb(userVar_)   ;    v
03F7   62                     DB   lsb(userVar_)   ;    w
03F8   62                     DB   lsb(userVar_)   ;    x
03F9   62                     DB   lsb(userVar_)   ;    y
03FA   62                     DB   lsb(userVar_)   ;    z
03FB   0A                     DB   lsb(aNop_)   ;    {
03FC   0A                     DB   lsb(aNop_)   ;    |
03FD   0A                     DB   lsb(aNop_)   ;    }
03FE   0A                     DB   lsb(aNop_)   ;    ~
03FF   0A                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                ALT_:        
0400   2A 10 0B               LD   HL,(vAlt)   
0403   E9                     JP   (HL)   
0404                AND_:        
0404   D1                     POP   DE   ; 10t Bitwise AND the top 2 elements of the stack
0405   E1                     POP   HL   ; 10t
0406   7B                     LD   A,E   ; 4t
0407   A5                     AND   L   ; 4t
0408   6F                     LD   L,A   ; 4t
0409   7A                     LD   A,D   ; 4t
040A   A4                     AND   H   ; 4t
040B                AND1:        
040B   67                     LD   H,A   ; 4t
040C   E5                     PUSH   HL   ; 11t
040D   FD E9                  JP   (IY)   ; 8t
040F                             ; 63t
040F                OR_:         
040F   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
0410   E1                     POP   HL   
0411   7B                     LD   A,E   
0412   B5                     OR   L   
0413   6F                     LD   L,A   
0414   7A                     LD   A,D   
0415   B4                     OR   H   
0416   18 F3                  JR   and1   
0418                XOR_:        
0418   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0419                XOR1:        
0419   E1                     POP   HL   
041A   7B                     LD   A,E   
041B   AD                     XOR   L   
041C   6F                     LD   L,A   
041D   7A                     LD   A,D   
041E   AC                     XOR   H   
041F   18 EA                  JR   and1   
0421                INV_:        ; Bitwise INVert the top member of the stack
0421   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0424   18 F3                  JR   xor1   
0426                ADD_:        ; Add the top 2 members of the stack
0426   D1                     POP   DE   ; 10t
0427   E1                     POP   HL   ; 10t
0428   19                     ADD   HL,DE   ; 11t
0429   E5                     PUSH   HL   ; 11t
042A   FD E9                  JP   (IY)   ; 8t
042C                             ; 50t
042C   C3 3C 07     ARRDEF_:   JP   arrDef   
042F   C3 4E 07     ARREND_:   JP   arrEnd   
0432   C3 73 05     BEGIN_:   JP   begin   
0435                CALL_:       
0435   60 69                  LD   HL,BC   
0437   CD 4F 02               CALL   rpush   ; save Instruction Pointer
043A   0A                     LD   A,(BC)   
043B   D6 03                  SUB   "A" - ((DEFS - mintVars)/2)   
043D   87                     ADD   A,A   
043E   6F                     LD   L,A   
043F   26 0B                  LD   H,msb(mintVars)   
0441   4E                     LD   C,(HL)   
0442   23                     INC   HL   
0443   46                     LD   B,(HL)   
0444   0B                     DEC   BC   
0445   FD E9                  JP   (IY)   ; Execute code from User def
0447   C3 6A 07     DEF_:     JP   def   
044A                DOT_:        
044A   E1                     POP   HL   
044B   3A 12 0B               LD   A,(vBase16)   
044E   B7                     OR   A   
044F   28 05                  JR   Z,dot1   
0451   CD AE 07               CALL   printhex   
0454   18 03                  JR   dot2   
0456                DOT1:        
0456   CD C8 05               CALL   printdec   
0459                DOT2:        
0459   CD F5 05               CALL   space   
045C   FD E9                  JP   (IY)   
045E                DROP_:       ; Discard the top member of the stack
045E   E1                     POP   HL   
045F   FD E9                  JP   (IY)   
0461                DUP_:        
0461   E1                     POP   HL   ; Duplicate the top member of the stack
0462   E5                     PUSH   HL   
0463   E5                     PUSH   HL   
0464   FD E9                  JP   (IY)   
0466                EXIT_:       
0466   03                     INC   BC   
0467   50 59                  LD   DE,BC   
0469   CD 5A 02               CALL   rpop   ; Restore Instruction pointer
046C   44 4D                  LD   BC,HL   
046E   EB                     EX   DE,HL   
046F   E9                     JP   (HL)   
0470                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0470   E1                     POP   HL   ; 10t
0471                FETCH1:      
0471   5E                     LD   E,(HL)   ; 7t
0472   23                     INC   HL   ; 6t
0473   56                     LD   D,(HL)   ; 7t
0474   D5                     PUSH   DE   ; 11t
0475   FD E9                  JP   (IY)   ; 8t
0477                             ; 49t
0477   C3 91 07     HEX_:     JP   hex   
047A                HEXP_:       ; print hexadecimal
047A   E1                     POP   HL   
047B   CD AE 07               CALL   printhex   
047E   18 D9                  JR   dot2   
0480   C3 36 02     NOP_:     JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0483                NUM_:        
0483   C3 A6 05               JP   number   
0486                OVER_:       
0486   E1                     POP   HL   ; Duplicate 2nd element of the stack
0487   D1                     POP   DE   
0488   D5                     PUSH   DE   
0489   E5                     PUSH   HL   
048A   D5                     PUSH   DE   ; And push it to top of stack
048B   FD E9                  JP   (IY)   
048D   C9           QUIT_:    RET      ; exit interpreter
048E                RET_:        
048E   CD 5A 02               CALL   rpop   ; Restore Instruction pointer
0491   44 4D                  LD   BC,HL   
0493   FD E9                  JP   (IY)   
0495                STORE_:      ; Store the value at the address placed on the top of the stack
0495   E1                     POP   HL   ; 10t
0496   D1                     POP   DE   ; 10t
0497   73                     LD   (HL),E   ; 7t
0498   23                     INC   HL   ; 6t
0499   72                     LD   (HL),D   ; 7t
049A   FD E9                  JP   (IY)   ; 8t
049C                             ; 48t
049C                             ; $ swap                    ; a b -- b a Swap the top 2 elements of the stack
049C                SWAP_:       
049C   E1                     POP   HL   
049D   E3                     EX   (SP),HL   
049E   E5                     PUSH   HL   
049F   FD E9                  JP   (IY)   
04A1                             ;  Left shift { is multply by 2		
04A1                SHL_:        
04A1   E1                     POP   HL   ; Duplicate the top member of the stack
04A2   29                     ADD   HL,HL   
04A3   E5                     PUSH   HL   ; shift left fallthrough into add_
04A4   FD E9                  JP   (IY)   ; 8t
04A6                             ;  Right shift } is a divide by 2		
04A6                             ; 
04A6                SHR_:        
04A6   E1                     POP   HL   ; Get the top member of the stack
04A7   CB 3C                  SRL   H   
04A9   CB 1D                  RR   L   
04AB   E5                     PUSH   HL   
04AC   FD E9                  JP   (IY)   ; 8t
04AE   21 00 00     NEG_:     LD   HL,0   ; NEGate the value on top of stack (2's complement)
04B1   D1                     POP   DE   ; 10t
04B2   18 02                  JR   SUB_2   ; use the SUBtract routine
04B4                SUB_:        ; Subtract the value 2nd on stack from top of stack
04B4   D1                     POP   DE   ; 10t
04B5   E1           SUB_1:    POP   HL   ; 10t  Entry point for INVert
04B6   A7           SUB_2:    AND   A   ;  4t  Entry point for NEGate
04B7   ED 52                  SBC   HL,DE   ; 15t
04B9   E5                     PUSH   HL   ; 11t
04BA   FD E9                  JP   (IY)   ; 8t
04BC                             ; 58t
04BC   E1           EQ_:      POP   HL   
04BD   D1                     POP   DE   
04BE   A7                     AND   A   ; reset the carry flag
04BF   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04C1   28 16                  JR   Z,equal   
04C3   21 00 00               LD   HL,0   
04C6   18 12                  JR   less   ; HL = 1
04C8   D1           GT_:      POP   DE   
04C9   E1                     POP   HL   
04CA   18 02                  JR   cmp_   
04CC   E1           LT_:      POP   HL   
04CD   D1                     POP   DE   
04CE   A7           CMP_:     AND   A   ; reset the carry flag
04CF   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04D1   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04D3   21 00 00               LD   HL,0   
04D6   FA DA 04               JP   M,less   
04D9   2C           EQUAL:    INC   L   ; HL = 1
04DA                LESS:        
04DA   E5                     PUSH   HL   
04DB   FD E9                  JP   (IY)   
04DD                VAR_:        
04DD   0A                     LD   A,(BC)   
04DE   D6 3D                  SUB   "a" - ((VARS - mintVars)/2)   
04E0   87                     ADD   A,A   
04E1   6F                     LD   L,A   
04E2   26 0B                  LD   H,msb(mintVars)   
04E4   E5                     PUSH   HL   
04E5   FD E9                  JP   (IY)   
04E7   18 1E        AGAIN_:   JR   again   
04E9   18 4A        MUL_:     JR   mul   
04EB   18 64        DIV_:     JR   div   
04ED                GETREF_:      
04ED   03                     INC   BC   
04EE   0A                     LD   A,(BC)   
04EF   D6 03                  SUB   "A" - ((DEFS - mintVars)/2)   
04F1   87                     ADD   A,A   
04F2   6F                     LD   L,A   
04F3   26 0B                  LD   H,msb(mintVars)   
04F5   C3 71 04               JP   fetch1   
04F8                             ;*******************************************************************
04F8                             ; Page 5 primitive routines
04F8                             ;*******************************************************************
04F8                             ;falls through
04F8                STR_:        
04F8   03                     INC   BC   
04F9                NEXTCHAR:      
04F9   0A                     LD   A,(BC)   
04FA   03                     INC   BC   
04FB   FE 60                  CP   "`"   ; ` is the string terminator
04FD   28 05                  JR   Z,str2   
04FF   CD 85 00               CALL   putchar   
0502   18 F5                  JR   nextchar   
0504                STR2:        
0504   0B                     DEC   BC   
0505   FD E9                  JP   (IY)   
0507                AGAIN:       ;20
0507   21 44 0B               LD   HL,vIFTEMode   
050A   AF                     XOR   A   
050B   B6                     OR   (HL)   
050C   20 25                  JR   NZ,again2   
050E   DD 5E 00               LD   E,(IX+0)   ; peek loop var
0511   DD 56 01               LD   D,(IX+1)   
0514   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
0517   DD 66 03               LD   H,(IX+3)   
051A   B7                     OR   A   
051B   ED 52                  SBC   HL,DE   
051D   28 0F                  JR   Z,again1   
051F   13                     INC   DE   
0520   DD 73 00               LD   (IX+0),E   ; poke loop var
0523   DD 72 01               LD   (IX+1),D   
0526   DD 4E 04               LD   C,(IX+4)   ; peek loop address
0529   DD 46 05               LD   B,(IX+5)   
052C   FD E9                  JP   (IY)   
052E                AGAIN1:      
052E   11 06 00               LD   DE,6   ; drop loop frame
0531   DD 19                  ADD   IX,DE   
0533                AGAIN2:      
0533   FD E9                  JP   (IY)   
0535                             ; ********************************************************************
0535                             ; 16-bit multiply
0535                MUL:         ; 19
0535   D1                     POP   DE   ; get first value
0536   E1                     POP   HL   
0537   C5                     PUSH   BC   ; Preserve the IP
0538   44                     LD   B,H   ; BC = 2nd value
0539   4D                     LD   C,L   
053A   21 00 00               LD   HL,0   
053D   3E 10                  LD   A,16   
053F                MUL_LOOP_1:      
053F   29                     ADD   HL,HL   
0540   CB 13                  RL   E   
0542   CB 12                  RL   D   
0544   30 04                  JR   NC,$+6   
0546   09                     ADD   HL,BC   
0547   30 01                  JR   NC,$+3   
0549   13                     INC   DE   
054A   3D                     DEC   A   
054B   20 F2                  JR   NZ,Mul_Loop_1   
054D                             ; 
054D   C1                     POP   BC   ; Restore the IP
054E   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
054F                             ; 
054F   FD E9                  JP   (IY)   
0551                             ; ********************************************************************
0551                             ; 16-bit division subroutine.
0551                             ; 
0551                             ; BC: divisor, DE: dividend, HL: remainder
0551                             ; *********************************************************************
0551                             ; This divides DE by BC, storing the result in DE, remainder in HL
0551                             ; *********************************************************************
0551                             ; 1382 cycles
0551                             ; 35 bytes (reduced from 48)
0551                             ; 
0551                DIV:         ; 24
0551   D1                     POP   DE   ; get first value
0552   E1                     POP   HL   ; get 2nd value
0553   C5                     PUSH   BC   ; Preserve the IP
0554   44                     LD   B,H   ; BC = 2nd value
0555   4D                     LD   C,L   
0556                             ; 
0556   21 00 00               LD   hl,0   ; Zero the remainder
0559   3E 10                  LD   a,16   ; Loop counter
055B                DIV_LOOP:      ;shift the bits from BC (numerator) into HL (accumulator)
055B   CB 21                  SLA   c   
055D   CB 10                  RL   b   
055F   ED 6A                  ADC   hl,hl   
0561   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (HL>=DE)
0563   38 03                  JR   c,div_adjust   
0565   0C                     INC   c   
0566   18 01                  JR   div_done   
0568                DIV_ADJUST:      ; remainder is not >= denominator, so we have to add DE back to HL
0568   19                     ADD   hl,de   
0569                DIV_DONE:      
0569   3D                     DEC   a   
056A   20 EF                  JR   nz,div_loop   
056C   50                     LD   D,B   ; Result from BC to DE
056D   59                     LD   E,C   
056E                DIV_END:      
056E   C1                     POP   BC   ; Restore the IP
056F   D5                     PUSH   DE   ; Push Result
0570   E5                     PUSH   HL   ; Push remainder
0571   FD E9                  JP   (IY)   
0573                             ; *************************************
0573                             ; Loop Handling Code
0573                             ; *************************************
0573                             ; 
0573                BEGIN:       ;23                     ; Left parentesis begins a loop
0573   21 44 0B               LD   HL,vIFTEMode   
0576   36 00                  LD   (HL),0   
0578   E1                     POP   HL   
0579   7D                     LD   A,L   ; zero?
057A   B4                     OR   H   
057B   28 1C                  JR   Z,begin1   
057D   2B                     DEC   HL   
057E   11 FA FF               LD   DE,-6   
0581   DD 19                  ADD   IX,DE   
0583   DD 36 00 00            LD   (IX+0),0   ; loop var
0587   DD 36 01 00            LD   (IX+1),0   
058B   DD 75 02               LD   (IX+2),L   ; loop limit
058E   DD 74 03               LD   (IX+3),H   
0591   DD 71 04               LD   (IX+4),C   ; loop address
0594   DD 70 05               LD   (IX+5),B   
0597   FD E9                  JP   (IY)   
0599                BEGIN1:      
0599   1E 01                  LD   E,1   
059B                BEGIN2:      
059B   03                     INC   BC   
059C   0A                     LD   A,(BC)   
059D   CD CD 07               CALL   nesting   
05A0   AF                     XOR   A   
05A1   B3                     OR   E   
05A2   20 F7                  JR   NZ,begin2   
05A4   FD E9                  JP   (IY)   
05A6                             ; ********************************************************************************
05A6                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
05A6                             ; Read the first character.
05A6                             ;			
05A6                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
05A6                             ; and then added into the L register. (HL forms a 16-bit accumulator)
05A6                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
05A6                             ; and then add in the next digit. Repeat this until a non-number character is
05A6                             ; detected. Add in the final digit so that HL contains the converted number.
05A6                             ; Push HL onto the stack and proceed to the dispatch routine.
05A6                             ; ********************************************************************************
05A6                NUMBER:      ; 23
05A6   21 00 00               LD   HL,$0000   ; 10t Clear HL to accept the number
05A9   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
05AA                NUMBER1:      ; corrected KB 24/11/21
05AA   D6 30                  SUB   $30   ; 7t    Form decimal digit
05AC   85                     ADD   A,L   ; 4t    Add into bottom of HL
05AD   6F                     LD   L,A   ; 4t
05AE   3E 00                  LD   A,00   ; 4t    Clear A
05B0   8C                     ADC   A,H   ; Add with carry H-reg
05B1   67                     LD   H,A   ; Put result in H-reg
05B2   03                     INC   BC   ; 6t    Increment IP
05B3   0A                     LD   A,(BC)   ; 7t    and get the next character
05B4   FE 30                  CP   $30   ; 7t    Less than $30
05B6   38 0C                  JR   C,endnum   ; 7/12t Not a number / end of number
05B8   FE 3A                  CP   $3A   ; 7t    Greater or equal to $3A
05BA   30 08                  JR   NC,endnum   ; 7/12t Not a number / end of number
05BC                TIMES10:      ; Multiply digit(s) in HL by 10
05BC   29                     ADD   HL,HL   ; 11t    2X
05BD   5D                     LD   E,L   ;  4t    LD DE,HL
05BE   54                     LD   D,H   ;  4t
05BF   29                     ADD   HL,HL   ; 11t    4X
05C0   29                     ADD   HL,HL   ; 11t    8X
05C1   19                     ADD   HL,DE   ; 11t    2X  + 8X  = 10X
05C2                             ; 52t cycles
05C2   18 E6                  JR   number1   
05C4                ENDNUM:      
05C4   0B                     DEC   BC   
05C5   E5                     PUSH   HL   ; 11t   Put the number on the stack
05C6   FD E9                  JP   (IY)   ; and process the next character
05C8                PRINTDEC:      
05C8                             ;Number in hl to decimal ASCII
05C8                             ;inputs:	hl = number to ASCII
05C8                             ;example: hl=300 outputs "00300"
05C8                             ;destroys: af, de, hl
05C8                DISPHL:      
05C8   11 F0 D8               LD   de,-10000   
05CB   CD E1 05               CALL   Num1   
05CE   11 18 FC               LD   de,-1000   
05D1   CD E1 05               CALL   Num1   
05D4   11 9C FF               LD   de,-100   
05D7   CD E1 05               CALL   Num1   
05DA   1E F6                  LD   e,-10   
05DC   CD E1 05               CALL   Num1   
05DF   1E FF                  LD   e,-1   
05E1                NUM1:        
05E1   3E 2F                  LD   a,"0"-1   
05E3                NUM2:        
05E3   3C                     INC   a   
05E4   19                     ADD   hl,de   
05E5   38 FC                  JR   c,Num2   
05E7   ED 52                  SBC   hl,de   
05E9   C3 85 00               JP   putchar   
05EC                CRLF:        
05EC   3E 0D                  LD   A,"\r"   
05EE   CD 85 00               CALL   putchar   
05F1   3E 0A                  LD   A,"\n"   
05F3   18 06                  JR   writeChar1   
05F5                SPACE:       
05F5   3E 20                  LD   A," "   
05F7   18 02                  JR   writeChar1   
05F9                WRITECHAR:      
05F9   12                     LD   (DE),A   
05FA   13                     INC   DE   
05FB                WRITECHAR1:      
05FB   C3 85 00               JP   putchar   
05FE                             ; **************************************************************************
05FE                             ; Page 6 Alt primitives
05FE                             ; **************************************************************************
05FE                          ALIGN   $100   
0600                PAGE6:       
0600                CARRDEF_:      ; define a byte array
0600   3E 01                  LD   A,TRUE   
0602   C3 3E 07               JP   arrDef1   
0605                CFETCH_:      
0605   E1                     POP   HL   ; 10t
0606   16 00                  LD   D,0   ; 7t
0608   5E                     LD   E,(HL)   ; 7t
0609   D5                     PUSH   DE   ; 11t
060A                ANOP_:       
060A   FD E9                  JP   (IY)   ; 8t
060C                             ; 49t
060C                CHARCODE_:      
060C   03                     INC   BC   
060D   0A                     LD   A,(BC)   
060E   26 00                  LD   H,0   
0610   6F                     LD   L,A   
0611   E5                     PUSH   HL   
0612   FD E9                  JP   (IY)   
0614                COMMENT_:      
0614   03                     INC   BC   ; point to next char
0615   0A                     LD   A,(BC)   
0616   FE 0D                  CP   "\r"   ; terminate at cr
0618   20 FA                  JR   NZ,comment_   
061A   FE 0A                  CP   "\n"   ; terminate at lf
061C   20 F6                  JR   NZ,comment_   
061E   0B                     DEC   BC   
061F   FD E9                  JP   (IY)   
0621                CSTORE_:      
0621   E1                     POP   HL   ; 10t
0622   D1                     POP   DE   ; 10t
0623   73                     LD   (HL),E   ; 7t
0624   FD E9                  JP   (IY)   ; 8t
0626                             ; 48t
0626                DEPTH_:      
0626   21 00 00               LD   HL,0   
0629   39                     ADD   HL,SP   
062A   EB                     EX   DE,HL   
062B   21 80 08               LD   HL,DSTACK   
062E   B7                     OR   A   
062F   ED 52                  SBC   HL,DE   
0631   CB 3C                  SRL   H   
0633   CB 1D                  RR   L   
0635   E5                     PUSH   HL   
0636   FD E9                  JP   (IY)   
0638                EMIT_:       
0638   E1                     POP   HL   
0639   7D                     LD   A,L   
063A   CD 85 00               CALL   putchar   
063D   FD E9                  JP   (IY)   
063F                IFTE_:       
063F   21 44 0B               LD   HL,vIFTEMode   
0642   36 01                  LD   (HL),TRUE   
0644   B7                     OR   A   ; invert condition
0645   ED 62                  SBC   HL,HL   
0647   D1                     POP   DE   
0648   ED 52                  SBC   HL,DE   
064A   23                     INC   HL   
064B   E5                     PUSH   HL   
064C   CA 99 05               JP   Z,begin1   
064F   FD E9                  JP   (IY)   
0651                             ; 
0651                EXEC_:       
0651   CD 56 06               CALL   exec1   
0654   FD E9                  JP   (IY)   
0656                EXEC1:       
0656   E1                     POP   HL   
0657   E3                     EX   (SP),HL   
0658   E9                     JP   (HL)   
0659                GO_:         
0659   60 69                  LD   HL,BC   
065B   CD 4F 02               CALL   rpush   ; save Instruction Pointer
065E   C1                     POP   BC   
065F   0B                     DEC   BC   
0660   FD E9                  JP   (IY)   ; Execute code from User def
0662                USERVAR_:      
0662   0A                     LD   A,(BC)   
0663   D6 59                  SUB   "a" - ((userVars - mintVars) / 2)   
0665   87                     ADD   A,A   
0666   6F                     LD   L,A   
0667   26 0B                  LD   H,msb(mintVars)   
0669   E5                     PUSH   HL   
066A   FD E9                  JP   (IY)   ; Execute code from User def
066C                I_:          
066C   DD E5                  PUSH   IX   
066E   FD E9                  JP   (IY)   
0670                             ; \+    a b -- [b]+a            ; increment variable at b by a
0670                INCR_:       
0670   E1                     POP   HL   
0671   D1                     POP   DE   
0672   7B                     LD   A,E   
0673   86                     ADD   A,(HL)   
0674   77                     LD   (HL),A   
0675   23                     INC   HL   
0676   7A                     LD   A,D   
0677   8E                     ADC   A,(HL)   
0678   77                     LD   (HL),A   
0679   FD E9                  JP   (IY)   
067B                INPORT_:      
067B   E1                     POP   HL   
067C   79                     LD   A,C   
067D   4D                     LD   C,L   
067E   ED 68                  IN   L,(C)   
0680   26 00                  LD   H,0   
0682   4F                     LD   C,A   
0683   E5                     PUSH   HL   
0684   FD E9                  JP   (IY)   
0686                J_:          
0686   DD E5                  PUSH   IX   
0688   E1                     POP   HL   
0689   11 06 00               LD   DE,6   
068C   19                     ADD   HL,DE   
068D   E5                     PUSH   HL   
068E   FD E9                  JP   (IY)   
0690                KEY_:        
0690   CD 81 00               CALL   getchar   
0693   6F                     LD   L,A   
0694   26 00                  LD   H,0   
0696   E5                     PUSH   HL   
0697   FD E9                  JP   (IY)   
0699                SYSCONST_:      
0699   0A                     LD   A,(BC)   
069A   D6 30                  SUB   "0"   ; Calc index
069C   87                     ADD   A,A   
069D   21 00 0B               LD   HL,sysConsts   
06A0   6F                     LD   L,A   
06A1   C3 71 04               JP   fetch1   
06A4                LEAST_:      ; a b -- c
06A4   D1                     POP   DE   
06A5   E1                     POP   HL   
06A6   B7                     OR   A   
06A7   ED 52                  SBC   HL,DE   
06A9   3F                     CCF      
06AA   18 05                  JR   most1   
06AC                MOST_:       ; a b -- c
06AC   D1                     POP   DE   
06AD   E1                     POP   HL   
06AE   B7                     OR   A   
06AF   ED 52                  SBC   HL,DE   
06B1                MOST1:       
06B1   38 02                  JR   C,most2   
06B3   19                     ADD   HL,DE   
06B4   EB                     EX   DE,HL   
06B5                MOST2:       
06B5   D5                     PUSH   DE   
06B6   FD E9                  JP   (IY)   
06B8                NEWLN_:      
06B8   CD EC 05               CALL   crlf   
06BB   FD E9                  JP   (IY)   
06BD                OUTPORT_:      
06BD   E1                     POP   HL   
06BE   59                     LD   E,C   
06BF   4D                     LD   C,L   
06C0   E1                     POP   HL   
06C1   ED 69                  OUT   (C),L   
06C3   4B                     LD   C,E   
06C4   FD E9                  JP   (IY)   
06C6                ROT_:        ; a b c -- b c a
06C6   D1                     POP   DE   ; a b                   de = c
06C7   E1                     POP   HL   ; a                     hl = b
06C8   E3                     EX   (SP),HL   ; b                     hl = a
06C9   D5                     PUSH   DE   ; b c
06CA   E5                     PUSH   HL   ; b c a
06CB   FD E9                  JP   (IY)   
06CD                SIGN_:       
06CD   E1                     POP   HL   
06CE   CB 7C                  BIT   7,H   
06D0   21 00 00               LD   HL,0   
06D3   28 01                  JR   Z,sign2   
06D5   23                     INC   HL   
06D6                SIGN2:       
06D6   E5                     PUSH   HL   
06D7   FD E9                  JP   (IY)   
06D9                WHILE_:      
06D9   E1                     POP   HL   
06DA   7D                     LD   A,L   ; zero?
06DB   B4                     OR   H   
06DC   28 02                  JR   Z,while1   
06DE   FD E9                  JP   (IY)   
06E0                WHILE1:      
06E0   11 06 00               LD   DE,6   ; drop loop frame
06E3   DD 19                  ADD   IX,DE   
06E5   C3 99 05               JP   begin1   ; skip to end of loop
06E8                EDITDEF_:      
06E8   18 1C                  JR   editDef   
06EA                PRINTSTK_:      
06EA                             ; **************************************************************************
06EA                             ; Page 6 primitive routines
06EA                             ; **************************************************************************
06EA                             ; falls through
06EA                PRINTSTK:      
06EA   CD 70 02               CALL   ENTER   
06ED   5C 30 32 2D 5C 44 31 2D 22 5C 5F 30 3D 28 28 22 40 2E 32 2D 29 29 27 DB   "\\02-\\D1-",$22,"\\_0=((",$22,"@.2-))'"   
0704   FD E9                  JP   (IY)   
0706                             ; **************************************************************************
0706                             ; copy definition to text input buffer
0706                             ; update TIBPtr
0706                             ; **************************************************************************
0706                EDITDEF:      ; lookup up def based on number
0706   3E 41                  LD   A,"A"   
0708   D1                     POP   DE   
0709   83                     ADD   A,E   
070A   08                     EX   AF,AF'   
070B   21 7C 0B               LD   HL,defs   
070E   19                     ADD   HL,DE   
070F   19                     ADD   HL,DE   
0710   5E                     LD   E,(HL)   
0711   23                     INC   HL   
0712   56                     LD   D,(HL)   
0713   EB                     EX   DE,HL   
0714   7E                     LD   A,(HL)   
0715   FE 3B                  CP   ";"   
0717   11 00 09               LD   DE,TIB   
071A   28 14                  JR   Z,editDef3   
071C   3E 3A                  LD   A,":"   
071E   CD F9 05               CALL   writeChar   
0721   08                     EX   AF,AF'   
0722   CD F9 05               CALL   writeChar   
0725   18 01                  JR   editDef2   
0727                EDITDEF1:      
0727   23                     INC   HL   
0728                EDITDEF2:      
0728   7E                     LD   A,(HL)   
0729   CD F9 05               CALL   writeChar   
072C   FE 3B                  CP   ";"   
072E   20 F7                  JR   NZ,editDef1   
0730                EDITDEF3:      
0730   21 00 09               LD   HL,TIB   
0733   EB                     EX   DE,HL   
0734   B7                     OR   A   
0735   ED 52                  SBC   HL,DE   
0737   22 14 0B               LD   (vTIBPtr),HL   
073A   FD E9                  JP   (IY)   
073C                             ;*******************************************************************
073C                             ; Page 5 primitive routines continued
073C                             ;*******************************************************************
073C                             ; define a word array
073C                ARRDEF:      
073C   3E 00                  LD   A,FALSE   
073E                ARRDEF1:      
073E   FD 21 79 02            LD   IY,compNEXT   
0742   32 46 0B               LD   (vByteMode),A   
0745   2A 1E 0B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0748   CD 4F 02               CALL   rpush   ; save start of array \[  \]
074B   C3 36 02               JP   NEXT   ; hardwired to NEXT
074E                             ; end a word array
074E                ARREND:      
074E   CD 5A 02               CALL   rpop   ; DE = start of array
0751   E5                     PUSH   HL   
0752   EB                     EX   DE,HL   
0753   2A 1E 0B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0756   B7                     OR   A   
0757   ED 52                  SBC   HL,DE   ; bytes on heap
0759   3A 46 0B               LD   A,(vByteMode)   
075C   B7                     OR   A   
075D   20 04                  JR   NZ,arrEnd2   
075F   CB 3C                  SRL   H   ; BC = m words
0761   CB 1D                  RR   L   
0763                ARREND2:      
0763   E5                     PUSH   HL   
0764   FD 21 36 02            LD   IY,NEXT   
0768   FD E9                  JP   (IY)   ; hardwired to NEXT
076A                             ; **************************************************************************
076A                             ; def is used to create a colon definition
076A                             ; When a colon is detected, the next character (usually uppercase alpha)
076A                             ; is looked up in the vector table to get its associated code field address
076A                             ; This CFA is updated to point to the character after uppercase alpha
076A                             ; The remainder of the characters are then skipped until after a semicolon
076A                             ; is found.
076A                             ; ***************************************************************************
076A                DEF:         ; Create a colon definition
076A   E5                     PUSH   HL   ; Save HL
076B   21 7C 0B               LD   HL,DEFS   ; Start address of jump table
076E   03                     INC   BC   
076F   0A                     LD   A,(BC)   ; Get the next character
0770   03                     INC   BC   
0771   D6 03                  SUB   "A" - ((DEFS - mintVars)/2)   
0773   87                     ADD   A,A   
0774   6F                     LD   L,A   
0775   26 0B                  LD   H,msb(mintVars)   
0777   ED 5B 1E 0B            LD   DE,(vHeapPtr)   ; start of defintion
077B   73                     LD   (HL),E   ; Save low byte of address in CFA
077C   23                     INC   HL   
077D   72                     LD   (HL),D   ; Save high byte of address in CFA+1
077E   E1                     POP   HL   ; Restore HL
077F                NEXTBYTE:      ; Skip to end of definition
077F   0A                     LD   A,(BC)   ; Get the next character
0780   03                     INC   BC   ; Point to next character
0781   12                     LD   (DE),A   
0782   13                     INC   DE   
0783   FE 3B                  CP   ";"   ; Is it a semicolon
0785   CA 8A 07               JP   z,end_def   ; end the definition
0788   18 F5                  JR   nextbyte   ; get the next element
078A                END_DEF:      
078A   ED 53 1E 0B            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
078E   0B                     DEC   BC   
078F   FD E9                  JP   (IY)   
0791                             ; ***************************************************************************
0791                HEX:         
0791   21 00 00               LD   HL,$0000   ; 10t Clear HL to accept the number
0794                HEX1:        
0794   03                     INC   BC   
0795   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
0796   CB 77                  BIT   6,A   ; 7t    is it uppercase alpha?
0798   28 02                  JR   Z,hex2   ; no a decimal
079A   D6 07                  SUB   7   ; sub 7  to make $A - $F
079C                HEX2:        
079C   D6 30                  SUB   $30   ; 7t    Form decimal digit
079E   DA C4 05               JP   C,endnum   
07A1   FE 10                  CP   $0F+1   
07A3   D2 C4 05               JP   NC,endnum   
07A6   29                     ADD   HL,HL   ; 11t    2X ; Multiply digit(s) in HL by 16
07A7   29                     ADD   HL,HL   ; 11t    4X
07A8   29                     ADD   HL,HL   ; 11t    8X
07A9   29                     ADD   HL,HL   ; 11t   16X
07AA   85                     ADD   A,L   ; 4t    Add into bottom of HL
07AB   6F                     LD   L,A   ; 4t
07AC   18 E6                  JR   hex1   
07AE                PRINTHEX:      
07AE                             ; Display HL as a 16-bit number in hex.
07AE   C5                     PUSH   BC   ; preserve the IP
07AF   7C                     LD   A,H   
07B0   CD B9 07               CALL   Print_Hex8   
07B3   7D                     LD   A,L   
07B4   CD B9 07               CALL   Print_Hex8   
07B7   C1                     POP   BC   
07B8   C9                     RET      
07B9                             ; Print an 8-bit HEX number  - shortened KB 25/11/21
07B9                             ; A: Number to print
07B9                             ; 
07B9                PRINT_HEX8:      
07B9   4F                     LD   C,A   
07BA   1F                     RRA      
07BB   1F                     RRA      
07BC   1F                     RRA      
07BD   1F                     RRA      
07BE   CD C2 07               CALL   conv   
07C1   79                     LD   A,C   
07C2                CONV:        
07C2   E6 0F                  AND   0x0F   
07C4   C6 90                  ADD   A,0x90   
07C6   27                     DAA      
07C7   CE 40                  ADC   A,0x40   
07C9   27                     DAA      
07CA   C3 85 00               JP   putchar   
07CD                             ; **************************************************************************
07CD                             ; calculate nesting value
07CD                             ; A is char to be tested,
07CD                             ; E is the nesting value (initially 0)
07CD                             ; E is increased by ( and [
07CD                             ; E is decreased by ) and ]
07CD                             ; E has its bit 7 toggled by `
07CD                             ; limited to 127 levels
07CD                             ; **************************************************************************
07CD                NESTING:      
07CD   FE 60                  CP   "`"   
07CF   20 0A                  JR   NZ,nesting1   
07D1   CB 7B                  BIT   7,E   
07D3   28 03                  JR   Z,nesting1a   
07D5   CB BB                  RES   7,E   
07D7   C9                     RET      
07D8                NESTING1A:      
07D8   CB FB                  SET   7,E   
07DA   C9                     RET      
07DB                NESTING1:      
07DB   CB 7B                  BIT   7,E   
07DD   C0                     RET   NZ   
07DE   FE 3A                  CP   ":"   
07E0   28 08                  JR   Z,nesting2   
07E2   FE 5B                  CP   "["   
07E4   28 04                  JR   Z,nesting2   
07E6   FE 28                  CP   "("   
07E8   20 02                  JR   NZ,nesting3   
07EA                NESTING2:      
07EA   1C                     INC   E   
07EB   C9                     RET      
07EC                NESTING3:      
07EC   FE 3B                  CP   ";"   
07EE   28 07                  JR   Z,nesting4   
07F0   FE 5D                  CP   "]"   
07F2   28 03                  JR   Z,nesting4   
07F4   FE 29                  CP   ")"   
07F6   C0                     RET   NZ   
07F7                NESTING4:      
07F7   1D                     DEC   E   
07F8   C9                     RET      
0800                          .ORG   RAMSTART   
0800                          DS   DSIZE   
0880                STACK:       
0880                DSTACK:      
0880                          DS   RSIZE   
0900                RSTACK:      
0900                TIB:      DS   TIBSIZE   
0A00                BUF:      DS   $80   
0A80   00 00        RST08:    DW   0   ; 
0A82   00 00        RST10:    DW   0   ; 
0A84   00 00        RST18:    DW   0   ; 
0A86   00 00        RST20:    DW   0   ; 
0A88   00 00        RST28:    DW   0   ; 
0A8A   00 00        RST30:    DW   0   ; 
0A8C   00 00        BAUD:     DW   0   ; 
0A8E   00 00        INTVEC:   DW   0   ; 
0A90   00 00        NMIVEC:   DW   0   ; 
0A92   00 00        GETCVEC:   DW   0   ; 
0A94   00 00        PUTCVEC:   DW   0   ; 
0A96   00 00        TBPTR:    DW   0   ; reserved for tests
0A98                          ALIGN   $100   
0B00                MINTVARS:      
0B00                             ; ****************************************************************
0B00                             ; System constants
0B00                             ; ****************************************************************
0B00                SYSCONSTS:      
0B00   00 00        CS0:      DW   0   ; 0
0B02   00 00        CTIB:     DW   0   ; 1
0B04   00 00        CDEFS:    DW   0   ; 2
0B06   00 00        CVARS:    DW   0   ; 3
0B08   00 00        COPCODES:   DW   0   ; 4
0B0A   00 00        CMACROS:   DW   0   ; 5
0B0C   00 00        CUSERVARS:   DW   0   ; 6
0B0E   00 00                  DW   0   ; 7
0B10                             ; ****************************************************************
0B10                             ; USER variables
0B10                             ; ****************************************************************
0B10                USERVARS:      
0B10   00 00        VALT:     DW   0   ; a
0B12   00 00        VBASE16:   DW   0   ; b
0B14   00 00        VTIBPTR:   DW   0   ; c
0B16   00 00                  DW   0   ; d
0B18   00 00                  DW   0   ; e
0B1A   00 00                  DW   0   ; f
0B1C   00 00                  DW   0   ; g
0B1E   00 00        VHEAPPTR:   DW   0   ; h
0B20   00 00                  DW   0   ; i
0B22   00 00                  DW   0   ; j
0B24   00 00                  DW   0   ; k
0B26   00 00                  DW   0   ; l
0B28   00 00                  DW   0   ; m
0B2A   00 00                  DW   0   ; n
0B2C   00 00                  DW   0   ; o
0B2E   00 00                  DW   0   ; p
0B30   00 00                  DW   0   ; q
0B32   00 00                  DW   0   ; r
0B34   00 00                  DW   0   ; s
0B36   00 00                  DW   0   ; t
0B38   00 00                  DW   0   ; u
0B3A   00 00                  DW   0   ; v
0B3C   00 00                  DW   0   ; w
0B3E   00 00                  DW   0   ; x
0B40   00 00                  DW   0   ; y
0B42   00 00                  DW   0   ; z
0B44   00 00        VIFTEMODE:   DW   0   ; 
0B46   00 00        VBYTEMODE:   DW   0   ; 
0B48                             ; ****************************************************************
0B48                             ; VARS Table - holds 26 16-bit user variables
0B48                             ; ****************************************************************
0B48                VARS:     DS   26 * 2   
0B7C                             ; ****************************************************************
0B7C                             ; DEFS Table - holds 26 addresses of user routines
0B7C                             ; ****************************************************************
0B7C                DEFS:     DS   26 * 2   
0BB0                          ALIGN   $40   
0BC0                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 164 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 647 IN IOSerial.asm
                    > USED AT LINE 669 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 646 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 652 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 628 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 640 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 638 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 616 IN IOSerial.asm
                    > USED AT LINE 237 IN MINT.asm
                    > USED AT LINE 1253 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 620 IN IOSerial.asm
                    > USED AT LINE 252 IN MINT.asm
                    > USED AT LINE 883 IN MINT.asm
                    > USED AT LINE 1099 IN MINT.asm
                    > USED AT LINE 1103 IN MINT.asm
                    > USED AT LINE 1115 IN MINT.asm
                    > USED AT LINE 1178 IN MINT.asm
                    > USED AT LINE 1506 IN MINT.asm
RESET:              008B DEFINED AT LINE 626 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 151 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 152 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 153 IN MINT.asm
                    > USED AT LINE 10 IN ram.asm
TRUE:               0001 DEFINED AT LINE 154 IN MINT.asm
                    > USED AT LINE 1127 IN MINT.asm
                    > USED AT LINE 1183 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 155 IN MINT.asm
                    > USED AT LINE 489 IN MINT.asm
                    > USED AT LINE 1388 IN MINT.asm
START:              0180 DEFINED AT LINE 166 IN MINT.asm
                    > USED AT LINE 6
MINT:               0180 DEFINED AT LINE 167 IN MINT.asm
INITIALIZE:         019A DEFINED AT LINE 174 IN MINT.asm
                    > USED AT LINE 169 IN MINT.asm
INIT1:              01B2 DEFINED AT LINE 183 IN MINT.asm
                    > USED AT LINE 188 IN MINT.asm
MACRO:              01BB DEFINED AT LINE 191 IN MINT.asm
                    > USED AT LINE 245 IN MINT.asm
INTERPRET:          01D4 DEFINED AT LINE 204 IN MINT.asm
                    > USED AT LINE 172 IN MINT.asm
                    > USED AT LINE 307 IN MINT.asm
INTERPRET1:         01DE DEFINED AT LINE 208 IN MINT.asm
INTERPRET2:         01E5 DEFINED AT LINE 212 IN MINT.asm
                    > USED AT LINE 202 IN MINT.asm
INTERPRET3:         01ED DEFINED AT LINE 219 IN MINT.asm
                    > USED AT LINE 228 IN MINT.asm
INTERPRET4:         01F3 DEFINED AT LINE 225 IN MINT.asm
                    > USED AT LINE 217 IN MINT.asm
WAITCHAR:           01F8 DEFINED AT LINE 236 IN MINT.asm
                    > USED AT LINE 254 IN MINT.asm
                    > USED AT LINE 267 IN MINT.asm
WAITCHAR1:          020B DEFINED AT LINE 247 IN MINT.asm
                    > USED AT LINE 239 IN MINT.asm
WAITCHAR3:          0219 DEFINED AT LINE 256 IN MINT.asm
                    > USED AT LINE 243 IN MINT.asm
WAITCHAR4:          022E DEFINED AT LINE 271 IN MINT.asm
                    > USED AT LINE 241 IN MINT.asm
NEXT:               0236 DEFINED AT LINE 299 IN MINT.asm
                    > USED AT LINE 176 IN MINT.asm
                    > USED AT LINE 309 IN MINT.asm
                    > USED AT LINE 361 IN MINT.asm
                    > USED AT LINE 758 IN MINT.asm
                    > USED AT LINE 1394 IN MINT.asm
                    > USED AT LINE 1411 IN MINT.asm
DISPATCH:           0238 DEFINED AT LINE 303 IN MINT.asm
RPUSH:              024F DEFINED AT LINE 317 IN MINT.asm
                    > USED AT LINE 343 IN MINT.asm
                    > USED AT LINE 695 IN MINT.asm
                    > USED AT LINE 1203 IN MINT.asm
                    > USED AT LINE 1393 IN MINT.asm
RPOP:               025A DEFINED AT LINE 324 IN MINT.asm
                    > USED AT LINE 737 IN MINT.asm
                    > USED AT LINE 774 IN MINT.asm
                    > USED AT LINE 1398 IN MINT.asm
ALT1:               0265 DEFINED AT LINE 331 IN MINT.asm
                    > USED AT LINE 488 IN MINT.asm
ENTER:              0270 DEFINED AT LINE 341 IN MINT.asm
                    > USED AT LINE 170 IN MINT.asm
                    > USED AT LINE 199 IN MINT.asm
                    > USED AT LINE 205 IN MINT.asm
                    > USED AT LINE 1338 IN MINT.asm
COMPNEXT:           0279 DEFINED AT LINE 349 IN MINT.asm
                    > USED AT LINE 1390 IN MINT.asm
COMPNEXT1:          0287 DEFINED AT LINE 359 IN MINT.asm
                    > USED AT LINE 356 IN MINT.asm
MACROS:             028D DEFINED AT LINE 367 IN MINT.asm
                    > USED AT LINE 483 IN MINT.asm
EMPTY_:             028D DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            028F DEFINED AT LINE 4 IN MINT.asm
EDIT_:              02A9 DEFINED AT LINE 7 IN MINT.asm
LIST_:              02BC DEFINED AT LINE 10 IN MINT.asm
PRINTSTACK_:        02D8 DEFINED AT LINE 13 IN MINT.asm
TOGGLEBASE_:        02E9 DEFINED AT LINE 16 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 376 IN MINT.asm
                    > USED AT LINE 310 IN MINT.asm
                    > USED AT LINE 482 IN MINT.asm
ISYSCONSTS:         0360 DEFINED AT LINE 477 IN MINT.asm
                    > USED AT LINE 177 IN MINT.asm
IUSERVARS:          0370 DEFINED AT LINE 487 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 501 IN MINT.asm
                    > USED AT LINE 193 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 502 IN MINT.asm
                    > USED AT LINE 334 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 637 IN MINT.asm
ALT_:               0400 DEFINED AT LINE 639 IN MINT.asm
AND_:               0404 DEFINED AT LINE 643 IN MINT.asm
AND1:               040B DEFINED AT LINE 651 IN MINT.asm
                    > USED AT LINE 665 IN MINT.asm
                    > USED AT LINE 676 IN MINT.asm
OR_:                040F DEFINED AT LINE 657 IN MINT.asm
XOR_:               0418 DEFINED AT LINE 667 IN MINT.asm
XOR1:               0419 DEFINED AT LINE 669 IN MINT.asm
                    > USED AT LINE 680 IN MINT.asm
INV_:               0421 DEFINED AT LINE 678 IN MINT.asm
ADD_:               0426 DEFINED AT LINE 682 IN MINT.asm
ARRDEF_:            042C DEFINED AT LINE 690 IN MINT.asm
ARREND_:            042F DEFINED AT LINE 691 IN MINT.asm
BEGIN_:             0432 DEFINED AT LINE 692 IN MINT.asm
CALL_:              0435 DEFINED AT LINE 693 IN MINT.asm
DEF_:               0447 DEFINED AT LINE 710 IN MINT.asm
DOT_:               044A DEFINED AT LINE 711 IN MINT.asm
DOT1:               0456 DEFINED AT LINE 718 IN MINT.asm
                    > USED AT LINE 715 IN MINT.asm
DOT2:               0459 DEFINED AT LINE 720 IN MINT.asm
                    > USED AT LINE 717 IN MINT.asm
                    > USED AT LINE 756 IN MINT.asm
DROP_:              045E DEFINED AT LINE 724 IN MINT.asm
DUP_:               0461 DEFINED AT LINE 728 IN MINT.asm
EXIT_:              0466 DEFINED AT LINE 734 IN MINT.asm
                    > USED AT LINE 305 IN MINT.asm
FETCH_:             0470 DEFINED AT LINE 742 IN MINT.asm
FETCH1:             0471 DEFINED AT LINE 744 IN MINT.asm
                    > USED AT LINE 870 IN MINT.asm
                    > USED AT LINE 1265 IN MINT.asm
HEX_:               0477 DEFINED AT LINE 751 IN MINT.asm
HEXP_:              047A DEFINED AT LINE 753 IN MINT.asm
NOP_:               0480 DEFINED AT LINE 758 IN MINT.asm
NUM_:               0483 DEFINED AT LINE 760 IN MINT.asm
OVER_:              0486 DEFINED AT LINE 763 IN MINT.asm
QUIT_:              048D DEFINED AT LINE 771 IN MINT.asm
RET_:               048E DEFINED AT LINE 773 IN MINT.asm
STORE_:             0495 DEFINED AT LINE 778 IN MINT.asm
SWAP_:              049C DEFINED AT LINE 787 IN MINT.asm
SHL_:               04A1 DEFINED AT LINE 794 IN MINT.asm
SHR_:               04A6 DEFINED AT LINE 802 IN MINT.asm
NEG_:               04AE DEFINED AT LINE 809 IN MINT.asm
SUB_:               04B4 DEFINED AT LINE 813 IN MINT.asm
SUB_1:              04B5 DEFINED AT LINE 816 IN MINT.asm
SUB_2:              04B6 DEFINED AT LINE 817 IN MINT.asm
                    > USED AT LINE 811 IN MINT.asm
EQ_:                04BC DEFINED AT LINE 822 IN MINT.asm
GT_:                04C8 DEFINED AT LINE 831 IN MINT.asm
LT_:                04CC DEFINED AT LINE 835 IN MINT.asm
CMP_:               04CE DEFINED AT LINE 837 IN MINT.asm
                    > USED AT LINE 833 IN MINT.asm
EQUAL:              04D9 DEFINED AT LINE 842 IN MINT.asm
                    > USED AT LINE 826 IN MINT.asm
LESS:               04DA DEFINED AT LINE 843 IN MINT.asm
                    > USED AT LINE 828 IN MINT.asm
                    > USED AT LINE 839 IN MINT.asm
                    > USED AT LINE 841 IN MINT.asm
VAR_:               04DD DEFINED AT LINE 847 IN MINT.asm
AGAIN_:             04E7 DEFINED AT LINE 858 IN MINT.asm
MUL_:               04E9 DEFINED AT LINE 859 IN MINT.asm
DIV_:               04EB DEFINED AT LINE 860 IN MINT.asm
GETREF_:            04ED DEFINED AT LINE 861 IN MINT.asm
STR_:               04F8 DEFINED AT LINE 875 IN MINT.asm
NEXTCHAR:           04F9 DEFINED AT LINE 878 IN MINT.asm
                    > USED AT LINE 884 IN MINT.asm
STR2:               0504 DEFINED AT LINE 886 IN MINT.asm
                    > USED AT LINE 882 IN MINT.asm
AGAIN:              0507 DEFINED AT LINE 890 IN MINT.asm
                    > USED AT LINE 858 IN MINT.asm
AGAIN1:             052E DEFINED AT LINE 908 IN MINT.asm
                    > USED AT LINE 901 IN MINT.asm
AGAIN2:             0533 DEFINED AT LINE 911 IN MINT.asm
                    > USED AT LINE 894 IN MINT.asm
MUL:                0535 DEFINED AT LINE 916 IN MINT.asm
                    > USED AT LINE 859 IN MINT.asm
MUL_LOOP_1:         053F DEFINED AT LINE 925 IN MINT.asm
                    > USED AT LINE 934 IN MINT.asm
DIV:                0551 DEFINED AT LINE 954 IN MINT.asm
                    > USED AT LINE 860 IN MINT.asm
DIV_LOOP:           055B DEFINED AT LINE 964 IN MINT.asm
                    > USED AT LINE 979 IN MINT.asm
DIV_ADJUST:         0568 DEFINED AT LINE 974 IN MINT.asm
                    > USED AT LINE 970 IN MINT.asm
DIV_DONE:           0569 DEFINED AT LINE 977 IN MINT.asm
                    > USED AT LINE 972 IN MINT.asm
DIV_END:            056E DEFINED AT LINE 984 IN MINT.asm
BEGIN:              0573 DEFINED AT LINE 996 IN MINT.asm
                    > USED AT LINE 692 IN MINT.asm
BEGIN1:             0599 DEFINED AT LINE 1016 IN MINT.asm
                    > USED AT LINE 1003 IN MINT.asm
                    > USED AT LINE 1190 IN MINT.asm
                    > USED AT LINE 1328 IN MINT.asm
BEGIN2:             059B DEFINED AT LINE 1018 IN MINT.asm
                    > USED AT LINE 1024 IN MINT.asm
NUMBER:             05A6 DEFINED AT LINE 1039 IN MINT.asm
                    > USED AT LINE 761 IN MINT.asm
NUMBER1:            05AA DEFINED AT LINE 1043 IN MINT.asm
                    > USED AT LINE 1068 IN MINT.asm
TIMES10:            05BC DEFINED AT LINE 1059 IN MINT.asm
ENDNUM:             05C4 DEFINED AT LINE 1070 IN MINT.asm
                    > USED AT LINE 1055 IN MINT.asm
                    > USED AT LINE 1057 IN MINT.asm
                    > USED AT LINE 1467 IN MINT.asm
                    > USED AT LINE 1469 IN MINT.asm
PRINTDEC:           05C8 DEFINED AT LINE 1075 IN MINT.asm
                    > USED AT LINE 719 IN MINT.asm
DISPHL:             05C8 DEFINED AT LINE 1082 IN MINT.asm
NUM1:               05E1 DEFINED AT LINE 1092 IN MINT.asm
                    > USED AT LINE 1084 IN MINT.asm
                    > USED AT LINE 1086 IN MINT.asm
                    > USED AT LINE 1088 IN MINT.asm
                    > USED AT LINE 1090 IN MINT.asm
NUM2:               05E3 DEFINED AT LINE 1094 IN MINT.asm
                    > USED AT LINE 1097 IN MINT.asm
CRLF:               05EC DEFINED AT LINE 1101 IN MINT.asm
                    > USED AT LINE 264 IN MINT.asm
                    > USED AT LINE 1289 IN MINT.asm
SPACE:              05F5 DEFINED AT LINE 1107 IN MINT.asm
                    > USED AT LINE 721 IN MINT.asm
WRITECHAR:          05F9 DEFINED AT LINE 1111 IN MINT.asm
                    > USED AT LINE 1363 IN MINT.asm
                    > USED AT LINE 1365 IN MINT.asm
                    > USED AT LINE 1371 IN MINT.asm
WRITECHAR1:         05FB DEFINED AT LINE 1114 IN MINT.asm
                    > USED AT LINE 1105 IN MINT.asm
                    > USED AT LINE 1109 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 1124 IN MINT.asm
CARRDEF_:           0600 DEFINED AT LINE 1126 IN MINT.asm
CFETCH_:            0605 DEFINED AT LINE 1130 IN MINT.asm
ANOP_:              060A DEFINED AT LINE 1135 IN MINT.asm
CHARCODE_:          060C DEFINED AT LINE 1138 IN MINT.asm
COMMENT_:           0614 DEFINED AT LINE 1146 IN MINT.asm
                    > USED AT LINE 1150 IN MINT.asm
                    > USED AT LINE 1152 IN MINT.asm
CSTORE_:            0621 DEFINED AT LINE 1156 IN MINT.asm
DEPTH_:             0626 DEFINED AT LINE 1163 IN MINT.asm
EMIT_:              0638 DEFINED AT LINE 1175 IN MINT.asm
IFTE_:              063F DEFINED AT LINE 1181 IN MINT.asm
EXEC_:              0651 DEFINED AT LINE 1193 IN MINT.asm
EXEC1:              0656 DEFINED AT LINE 1196 IN MINT.asm
                    > USED AT LINE 1194 IN MINT.asm
GO_:                0659 DEFINED AT LINE 1201 IN MINT.asm
USERVAR_:           0662 DEFINED AT LINE 1208 IN MINT.asm
I_:                 066C DEFINED AT LINE 1217 IN MINT.asm
INCR_:              0670 DEFINED AT LINE 1222 IN MINT.asm
INPORT_:            067B DEFINED AT LINE 1234 IN MINT.asm
J_:                 0686 DEFINED AT LINE 1244 IN MINT.asm
KEY_:               0690 DEFINED AT LINE 1252 IN MINT.asm
SYSCONST_:          0699 DEFINED AT LINE 1259 IN MINT.asm
LEAST_:             06A4 DEFINED AT LINE 1267 IN MINT.asm
MOST_:              06AC DEFINED AT LINE 1275 IN MINT.asm
MOST1:              06B1 DEFINED AT LINE 1280 IN MINT.asm
                    > USED AT LINE 1273 IN MINT.asm
MOST2:              06B5 DEFINED AT LINE 1284 IN MINT.asm
                    > USED AT LINE 1281 IN MINT.asm
NEWLN_:             06B8 DEFINED AT LINE 1288 IN MINT.asm
OUTPORT_:           06BD DEFINED AT LINE 1292 IN MINT.asm
ROT_:               06C6 DEFINED AT LINE 1301 IN MINT.asm
SIGN_:              06CD DEFINED AT LINE 1309 IN MINT.asm
SIGN2:              06D6 DEFINED AT LINE 1315 IN MINT.asm
                    > USED AT LINE 1313 IN MINT.asm
WHILE_:             06D9 DEFINED AT LINE 1319 IN MINT.asm
WHILE1:             06E0 DEFINED AT LINE 1325 IN MINT.asm
                    > USED AT LINE 1323 IN MINT.asm
EDITDEF_:           06E8 DEFINED AT LINE 1330 IN MINT.asm
PRINTSTK_:          06EA DEFINED AT LINE 1332 IN MINT.asm
PRINTSTK:           06EA DEFINED AT LINE 1337 IN MINT.asm
EDITDEF:            0706 DEFINED AT LINE 1346 IN MINT.asm
                    > USED AT LINE 1331 IN MINT.asm
EDITDEF1:           0727 DEFINED AT LINE 1367 IN MINT.asm
                    > USED AT LINE 1373 IN MINT.asm
EDITDEF2:           0728 DEFINED AT LINE 1369 IN MINT.asm
                    > USED AT LINE 1366 IN MINT.asm
EDITDEF3:           0730 DEFINED AT LINE 1374 IN MINT.asm
                    > USED AT LINE 1361 IN MINT.asm
ARRDEF:             073C DEFINED AT LINE 1387 IN MINT.asm
                    > USED AT LINE 690 IN MINT.asm
ARRDEF1:            073E DEFINED AT LINE 1389 IN MINT.asm
                    > USED AT LINE 1128 IN MINT.asm
ARREND:             074E DEFINED AT LINE 1397 IN MINT.asm
                    > USED AT LINE 691 IN MINT.asm
ARREND2:            0763 DEFINED AT LINE 1409 IN MINT.asm
                    > USED AT LINE 1406 IN MINT.asm
DEF:                076A DEFINED AT LINE 1423 IN MINT.asm
                    > USED AT LINE 710 IN MINT.asm
NEXTBYTE:           077F DEFINED AT LINE 1440 IN MINT.asm
                    > USED AT LINE 1447 IN MINT.asm
END_DEF:            078A DEFINED AT LINE 1449 IN MINT.asm
                    > USED AT LINE 1446 IN MINT.asm
HEX:                0791 DEFINED AT LINE 1457 IN MINT.asm
                    > USED AT LINE 751 IN MINT.asm
HEX1:               0794 DEFINED AT LINE 1459 IN MINT.asm
                    > USED AT LINE 1476 IN MINT.asm
HEX2:               079C DEFINED AT LINE 1465 IN MINT.asm
                    > USED AT LINE 1463 IN MINT.asm
PRINTHEX:           07AE DEFINED AT LINE 1478 IN MINT.asm
                    > USED AT LINE 716 IN MINT.asm
                    > USED AT LINE 755 IN MINT.asm
PRINT_HEX8:         07B9 DEFINED AT LINE 1491 IN MINT.asm
                    > USED AT LINE 1482 IN MINT.asm
                    > USED AT LINE 1484 IN MINT.asm
CONV:               07C2 DEFINED AT LINE 1500 IN MINT.asm
                    > USED AT LINE 1497 IN MINT.asm
NESTING:            07CD DEFINED AT LINE 1518 IN MINT.asm
                    > USED AT LINE 223 IN MINT.asm
                    > USED AT LINE 253 IN MINT.asm
                    > USED AT LINE 1021 IN MINT.asm
NESTING1A:          07D8 DEFINED AT LINE 1525 IN MINT.asm
                    > USED AT LINE 1522 IN MINT.asm
NESTING1:           07DB DEFINED AT LINE 1528 IN MINT.asm
                    > USED AT LINE 1520 IN MINT.asm
NESTING2:           07EA DEFINED AT LINE 1537 IN MINT.asm
                    > USED AT LINE 1532 IN MINT.asm
                    > USED AT LINE 1534 IN MINT.asm
NESTING3:           07EC DEFINED AT LINE 1540 IN MINT.asm
                    > USED AT LINE 1536 IN MINT.asm
NESTING4:           07F7 DEFINED AT LINE 1547 IN MINT.asm
                    > USED AT LINE 1542 IN MINT.asm
                    > USED AT LINE 1544 IN MINT.asm
STACK:              0880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 627 IN IOSerial.asm
DSTACK:             0880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 168 IN MINT.asm
                    > USED AT LINE 478 IN MINT.asm
                    > USED AT LINE 1167 IN MINT.asm
RSTACK:             0900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 175 IN MINT.asm
TIB:                0900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 216 IN MINT.asm
                    > USED AT LINE 248 IN MINT.asm
                    > USED AT LINE 257 IN MINT.asm
                    > USED AT LINE 273 IN MINT.asm
                    > USED AT LINE 479 IN MINT.asm
                    > USED AT LINE 1360 IN MINT.asm
                    > USED AT LINE 1375 IN MINT.asm
BUF:                0A00 DEFINED AT LINE 11 IN ram.asm
RST08:              0A80 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 629 IN IOSerial.asm
RST10:              0A82 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 630 IN IOSerial.asm
RST18:              0A84 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 631 IN IOSerial.asm
RST20:              0A86 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 632 IN IOSerial.asm
RST28:              0A88 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 633 IN IOSerial.asm
RST30:              0A8A DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 634 IN IOSerial.asm
BAUD:               0A8C DEFINED AT LINE 19 IN ram.asm
INTVEC:             0A8E DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 635 IN IOSerial.asm
NMIVEC:             0A90 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 636 IN IOSerial.asm
GETCVEC:            0A92 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 617 IN IOSerial.asm
                    > USED AT LINE 639 IN IOSerial.asm
PUTCVEC:            0A94 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 622 IN IOSerial.asm
                    > USED AT LINE 641 IN IOSerial.asm
TBPTR:              0A96 DEFINED AT LINE 24 IN ram.asm
MINTVARS:           0B00 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 698 IN MINT.asm
                    > USED AT LINE 850 IN MINT.asm
                    > USED AT LINE 865 IN MINT.asm
                    > USED AT LINE 1210 IN MINT.asm
                    > USED AT LINE 1430 IN MINT.asm
SYSCONSTS:          0B00 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 178 IN MINT.asm
                    > USED AT LINE 1263 IN MINT.asm
CS0:                0B00 DEFINED AT LINE 33 IN ram.asm
CTIB:               0B02 DEFINED AT LINE 34 IN ram.asm
CDEFS:              0B04 DEFINED AT LINE 35 IN ram.asm
CVARS:              0B06 DEFINED AT LINE 36 IN ram.asm
COPCODES:           0B08 DEFINED AT LINE 37 IN ram.asm
CMACROS:            0B0A DEFINED AT LINE 38 IN ram.asm
CUSERVARS:          0B0C DEFINED AT LINE 39 IN ram.asm
USERVARS:           0B10 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 484 IN MINT.asm
                    > USED AT LINE 1210 IN MINT.asm
VALT:               0B10 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 640 IN MINT.asm
VBASE16:            0B12 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 713 IN MINT.asm
VTIBPTR:            0B14 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 192 IN MINT.asm
                    > USED AT LINE 201 IN MINT.asm
                    > USED AT LINE 210 IN MINT.asm
                    > USED AT LINE 272 IN MINT.asm
                    > USED AT LINE 1379 IN MINT.asm
VHEAPPTR:           0B1E DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 351 IN MINT.asm
                    > USED AT LINE 360 IN MINT.asm
                    > USED AT LINE 1392 IN MINT.asm
                    > USED AT LINE 1401 IN MINT.asm
                    > USED AT LINE 1435 IN MINT.asm
                    > USED AT LINE 1450 IN MINT.asm
VIFTEMODE:          0B44 DEFINED AT LINE 74 IN ram.asm
                    > USED AT LINE 891 IN MINT.asm
                    > USED AT LINE 997 IN MINT.asm
                    > USED AT LINE 1182 IN MINT.asm
VBYTEMODE:          0B46 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 353 IN MINT.asm
                    > USED AT LINE 1391 IN MINT.asm
                    > USED AT LINE 1404 IN MINT.asm
VARS:               0B48 DEFINED AT LINE 80 IN ram.asm
                    > USED AT LINE 481 IN MINT.asm
                    > USED AT LINE 850 IN MINT.asm
DEFS:               0B7C DEFINED AT LINE 85 IN ram.asm
                    > USED AT LINE 181 IN MINT.asm
                    > USED AT LINE 480 IN MINT.asm
                    > USED AT LINE 698 IN MINT.asm
                    > USED AT LINE 865 IN MINT.asm
                    > USED AT LINE 1351 IN MINT.asm
                    > USED AT LINE 1425 IN MINT.asm
                    > USED AT LINE 1430 IN MINT.asm
HEAP:               0BC0 DEFINED AT LINE 88 IN ram.asm
                    > USED AT LINE 495 IN MINT.asm
