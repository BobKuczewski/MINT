0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 06 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 08 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 0A 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 0C 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 0E 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 10 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 14 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 16 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 18 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 1A 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 06 0A               LD   (RST08),HL   
0094   22 08 0A               LD   (RST10),HL   
0097   22 0A 0A               LD   (RST18),HL   
009A   22 0C 0A               LD   (RST20),HL   
009D   22 0E 0A               LD   (RST28),HL   
00A0   22 10 0A               LD   (RST30),HL   
00A3   22 14 0A               LD   (INTVEC),HL   
00A6   22 16 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 18 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 1A 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 1D 02               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                UNLIMITED:   EQU   -1   
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                BSLASH:   EQU   $5c   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 db len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 db (len | $80)
00C6                 db data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 db 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put mint code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mint and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                REEDIT_:      
0180   5C 7A 40 5C 4C 3B      DB   "\\z@\\L;"   ; remembers last line edited
0186                EDIT_:       
0186   60 3F 60 5C 4B 5C 50 5C 4C 3B 00 .CSTR   "`?`\\K\\P\\L;"   
0191                LIST_:       
0191   5C 4E 32 36 28 5C 69 40 36 35 2B 5C 4C 5C 74 40 30 3E 28 5C 4E 29 29 5C 50 3B 00 .CSTR   "\\N26(\\i@65+\\L\\t@0>(\\N))\\P;"   
01AC                PRINTSTACK_:      
01AC   60 3D 3E 20 60 5C 73 40 32 2D 20 5C 44 31 2D 28 22 40 2C 32 2D 29 27 5C 4E 5C 50 3B 00 .CSTR   "`=> `\\s@2- \\D1-(",$22,"@,2-)'\\N\\P;"   
01C9                IOPCODES:      
01C9                          ;*Macro unroll:  LITDAT 15
01C9   0F                     DB   15   
01CA   80                     DB   lsb(bang_)   ;   !
01CB   47                     DB   lsb(dquote_)   ;   "
01CC   F2                     DB   lsb(hash_)   ;   #
01CD   8D                     DB   lsb(dollar_)   ;   $
01CE   5E                     DB   lsb(percent_)   ;   %
01CF   00                     DB   lsb(amper_)   ;   &
01D0   44                     DB   lsb(quote_)   ;   '
01D1   E6                     DB   lsb(lparen_)   ;   (
01D2   E9                     DB   lsb(rparen_)   ;   )
01D3   F4                     DB   lsb(star_)   ;   *
01D4   22                     DB   lsb(plus_)   ;   +
01D5   3E                     DB   lsb(comma_)   ;    ,
01D6   92                     DB   lsb(minus_)   ;   -
01D7   33                     DB   lsb(dot_)   ;   .
01D8   F6                     DB   lsb(slash_)   ;   /	
01D9                          ;*Macro unroll:  REPDAT 10, lsb(num_)	; 10 x repeat lsb of add to the num routine
01D9   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
01DA   E3                     DB   lsb(num_)   
01DB                          ;*Macro unroll:  LITDAT 7
01DB   07                     DB   7   
01DC   EF                     DB   lsb(colon_)   ;    :
01DD   65                     DB   lsb(semi_)   ;    ;
01DE   B6                     DB   lsb(lt_)   ;    <
01DF   A7                     DB   lsb(eq_)   ;    =
01E0   B2                     DB   lsb(gt_)   ;    >
01E1   E0                     DB   lsb(question_)   ;    ?
01E2   4C                     DB   lsb(at_)   ;    @
01E3                          ;*Macro unroll:  REPDAT 26, lsb(call_)	; call a command A, B ....Z
01E3   9A                     DB   (26 | $80)   ; call a command A, B ....Z
01E4   29                     DB   lsb(call_)   
01E5                          ;*Macro unroll:  LITDAT 6
01E5   06                     DB   6   
01E6   D7                     DB   lsb(lbrack_)   ;    [
01E7   5B                     DB   lsb(bslash_)   ;    \
01E8   EC                     DB   lsb(rbrack_)   ;    ]
01E9   14                     DB   lsb(caret_)   ;    ^
01EA   5B                     DB   lsb(underscore_)   ;    _
01EB   C8                     DB   lsb(grave_)   ;    `   ; for printing `hello`
01EC                          ;*Macro unroll:  REPDAT 26, lsb(var_)	; a b c .....z
01EC   9A                     DB   (26 | $80)   ; a b c .....z
01ED   C1                     DB   lsb(var_)   
01EE                          ;*Macro unroll:  LITDAT 4
01EE   04                     DB   4   
01EF   73                     DB   lsb(lbrace_)   ;    {
01F0   0B                     DB   lsb(pipe_)   ;    |
01F1   78                     DB   lsb(rbrace_)   ;    }
01F2   6C                     DB   lsb(tilde_)   ;    ~ ( a b c -- b c a ) rotate
01F3                IALTCODES:      
01F3                          ;*Macro unroll:  LITDAT 26
01F3   1A                     DB   26   
01F4   06                     DB   lsb(aNop_)   ;A
01F5   08                     DB   lsb(bmode_)   ;B      toggle byte mode
01F6   2E                     DB   lsb(printChar_)   ;C      print a char
01F7   20                     DB   lsb(depth_)   ;D      depth of stack
01F8   42                     DB   lsb(else_)   ;E      else condition
01F9   48                     DB   lsb(false_)   ;F      false condition
01FA   53                     DB   lsb(go_)   ;G      go execute mint code
01FB   06                     DB   lsb(aNop_)   ;H
01FC   71                     DB   lsb(inPort_)   ;I      input from port
01FD   06                     DB   lsb(aNop_)   ;J
01FE   68                     DB   lsb(key_)   ;K      read a char from input
01FF   3D                     DB   lsb(editDef_)   ;L      edit line
0200   06                     DB   lsb(aNop_)   ;M
0201   7C                     DB   lsb(newln_)   ;N      prints a newline to output
0202   81                     DB   lsb(outPort_)   ;O      output to port
0203   4E                     DB   lsb(prompt_)   ;P      print MINT prompt
0204   06                     DB   lsb(aNop_)   ;Q
0205   06                     DB   lsb(aNop_)   ;R
0206   00                     DB   lsb(arrSize_)   ;S      array size
0207   8A                     DB   lsb(true_)   ;T      true condition
0208   90                     DB   lsb(unlimited_)   ;U      unlimited endless loops
0209   06                     DB   lsb(aNop_)   ;V
020A   10                     DB   lsb(while_)   ;W      conditional break from loop
020B   35                     DB   lsb(exec_)   ;X      execute machine code
020C   06                     DB   lsb(aNop_)   ;Y
020D   06                     DB   lsb(aNop_)   ;Z
020E                          ;*Macro unroll:  ENDDAT
020E   00                     DB   0   
020F                BACKSPACE:      
020F   79                     LD   a,c   
0210   B0                     OR   b   
0211   28 27                  JR   z,interpret2   
0213   0B                     DEC   bc   
0214   CD B1 03               CALL   printStr   
0217   08 20 08 00            .CSTR   "\b \b"   
021B   18 1D                  JR   interpret2   
021D                START:       
021D   31 00 0A               LD   SP,DSTACK   ; start of MINT
0220   CD E3 02               CALL   init   ; setups
0223   CD B1 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0226   4D 49 4E 54 31 2E 33 0D 0A 00 .CSTR   "MINT1.3\r\n"   
0230                INTERPRET:      
0230   CD A1 03               CALL   prompt   
0233   01 00 00               LD   BC,0   ; load BC with offset into TIB, decide char into tib or execute or control
0236   ED 43 14 0C            LD   (vTIBPtr),BC   
023A                INTERPRET2:      ; calc nesting (a macro might have changed it)
023A   1E 00                  LD   E,0   ; initilize nesting value
023C   C5                     PUSH   BC   ; save offset into TIB,
023D                             ; BC is also the count of chars in TIB
023D   21 00 08               LD   hl,TIB   ; hl is start of TIB
0240   18 06                  JR   interpret4   
0242                INTERPRET3:      
0242   7E                     LD   A,(hl)   ; A = char in TIB
0243   23                     INC   hl   ; inc pointer into TIB
0244   0B                     DEC   BC   ; dec count of chars in TIB
0245   CD 75 03               CALL   nesting   ; update nesting value
0248                INTERPRET4:      
0248   79                     LD   A,C   ; is count zero?
0249   B0                     OR   B   
024A   20 F6                  JR   NZ,interpret3   ; if not loop
024C   C1                     POP   BC   ; restore offset into TIB
024D                             ; *******************************************************************
024D                             ; Wait for a character from the serial input (keyboard)
024D                             ; and store it in the text buffer. Keep accepting characters,
024D                             ; increasing the instruction pointer BC - until a newline received.
024D                             ; *******************************************************************
024D                WAITCHAR:      
024D   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0250   FE 20                  CP   $20   ; compare to space
0252   30 39                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
0254   FE 00                  CP   $0   ; is it end of string? null end of string
0256   28 59                  JR   Z,waitchar4   
0258   FE 0D                  CP   "\r"   ; carriage return? ascii 13
025A   28 3F                  JR   Z,waitchar3   ; if anything else its macro/control
025C   FE 08                  CP   CTRL_H   
025E   28 AF                  JR   z,backSpace   
0260   16 01                  LD   d,msb(macros)   
0262   FE 05                  CP   CTRL_E   
0264   1E 86                  LD   e,lsb(edit_)   
0266   28 14                  JR   z,macro   
0268   FE 0A                  CP   CTRL_J   
026A   1E 80                  LD   e,lsb(reedit_)   
026C   28 0E                  JR   z,macro   
026E   FE 0C                  CP   CTRL_L   
0270   1E 91                  LD   e,lsb(list_)   
0272   28 08                  JR   z,macro   
0274   FE 10                  CP   CTRL_P   
0276   1E AC                  LD   e,lsb(printStack_)   
0278   28 02                  JR   z,macro   
027A   18 BE                  JR   interpret2   
027C                MACRO:       ;=25
027C   ED 43 14 0C            LD   (vTIBPtr),BC   
0280   D5                     PUSH   de   
0281   CD DC 03               CALL   ENTER   ;mint go operation and jump to it
0284   5C 47 00               .CSTR   "\\G"   
0287   ED 4B 14 0C            LD   BC,(vTIBPtr)   
028B   18 AD                  JR   interpret2   
028D                WAITCHAR1:      
028D   21 00 08               LD   hl,TIB   
0290   09                     ADD   hl,BC   
0291   77                     LD   (hl),A   ; store the character in textbuf
0292   03                     INC   BC   
0293   CD 85 00               CALL   putchar   ; echo character to screen
0296   CD 75 03               CALL   nesting   
0299   18 B2                  JR   waitchar   ; wait for next character
029B                WAITCHAR3:      
029B   21 00 08               LD   hl,TIB   
029E   09                     ADD   hl,BC   
029F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02A1   23                     INC   hl   
02A2   36 0A                  LD   (hl),"\n"   
02A4   23                     INC   hl   ; ????
02A5   03                     INC   BC   
02A6   03                     INC   BC   
02A7   CD AA 03               CALL   crlf   ; echo character to screen
02AA   7B                     LD   A,E   ; if zero nesting append and ETX after \r
02AB   B7                     OR   A   
02AC   20 9F                  JR   NZ,waitchar   
02AE   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02B0   03                     INC   BC   
02B1                WAITCHAR4:      
02B1   ED 43 14 0C            LD   (vTIBPtr),BC   
02B5   01 00 08               LD   BC,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02B8   0B                     DEC   BC   
02B9                             ; ********************************************************************************
02B9                             ; 
02B9                             ; Dispatch Routine.
02B9                             ; 
02B9                             ; Get the next character and form a 1 byte jump address
02B9                             ; 
02B9                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
02B9                             ; jump to the selected function.
02B9                             ; 
02B9                             ; Individual handler routines will deal with each category:
02B9                             ; 
02B9                             ; 1. Detect characters A-Z and jump to the User Command handler routine
02B9                             ; 
02B9                             ; 2. Detect characters a-z and jump to the variable handler routine
02B9                             ; 
02B9                             ; 3. All other characters are punctuation and cause a jump to the associated
02B9                             ; primitive code.
02B9                             ; 
02B9                             ; Instruction Pointer IP BC is incremented
02B9                             ; 
02B9                             ; *********************************************************************************
02B9                NEXT:        ; 
02B9   03                     INC   BC   ;       Increment the IP
02BA   0A                     LD   A,(BC)   ;       Get the next character and dispatch
02BB   B7                     OR   a   ; is it NUL?
02BC   28 0F                  JR   z,exit   
02BE   FE 03                  CP   CTRL_C   
02C0   28 15                  JR   z,etx   
02C2   D6 21                  SUB   "!"   
02C4   38 F3                  JR   c,NEXT   
02C6   6F                     LD   L,A   ;       Index into table
02C7   26 0B                  LD   H,msb(opcodes)   ;       Start address of jump table
02C9   6E                     LD   L,(hl)   ;       get low jump address
02CA   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
02CC   E9                     JP   (hl)   ;       Jump to routine
02CD                EXIT:        
02CD   03                     INC   BC   ; store offests into a table of bytes, smaller
02CE   50 59                  LD   de,BC   
02D0   CD CC 03               CALL   rpop   ; Restore Instruction pointer
02D3   44 4D                  LD   BC,hl   
02D5   EB                     EX   de,hl   
02D6   E9                     JP   (hl)   
02D7                ETX:         ;=12
02D7   21 00 F6               LD   hl,-DSTACK   ; check if stack pointer is underwater
02DA   39                     ADD   hl,SP   
02DB   30 03                  JR   NC,etx1   
02DD   31 00 0A               LD   SP,DSTACK   
02E0                ETX1:        
02E0   C3 30 02               JP   interpret   
02E3                INIT:        ;=68
02E3   DD 21 80 09            LD   IX,RSTACK   
02E7   FD 21 B9 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
02EB   21 00 0C               LD   hl,altVars   ; init altVars to 0
02EE   06 34                  LD   b,26 * 2   
02F0                INIT1:       
02F0   36 00                  LD   (hl),0   
02F2   23                     INC   hl   
02F3   10 FB                  DJNZ   init1   
02F5   21 00 0A               LD   hl,dStack   
02F8   22 24 0C               LD   (vStkStart),hl   
02FB   21 41 00               LD   hl,65   
02FE   22 32 0C               LD   (vLastDef),hl   
0301   21 9C 0C               LD   hl,HEAP   
0304   22 0E 0C               LD   (vHeapPtr),hl   
0307   21 34 0C               LD   hl,VARS   ; init namespaces to 0 using LDIR
030A   54 5D                  LD   de,hl   
030C   13                     INC   de   
030D   36 00                  LD   (hl),0   
030F   01 68 00               LD   BC,VARS_SIZE   
0312   ED B0                  LDIR      
0314                INITOPS:      
0314   21 C9 01               LD   hl,iOpcodes   
0317   11 00 0B               LD   de,opcodes   
031A   01 78 00               LD   BC,$80-32-1-1+26   
031D                INITOPS1:      
031D   7E                     LD   A,(hl)   
031E   23                     INC   hl   
031F   CB 27                  SLA   A   
0321   C8                     RET   Z   
0322   38 09                  JR   C,initOps2   
0324   CB 3F                  SRL   A   
0326   4F                     LD   C,A   
0327   06 00                  LD   B,0   
0329   ED B0                  LDIR      
032B   18 F0                  JR   initOps1   
032D                INITOPS2:      
032D   CB 3F                  SRL   A   
032F   47                     LD   B,A   
0330   7E                     LD   A,(hl)   
0331   23                     INC   hl   
0332                INITOPS2A:      
0332   12                     LD   (de),A   
0333   13                     INC   de   
0334   10 FC                  DJNZ   initOps2a   
0336   18 E5                  JR   initOps1   
0338                LOOKUPREF:      
0338   16 00                  LD   D,0   
033A                LOOKUPREF0:      
033A   FE 61                  CP   "a"   
033C   30 06                  JR   NC,lookupRef2   
033E                LOOKUPREF1:      
033E   D6 41                  SUB   "A"   
0340   1E 00                  LD   E,0   
0342   18 04                  JR   lookupRef3   
0344                LOOKUPREF2:      
0344   D6 61                  SUB   "a"   
0346   1E 34                  LD   E,26*2   
0348                LOOKUPREF3:      
0348   87                     ADD   A,A   
0349   83                     ADD   A,E   
034A   21 34 0C               LD   hl,VARS   
034D   85                     ADD   A,L   
034E   6F                     LD   L,A   
034F   3E 00                  LD   A,0   
0351   8C                     ADC   A,H   
0352   67                     LD   H,A   
0353   AF                     XOR   A   
0354   B3                     OR   E   ; sets Z flag if A-Z
0355   C9                     RET      
0356                PRINTHEX:      ;=31
0356                             ; Display hl as a 16-bit number in hex.
0356   C5                     PUSH   BC   ; preserve the IP
0357   7C                     LD   A,H   
0358   CD 61 03               CALL   printhex2   
035B   7D                     LD   A,L   
035C   CD 61 03               CALL   printhex2   
035F   C1                     POP   BC   
0360   C9                     RET      
0361                PRINTHEX2:      
0361   4F                     LD   C,A   
0362   1F                     RRA      
0363   1F                     RRA      
0364   1F                     RRA      
0365   1F                     RRA      
0366   CD 6A 03               CALL   printhex3   
0369   79                     LD   A,C   
036A                PRINTHEX3:      
036A   E6 0F                  AND   0x0F   
036C   C6 90                  ADD   A,0x90   
036E   27                     DAA      
036F   CE 40                  ADC   A,0x40   
0371   27                     DAA      
0372   C3 85 00               JP   putchar   
0375                             ; **************************************************************************
0375                             ; calculate nesting value
0375                             ; A is char to be tested,
0375                             ; E is the nesting value (initially 0)
0375                             ; E is increased by ( and [
0375                             ; E is decreased by ) and ]
0375                             ; E has its bit 7 toggled by `
0375                             ; limited to 127 levels
0375                             ; **************************************************************************
0375                NESTING:      ;=44
0375   FE 60                  CP   "`"   
0377   20 0A                  JR   NZ,nesting1   
0379   CB 7B                  BIT   7,E   
037B   28 03                  JR   Z,nesting1a   
037D   CB BB                  RES   7,E   
037F   C9                     RET      
0380                NESTING1A:      
0380   CB FB                  SET   7,E   
0382   C9                     RET      
0383                NESTING1:      
0383   CB 7B                  BIT   7,E   
0385   C0                     RET   NZ   
0386   FE 3A                  CP   ":"   
0388   28 08                  JR   Z,nesting2   
038A   FE 5B                  CP   "["   
038C   28 04                  JR   Z,nesting2   
038E   FE 28                  CP   "("   
0390   20 02                  JR   NZ,nesting3   
0392                NESTING2:      
0392   1C                     INC   E   
0393   C9                     RET      
0394                NESTING3:      
0394   FE 3B                  CP   ";"   
0396   28 07                  JR   Z,nesting4   
0398   FE 5D                  CP   "]"   
039A   28 03                  JR   Z,nesting4   
039C   FE 29                  CP   ")"   
039E   C0                     RET   NZ   
039F                NESTING4:      
039F   1D                     DEC   E   
03A0   C9                     RET      
03A1                PROMPT:      ;=9
03A1   CD B1 03               CALL   printStr   
03A4   0D 0A 3E 20 00         .CSTR   "\r\n> "   
03A9   C9                     RET      
03AA                CRLF:        ;=7
03AA   CD B1 03               CALL   printStr   
03AD   0D 0A 00               .CSTR   "\r\n"   
03B0   C9                     RET      
03B1                PRINTSTR:      ;=7
03B1   E3                     EX   (SP),hl   ; swap			
03B2   CD BC 03               CALL   putStr   
03B5   23                     INC   hl   ; inc past null
03B6   E3                     EX   (SP),hl   ; put it back	
03B7   C9                     RET      
03B8                PUTSTR0:      ;=9
03B8   CD 85 00               CALL   putchar   
03BB   23                     INC   hl   
03BC                PUTSTR:      
03BC   7E                     LD   A,(hl)   
03BD   B7                     OR   A   
03BE   20 F8                  JR   NZ,putStr0   
03C0   C9                     RET      
03C1                RPUSH:       ;=11
03C1   DD 2B                  DEC   IX   
03C3   DD 74 00               LD   (IX+0),H   
03C6   DD 2B                  DEC   IX   
03C8   DD 75 00               LD   (IX+0),L   
03CB   C9                     RET      
03CC                RPOP:        ;=11
03CC   DD 6E 00               LD   L,(IX+0)   
03CF   DD 23                  INC   IX   
03D1   DD 66 00               LD   H,(IX+0)   
03D4   DD 23                  INC   IX   
03D6                RPOP2:       
03D6   C9                     RET      
03D7                WRITECHAR:      ;=5
03D7   77                     LD   (hl),A   
03D8   23                     INC   hl   
03D9   C3 85 00               JP   putchar   
03DC                ENTER:       ;=9
03DC   60 69                  LD   hl,BC   
03DE   CD C1 03               CALL   rpush   ; save Instruction Pointer
03E1   C1                     POP   BC   
03E2   0B                     DEC   BC   
03E3   FD E9                  JP   (IY)   
03E5                CARRY:       
03E5   21 00 00               LD   hl,0   
03E8   CB 15                  RL   l   
03EA   22 04 0C               LD   (vCarry),hl   
03ED   FD E9                  JP   (iy)   
03EF                             ; **********************************************************************			
03EF                             ; Page 4 primitive routines
03EF                             ; **********************************************************************
03EF                          ALIGN   $100   
0400                PAGE4:       
0400                AMPER_:      
0400   D1                     POP   de   ;     Bitwise and the top 2 elements of the stack
0401   E1                     POP   hl   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   hl   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                PIPE_:       
040B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
040C   E1                     POP   hl   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                CARET_:      
0414   D1                     POP   de   ; Bitwise XOR the top 2 elements of the stack
0415                XOR1:        
0415   E1                     POP   hl   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                INV_:        ; Bitwise INVert the top member of the stack
041D   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0420   18 F3                  JR   xor1   
0422                PLUS_:       ; add the top 2 members of the stack
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   19                     ADD   hl,de   
0425   E5                     PUSH   hl   
0426   C3 E5 03               JP   carry   
0429                CALL_:       
0429   0A                     LD   A,(BC)   
042A   CD 3E 03               CALL   lookupRef1   
042D   5E                     LD   E,(hl)   
042E   23                     INC   hl   
042F   56                     LD   D,(hl)   
0430   C3 54 06               JP   go1   
0433                DOT_:        
0433   E1                     POP   hl   
0434   CD 23 07               CALL   printDec   
0437                DOT2:        
0437   3E 20                  LD   A," "   
0439   CD 85 00               CALL   putChar   
043C   FD E9                  JP   (IY)   
043E                COMMA_:      ; print hexadecimal
043E   E1                     POP   hl   
043F   CD 56 03               CALL   printhex   
0442   18 F3                  JR   dot2   
0444                QUOTE_:      ; Discard the top member of the stack
0444   E1                     POP   hl   
0445   FD E9                  JP   (IY)   
0447                DQUOTE_:      
0447   E1                     POP   hl   ; Duplicate the top member of the stack
0448   E5                     PUSH   hl   
0449   E5                     PUSH   hl   
044A   FD E9                  JP   (IY)   
044C                AT_:         ; Fetch the value from the address placed on the top of the stack
044C   E1                     POP   hl   
044D                FETCH1:      
044D   16 00                  LD   d,0   
044F   5E                     LD   e,(hl)   
0450   3A 02 0C               LD   a,(vByteMode)   
0453   3C                     INC   a   ; is it byte?
0454   28 02                  JR   z,fetch2   
0456   23                     INC   hl   
0457   56                     LD   d,(hl)   
0458                FETCH2:      
0458   D5                     PUSH   de   
0459   FD E9                  JP   (IY)   
045B                BSLASH_:      
045B                UNDERSCORE_:      
045B                NOP_:        
045B   C3 B9 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
045E                PERCENT_:      
045E   E1                     POP   hl   ; Duplicate 2nd element of the stack
045F   D1                     POP   de   
0460   D5                     PUSH   de   
0461   E5                     PUSH   hl   
0462   D5                     PUSH   de   ; and push it to top of stack
0463   FD E9                  JP   (IY)   
0465                SEMI_:       
0465   CD CC 03               CALL   rpop   ; Restore Instruction pointer
0468   44 4D                  LD   BC,hl   
046A   FD E9                  JP   (IY)   
046C                TILDE_:      ; a b c -- b c a
046C   D1                     POP   de   ; a b                   de = c
046D   E1                     POP   hl   ; a                     hl = b
046E   E3                     EX   (SP),hl   ; b                     hl = a
046F   D5                     PUSH   de   ; b c
0470   E5                     PUSH   hl   ; b c a
0471   FD E9                  JP   (IY)   
0473                             ;  Left shift { is multiply by 2		
0473                LBRACE_:      
0473   E1                     POP   hl   ; Duplicate the top member of the stack
0474   29                     ADD   hl,hl   
0475   E5                     PUSH   hl   ; shift left fallthrough into plus_
0476   FD E9                  JP   (IY)   ; 
0478                             ;  Right shift } is a divide by 2		
0478                RBRACE_:      
0478   E1                     POP   hl   ; Get the top member of the stack
0479                SHR1:        
0479   CB 3C                  SRL   H   
047B   CB 1D                  RR   L   
047D   E5                     PUSH   hl   
047E   FD E9                  JP   (IY)   ; 
0480                BANG_:       ; Store the value at the address placed on the top of the stack
0480   E1                     POP   hl   
0481   D1                     POP   de   
0482   73                     LD   (hl),e   
0483   3A 02 0C               LD   a,(vByteMode)   
0486   3C                     INC   a   ; is it byte?
0487   28 02                  JR   z,bang1   
0489   23                     INC   hl   
048A   72                     LD   (hl),d   
048B                BANG1:       
048B   FD E9                  JP   (IY)   
048D                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
048D                DOLLAR_:      
048D   E1                     POP   hl   
048E   E3                     EX   (SP),hl   
048F   E5                     PUSH   hl   
0490   FD E9                  JP   (IY)   
0492                MINUS_:      ; Subtract the value 2nd on stack from top of stack
0492   03                     INC   bc   ; check if sign of a number
0493   0A                     LD   a,(bc)   
0494   0B                     DEC   bc   
0495   FE 30                  CP   "0"   
0497   38 05                  JR   c,sub1   
0499   FE 3A                  CP   "9"+1   
049B   DA C3 06               JP   c,num   
049E                SUB1:        
049E   D1                     POP   de   ; 
049F   E1                     POP   hl   ;      Entry point for INVert
04A0                SUB2:        
04A0   A7                     AND   A   ;      Entry point for NEGate
04A1   ED 52                  SBC   hl,de   ; 
04A3   E5                     PUSH   hl   ; 
04A4   C3 E5 03               JP   carry   
04A7                             ; 5
04A7                EQ_:         
04A7   E1                     POP   hl   
04A8   D1                     POP   de   
04A9   B7                     OR   a   ; reset the carry flag
04AA   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04AC   CA 8A 06               JP   z,true_   
04AF   C3 48 06               JP   false_   
04B2                GT_:         
04B2   E1                     POP   hl   
04B3   D1                     POP   de   
04B4   18 02                  JR   lt1_   
04B6                LT_:         
04B6   D1                     POP   de   
04B7   E1                     POP   hl   
04B8                LT1_:        
04B8   B7                     OR   a   ; reset the carry flag
04B9   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04BB   DA 8A 06               JP   c,true_   
04BE   C3 48 06               JP   false_   
04C1                VAR_:        
04C1   0A                     LD   A,(BC)   
04C2   CD 44 03               CALL   lookupRef2   
04C5   E5                     PUSH   hl   
04C6   FD E9                  JP   (IY)   
04C8                GRAVE_:      
04C8                STR:         
04C8   03                     INC   BC   
04C9                STR1:        
04C9   0A                     LD   A,(BC)   
04CA   03                     INC   BC   
04CB   FE 60                  CP   "`"   ; ` is the string terminator
04CD   28 05                  JR   Z,str2   
04CF   CD 85 00               CALL   putchar   
04D2   18 F5                  JR   str1   
04D4                STR2:        
04D4   0B                     DEC   BC   
04D5   FD E9                  JP   (IY)   
04D7                LBRACK_:      
04D7                ARRDEF:      
04D7   21 00 00               LD   hl,0   
04DA   39                     ADD   hl,sp   ; save
04DB   CD C1 03               CALL   rpush   
04DE   FD E9                  JP   (iy)   
04E0                QUESTION_:      
04E0   C3 B3 07               JP   arrIndex   
04E3                NUM_:        
04E3   C3 C3 06               JP   num   
04E6                LPAREN_:      
04E6   C3 93 05               JP   begin   
04E9                RPAREN_:      
04E9   C3 C4 05               JP   again   ; close loop
04EC                RBRACK_:      
04EC   C3 6B 07               JP   arrEnd   
04EF                COLON_:      
04EF   C3 96 06               JP   def   
04F2                HASH_:       
04F2   18 1D                  JR   hex   
04F4                STAR_:       
04F4   18 3A                  JR   mul   
04F6                SLASH_:      
04F6                             ;*******************************************************************
04F6                             ; Page 5 primitive routines
04F6                             ;*******************************************************************
04F6                             ;falls through
04F6                ALT:         ;=11
04F6   03                     INC   BC   
04F7   0A                     LD   A,(BC)   
04F8   FE 7B                  CP   "z"+1   
04FA   30 50                  JR   nc,div   
04FC   FE 61                  CP   "a"   
04FE   D2 C9 07               JP   nc,altVar   
0501   FE 5C                  CP   BSLASH   
0503   C3 C0 07               JP   comment   
0506   FE 5B                  CP   "Z"+1   
0508   30 42                  JR   nc,div   
050A   FE 41                  CP   "A"   
050C   D2 E9 07               JP   nc,altCode   
050F   18 3B                  JR   div   
0511                HEX:         
0511   21 00 00               LD   hl,0   ; Clear hl to accept the number
0514                HEX1:        
0514   03                     INC   BC   
0515   0A                     LD   A,(BC)   ; Get the character which is a numeral
0516   CB 77                  BIT   6,A   ; is it uppercase alpha?
0518   CA 1D 05               JP   Z,hex2   ; no a decimal
051B   D6 07                  SUB   7   ; sub 7  to make $A - $F
051D                HEX2:        
051D   D6 30                  SUB   $30   ; Form decimal digit
051F   DA E5 06               JP   C,num2   
0522   FE 10                  CP   $0F+1   
0524   D2 E5 06               JP   NC,num2   
0527   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0528   29                     ADD   hl,hl   ; 4X
0529   29                     ADD   hl,hl   ; 8X
052A   29                     ADD   hl,hl   ; 16X
052B   85                     ADD   A,L   ; add into bottom of hl
052C   6F                     LD   L,A   ; 
052D   C3 14 05               JP   hex1   
0530                MUL:         ;=19
0530   D1                     POP   de   ; get first value
0531   E1                     POP   hl   
0532   C5                     PUSH   BC   ; Preserve the IP
0533   44                     LD   B,H   ; BC = 2nd value
0534   4D                     LD   C,L   
0535   21 00 00               LD   hl,0   
0538   3E 10                  LD   A,16   
053A                MUL2:        
053A   29                     ADD   hl,hl   
053B   CB 13                  RL   E   
053D   CB 12                  RL   D   
053F   30 04                  JR   NC,$+6   
0541   09                     ADD   hl,BC   
0542   30 01                  JR   NC,$+3   
0544   13                     INC   de   
0545   3D                     DEC   A   
0546   20 F2                  JR   NZ,mul2   
0548   C1                     POP   BC   ; Restore the IP
0549   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
054A   FD E9                  JP   (IY)   
054C                DIV:         
054C   60 69                  LD   hl,bc   ; hl = IP
054E   C1                     POP   bc   ; bc = denominator
054F   E3                     EX   (sp),hl   ; save IP, hl = numerator
0550   7C                     LD   a,h   
0551   A8                     XOR   b   
0552   F5                     PUSH   af   
0553   A8                     XOR   b   
0554   F2 5D 05               JP   p,absBC   
0557                             ;absHL
0557   AF                     XOR   a   
0558   95                     SUB   l   
0559   6F                     LD   l,a   
055A   9F                     SBC   a,a   
055B   94                     SUB   h   
055C   67                     LD   h,a   
055D                ABSBC:       
055D   A8                     XOR   b   
055E   F2 67 05               JP   p,$+9   
0561   AF                     XOR   a   
0562   91                     SUB   c   
0563   4F                     LD   c,a   
0564   9F                     SBC   a,a   
0565   90                     SUB   b   
0566   47                     LD   b,a   
0567   29                     ADD   hl,hl   
0568   3E 0F                  LD   a,15   
056A   11 00 00               LD   de,0   
056D   EB                     EX   de,hl   
056E   18 04                  JR   jumpin   
0570                LOOP1:       
0570   09                     ADD   hl,bc   ;--
0571                LOOP2:       
0571   3D                     DEC   a   ;4
0572   28 0E                  JR   z,EndSDiv   ;12|7
0574                JUMPIN:      
0574   CB 23                  SLA   e   ;8
0576   CB 12                  RL   d   ;8
0578   ED 6A                  ADC   hl,hl   ;15
057A   ED 42                  SBC   hl,bc   ;15
057C   38 F2                  JR   c,Loop1   ;23-2b
057E   1C                     INC   e   ;--
057F   C3 71 05               JP   Loop2   ;--
0582                ENDSDIV:      
0582   F1                     POP   af   
0583   F2 8C 05               JP   p,div10   
0586   AF                     XOR   a   
0587   93                     SUB   e   
0588   5F                     LD   e,a   
0589   9F                     SBC   a,a   
058A   92                     SUB   d   
058B   57                     LD   d,a   
058C                DIV10:       
058C   C1                     POP   bc   
058D   D5                     PUSH   de   ; quotient
058E   22 22 0C               LD   (vRemain),hl   ; remainder
0591   FD E9                  JP   (iy)   
0593                             ;=57
0593                BEGIN:       
0593                LOOPSTART:      
0593   ED 43 02 0A            LD   (vTemp1),bc   ; save start
0597   1E 01                  LD   e,1   ; skip to loop end, nesting = 1
0599                LOOPSTART1:      
0599   03                     INC   bc   
059A   0A                     LD   a,(bc)   
059B   CD 75 03               CALL   nesting   ; affects zero flag
059E   20 F9                  JR   nz,loopStart1   
05A0   D1                     POP   de   ; de = limit
05A1   7B                     LD   a,e   ; is it zero?
05A2   B2                     OR   d   
05A3   20 07                  JR   nz,loopStart2   
05A5   13                     INC   de   ; de = TRUE
05A6   ED 53 08 0C            LD   (vElse),de   
05AA   FD E9                  JP   (iy)   ; yes continue after skip
05AC                LOOPSTART2:      
05AC   60 69                  LD   hl,bc   ; rpush loop frame
05AE   CD C1 03               CALL   rpush   ; rpush loop end
05B1   0B                     DEC   bc   ; IP points to ")"
05B2   2A 02 0A               LD   hl,(vTemp1)   ; restore start
05B5   CD C1 03               CALL   rpush   ; rpush start
05B8   EB                     EX   de,hl   ; hl = limit
05B9   CD C1 03               CALL   rpush   ; rpush limit
05BC   21 FF FF               LD   hl,-1   ; hl = count = -1
05BF   CD C1 03               CALL   rpush   ; rpush count
05C2                LOOPSTART3:      
05C2   FD E9                  JP   (iy)   
05C4                AGAIN:       
05C4                LOOPEND:      
05C4   DD 5E 02               LD   e,(ix+2)   ; de = limit
05C7   DD 56 03               LD   d,(ix+3)   
05CA   7B                     LD   a,e   ; a = lsb(limit)
05CB   B2                     OR   d   ; if limit 0 exit loop
05CC   28 29                  JR   z,loopEnd4   
05CE   13                     INC   de   
05CF   7B                     LD   a,e   ; a = lsb(limit)
05D0   B2                     OR   d   ; if limit 0 exit loop
05D1   28 08                  JR   z,loopEnd2   ; yes, loop again
05D3   1B                     DEC   de   ; restore de
05D4   1B                     DEC   de   ; dec limit
05D5   DD 73 02               LD   (ix+2),e   ; update frame
05D8   DD 72 03               LD   (ix+3),d   
05DB                LOOPEND2:      
05DB   DD 5E 00               LD   e,(ix+0)   ; inc counter
05DE   DD 56 01               LD   d,(ix+1)   
05E1   13                     INC   de   
05E2   DD 73 00               LD   (ix+0),e   
05E5   DD 72 01               LD   (ix+1),d   
05E8                LOOPEND3:      
05E8   11 00 00               LD   de,FALSE   ; if clause ran then vElse = FALSE
05EB   ED 53 08 0C            LD   (vElse),de   
05EF   DD 4E 04               LD   c,(ix+4)   ; IP = start
05F2   DD 46 05               LD   b,(ix+5)   
05F5   FD E9                  JP   (iy)   
05F7                LOOPEND4:      
05F7   11 08 00               LD   de,2*4   ; rpop frame
05FA   DD 19                  ADD   ix,de   
05FC   FD E9                  JP   (iy)   
05FE                             ; **************************************************************************
05FE                             ; Page 6 Alt primitives
05FE                             ; **************************************************************************
05FE                          ALIGN   $100   
0600                PAGE6:       
0600                ARRSIZE_:      
0600                ARRSIZE:      
0600   E1                     POP   hl   
0601   2B                     DEC   hl   ; msb size
0602   56                     LD   d,(hl)   
0603   2B                     DEC   hl   ; lsb size
0604   5E                     LD   e,(hl)   
0605   D5                     PUSH   de   
0606                ANOP_:       
0606   FD E9                  JP   (iy)   
0608                BMODE_:      
0608   21 02 0C               LD   hl,vByteMode   
060B   7E                     LD   a,(hl)   
060C   2F                     CPL      
060D   77                     LD   (hl),a   
060E   FD E9                  JP   (iy)   
0610                BREAK_:      
0610                WHILE_:      
0610                WHILE:       
0610   E1                     POP   hl   
0611   7D                     LD   a,l   
0612   B4                     OR   h   
0613   20 09                  JR   nz,while2   
0615   DD 4E 06               LD   c,(ix+6)   ; IP = )
0618   DD 46 07               LD   b,(ix+7)   
061B   C3 F7 05               JP   loopEnd4   
061E                WHILE2:      
061E   FD E9                  JP   (iy)   
0620                DEPTH_:      
0620                DEPTH:       
0620   21 00 00               LD   hl,0   
0623   39                     ADD   hl,SP   
0624   EB                     EX   de,hl   
0625   21 00 0A               LD   hl,DSTACK   
0628   B7                     OR   A   
0629   ED 52                  SBC   hl,de   
062B   C3 79 04               JP   shr1   
062E                PRINTCHAR_:      
062E   E1                     POP   hl   
062F   7D                     LD   A,L   
0630   CD 85 00               CALL   putchar   
0633   FD E9                  JP   (IY)   
0635                EXEC_:       
0635   CD 3A 06               CALL   exec1   
0638   FD E9                  JP   (IY)   
063A                EXEC1:       
063A   E1                     POP   hl   
063B   E3                     EX   (SP),hl   
063C   E9                     JP   (hl)   
063D                EDITDEF_:      
063D   CD F3 06               CALL   editDef   
0640   FD E9                  JP   (IY)   
0642                ELSE_:       
0642   2A 08 0C               LD   hl,(vElse)   
0645   E5                     PUSH   hl   
0646   FD E9                  JP   (iy)   
0648                FALSE_:      
0648   21 00 00               LD   hl,FALSE   
064B   E5                     PUSH   hl   
064C   FD E9                  JP   (iy)   
064E                PROMPT_:      
064E   CD A1 03               CALL   prompt   
0651   FD E9                  JP   (IY)   
0653                GO_:         ;\^
0653   D1                     POP   de   
0654                GO1:         
0654   7A                     LD   A,D   ; skip if destination address is null
0655   B3                     OR   E   
0656   28 0E                  JR   Z,go3   
0658   60 69                  LD   hl,BC   
065A   03                     INC   BC   ; read next char from source
065B   0A                     LD   A,(BC)   ; if ; to tail call optimise
065C   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
065E   28 03                  JR   Z,go2   
0660   CD C1 03               CALL   rpush   ; save Instruction Pointer
0663                GO2:         
0663   42 4B                  LD   BC,de   
0665   0B                     DEC   BC   
0666                GO3:         
0666   FD E9                  JP   (IY)   
0668                KEY_:        
0668   CD 81 00               CALL   getchar   
066B   26 00                  LD   H,0   
066D   6F                     LD   L,A   
066E   E5                     PUSH   hl   
066F   FD E9                  JP   (IY)   
0671                INPORT_:      ; \<
0671   E1                     POP   hl   
0672   79                     LD   A,C   
0673   4D                     LD   C,L   
0674   ED 68                  IN   L,(C)   
0676   26 00                  LD   H,0   
0678   4F                     LD   C,A   
0679   E5                     PUSH   hl   
067A   FD E9                  JP   (IY)   
067C                NEWLN_:      
067C   CD AA 03               CALL   crlf   
067F   FD E9                  JP   (IY)   
0681                OUTPORT_:      
0681   E1                     POP   hl   
0682   59                     LD   E,C   
0683   4D                     LD   C,L   
0684   E1                     POP   hl   
0685   ED 69                  OUT   (C),L   
0687   4B                     LD   C,E   
0688   FD E9                  JP   (IY)   
068A                TRUE_:       
068A   21 01 00               LD   hl,TRUE   
068D   E5                     PUSH   hl   
068E   FD E9                  JP   (iy)   
0690                UNLIMITED_:      
0690   21 FF FF               LD   hl,UNLIMITED   
0693   E5                     PUSH   hl   
0694   FD E9                  JP   (iy)   
0696                             ;*******************************************************************
0696                             ; Page 5 primitive routines continued
0696                             ;*******************************************************************
0696                DEF:         ; Create a colon definition
0696   03                     INC   BC   
0697   0A                     LD   A,(BC)   ; Get the next character
0698   FE 3A                  CP   ":"   ; is it anonymouse
069A   20 08                  JR   nz,def0   
069C   03                     INC   bc   
069D   ED 5B 0E 0C            LD   de,(vHeapPtr)   ; return start of definition
06A1   D5                     PUSH   de   
06A2   18 0E                  JR   def1   
06A4                DEF0:        
06A4   32 32 0C               LD   (vLastDef),A   
06A7   CD 38 03               CALL   lookupRef   
06AA   ED 5B 0E 0C            LD   de,(vHeapPtr)   ; start of defintion
06AE   73                     LD   (hl),E   ; Save low byte of address in CFA
06AF   23                     INC   hl   
06B0   72                     LD   (hl),D   ; Save high byte of address in CFA+1
06B1   03                     INC   BC   
06B2                DEF1:        ; Skip to end of definition
06B2   0A                     LD   A,(BC)   ; Get the next character
06B3   03                     INC   BC   ; Point to next character
06B4   12                     LD   (de),A   
06B5   13                     INC   de   
06B6   FE 3B                  CP   ";"   ; Is it a semicolon
06B8   28 02                  JR   Z,def2   ; end the definition
06BA   18 F6                  JR   def1   ; get the next element
06BC                DEF2:        
06BC   0B                     DEC   BC   
06BD                DEF3:        
06BD   ED 53 0E 0C            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
06C1   FD E9                  JP   (IY)   
06C3                NUM:         
06C3   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06C6   0A                     LD   a,(bc)   ; Get numeral or -
06C7   FE 2D                  CP   "-"   
06C9   20 01                  JR   nz,num0   
06CB   03                     INC   bc   ; move to next char, no flags affected
06CC                NUM0:        
06CC   08                     EX   af,af'   ; save zero flag = 0 for later
06CD                NUM1:        
06CD   0A                     LD   a,(bc)   ; read digit
06CE   D6 30                  SUB   "0"   ; less than 0?
06D0   38 13                  JR   c,num2   ; not a digit, exit loop
06D2   FE 0A                  CP   10   ; greater that 9?
06D4   30 0F                  JR   nc,num2   ; not a digit, exit loop
06D6   03                     INC   bc   ; inc IP
06D7   54 5D                  LD   de,hl   ; multiply hl * 10
06D9   29                     ADD   hl,hl   
06DA   29                     ADD   hl,hl   
06DB   19                     ADD   hl,de   
06DC   29                     ADD   hl,hl   
06DD   85                     ADD   a,l   ; add digit in a to hl
06DE   6F                     LD   l,a   
06DF   3E 00                  LD   a,0   
06E1   8C                     ADC   a,h   
06E2   67                     LD   h,a   
06E3   18 E8                  JR   num1   
06E5                NUM2:        
06E5   0B                     DEC   bc   
06E6   08                     EX   af,af'   ; restore zero flag
06E7   20 07                  JR   nz,num3   
06E9   EB                     EX   de,hl   ; negate the value of hl
06EA   21 00 00               LD   hl,0   
06ED   B7                     OR   a   ; jump to sub2
06EE   ED 52                  SBC   hl,de   
06F0                NUM3:        
06F0   E5                     PUSH   hl   ; Put the number on the stack
06F1   FD E9                  JP   (iy)   ; and process the next character
06F3                             ;*******************************************************************
06F3                             ; Subroutines
06F3                             ;*******************************************************************
06F3                EDITDEF:      ;=50 lookup up def based on number
06F3   E1                     POP   hl   ; pop ret address
06F4   E3                     EX   (SP),hl   ; swap with TOS
06F5   7D                     LD   A,L   
06F6   08                     EX   AF,AF'   
06F7   7D                     LD   A,L   
06F8   CD 38 03               CALL   lookupRef   
06FB   5E                     LD   E,(hl)   
06FC   23                     INC   hl   
06FD   56                     LD   D,(hl)   
06FE   7A                     LD   A,D   
06FF   B3                     OR   E   
0700   21 00 08               LD   hl,TIB   
0703   28 14                  JR   Z,editDef3   
0705   3E 3A                  LD   A,":"   
0707   CD D7 03               CALL   writeChar   
070A   08                     EX   AF,AF'   
070B   CD D7 03               CALL   writeChar   
070E   18 01                  JR   editDef2   
0710                EDITDEF1:      
0710   13                     INC   de   
0711                EDITDEF2:      
0711   1A                     LD   A,(de)   
0712   CD D7 03               CALL   writeChar   
0715   FE 3B                  CP   ";"   
0717   20 F7                  JR   NZ,editDef1   
0719                EDITDEF3:      
0719   11 00 08               LD   de,TIB   
071C   B7                     OR   A   
071D   ED 52                  SBC   hl,de   
071F   22 14 0C               LD   (vTIBPtr),hl   
0722   C9                     RET      
0723                             ; hl = value
0723                PRINTDEC:      
0723   CB 7C                  BIT   7,h   
0725   28 0B                  JR   z,printDec2   
0727   3E 2D                  LD   a,"-"   
0729   CD 85 00               CALL   putchar   
072C   AF                     XOR   a   
072D   95                     SUB   l   
072E   6F                     LD   l,a   
072F   9F                     SBC   a,a   
0730   94                     SUB   h   
0731   67                     LD   h,a   
0732                PRINTDEC2:      
0732   C5                     PUSH   bc   
0733   0E 00                  LD   c,0   ; leading zeros flag = false
0735   11 F0 D8               LD   de,-10000   
0738   CD 54 07               CALL   printDec4   
073B   11 18 FC               LD   de,-1000   
073E   CD 54 07               CALL   printDec4   
0741   11 9C FF               LD   de,-100   
0744   CD 54 07               CALL   printDec4   
0747   1E F6                  LD   e,-10   
0749   CD 54 07               CALL   printDec4   
074C   0C                     INC   c   ; flag = true for at least digit
074D   1E FF                  LD   e,-1   
074F   CD 54 07               CALL   printDec4   
0752   C1                     POP   bc   
0753   C9                     RET      
0754                PRINTDEC4:      
0754   06 2F                  LD   b,"0"-1   
0756                PRINTDEC5:      
0756   04                     INC   b   
0757   19                     ADD   hl,de   
0758   38 FC                  JR   c,printDec5   
075A   ED 52                  SBC   hl,de   
075C   3E 30                  LD   a,"0"   
075E   B8                     CP   b   
075F   20 05                  JR   nz,printDec6   
0761   AF                     XOR   a   
0762   B1                     OR   c   
0763   C8                     RET   z   
0764   18 01                  JR   printDec7   
0766                PRINTDEC6:      
0766   0C                     INC   c   
0767                PRINTDEC7:      
0767   78                     LD   a,b   
0768   C3 85 00               JP   putchar   
076B                ARREND:      
076B   ED 43 02 0A            LD   (vTemp1),bc   ; save IP
076F   CD CC 03               CALL   rpop   
0772   22 04 0A               LD   (vTemp2),hl   ; save old SP
0775   54 5D                  LD   de,hl   ; de = hl = old SP
0777   B7                     OR   a   
0778   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
077A   CB 3C                  SRL   h   ; num items = num bytes / 2
077C   CB 1D                  RR   l   
077E   44 4D                  LD   bc,hl   ; bc = count
0780   2A 0E 0C               LD   hl,(vHeapPtr)   ; hl = array[-4]
0783   71                     LD   (hl),c   ; write num items in length word
0784   23                     INC   hl   
0785   70                     LD   (hl),b   
0786   23                     INC   hl   ; hl = array[0], bc = count
0787                             ; de = old SP, hl = array[0], bc = count
0787   18 11                  JR   arrayEnd2   
0789                ARRAYEND1:      
0789   0B                     DEC   bc   ; dec items count
078A   1B                     DEC   de   
078B   1B                     DEC   de   
078C   1A                     LD   a,(de)   ; a = lsb of stack item
078D   77                     LD   (hl),a   ; write lsb of array item
078E   23                     INC   hl   ; move to msb of array item
078F   3A 02 0C               LD   a,(vByteMode)   ; vByteMode=1?
0792   3D                     DEC   a   
0793   28 05                  JR   z,arrayEnd2   
0795   13                     INC   de   
0796   1A                     LD   a,(de)   ; a = msb of stack item
0797   1B                     DEC   de   
0798   77                     LD   (hl),a   ; write msb of array item
0799   23                     INC   hl   ; move to next word in array
079A                ARRAYEND2:      
079A   79                     LD   a,c   ; if not zero loop
079B   B0                     OR   b   
079C   20 EB                  JR   nz,arrayEnd1   
079E   EB                     EX   de,hl   ; de = end of array
079F   2A 04 0A               LD   hl,(vTemp2)   
07A2   F9                     LD   sp,hl   ; SP = old SP
07A3   2A 0E 0C               LD   hl,(vHeapPtr)   ; de = array[-2]
07A6   23                     INC   hl   
07A7   23                     INC   hl   
07A8   E5                     PUSH   hl   ; return array[0]
07A9   ED 53 0E 0C            LD   (vHeapPtr),de   ; move heap* to end of array
07AD   ED 4B 02 0A            LD   bc,(vTemp1)   ; restore IP
07B1   FD E9                  JP   (iy)   
07B3                ARRINDEX:      
07B3   E1                     POP   hl   ; hl = index
07B4   D1                     POP   de   ; de = array
07B5   3A 02 0C               LD   a,(vByteMode)   ; a = data width
07B8   3C                     INC   a   
07B9   28 01                  JR   z,arrIndex1   
07BB   29                     ADD   hl,hl   ; if data width = 2 then double
07BC                ARRINDEX1:      
07BC   19                     ADD   hl,de   ; add addr
07BD   E5                     PUSH   hl   
07BE   FD E9                  JP   (iy)   
07C0                COMMENT:      
07C0   03                     INC   BC   ; point to next char
07C1   0A                     LD   A,(BC)   
07C2   FE 0D                  CP   "\r"   ; terminate at cr
07C4   20 FA                  JR   NZ,comment   
07C6   0B                     DEC   BC   
07C7   FD E9                  JP   (IY)   
07C9                ALTVAR:      
07C9   FE 69                  CP   "i"   
07CB   2E 00                  LD   l,0   
07CD   CA DF 07               JP   z,loopVar   
07D0   FE 6A                  CP   "j"   
07D2   2E 08                  LD   l,8   
07D4   28 09                  JR   z,loopVar   
07D6   D6 61                  SUB   "a"   
07D8   87                     ADD   a,a   
07D9   26 0C                  LD   h,msb(altVars)   
07DB   6F                     LD   l,A   
07DC   E5                     PUSH   hl   
07DD   FD E9                  JP   (IY)   
07DF                LOOPVAR:      
07DF   26 00                  LD   h,0   
07E1   DD 54                  LD   d,ixh   
07E3   DD 5D                  LD   e,ixl   
07E5   19                     ADD   hl,de   
07E6   E5                     PUSH   hl   
07E7   FD E9                  JP   (iy)   
07E9                ALTCODE:      
07E9   21 5E 0B               LD   hl,altCodes   
07EC   D6 41                  SUB   "A"   
07EE   85                     ADD   A,L   
07EF   6F                     LD   L,A   
07F0   7E                     LD   A,(hl)   ;       get low jump address
07F1   21 00 06               LD   hl,page6   
07F4   6F                     LD   L,A   
07F5   E9                     JP   (hl)   ;       Jump to routine
07F6                DSIZE:    EQU   $80   
07F6                RSIZE:    EQU   $80   
07F6                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
07F6                VARS_SIZE:   EQU   26*2*2   ; A..Z, a..z words
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                TBPTR:    DS   2   ; reserved for tests
0A02                VTEMP1:   DS   2   ; 
0A04                VTEMP2:   DS   2   ; 
0A06                RST08:    DS   2   
0A08                RST10:    DS   2   
0A0A                RST18:    DS   2   
0A0C                RST20:    DS   2   
0A0E                RST28:    DS   2   
0A10                RST30:    DS   2   ; 
0A12                BAUD:     DS   2   ; 
0A14                INTVEC:   DS   2   ; 
0A16                NMIVEC:   DS   2   ; 
0A18                GETCVEC:   DS   2   ; 
0A1A                PUTCVEC:   DS   2   ; 
0A1C                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80-32-1-1   
0B5E                ALTCODES:      
0B5E                          DS   26   
0B78                          ALIGN   $100   
0C00                ALTVARS:      
0C00                          DS   2   ; a
0C02                VBYTEMODE:   DS   2   ; b
0C04                VCARRY:   DS   2   ; c
0C06                          DS   2   ; d
0C08                VELSE:    DS   2   ; e
0C0A                          DS   2   ; f
0C0C                          DS   2   ; g
0C0E                VHEAPPTR:   DS   2   ; h
0C10                          DS   2   ; i
0C12                          DS   2   ; j
0C14                VTIBPTR:   DS   2   ; k
0C16                          DS   2   ; l
0C18                          DS   2   ; m
0C1A                          DS   2   ; n
0C1C                          DS   2   ; o
0C1E                          DS   2   ; p
0C20                          DS   2   ; q
0C22                VREMAIN:   DS   2   ; r
0C24                VSTKSTART:   DS   2   ; s
0C26                          DS   2   ; t
0C28                VUNLIMITED:   DS   2   ; u
0C2A                          DS   2   ; v
0C2C                          DS   2   ; w
0C2E                          DS   2   ; x
0C30                          DS   2   ; y
0C32                VLASTDEF:   DS   2   ; z
0C34                VARS:     DS   VARS_SIZE   
0C9C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 43 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 7 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 188 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 402 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               0001 DEFINED AT LINE 12 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 13 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
UNLIMITED:          00-1 DEFINED AT LINE 14 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
BSLASH:             005C DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 49 IN MAIN.asm
REEDIT_:            0180 DEFINED AT LINE 51 IN MAIN.asm
EDIT_:              0186 DEFINED AT LINE 54 IN MAIN.asm
LIST_:              0191 DEFINED AT LINE 57 IN MAIN.asm
PRINTSTACK_:        01AC DEFINED AT LINE 60 IN MAIN.asm
IOPCODES:           01C9 DEFINED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 327 IN MAIN.asm
IALTCODES:          01F3 DEFINED AT LINE 110 IN MAIN.asm
BACKSPACE:          020F DEFINED AT LINE 142 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
START:              021D DEFINED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 6
INTERPRET:          0230 DEFINED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 300 IN MAIN.asm
INTERPRET2:         023A DEFINED AT LINE 163 IN MAIN.asm
                    > USED AT LINE 145 IN MAIN.asm
                    > USED AT LINE 149 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
INTERPRET3:         0242 DEFINED AT LINE 170 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
INTERPRET4:         0248 DEFINED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 168 IN MAIN.asm
WAITCHAR:           024D DEFINED AT LINE 187 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
MACRO:              027C DEFINED AT LINE 212 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
WAITCHAR1:          028D DEFINED AT LINE 220 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
WAITCHAR3:          029B DEFINED AT LINE 229 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
WAITCHAR4:          02B1 DEFINED AT LINE 245 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
NEXT:               02B9 DEFINED AT LINE 271 IN MAIN.asm
                    > USED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
EXIT:               02CD DEFINED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ETX:                02D7 DEFINED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 277 IN MAIN.asm
ETX1:               02E0 DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
INIT:               02E3 DEFINED AT LINE 302 IN MAIN.asm
                    > USED AT LINE 153 IN MAIN.asm
INIT1:              02F0 DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
INITOPS:            0314 DEFINED AT LINE 326 IN MAIN.asm
INITOPS1:           031D DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
INITOPS2:           032D DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
INITOPS2A:          0332 DEFINED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 351 IN MAIN.asm
LOOKUPREF:          0338 DEFINED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
LOOKUPREF0:         033A DEFINED AT LINE 356 IN MAIN.asm
LOOKUPREF1:         033E DEFINED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
LOOKUPREF2:         0344 DEFINED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
LOOKUPREF3:         0348 DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PRINTHEX:           0356 DEFINED AT LINE 379 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
PRINTHEX2:          0361 DEFINED AT LINE 388 IN MAIN.asm
                    > USED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
PRINTHEX3:          036A DEFINED AT LINE 396 IN MAIN.asm
                    > USED AT LINE 394 IN MAIN.asm
NESTING:            0375 DEFINED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
NESTING1A:          0380 DEFINED AT LINE 421 IN MAIN.asm
                    > USED AT LINE 418 IN MAIN.asm
NESTING1:           0383 DEFINED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
NESTING2:           0392 DEFINED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
NESTING3:           0394 DEFINED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
NESTING4:           039F DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 440 IN MAIN.asm
PROMPT:             03A1 DEFINED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
CRLF:               03AA DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
PRINTSTR:           03B1 DEFINED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 147 IN MAIN.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
PUTSTR0:            03B8 DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
PUTSTR:             03BC DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
RPUSH:              03C1 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
RPOP:               03CC DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
RPOP2:              03D6 DEFINED AT LINE 485 IN MAIN.asm
WRITECHAR:          03D7 DEFINED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
ENTER:              03DC DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
CARRY:              03E5 DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
PAGE4:              0400 DEFINED AT LINE 510 IN MAIN.asm
AMPER_:             0400 DEFINED AT LINE 512 IN MAIN.asm
AND1:               0407 DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 545 IN MAIN.asm
PIPE_:              040B DEFINED AT LINE 526 IN MAIN.asm
CARET_:             0414 DEFINED AT LINE 536 IN MAIN.asm
XOR1:               0415 DEFINED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
INV_:               041D DEFINED AT LINE 547 IN MAIN.asm
PLUS_:              0422 DEFINED AT LINE 551 IN MAIN.asm
CALL_:              0429 DEFINED AT LINE 558 IN MAIN.asm
DOT_:               0433 DEFINED AT LINE 566 IN MAIN.asm
DOT2:               0437 DEFINED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
COMMA_:             043E DEFINED AT LINE 574 IN MAIN.asm
QUOTE_:             0444 DEFINED AT LINE 579 IN MAIN.asm
DQUOTE_:            0447 DEFINED AT LINE 583 IN MAIN.asm
AT_:                044C DEFINED AT LINE 588 IN MAIN.asm
FETCH1:             044D DEFINED AT LINE 590 IN MAIN.asm
FETCH2:             0458 DEFINED AT LINE 598 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
BSLASH_:            045B DEFINED AT LINE 602 IN MAIN.asm
UNDERSCORE_:        045B DEFINED AT LINE 603 IN MAIN.asm
NOP_:               045B DEFINED AT LINE 604 IN MAIN.asm
PERCENT_:           045E DEFINED AT LINE 607 IN MAIN.asm
SEMI_:              0465 DEFINED AT LINE 615 IN MAIN.asm
TILDE_:             046C DEFINED AT LINE 620 IN MAIN.asm
LBRACE_:            0473 DEFINED AT LINE 629 IN MAIN.asm
RBRACE_:            0478 DEFINED AT LINE 636 IN MAIN.asm
SHR1:               0479 DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
BANG_:              0480 DEFINED AT LINE 644 IN MAIN.asm
BANG1:              048B DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
DOLLAR_:            048D DEFINED AT LINE 657 IN MAIN.asm
MINUS_:             0492 DEFINED AT LINE 663 IN MAIN.asm
SUB1:               049E DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
SUB2:               04A0 DEFINED AT LINE 674 IN MAIN.asm
EQ_:                04A7 DEFINED AT LINE 680 IN MAIN.asm
GT_:                04B2 DEFINED AT LINE 688 IN MAIN.asm
LT_:                04B6 DEFINED AT LINE 693 IN MAIN.asm
LT1_:               04B8 DEFINED AT LINE 697 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
VAR_:               04C1 DEFINED AT LINE 703 IN MAIN.asm
GRAVE_:             04C8 DEFINED AT LINE 709 IN MAIN.asm
STR:                04C8 DEFINED AT LINE 710 IN MAIN.asm
STR1:               04C9 DEFINED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
STR2:               04D4 DEFINED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
LBRACK_:            04D7 DEFINED AT LINE 724 IN MAIN.asm
ARRDEF:             04D7 DEFINED AT LINE 725 IN MAIN.asm
QUESTION_:          04E0 DEFINED AT LINE 731 IN MAIN.asm
NUM_:               04E3 DEFINED AT LINE 733 IN MAIN.asm
LPAREN_:            04E6 DEFINED AT LINE 735 IN MAIN.asm
RPAREN_:            04E9 DEFINED AT LINE 737 IN MAIN.asm
RBRACK_:            04EC DEFINED AT LINE 739 IN MAIN.asm
COLON_:             04EF DEFINED AT LINE 741 IN MAIN.asm
HASH_:              04F2 DEFINED AT LINE 744 IN MAIN.asm
STAR_:              04F4 DEFINED AT LINE 746 IN MAIN.asm
SLASH_:             04F6 DEFINED AT LINE 748 IN MAIN.asm
ALT:                04F6 DEFINED AT LINE 754 IN MAIN.asm
HEX:                0511 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
HEX1:               0514 DEFINED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
HEX2:               051D DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
MUL:                0530 DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
MUL2:               053A DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
DIV:                054C DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
ABSBC:              055D DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
LOOP1:              0570 DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
LOOP2:              0571 DEFINED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
JUMPIN:             0574 DEFINED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
ENDSDIV:            0582 DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
DIV10:              058C DEFINED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
BEGIN:              0593 DEFINED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
LOOPSTART:          0593 DEFINED AT LINE 873 IN MAIN.asm
LOOPSTART1:         0599 DEFINED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
LOOPSTART2:         05AC DEFINED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
LOOPSTART3:         05C2 DEFINED AT LINE 899 IN MAIN.asm
AGAIN:              05C4 DEFINED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
LOOPEND:            05C4 DEFINED AT LINE 903 IN MAIN.asm
LOOPEND2:           05DB DEFINED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
LOOPEND3:           05E8 DEFINED AT LINE 923 IN MAIN.asm
LOOPEND4:           05F7 DEFINED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
PAGE6:              0600 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
ARRSIZE_:           0600 DEFINED AT LINE 940 IN MAIN.asm
ARRSIZE:            0600 DEFINED AT LINE 941 IN MAIN.asm
ANOP_:              0606 DEFINED AT LINE 948 IN MAIN.asm
BMODE_:             0608 DEFINED AT LINE 951 IN MAIN.asm
BREAK_:             0610 DEFINED AT LINE 958 IN MAIN.asm
WHILE_:             0610 DEFINED AT LINE 959 IN MAIN.asm
WHILE:              0610 DEFINED AT LINE 960 IN MAIN.asm
WHILE2:             061E DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
DEPTH_:             0620 DEFINED AT LINE 971 IN MAIN.asm
DEPTH:              0620 DEFINED AT LINE 972 IN MAIN.asm
PRINTCHAR_:         062E DEFINED AT LINE 981 IN MAIN.asm
EXEC_:              0635 DEFINED AT LINE 987 IN MAIN.asm
EXEC1:              063A DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
EDITDEF_:           063D DEFINED AT LINE 995 IN MAIN.asm
ELSE_:              0642 DEFINED AT LINE 999 IN MAIN.asm
FALSE_:             0648 DEFINED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
PROMPT_:            064E DEFINED AT LINE 1009 IN MAIN.asm
GO_:                0653 DEFINED AT LINE 1013 IN MAIN.asm
GO1:                0654 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
GO2:                0663 DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1023 IN MAIN.asm
GO3:                0666 DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
KEY_:               0668 DEFINED AT LINE 1031 IN MAIN.asm
INPORT_:            0671 DEFINED AT LINE 1038 IN MAIN.asm
NEWLN_:             067C DEFINED AT LINE 1048 IN MAIN.asm
OUTPORT_:           0681 DEFINED AT LINE 1052 IN MAIN.asm
TRUE_:              068A DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
UNLIMITED_:         0690 DEFINED AT LINE 1066 IN MAIN.asm
DEF:                0696 DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DEF0:               06A4 DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
DEF1:               06B2 DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
DEF2:               06BC DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
DEF3:               06BD DEFINED AT LINE 1103 IN MAIN.asm
NUM:                06C3 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
NUM0:               06CC DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
NUM1:               06CD DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
NUM2:               06E5 DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
NUM3:               06F0 DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
EDITDEF:            06F3 DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
EDITDEF1:           0710 DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
EDITDEF2:           0711 DEFINED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
EDITDEF3:           0719 DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
PRINTDEC:           0723 DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
PRINTDEC2:          0732 DEFINED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
PRINTDEC4:          0754 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
PRINTDEC5:          0756 DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
PRINTDEC6:          0766 DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
PRINTDEC7:          0767 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
ARREND:             076B DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
ARRAYEND1:          0789 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
ARRAYEND2:          079A DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
ARRINDEX:           07B3 DEFINED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
ARRINDEX1:          07BC DEFINED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
COMMENT:            07C0 DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
ALTVAR:             07C9 DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
LOOPVAR:            07DF DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1303 IN MAIN.asm
ALTCODE:            07E9 DEFINED AT LINE 1319 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
DSIZE:              0080 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 14 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 11 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 9 IN ram.asm
VARS_SIZE:          0068 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 68 IN ram.asm
TIB:                0800 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 167 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
RSTACK:             0980 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 303 IN MAIN.asm
DSTACK:             0A00 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 295 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
STACK:              0A00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
TBPTR:              0A00 DEFINED AT LINE 17 IN ram.asm
VTEMP1:             0A02 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
VTEMP2:             0A04 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
RST08:              0A06 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0A08 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0A0A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0A0C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0A0E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0A10 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0A12 DEFINED AT LINE 27 IN ram.asm
INTVEC:             0A14 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0A16 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0A18 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0A1A DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
OPCODES:            0B00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 328 IN MAIN.asm
ALTCODES:           0B5E DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1320 IN MAIN.asm
ALTVARS:            0C00 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 306 IN MAIN.asm
VBYTEMODE:          0C02 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
VCARRY:             0C04 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 503 IN MAIN.asm
VELSE:              0C08 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
VHEAPPTR:           0C0E DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
VTIBPTR:            0C14 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
VREMAIN:            0C22 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 868 IN MAIN.asm
VSTKSTART:          0C24 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 313 IN MAIN.asm
VUNLIMITED:         0C28 DEFINED AT LINE 61 IN ram.asm
VLASTDEF:           0C32 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
VARS:               0C34 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
HEAP:               0C9C DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 316 IN MAIN.asm
