0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 08               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 0A               LD   (RST08),HL   
0094   22 6C 0A               LD   (RST10),HL   
0097   22 6E 0A               LD   (RST18),HL   
009A   22 70 0A               LD   (RST20),HL   
009D   22 72 0A               LD   (RST28),HL   
00A0   22 74 0A               LD   (RST30),HL   
00A3   22 78 0A               LD   (INTVEC),HL   
00A6   22 7A 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT1_18 Micro-Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak John Hardy and Craig Jones. December 14th 2021
00C6                             ; 
00C6                             ;       CopyLeft: All Wrongs Reserved
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                             ;ROMSTART    EQU $0
00C6                             ;RAMSTART    EQU $800
00C6                             ;EXTENDED    EQU 0
00C6                             ;ROMSIZE     EQU $800
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                NUMGRPS:   EQU   5   
00C6                GRPSIZE:   EQU   $40   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180                MINT:        
0180   31 80 08               LD   SP,DSTACK   
0183   CD AA 01               CALL   initialize   
0186   CD 77 02               CALL   ENTER   
0189   60 4D 49 4E 54 20 56 31 2E 30 60 5C 4E 00 .CSTR   "`MINT V1.0`\\N"   
0197   C3 E4 01               JP   interpret   
019A                             ; ***********************************************************************
019A                             ; Initial values for user mintVars		
019A                             ; ***********************************************************************		
019A                ISYSVARS:      
019A   80 08                  DW   dStack   ; a vS0
019C   00 00                  DW   FALSE   ; b vBase16
019E   00 00                  DW   0   ; c vTIBPtr
01A0   C0 0A                  DW   DEFS   ; d vDEFS
01A2   00 00                  DW   0   ; e
01A4   00 00                  DW   0   ; f
01A6   00 00                  DW   0   ; g
01A8   00 0C                  DW   HEAP   ; h vHeapPtr
01AA                INITIALIZE:      
01AA   DD 21 00 09            LD   IX,RSTACK   
01AE   FD 21 46 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01B2   21 9A 01               LD   HL,iSysVars   
01B5   11 00 0A               LD   DE,sysVars   
01B8   01 10 00               LD   BC,8 * 2   
01BB   ED B0                  LDIR      
01BD   21 C0 0A               LD   HL,DEFS   
01C0   06 A0                  LD   B,GRPSIZE/2 * NUMGRPS   
01C2                INIT1:       
01C2   36 93                  LD   (HL),lsb(empty_)   
01C4   23                     INC   HL   
01C5   36 02                  LD   (HL),msb(empty_)   
01C7   23                     INC   HL   
01C8   10 F8                  DJNZ   init1   
01CA   C9                     RET      
01CB                MACRO:       ; 25
01CB   ED 43 04 0A            LD   (vTIBPtr),BC   
01CF   21 80 03               LD   HL,ctrlCodes   
01D2   85                     ADD   A,L   
01D3   6F                     LD   L,A   
01D4   5E                     LD   E,(HL)   
01D5   16 02                  LD   D,msb(macros)   
01D7   D5                     PUSH   DE   
01D8   CD 77 02               CALL   ENTER   
01DB   5C 47 00               .CSTR   "\\G"   
01DE   ED 4B 04 0A            LD   BC,(vTIBPtr)   
01E2   18 11                  JR   interpret2   
01E4                INTERPRET:      
01E4   CD 77 02               CALL   ENTER   
01E7   5C 4E 60 3E 20 60 00   .CSTR   "\\N`> `"   
01EE                INTERPRET1:      ; used by tests
01EE   01 00 00               LD   BC,0   ; load BC with offset into TIB
01F1   ED 43 04 0A            LD   (vTIBPtr),BC   
01F5                INTERPRET2:      ; calc nesting (a macro might have changed it)
01F5   1E 00                  LD   E,0   ; initilize nesting value
01F7   C5                     PUSH   BC   ; save offset into TIB,
01F8                             ; BC is also the count of chars in TIB
01F8   21 00 09               LD   HL,TIB   ; HL is start of TIB
01FB   18 06                  JR   interpret4   
01FD                INTERPRET3:      
01FD   7E                     LD   A,(HL)   ; A = char in TIB
01FE   23                     INC   HL   ; inc pointer into TIB
01FF   0B                     DEC   BC   ; dec count of chars in TIB
0200   CD AA 07               CALL   nesting   ; update nesting value
0203                INTERPRET4:      
0203   79                     LD   A,C   ; is count zero?
0204   B0                     OR   B   
0205   20 F6                  JR   NZ,interpret3   ; if not loop
0207   C1                     POP   BC   ; restore offset into TIB
0208                             ; *******************************************************************
0208                             ; Wait for a character from the serial input (keyboard)
0208                             ; and store it in the text buffer. Keep accepting characters,
0208                             ; increasing the instruction pointer BC - until a newline received.
0208                             ; *******************************************************************
0208                WAITCHAR:      
0208   CD 81 00               CALL   getchar   ; loop around waiting for character
020B   FE 20                  CP   $20   
020D   30 0C                  JR   NC,waitchar1   
020F   FE 00                  CP   $0   ; is it end of string?
0211   28 2B                  JR   Z,waitchar4   
0213   FE 0D                  CP   "\r"   ; carriage return?
0215   28 12                  JR   Z,waitchar3   
0217   16 00                  LD   D,0   
0219   18 B0                  JR   macro   
021B                WAITCHAR1:      
021B   21 00 09               LD   HL,TIB   
021E   09                     ADD   HL,BC   
021F   77                     LD   (HL),A   ; store the character in textbuf
0220   03                     INC   BC   
0221   CD 85 00               CALL   putchar   ; echo character to screen
0224   CD AA 07               CALL   nesting   
0227   18 DF                  JR   waitchar   ; wait for next character
0229                WAITCHAR3:      
0229   21 00 09               LD   HL,TIB   
022C   09                     ADD   HL,BC   
022D   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
022F   23                     INC   HL   
0230   36 0A                  LD   (HL),"\n"   
0232   03                     INC   BC   
0233   03                     INC   BC   
0234   CD 65 02               CALL   crlf   ; echo character to screen
0237   7B                     LD   A,E   ; if zero nesting append and ETX after \r
0238   B7                     OR   A   
0239   20 CD                  JR   NZ,waitchar   
023B   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
023D   03                     INC   BC   
023E                WAITCHAR4:      
023E   ED 43 04 0A            LD   (vTIBPtr),BC   
0242   01 00 09               LD   BC,TIB   ; Instructions stored on heap at address HERE
0245   0B                     DEC   BC   
0246                             ; Drop into the NEXT and dispatch routines
0246                             ; ********************************************************************************
0246                             ; 
0246                             ; Dispatch Routine.
0246                             ; 
0246                             ; Get the next character and form a 1 byte jump address
0246                             ; 
0246                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
0246                             ; jump to the selected function.
0246                             ; 
0246                             ; Individual handler routines will deal with each category:
0246                             ; 
0246                             ; 1. Detect characters A-Z and jump to the User Command handler routine
0246                             ; 
0246                             ; 2. Detect characters a-z and jump to the variable handler routine
0246                             ; 
0246                             ; 3. All other characters are punctuation and cause a jump to the associated
0246                             ; primitive code.
0246                             ; 
0246                             ; Instruction Pointer IP BC is incremented
0246                             ; 
0246                             ; *********************************************************************************
0246                NEXT:        ; 9
0246   03                     INC   BC   ; 6t    Increment the IP
0247   0A                     LD   A,(BC)   ; 7t    Get the next character and dispatch
0248   6F                     LD   L,A   ; 4t    Index into table
0249   26 03                  LD   H,msb(opcodes)   ; 7t    Start address of jump table
024B   6E                     LD   L,(HL)   ; 7t    get low jump address
024C   26 04                  LD   H,msb(page4)   ; 7t    Load H with the 1st page address
024E   E9                     JP   (HL)   ; 4t    Jump to routine
024F                RPUSH:       ; 11
024F   DD 2B                  DEC   IX   
0251   DD 74 00               LD   (IX+0),H   
0254   DD 2B                  DEC   IX   
0256   DD 75 00               LD   (IX+0),L   
0259   C9                     RET      
025A                RPOP:        ; 11
025A   DD 6E 00               LD   L,(IX+0)   
025D   DD 23                  INC   IX   
025F   DD 66 00               LD   H,(IX+0)   
0262   DD 23                  INC   IX   
0264   C9                     RET      
0265                CRLF:        ; 18
0265   3E 0D                  LD   A,"\r"   
0267   CD 85 00               CALL   putchar   
026A   3E 0A                  LD   A,"\n"   
026C   18 06                  JR   writeChar1   
026E                SPACE:       
026E   3E 20                  LD   A," "   
0270   18 02                  JR   writeChar1   
0272                WRITECHAR:      
0272   12                     LD   (DE),A   
0273   13                     INC   DE   
0274                WRITECHAR1:      
0274   C3 85 00               JP   putchar   
0277                ENTER:       ; 9
0277   60 69                  LD   HL,BC   
0279   CD 4F 02               CALL   rpush   ; save Instruction Pointer
027C   C1                     POP   BC   
027D   0B                     DEC   BC   
027E   FD E9                  JP   (IY)   ; Execute code from User def
0280                             ; ARRAY compilation routine
0280                COMPNEXT:      ; 19
0280   D1                     POP   DE   ; DE = return address
0281   2A 0E 0A               LD   HL,(vHeapPtr)   ; load heap ptr
0284   73                     LD   (HL),E   ; store lsb
0285   3A 36 0A               LD   A,(vByteMode)   
0288   23                     INC   HL   
0289   B7                     OR   A   
028A   20 02                  JR   NZ,compNext1   
028C   72                     LD   (HL),D   
028D   23                     INC   HL   
028E                COMPNEXT1:      
028E   22 0E 0A               LD   (vHeapPtr),HL   ; save heap ptr
0291   18 B3                  JR   NEXT   
0293                             ; **************************************************************************
0293                             ; Macros must be written in Mint and end with ;
0293                             ; this code must not span pages
0293                             ; **************************************************************************
0293                MACROS:      
0293                EMPTY_:      
0293   3B 00                  .CSTR   ";"   
0295                BACKSP_:      
0295   5C 63 40 30 3D 30 3D 28 31 5F 5C 63 5C 2B 38 5C 45 60 20 60 38 5C 45 29 3B 00 .CSTR   "\\c@0=0=(1_\\c\\+8\\E` `8\\E);"   
02AF                EDIT_:       
02AF   60 3F 60 5C 4B 5C 4E 60 3E 20 60 5C 5E 41 2D 5C 5A 3B 00 .CSTR   "`?`\\K\\N`> `\\^A-\\Z;"   
02C2                LIST_:       
02C2   5C 4E 32 36 28 5C 69 40 5C 5A 5C 63 40 30 3E 28 5C 4E 29 29 5C 4E 60 3E 20 60 3B 00 .CSTR   "\\N26(\\i@\\Z\\c@0>(\\N))\\N`> `;"   
02DE                PRINTSTACK_:      
02DE   60 3D 3E 20 60 5C 50 5C 4E 5C 4E 60 3E 20 60 3B 00 .CSTR   "`=> `\\P\\N\\N`> `;"   
02EF                TOGGLEBASE_:      
02EF   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
02F9                             ; **************************************************************************
02F9                             ; Page 2  Jump Tables
02F9                             ; **************************************************************************
02F9                          ALIGN   $100   
0300                OPCODES:      
0300                             ; ***********************************************************************
0300                             ; Initial values for user mintVars		
0300                             ; ***********************************************************************		
0300   60                     DB   lsb(exit_)   ;   NUL
0301   74                     DB   lsb(nop_)   ;   SOH
0302   74                     DB   lsb(nop_)   ;   STX
0303   5D                     DB   lsb(etx_)   ;   ETX
0304   74                     DB   lsb(nop_)   ;   EOT
0305   74                     DB   lsb(nop_)   ;   ENQ
0306   74                     DB   lsb(nop_)   ;   ACK
0307   74                     DB   lsb(nop_)   ;   BEL
0308   74                     DB   lsb(nop_)   ;   BS
0309   74                     DB   lsb(nop_)   ;   TAB
030A   74                     DB   lsb(nop_)   ;   LF
030B   74                     DB   lsb(nop_)   ;   VT
030C   74                     DB   lsb(nop_)   ;   FF
030D   74                     DB   lsb(nop_)   ;   CR
030E   74                     DB   lsb(nop_)   ;   SO
030F   74                     DB   lsb(nop_)   ;   SI
0310   74                     DB   lsb(nop_)   ;   DLE
0311   74                     DB   lsb(nop_)   ;   DC1
0312   74                     DB   lsb(nop_)   ;   DC2
0313   74                     DB   lsb(nop_)   ;   DC3
0314   74                     DB   lsb(nop_)   ;   DC4
0315   74                     DB   lsb(nop_)   ;   NAK
0316   74                     DB   lsb(nop_)   ;   SYN
0317   74                     DB   lsb(nop_)   ;   ETB
0318   74                     DB   lsb(nop_)   ;   CAN
0319   74                     DB   lsb(nop_)   ;   EM
031A   74                     DB   lsb(nop_)   ;   SUB
031B   74                     DB   lsb(nop_)   ;   ESC
031C   74                     DB   lsb(nop_)   ;   FS
031D   74                     DB   lsb(nop_)   ;   GS
031E   74                     DB   lsb(nop_)   ;   RS
031F   74                     DB   lsb(nop_)   ;   US
0320   74                     DB   lsb(nop_)   ;   SP
0321   88                     DB   lsb(store_)   ;   !
0322   58                     DB   lsb(dup_)   ;   "
0323   71                     DB   lsb(hex_)   ;    #
0324   8F                     DB   lsb(swap_)   ;    $
0325   7A                     DB   lsb(over_)   ;    %
0326   03                     DB   lsb(and_)   ;    &
0327   55                     DB   lsb(drop_)   ;    '
0328   31                     DB   lsb(begin_)   ;    (
0329   F0                     DB   lsb(again_)   ;    )
032A   DF                     DB   lsb(mul_)   ;    *
032B   25                     DB   lsb(add_)   ;    +
032C   46                     DB   lsb(hexp_)   ;    ,
032D   A7                     DB   lsb(sub_)   ;    -
032E   4C                     DB   lsb(dot_)   ;    .
032F   DD                     DB   lsb(div_)   ;    /
0330   77                     DB   lsb(num_)   ;    0
0331   77                     DB   lsb(num_)   ;    1
0332   77                     DB   lsb(num_)   ;    2
0333   77                     DB   lsb(num_)   ;    3
0334   77                     DB   lsb(num_)   ;    4
0335   77                     DB   lsb(num_)   ;    5
0336   77                     DB   lsb(num_)   ;    6
0337   77                     DB   lsb(num_)   ;    7
0338   77                     DB   lsb(num_)   ;    8
0339   77                     DB   lsb(num_)   ;    9
033A   43                     DB   lsb(def_)   ;    :
033B   81                     DB   lsb(ret_)   ;    ;
033C   C2                     DB   lsb(lt_)   ;    <
033D   AF                     DB   lsb(eq_)   ;    =
033E   BE                     DB   lsb(gt_)   ;    >
033F   BB                     DB   lsb(getRef_)   ;    ?
0340   6A                     DB   lsb(fetch_)   ;    @
0341   34                     DB   lsb(call_)   ;    A
0342   34                     DB   lsb(call_)   ;    B
0343   34                     DB   lsb(call_)   ;    C
0344   34                     DB   lsb(call_)   ;    D
0345   34                     DB   lsb(call_)   ;    E
0346   34                     DB   lsb(call_)   ;    F
0347   34                     DB   lsb(call_)   ;    G
0348   34                     DB   lsb(call_)   ;    H
0349   34                     DB   lsb(call_)   ;    I
034A   34                     DB   lsb(call_)   ;    J
034B   34                     DB   lsb(call_)   ;    K
034C   34                     DB   lsb(call_)   ;    L
034D   34                     DB   lsb(call_)   ;    M
034E   34                     DB   lsb(call_)   ;    N
034F   34                     DB   lsb(call_)   ;    O
0350   34                     DB   lsb(call_)   ;    P
0351   34                     DB   lsb(call_)   ;    Q
0352   34                     DB   lsb(call_)   ;    R
0353   34                     DB   lsb(call_)   ;    S
0354   34                     DB   lsb(call_)   ;    T
0355   34                     DB   lsb(call_)   ;    U
0356   34                     DB   lsb(call_)   ;    V
0357   34                     DB   lsb(call_)   ;    W
0358   34                     DB   lsb(call_)   ;    X
0359   34                     DB   lsb(call_)   ;    Y
035A   34                     DB   lsb(call_)   ;    Z
035B   2B                     DB   lsb(arrDef_)   ;    [
035C   00                     DB   lsb(alt_)   ;    \
035D   2E                     DB   lsb(arrEnd_)   ;    ]
035E   17                     DB   lsb(xor_)   ;    ^
035F   A1                     DB   lsb(neg_)   ;    _
0360   E1                     DB   lsb(str_)   ;    `
0361   D3                     DB   lsb(var_)   ;    a
0362   D3                     DB   lsb(var_)   ;    b
0363   D3                     DB   lsb(var_)   ;    c
0364   D3                     DB   lsb(var_)   ;    d
0365   D3                     DB   lsb(var_)   ;    e
0366   D3                     DB   lsb(var_)   ;    f
0367   D3                     DB   lsb(var_)   ;    g
0368   D3                     DB   lsb(var_)   ;    h
0369   D3                     DB   lsb(var_)   ;    i
036A   D3                     DB   lsb(var_)   ;    j
036B   D3                     DB   lsb(var_)   ;    k
036C   D3                     DB   lsb(var_)   ;    l
036D   D3                     DB   lsb(var_)   ;    m
036E   D3                     DB   lsb(var_)   ;    n
036F   D3                     DB   lsb(var_)   ;    o
0370   D3                     DB   lsb(var_)   ;    p
0371   D3                     DB   lsb(var_)   ;    q
0372   D3                     DB   lsb(var_)   ;    r
0373   D3                     DB   lsb(var_)   ;    s
0374   D3                     DB   lsb(var_)   ;    t
0375   D3                     DB   lsb(var_)   ;    u
0376   D3                     DB   lsb(var_)   ;    v
0377   D3                     DB   lsb(var_)   ;    w
0378   D3                     DB   lsb(var_)   ;    x
0379   D3                     DB   lsb(var_)   ;    y
037A   D3                     DB   lsb(var_)   ;    z
037B   94                     DB   lsb(shl_)   ;    {
037C   0E                     DB   lsb(or_)   ;    |
037D   99                     DB   lsb(shr_)   ;    }
037E   20                     DB   lsb(inv_)   ;    ~
037F   74                     DB   lsb(nop_)   ;    backspace
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   93                     DB   lsb(empty_)   ; NUL ^@
0381   93                     DB   lsb(empty_)   ; SOH ^A
0382   EF                     DB   lsb(toggleBase_)   ; STX ^B
0383   93                     DB   lsb(empty_)   ; ETX ^C
0384   93                     DB   lsb(empty_)   ; EOT ^D
0385   AF                     DB   lsb(edit_)   ; ENQ ^E
0386   93                     DB   lsb(empty_)   ; ACK ^F
0387   93                     DB   lsb(empty_)   ; BEL ^G
0388   95                     DB   lsb(backsp_)   ; BS  ^H
0389   93                     DB   lsb(empty_)   ; TAB ^I
038A   93                     DB   lsb(empty_)   ; LF  ^J
038B   93                     DB   lsb(empty_)   ; VT  ^K
038C   C2                     DB   lsb(list_)   ; FF  ^L
038D   93                     DB   lsb(empty_)   ; CR  ^M
038E   93                     DB   lsb(empty_)   ; SO  ^N
038F   93                     DB   lsb(empty_)   ; SI  ^O
0390   DE                     DB   lsb(printStack_)   ; DLE ^P
0391   93                     DB   lsb(empty_)   ; DC1 ^Q
0392   93                     DB   lsb(empty_)   ; DC2 ^R
0393   93                     DB   lsb(empty_)   ; DC3 ^S
0394   93                     DB   lsb(empty_)   ; DC4 ^T
0395   93                     DB   lsb(empty_)   ; NAK ^U
0396   93                     DB   lsb(empty_)   ; SYN ^V
0397   93                     DB   lsb(empty_)   ; ETB ^W
0398   93                     DB   lsb(empty_)   ; CAN ^X
0399   93                     DB   lsb(empty_)   ; EM  ^Y
039A   93                     DB   lsb(empty_)   ; SUB ^Z
039B   93                     DB   lsb(empty_)   ; ESC ^[
039C   93                     DB   lsb(empty_)   ; FS  ^\
039D   93                     DB   lsb(empty_)   ; GS  ^]
039E   93                     DB   lsb(empty_)   ; RS  ^^
039F   93                     DB   lsb(empty_)   ; US  ^_)
03A0   0A                     DB   lsb(aNop_)   ; SP  ^`
03A1   1D                     DB   lsb(cStore_)   ;    !
03A2   0A                     DB   lsb(aNop_)   ;    "
03A3   0A                     DB   lsb(aNop_)   ;    #
03A4   0A                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   0A                     DB   lsb(aNop_)   ;    %
03A6   0A                     DB   lsb(aNop_)   ;    &
03A7   0A                     DB   lsb(aNop_)   ;    '
03A8   3B                     DB   lsb(ifte_)   ;    (  ( b -- )
03A9   48                     DB   lsb(ifteEnd_)   ;    )
03AA   0A                     DB   lsb(aNop_)   ;    *
03AB   90                     DB   lsb(incr_)   ;    +  ( adr -- ) decrements variable at address
03AC   0A                     DB   lsb(aNop_)   ;    ,
03AD   0A                     DB   lsb(aNop_)   ;    -
03AE   0A                     DB   lsb(aNop_)   ;    .
03AF   0A                     DB   lsb(aNop_)   ;    /
03B0   0A                     DB   lsb(aNop_)   ;    0
03B1   0A                     DB   lsb(aNop_)   ;    1
03B2   0A                     DB   lsb(aNop_)   ;    2
03B3   0A                     DB   lsb(aNop_)   ;    3
03B4   0A                     DB   lsb(aNop_)   ;    4
03B5   0A                     DB   lsb(aNop_)   ;    5
03B6   0A                     DB   lsb(aNop_)   ;    6
03B7   0A                     DB   lsb(aNop_)   ;    7
03B8   0A                     DB   lsb(aNop_)   ;    8
03B9   0A                     DB   lsb(aNop_)   ;    9
03BA   0A                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   0A                     DB   lsb(aNop_)   ;    ;
03BC   0A                     DB   lsb(aNop_)   ;    <
03BD   0A                     DB   lsb(aNop_)   ;    =
03BE   0A                     DB   lsb(aNop_)   ;    >
03BF   0A                     DB   lsb(aNop_)   ;    ?
03C0   05                     DB   lsb(cFetch_)   ;    @
03C1   0A                     DB   lsb(aNop_)   ;    A
03C2   DA                     DB   lsb(break_)   ;    B
03C3   74                     DB   lsb(nop_)   ;    C
03C4   22                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   34                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   0A                     DB   lsb(aNop_)   ;    F
03C7   56                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   0A                     DB   lsb(aNop_)   ;    H
03C9   9B                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   0A                     DB   lsb(aNop_)   ;    J
03CB   B0                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   0A                     DB   lsb(aNop_)   ;    L
03CD   0A                     DB   lsb(aNop_)   ;    M
03CE   B9                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   BE                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   E9                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   0A                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
03D2   C7                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   0A                     DB   lsb(aNop_)   ;    S
03D4   0A                     DB   lsb(aNop_)   ;    T
03D5   0A                     DB   lsb(aNop_)   ;    U
03D6   0A                     DB   lsb(aNop_)   ;    V
03D7   0A                     DB   lsb(aNop_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   4E                     DB   lsb(exec_)   ;    X
03D9   0A                     DB   lsb(aNop_)   ;    Y
03DA   EB                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   14                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   0A                     DB   lsb(aNop_)   ;    ]
03DE   0C                     DB   lsb(charCode_)   ;    ^
03DF   CE                     DB   lsb(sign_)   ;    _)  ( n -- b ) returns true if -ve
03E0   0A                     DB   lsb(aNop_)   ;    `
03E1   82                     DB   lsb(sysVar_)   ;    a  ; start of data stack variable
03E2   82                     DB   lsb(sysVar_)   ;    b  ; base16 variable
03E3   82                     DB   lsb(sysVar_)   ;    c  ; TIBPtr variable
03E4   82                     DB   lsb(sysVar_)   ;    d
03E5   82                     DB   lsb(sysVar_)   ;    e
03E6   82                     DB   lsb(sysVar_)   ;    f
03E7   82                     DB   lsb(sysVar_)   ;    g
03E8   82                     DB   lsb(sysVar_)   ;    h  ; heap ptr variable
03E9   8C                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   A6                     DB   lsb(j_)   ;    j  ; returns index variable of outer loop
03EB   82                     DB   lsb(sysVar_)   ;    k
03EC   82                     DB   lsb(sysVar_)   ;    l
03ED   82                     DB   lsb(sysVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   82                     DB   lsb(sysVar_)   ;    n
03EF   82                     DB   lsb(sysVar_)   ;    o
03F0   82                     DB   lsb(sysVar_)   ;    p
03F1   82                     DB   lsb(sysVar_)   ;    q
03F2   82                     DB   lsb(sysVar_)   ;    r
03F3   82                     DB   lsb(sysVar_)   ;    s
03F4   82                     DB   lsb(sysVar_)   ;    t
03F5   82                     DB   lsb(sysVar_)   ;    u
03F6   82                     DB   lsb(sysVar_)   ;    v
03F7   82                     DB   lsb(sysVar_)   ;    w
03F8   82                     DB   lsb(sysVar_)   ;    x
03F9   82                     DB   lsb(sysVar_)   ;    y
03FA   82                     DB   lsb(sysVar_)   ;    z
03FB   67                     DB   lsb(group_)   ;    {
03FC   0A                     DB   lsb(aNop_)   ;    |
03FD   5F                     DB   lsb(endGroup_)   ;    }
03FE   0A                     DB   lsb(aNop_)   ;    ~
03FF   0A                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                ALT_:        
0400   C3 19 05               JP   alt   
0403                AND_:        
0403   D1                     POP   DE   ; 10t Bitwise AND the top 2 elements of the stack
0404   E1                     POP   HL   ; 10t
0405   7B                     LD   A,E   ; 4t
0406   A5                     AND   L   ; 4t
0407   6F                     LD   L,A   ; 4t
0408   7A                     LD   A,D   ; 4t
0409   A4                     AND   H   ; 4t
040A                AND1:        
040A   67                     LD   H,A   ; 4t
040B   E5                     PUSH   HL   ; 11t
040C   FD E9                  JP   (IY)   ; 8t
040E                             ; 63t
040E                OR_:         
040E   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
040F   E1                     POP   HL   
0410   7B                     LD   A,E   
0411   B5                     OR   L   
0412   6F                     LD   L,A   
0413   7A                     LD   A,D   
0414   B4                     OR   H   
0415   18 F3                  JR   and1   
0417                XOR_:        
0417   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0418                XOR1:        
0418   E1                     POP   HL   
0419   7B                     LD   A,E   
041A   AD                     XOR   L   
041B   6F                     LD   L,A   
041C   7A                     LD   A,D   
041D   AC                     XOR   H   
041E   18 EA                  JR   and1   
0420                INV_:        ; Bitwise INVert the top member of the stack
0420   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0423   18 F3                  JR   xor1   
0425                ADD_:        ; Add the top 2 members of the stack
0425   D1                     POP   DE   ; 10t
0426   E1                     POP   HL   ; 10t
0427   19                     ADD   HL,DE   ; 11t
0428   E5                     PUSH   HL   ; 11t
0429   FD E9                  JP   (IY)   ; 8t
042B                             ; 50t
042B   C3 48 07     ARRDEF_:   JP   arrDef   
042E   C3 24 05     ARREND_:   JP   arrEnd   
0431   C3 7E 05     BEGIN_:   JP   begin   
0434                CALL_:       
0434   60 69                  LD   HL,BC   
0436   CD 4F 02               CALL   rpush   ; save Instruction Pointer
0439   0A                     LD   A,(BC)   
043A   CD F2 05               CALL   getGroup   
043D   4E                     LD   C,(HL)   
043E   23                     INC   HL   
043F   46                     LD   B,(HL)   
0440   0B                     DEC   BC   
0441   FD E9                  JP   (IY)   ; Execute code from User def
0443   C3 5A 07     DEF_:     JP   def   
0446                HEXP_:       ; print hexadecimal
0446   E1                     POP   HL   
0447   CD D6 07               CALL   printhex   
044A   18 04                  JR   dot2   
044C                DOT_:        
044C   E1                     POP   HL   
044D   CD CE 05               CALL   printdec   
0450                DOT2:        
0450   CD 6E 02               CALL   space   
0453   FD E9                  JP   (IY)   
0455                DROP_:       ; Discard the top member of the stack
0455   E1                     POP   HL   
0456   FD E9                  JP   (IY)   
0458                DUP_:        
0458   E1                     POP   HL   ; Duplicate the top member of the stack
0459   E5                     PUSH   HL   
045A   E5                     PUSH   HL   
045B   FD E9                  JP   (IY)   
045D                ETX_:        
045D   C3 E4 01               JP   interpret   
0460                EXIT_:       
0460   03                     INC   BC   
0461   50 59                  LD   DE,BC   
0463   CD 5A 02               CALL   rpop   ; Restore Instruction pointer
0466   44 4D                  LD   BC,HL   
0468   EB                     EX   DE,HL   
0469   E9                     JP   (HL)   
046A                FETCH_:      ; Fetch the value from the address placed on the top of the stack
046A   E1                     POP   HL   ; 10t
046B                FETCH1:      
046B   5E                     LD   E,(HL)   ; 7t
046C   23                     INC   HL   ; 6t
046D   56                     LD   D,(HL)   ; 7t
046E   D5                     PUSH   DE   ; 11t
046F   FD E9                  JP   (IY)   ; 8t
0471   C3 79 07     HEX_:     JP   hex   
0474   C3 46 02     NOP_:     JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0477                NUM_:        
0477   C3 AC 05               JP   number   
047A                OVER_:       
047A   E1                     POP   HL   ; Duplicate 2nd element of the stack
047B   D1                     POP   DE   
047C   D5                     PUSH   DE   
047D   E5                     PUSH   HL   
047E   D5                     PUSH   DE   ; And push it to top of stack
047F   FD E9                  JP   (IY)   
0481                RET_:        
0481   CD 5A 02               CALL   rpop   ; Restore Instruction pointer
0484   44 4D                  LD   BC,HL   
0486   FD E9                  JP   (IY)   
0488                STORE_:      ; Store the value at the address placed on the top of the stack
0488   E1                     POP   HL   ; 10t
0489   D1                     POP   DE   ; 10t
048A   73                     LD   (HL),E   ; 7t
048B   23                     INC   HL   ; 6t
048C   72                     LD   (HL),D   ; 7t
048D   FD E9                  JP   (IY)   ; 8t
048F                             ; 48t
048F                             ; $ swap                    ; a b -- b a Swap the top 2 elements of the stack
048F                SWAP_:       
048F   E1                     POP   HL   
0490   E3                     EX   (SP),HL   
0491   E5                     PUSH   HL   
0492   FD E9                  JP   (IY)   
0494                             ;  Left shift { is multply by 2		
0494                SHL_:        
0494   E1                     POP   HL   ; Duplicate the top member of the stack
0495   29                     ADD   HL,HL   
0496   E5                     PUSH   HL   ; shift left fallthrough into add_
0497   FD E9                  JP   (IY)   ; 8t
0499                             ;  Right shift } is a divide by 2		
0499                             ; 
0499                SHR_:        
0499   E1                     POP   HL   ; Get the top member of the stack
049A   CB 3C                  SRL   H   
049C   CB 1D                  RR   L   
049E   E5                     PUSH   HL   
049F   FD E9                  JP   (IY)   ; 8t
04A1   21 00 00     NEG_:     LD   HL,0   ; NEGate the value on top of stack (2's complement)
04A4   D1                     POP   DE   ; 10t
04A5   18 02                  JR   SUB_2   ; use the SUBtract routine
04A7                SUB_:        ; Subtract the value 2nd on stack from top of stack
04A7   D1                     POP   DE   ; 10t
04A8   E1           SUB_1:    POP   HL   ; 10t  Entry point for INVert
04A9   A7           SUB_2:    AND   A   ;  4t  Entry point for NEGate
04AA   ED 52                  SBC   HL,DE   ; 15t
04AC   E5                     PUSH   HL   ; 11t
04AD   FD E9                  JP   (IY)   ; 8t
04AF                             ; 58t
04AF   E1           EQ_:      POP   HL   
04B0   D1                     POP   DE   
04B1   A7                     AND   A   ; reset the carry flag
04B2   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04B4   28 19                  JR   Z,equal   
04B6   21 00 00               LD   HL,0   
04B9   18 15                  JR   less   ; HL = 1
04BB                GETREF_:      
04BB   C3 E1 07               JP   getRef   
04BE   D1           GT_:      POP   DE   
04BF   E1                     POP   HL   
04C0   18 02                  JR   cmp_   
04C2   E1           LT_:      POP   HL   
04C3   D1                     POP   DE   
04C4   A7           CMP_:     AND   A   ; reset the carry flag
04C5   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04C7   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04C9   21 00 00               LD   HL,0   
04CC   FA D0 04               JP   M,less   
04CF   2C           EQUAL:    INC   L   ; HL = 1
04D0                LESS:        
04D0   E5                     PUSH   HL   
04D1   FD E9                  JP   (IY)   
04D3                VAR_:        
04D3   0A                     LD   A,(BC)   
04D4   D6 21                  SUB   "a" - ((VARS - mintVars)/2)   
04D6   87                     ADD   A,A   
04D7   6F                     LD   L,A   
04D8   26 0A                  LD   H,msb(mintVars)   
04DA   E5                     PUSH   HL   
04DB   FD E9                  JP   (IY)   
04DD   18 7D        DIV_:     JR   div   
04DF   18 5F        MUL_:     JR   mul   
04E1                STR_:        
04E1                STR:         ;= 15
04E1   03                     INC   BC   
04E2                NEXTCHAR:      
04E2   0A                     LD   A,(BC)   
04E3   03                     INC   BC   
04E4   FE 60                  CP   "`"   ; ` is the string terminator
04E6   28 05                  JR   Z,str2   
04E8   CD 85 00               CALL   putchar   
04EB   18 F5                  JR   nextchar   
04ED                STR2:        
04ED   0B                     DEC   BC   
04EE   FD E9                  JP   (IY)   
04F0   18 00        AGAIN_:   JR   again   
04F2                             ;*******************************************************************
04F2                             ; Page 5 primitive routines
04F2                             ;*******************************************************************
04F2                             ;falls through
04F2                AGAIN:       
04F2   DD 5E 00               LD   E,(IX+0)   ; peek loop var
04F5   DD 56 01               LD   D,(IX+1)   
04F8   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
04FB   DD 66 03               LD   H,(IX+3)   
04FE   B7                     OR   A   
04FF   ED 52                  SBC   HL,DE   
0501   28 0F                  JR   Z,again2   
0503   13                     INC   DE   
0504   DD 73 00               LD   (IX+0),E   ; poke loop var
0507   DD 72 01               LD   (IX+1),D   
050A   DD 4E 04               LD   C,(IX+4)   ; peek loop address
050D   DD 46 05               LD   B,(IX+5)   
0510   FD E9                  JP   (IY)   
0512                AGAIN2:      
0512   11 06 00               LD   DE,6   ; drop loop frame
0515   DD 19                  ADD   IX,DE   
0517   FD E9                  JP   (IY)   
0519                ALT:         ;= 11
0519   03                     INC   BC   
051A   0A                     LD   A,(BC)   
051B   21 80 03               LD   HL,altCodes   
051E   85                     ADD   A,L   
051F   6F                     LD   L,A   
0520   6E                     LD   L,(HL)   ; 7t    get low jump address
0521   26 06                  LD   H,msb(page6)   ; Load H with the 5th page address
0523   E9                     JP   (HL)   ; 4t    Jump to routine
0524                             ; end a word array
0524                ARREND:      ;= 27
0524   CD 5A 02               CALL   rpop   ; DE = start of array
0527   E5                     PUSH   HL   
0528   EB                     EX   DE,HL   
0529   2A 0E 0A               LD   HL,(vHeapPtr)   ; HL = heap ptr
052C   B7                     OR   A   
052D   ED 52                  SBC   HL,DE   ; bytes on heap
052F   3A 36 0A               LD   A,(vByteMode)   
0532   B7                     OR   A   
0533   20 04                  JR   NZ,arrEnd2   
0535   CB 3C                  SRL   H   ; BC = m words
0537   CB 1D                  RR   L   
0539                ARREND2:      
0539   E5                     PUSH   HL   
053A   FD 21 46 02            LD   IY,NEXT   
053E   FD E9                  JP   (IY)   ; hardwired to NEXT
0540                             ; ********************************************************************
0540                             ; 16-bit multiply
0540                MUL:         ; 19
0540   D1                     POP   DE   ; get first value
0541   E1                     POP   HL   
0542   C5                     PUSH   BC   ; Preserve the IP
0543   44                     LD   B,H   ; BC = 2nd value
0544   4D                     LD   C,L   
0545   21 00 00               LD   HL,0   
0548   3E 10                  LD   A,16   
054A                MUL_LOOP_1:      
054A   29                     ADD   HL,HL   
054B   CB 13                  RL   E   
054D   CB 12                  RL   D   
054F   30 04                  JR   NC,$+6   
0551   09                     ADD   HL,BC   
0552   30 01                  JR   NC,$+3   
0554   13                     INC   DE   
0555   3D                     DEC   A   
0556   20 F2                  JR   NZ,Mul_Loop_1   
0558                             ; 
0558   C1                     POP   BC   ; Restore the IP
0559   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
055A                             ; 
055A   FD E9                  JP   (IY)   
055C                             ; ********************************************************************
055C                             ; 16-bit division subroutine.
055C                             ; 
055C                             ; BC: divisor, DE: dividend, HL: remainder
055C                             ; *********************************************************************
055C                             ; This divides DE by BC, storing the result in DE, remainder in HL
055C                             ; *********************************************************************
055C                             ; 1382 cycles
055C                             ; 35 bytes (reduced from 48)
055C                             ; 
055C                DIV:         ; 24
055C   D1                     POP   DE   ; get first value
055D   E1                     POP   HL   ; get 2nd value
055E   C5                     PUSH   BC   ; Preserve the IP
055F   44                     LD   B,H   ; BC = 2nd value
0560   4D                     LD   C,L   
0561                             ; 
0561   21 00 00               LD   hl,0   ; Zero the remainder
0564   3E 10                  LD   a,16   ; Loop counter
0566                DIV_LOOP:      ;shift the bits from BC (numerator) into HL (accumulator)
0566   CB 21                  SLA   c   
0568   CB 10                  RL   b   
056A   ED 6A                  ADC   hl,hl   
056C   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (HL>=DE)
056E   38 03                  JR   c,div_adjust   
0570   0C                     INC   c   
0571   18 01                  JR   div_done   
0573                DIV_ADJUST:      ; remainder is not >= denominator, so we have to add DE back to HL
0573   19                     ADD   hl,de   
0574                DIV_DONE:      
0574   3D                     DEC   a   
0575   20 EF                  JR   nz,div_loop   
0577   50                     LD   D,B   ; Result from BC to DE
0578   59                     LD   E,C   
0579                DIV_END:      
0579   C1                     POP   BC   ; Restore the IP
057A   D5                     PUSH   DE   ; Push Result
057B   E5                     PUSH   HL   ; Push remainder
057C   FD E9                  JP   (IY)   
057E                             ; *************************************
057E                             ; Loop Handling Code
057E                             ; *************************************
057E                             ;= 23
057E                BEGIN:       ; Left parentesis begins a loop
057E   E1                     POP   HL   
057F   7D                     LD   A,L   ; zero?
0580   B4                     OR   H   
0581   28 1C                  JR   Z,begin1   
0583   2B                     DEC   HL   
0584   11 FA FF               LD   DE,-6   
0587   DD 19                  ADD   IX,DE   
0589   DD 36 00 00            LD   (IX+0),0   ; loop var
058D   DD 36 01 00            LD   (IX+1),0   
0591   DD 75 02               LD   (IX+2),L   ; loop limit
0594   DD 74 03               LD   (IX+3),H   
0597   DD 71 04               LD   (IX+4),C   ; loop address
059A   DD 70 05               LD   (IX+5),B   
059D   FD E9                  JP   (IY)   
059F                BEGIN1:      
059F   1E 01                  LD   E,1   
05A1                BEGIN2:      
05A1   03                     INC   BC   
05A2   0A                     LD   A,(BC)   
05A3   CD AA 07               CALL   nesting   
05A6   AF                     XOR   A   
05A7   B3                     OR   E   
05A8   20 F7                  JR   NZ,begin2   
05AA                BEGIN3:      
05AA   FD E9                  JP   (IY)   
05AC                             ; ********************************************************************************
05AC                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
05AC                             ; Read the first character.
05AC                             ;			
05AC                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
05AC                             ; and then added into the L register. (HL forms a 16-bit accumulator)
05AC                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
05AC                             ; and then add in the next digit. Repeat this until a non-number character is
05AC                             ; detected. Add in the final digit so that HL contains the converted number.
05AC                             ; Push HL onto the stack and proceed to the dispatch routine.
05AC                             ; ********************************************************************************
05AC                NUMBER:      ;= 23
05AC   21 00 00               LD   HL,$0000   ; 10t Clear HL to accept the number
05AF   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
05B0                NUMBER1:      ; corrected KB 24/11/21
05B0   D6 30                  SUB   $30   ; 7t    Form decimal digit
05B2   85                     ADD   A,L   ; 4t    Add into bottom of HL
05B3   6F                     LD   L,A   ; 4t
05B4   3E 00                  LD   A,00   ; 4t    Clear A
05B6   8C                     ADC   A,H   ; Add with carry H-reg
05B7   67                     LD   H,A   ; Put result in H-reg
05B8   03                     INC   BC   ; 6t    Increment IP
05B9   0A                     LD   A,(BC)   ; 7t    and get the next character
05BA   FE 30                  CP   $30   ; 7t    Less than $30
05BC   38 0C                  JR   C,endnum   ; 7/12t Not a number / end of number
05BE   FE 3A                  CP   $3A   ; 7t    Greater or equal to $3A
05C0   30 08                  JR   NC,endnum   ; 7/12t Not a number / end of number
05C2                TIMES10:      ; Multiply digit(s) in HL by 10
05C2   29                     ADD   HL,HL   ; 11t    2X
05C3   5D                     LD   E,L   ;  4t    LD DE,HL
05C4   54                     LD   D,H   ;  4t
05C5   29                     ADD   HL,HL   ; 11t    4X
05C6   29                     ADD   HL,HL   ; 11t    8X
05C7   19                     ADD   HL,DE   ; 11t    2X  + 8X  = 10X
05C8                             ; 52t cycles
05C8   18 E6                  JR   number1   
05CA                ENDNUM:      
05CA   0B                     DEC   BC   
05CB   E5                     PUSH   HL   ; 11t   Put the number on the stack
05CC   FD E9                  JP   (IY)   ; and process the next character
05CE                PRINTDEC:      
05CE                             ;Number in hl to decimal ASCII
05CE                             ;inputs:	hl = number to ASCII
05CE                             ;example: hl=300 outputs "00300"
05CE                             ;destroys: af, de, hl
05CE                DISPHL:      ;= 36
05CE   11 F0 D8               LD   de,-10000   
05D1   CD E7 05               CALL   Num1   
05D4   11 18 FC               LD   de,-1000   
05D7   CD E7 05               CALL   Num1   
05DA   11 9C FF               LD   de,-100   
05DD   CD E7 05               CALL   Num1   
05E0   1E F6                  LD   e,-10   
05E2   CD E7 05               CALL   Num1   
05E5   1E FF                  LD   e,-1   
05E7                NUM1:        
05E7   3E 2F                  LD   a,"0"-1   
05E9                NUM2:        
05E9   3C                     INC   a   
05EA   19                     ADD   hl,de   
05EB   38 FC                  JR   c,Num2   
05ED   ED 52                  SBC   hl,de   
05EF   C3 85 00               JP   putchar   
05F2                GETGROUP:      ;= 11
05F2   D6 41                  SUB   "A"   
05F4   87                     ADD   A,A   
05F5   5F                     LD   E,A   
05F6   16 00                  LD   D,0   
05F8   2A 06 0A               LD   HL,(vDEFS)   
05FB   19                     ADD   HL,DE   
05FC   C9                     RET      
05FD                             ; **************************************************************************
05FD                             ; Page 6 Alt primitives
05FD                             ; **************************************************************************
05FD                          ALIGN   $100   
0600                PAGE6:       
0600                CARRDEF_:      ; define a byte array
0600   3E 01                  LD   A,TRUE   
0602   C3 4A 07               JP   arrDef1   
0605                CFETCH_:      
0605   E1                     POP   HL   ; 10t
0606   16 00                  LD   D,0   ; 7t
0608   5E                     LD   E,(HL)   ; 7t
0609   D5                     PUSH   DE   ; 11t
060A                ANOP_:       
060A   FD E9                  JP   (IY)   ; 8t
060C                             ; 49t
060C                CHARCODE_:      
060C   03                     INC   BC   
060D   0A                     LD   A,(BC)   
060E   26 00                  LD   H,0   
0610   6F                     LD   L,A   
0611   E5                     PUSH   HL   
0612   FD E9                  JP   (IY)   
0614                COMMENT_:      
0614   03                     INC   BC   ; point to next char
0615   0A                     LD   A,(BC)   
0616   FE 0D                  CP   "\r"   ; terminate at cr
0618   20 FA                  JR   NZ,comment_   
061A                             ; CP "\n"             ; terminate at lf
061A                             ; JR NZ,comment_
061A   0B                     DEC   BC   
061B   FD E9                  JP   (IY)   
061D                CSTORE_:      
061D   E1                     POP   HL   ; 10t
061E   D1                     POP   DE   ; 10t
061F   73                     LD   (HL),E   ; 7t
0620   FD E9                  JP   (IY)   ; 8t
0622                             ; 48t
0622                DEPTH_:      
0622   21 00 00               LD   HL,0   
0625   39                     ADD   HL,SP   
0626   EB                     EX   DE,HL   
0627   21 80 08               LD   HL,DSTACK   
062A   B7                     OR   A   
062B   ED 52                  SBC   HL,DE   
062D   CB 3C                  SRL   H   
062F   CB 1D                  RR   L   
0631   E5                     PUSH   HL   
0632   FD E9                  JP   (IY)   
0634                EMIT_:       
0634   E1                     POP   HL   
0635   7D                     LD   A,L   
0636   CD 85 00               CALL   putchar   
0639   FD E9                  JP   (IY)   
063B                IFTE_:       
063B   D1                     POP   DE   
063C   7B                     LD   A,E   
063D   B2                     OR   D   
063E   C2 46 06               JP   NZ,ifte1   
0641   13                     INC   DE   
0642   D5                     PUSH   DE   ; push TRUE on stack for else clause
0643   C3 9F 05               JP   begin1   ; skip to closing ) works with \) too
0646                IFTE1:       
0646   FD E9                  JP   (IY)   
0648                IFTEEND_:      ; 
0648   21 00 00               LD   HL,FALSE   ; push FALSE condition on stack
064B   E5                     PUSH   HL   
064C   FD E9                  JP   (IY)   
064E                EXEC_:       
064E   CD 53 06               CALL   exec1   
0651   FD E9                  JP   (IY)   
0653                EXEC1:       
0653   E1                     POP   HL   
0654   E3                     EX   (SP),HL   
0655   E9                     JP   (HL)   
0656                GO_:         
0656   60 69                  LD   HL,BC   
0658   CD 4F 02               CALL   rpush   ; save Instruction Pointer
065B   C1                     POP   BC   
065C   0B                     DEC   BC   
065D   FD E9                  JP   (IY)   ; Execute code from User def
065F                ENDGROUP_:      
065F   CD 5A 02               CALL   rpop   
0662   22 06 0A               LD   (vDEFS),HL   
0665   FD E9                  JP   (IY)   
0667                GROUP_:      
0667   D1                     POP   DE   
0668   53                     LD   D,E   
0669   1E 00                  LD   E,0   
066B   CB 3A                  SRL   D   
066D   CB 1B                  RR   E   
066F   CB 3A                  SRL   D   
0671   CB 1B                  RR   E   
0673   2A 06 0A               LD   HL,(vDEFS)   
0676   CD 4F 02               CALL   rpush   
0679   21 C0 0A               LD   HL,DEFS   
067C   19                     ADD   HL,DE   
067D   22 06 0A               LD   (vDEFS),HL   
0680   FD E9                  JP   (IY)   ; Execute code from User def
0682                SYSVAR_:      
0682   0A                     LD   A,(BC)   
0683   D6 61                  SUB   "a" - ((sysVars - mintVars)/2)   
0685   87                     ADD   A,A   
0686   6F                     LD   L,A   
0687   26 0A                  LD   H,msb(mintVars)   
0689   E5                     PUSH   HL   
068A   FD E9                  JP   (IY)   ; Execute code from User def
068C                I_:          
068C   DD E5                  PUSH   IX   
068E   FD E9                  JP   (IY)   
0690                             ; \+    a b -- [b]+a            ; increment variable at b by a
0690                INCR_:       
0690   E1                     POP   HL   
0691   D1                     POP   DE   
0692   7B                     LD   A,E   
0693   86                     ADD   A,(HL)   
0694   77                     LD   (HL),A   
0695   23                     INC   HL   
0696   7A                     LD   A,D   
0697   8E                     ADC   A,(HL)   
0698   77                     LD   (HL),A   
0699   FD E9                  JP   (IY)   
069B                INPORT_:      
069B   E1                     POP   HL   
069C   79                     LD   A,C   
069D   4D                     LD   C,L   
069E   ED 68                  IN   L,(C)   
06A0   26 00                  LD   H,0   
06A2   4F                     LD   C,A   
06A3   E5                     PUSH   HL   
06A4   FD E9                  JP   (IY)   
06A6                J_:          
06A6   DD E5                  PUSH   IX   
06A8   E1                     POP   HL   
06A9   11 06 00               LD   DE,6   
06AC   19                     ADD   HL,DE   
06AD   E5                     PUSH   HL   
06AE   FD E9                  JP   (IY)   
06B0                KEY_:        
06B0   CD 81 00               CALL   getchar   
06B3   6F                     LD   L,A   
06B4   26 00                  LD   H,0   
06B6   E5                     PUSH   HL   
06B7   FD E9                  JP   (IY)   
06B9                NEWLN_:      
06B9   CD 65 02               CALL   crlf   
06BC   FD E9                  JP   (IY)   
06BE                OUTPORT_:      
06BE   E1                     POP   HL   
06BF   59                     LD   E,C   
06C0   4D                     LD   C,L   
06C1   E1                     POP   HL   
06C2   ED 69                  OUT   (C),L   
06C4   4B                     LD   C,E   
06C5   FD E9                  JP   (IY)   
06C7                ROT_:        ; a b c -- b c a
06C7   D1                     POP   DE   ; a b                   de = c
06C8   E1                     POP   HL   ; a                     hl = b
06C9   E3                     EX   (SP),HL   ; b                     hl = a
06CA   D5                     PUSH   DE   ; b c
06CB   E5                     PUSH   HL   ; b c a
06CC   FD E9                  JP   (IY)   
06CE                SIGN_:       
06CE   E1                     POP   HL   
06CF   CB 7C                  BIT   7,H   
06D1   21 00 00               LD   HL,0   
06D4   28 01                  JR   Z,sign2   
06D6   23                     INC   HL   
06D7                SIGN2:       
06D7   E5                     PUSH   HL   
06D8   FD E9                  JP   (IY)   
06DA                BREAK_:      
06DA   E1                     POP   HL   
06DB   7D                     LD   A,L   ; zero?
06DC   B4                     OR   H   
06DD   20 02                  JR   NZ,break1   
06DF   FD E9                  JP   (IY)   
06E1                BREAK1:      
06E1   11 06 00               LD   DE,6   ; drop loop frame
06E4   DD 19                  ADD   IX,DE   
06E6   C3 9F 05               JP   begin1   ; skip to end of loop
06E9                PRINTSTK_:      
06E9   18 36                  JR   printStk   
06EB                EDITDEF_:      
06EB                             ; **************************************************************************
06EB                             ; Page 6 primitive routines
06EB                             ; **************************************************************************
06EB                             ; falls through
06EB                             ; **************************************************************************
06EB                             ; copy definition to text input buffer
06EB                             ; update TIBPtr
06EB                             ; **************************************************************************
06EB                             ;= 54
06EB                EDITDEF:      ; lookup up def based on number
06EB   3E 41                  LD   A,"A"   
06ED   D1                     POP   DE   
06EE   83                     ADD   A,E   
06EF   08                     EX   AF,AF'   
06F0   2A 06 0A               LD   HL,(vDEFS)   
06F3   19                     ADD   HL,DE   
06F4   19                     ADD   HL,DE   
06F5   5E                     LD   E,(HL)   
06F6   23                     INC   HL   
06F7   56                     LD   D,(HL)   
06F8   EB                     EX   DE,HL   
06F9   7E                     LD   A,(HL)   
06FA   FE 3B                  CP   ";"   
06FC   11 00 09               LD   DE,TIB   
06FF   28 14                  JR   Z,editDef3   
0701   3E 3A                  LD   A,":"   
0703   CD 72 02               CALL   writeChar   
0706   08                     EX   AF,AF'   
0707   CD 72 02               CALL   writeChar   
070A   18 01                  JR   editDef2   
070C                EDITDEF1:      
070C   23                     INC   HL   
070D                EDITDEF2:      
070D   7E                     LD   A,(HL)   
070E   CD 72 02               CALL   writeChar   
0711   FE 3B                  CP   ";"   
0713   20 F7                  JR   NZ,editDef1   
0715                EDITDEF3:      
0715   21 00 09               LD   HL,TIB   
0718   EB                     EX   DE,HL   
0719   B7                     OR   A   
071A   ED 52                  SBC   HL,DE   
071C   22 04 0A               LD   (vTIBPtr),HL   
071F   FD E9                  JP   (IY)   
0721                PRINTSTK:      ;= 40
0721   CD 77 02               CALL   ENTER   
0724   5C 61 40 32 2D 5C 44 31 2D 22 5C 5F 30 3D 28 28 22 40 5C 62 40 5C 28 2E 29 28 2C 29 32 2D 29 29 27 00 .CSTR   "\\a@2-\\D1-",$22,"\\_0=((",$22,"@\\b@\\(.)(,)2-))'"   
0746   FD E9                  JP   (IY)   
0748                             ;*******************************************************************
0748                             ; Page 5 primitive routines continued
0748                             ;*******************************************************************
0748                             ; define a word array
0748                ARRDEF:      ;= 18
0748   3E 00                  LD   A,FALSE   
074A                ARRDEF1:      
074A   FD 21 80 02            LD   IY,compNEXT   
074E   32 36 0A               LD   (vByteMode),A   
0751   2A 0E 0A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0754   CD 4F 02               CALL   rpush   ; save start of array \[  \]
0757   C3 46 02               JP   NEXT   ; hardwired to NEXT
075A                             ; **************************************************************************
075A                             ; def is used to create a colon definition
075A                             ; When a colon is detected, the next character (usually uppercase alpha)
075A                             ; is looked up in the vector table to get its associated code field address
075A                             ; This CFA is updated to point to the character after uppercase alpha
075A                             ; The remainder of the characters are then skipped until after a semicolon
075A                             ; is found.
075A                             ; ***************************************************************************
075A                             ;= 31
075A                DEF:         ; Create a colon definition
075A   03                     INC   BC   
075B   0A                     LD   A,(BC)   ; Get the next character
075C   03                     INC   BC   
075D   CD F2 05               CALL   getGroup   
0760   ED 5B 0E 0A            LD   DE,(vHeapPtr)   ; start of defintion
0764   73                     LD   (HL),E   ; Save low byte of address in CFA
0765   23                     INC   HL   
0766   72                     LD   (HL),D   ; Save high byte of address in CFA+1
0767                NEXTBYTE:      ; Skip to end of definition
0767   0A                     LD   A,(BC)   ; Get the next character
0768   03                     INC   BC   ; Point to next character
0769   12                     LD   (DE),A   
076A   13                     INC   DE   
076B   FE 3B                  CP   ";"   ; Is it a semicolon
076D   CA 72 07               JP   z,end_def   ; end the definition
0770   18 F5                  JR   nextbyte   ; get the next element
0772                END_DEF:      
0772   ED 53 0E 0A            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
0776   0B                     DEC   BC   
0777   FD E9                  JP   (IY)   
0779                             ; ***************************************************************************
0779                HEX:         ;= 26
0779   21 00 00               LD   HL,0   ; 10t Clear HL to accept the number
077C                HEX1:        
077C   03                     INC   BC   
077D   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
077E   CB 77                  BIT   6,A   ; 7t    is it uppercase alpha?
0780   28 02                  JR   Z,hex2   ; no a decimal
0782   D6 07                  SUB   7   ; sub 7  to make $A - $F
0784                HEX2:        
0784   D6 30                  SUB   $30   ; 7t    Form decimal digit
0786   DA CA 05               JP   C,endnum   
0789   FE 10                  CP   $0F+1   
078B   D2 CA 05               JP   NC,endnum   
078E   29                     ADD   HL,HL   ; 11t    2X ; Multiply digit(s) in HL by 16
078F   29                     ADD   HL,HL   ; 11t    4X
0790   29                     ADD   HL,HL   ; 11t    8X
0791   29                     ADD   HL,HL   ; 11t   16X
0792   85                     ADD   A,L   ; 4t    Add into bottom of HL
0793   6F                     LD   L,A   ; 4t
0794   18 E6                  JR   hex1   
0796                             ; Print an 8-bit HEX number  - shortened KB 25/11/21
0796                             ; A: Number to print
0796                             ; 
0796                PRINT_HEX8:      ;= 20
0796   4F                     LD   C,A   
0797   1F                     RRA      
0798   1F                     RRA      
0799   1F                     RRA      
079A   1F                     RRA      
079B   CD 9F 07               CALL   conv   
079E   79                     LD   A,C   
079F                CONV:        
079F   E6 0F                  AND   0x0F   
07A1   C6 90                  ADD   A,0x90   
07A3   27                     DAA      
07A4   CE 40                  ADC   A,0x40   
07A6   27                     DAA      
07A7   C3 85 00               JP   putchar   
07AA                             ; **************************************************************************
07AA                             ; calculate nesting value
07AA                             ; A is char to be tested,
07AA                             ; E is the nesting value (initially 0)
07AA                             ; E is increased by ( and [
07AA                             ; E is decreased by ) and ]
07AA                             ; E has its bit 7 toggled by `
07AA                             ; limited to 127 levels
07AA                             ; **************************************************************************
07AA                NESTING:      ;= 44
07AA   FE 60                  CP   "`"   
07AC   20 0A                  JR   NZ,nesting1   
07AE   CB 7B                  BIT   7,E   
07B0   28 03                  JR   Z,nesting1a   
07B2   CB BB                  RES   7,E   
07B4   C9                     RET      
07B5                NESTING1A:      
07B5   CB FB                  SET   7,E   
07B7   C9                     RET      
07B8                NESTING1:      
07B8   CB 7B                  BIT   7,E   
07BA   C0                     RET   NZ   
07BB   FE 3A                  CP   ":"   
07BD   28 08                  JR   Z,nesting2   
07BF   FE 5B                  CP   "["   
07C1   28 04                  JR   Z,nesting2   
07C3   FE 28                  CP   "("   
07C5   20 02                  JR   NZ,nesting3   
07C7                NESTING2:      
07C7   1C                     INC   E   
07C8   C9                     RET      
07C9                NESTING3:      
07C9   FE 3B                  CP   ";"   
07CB   28 07                  JR   Z,nesting4   
07CD   FE 5D                  CP   "]"   
07CF   28 03                  JR   Z,nesting4   
07D1   FE 29                  CP   ")"   
07D3   C0                     RET   NZ   
07D4                NESTING4:      
07D4   1D                     DEC   E   
07D5   C9                     RET      
07D6                PRINTHEX:      ;= 11
07D6                             ; Display HL as a 16-bit number in hex.
07D6   C5                     PUSH   BC   ; preserve the IP
07D7   7C                     LD   A,H   
07D8   CD 96 07               CALL   Print_Hex8   
07DB   7D                     LD   A,L   
07DC   CD 96 07               CALL   Print_Hex8   
07DF   C1                     POP   BC   
07E0   C9                     RET      
07E1                GETREF:      ;= 8
07E1   03                     INC   BC   
07E2   0A                     LD   A,(BC)   
07E3   CD F2 05               CALL   getGroup   
07E6   C3 6B 04               JP   fetch1   
0800                          .ORG   RAMSTART   
0800                          DS   DSIZE   
0880                STACK:       
0880                DSTACK:      
0880                          DS   RSIZE   
0900                RSTACK:      
0900                TIB:      DS   TIBSIZE   
0A00                          ALIGN   $100   
0A00                MINTVARS:      
0A00                SYSVARS:      
0A00                VS0:      DS   2   ; a
0A02                VBASE16:   DS   2   ; b
0A04                VTIBPTR:   DS   2   ; c
0A06                VDEFS:    DS   2   ; d
0A08                          DS   2   ; e
0A0A                          DS   2   ; f
0A0C                          DS   2   ; g
0A0E                VHEAPPTR:   DS   2   ; h
0A10                          DS   2   ; i
0A12                          DS   2   ; j
0A14                          DS   2   ; k
0A16                          DS   2   ; l
0A18                          DS   2   ; m
0A1A                          DS   2   ; n
0A1C                          DS   2   ; o
0A1E                          DS   2   ; p
0A20                          DS   2   ; q
0A22                          DS   2   ; r
0A24                          DS   2   ; s
0A26                          DS   2   ; t
0A28                          DS   2   ; u
0A2A                          DS   2   ; v
0A2C                          DS   2   ; w
0A2E                          DS   2   ; x
0A30                          DS   2   ; y
0A32                          DS   2   ; z
0A34                VIFTEMODE:   DS   2   ; 
0A36                VBYTEMODE:   DS   2   ; 
0A38                          DS   $30   
0A68                TBPTR:    DS   2   ; reserved for tests
0A6A                RST08:    DS   2   
0A6C                RST10:    DS   2   
0A6E                RST18:    DS   2   
0A70                RST20:    DS   2   
0A72                RST28:    DS   2   
0A74                RST30:    DS   2   ; 
0A76                BAUD:     DS   2   ; 
0A78                INTVEC:   DS   2   ; 
0A7A                NMIVEC:   DS   2   ; 
0A7C                GETCVEC:   DS   2   ; 
0A7E                PUTCVEC:   DS   2   ; 
0A80                             ; ****************************************************************
0A80                             ; VARS Table - holds 26 16-bit user variables
0A80                             ; ****************************************************************
0A80                VARS:     DS   26 * 2   
0AB4                             ; ****************************************************************
0AB4                             ; DEFS Table - holds 26 addresses of user routines
0AB4                             ; ****************************************************************
0AB4                          ALIGN   $40   
0AB4                          .ORG   $-12   
0AB4                          DS   12   ; vars for group 0
0AC0                DEFS:     DS   GRPSIZE * NUMGRPS   
0C00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 28 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 115 IN MINT.asm
                    > USED AT LINE 1155 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 130 IN MINT.asm
                    > USED AT LINE 202 IN MINT.asm
                    > USED AT LINE 214 IN MINT.asm
                    > USED AT LINE 745 IN MINT.asm
                    > USED AT LINE 987 IN MINT.asm
                    > USED AT LINE 1056 IN MINT.asm
                    > USED AT LINE 1344 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 10 IN ram.asm
TRUE:               0001 DEFINED AT LINE 18 IN MINT.asm
                    > USED AT LINE 1005 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 19 IN MINT.asm
                    > USED AT LINE 43 IN MINT.asm
                    > USED AT LINE 1071 IN MINT.asm
                    > USED AT LINE 1262 IN MINT.asm
NUMGRPS:            0005 DEFINED AT LINE 21 IN MINT.asm
                    > USED AT LINE 60 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
GRPSIZE:            0040 DEFINED AT LINE 22 IN MINT.asm
                    > USED AT LINE 60 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
START:              0180 DEFINED AT LINE 30 IN MINT.asm
                    > USED AT LINE 6
MINT:               0180 DEFINED AT LINE 31 IN MINT.asm
ISYSVARS:           019A DEFINED AT LINE 41 IN MINT.asm
                    > USED AT LINE 54 IN MINT.asm
INITIALIZE:         01AA DEFINED AT LINE 51 IN MINT.asm
                    > USED AT LINE 33 IN MINT.asm
INIT1:              01C2 DEFINED AT LINE 61 IN MINT.asm
                    > USED AT LINE 66 IN MINT.asm
MACRO:              01CB DEFINED AT LINE 69 IN MINT.asm
                    > USED AT LINE 123 IN MINT.asm
INTERPRET:          01E4 DEFINED AT LINE 82 IN MINT.asm
                    > USED AT LINE 36 IN MINT.asm
                    > USED AT LINE 614 IN MINT.asm
INTERPRET1:         01EE DEFINED AT LINE 86 IN MINT.asm
INTERPRET2:         01F5 DEFINED AT LINE 90 IN MINT.asm
                    > USED AT LINE 80 IN MINT.asm
INTERPRET3:         01FD DEFINED AT LINE 97 IN MINT.asm
                    > USED AT LINE 106 IN MINT.asm
INTERPRET4:         0203 DEFINED AT LINE 103 IN MINT.asm
                    > USED AT LINE 95 IN MINT.asm
WAITCHAR:           0208 DEFINED AT LINE 114 IN MINT.asm
                    > USED AT LINE 132 IN MINT.asm
                    > USED AT LINE 145 IN MINT.asm
WAITCHAR1:          021B DEFINED AT LINE 125 IN MINT.asm
                    > USED AT LINE 117 IN MINT.asm
WAITCHAR3:          0229 DEFINED AT LINE 134 IN MINT.asm
                    > USED AT LINE 121 IN MINT.asm
WAITCHAR4:          023E DEFINED AT LINE 149 IN MINT.asm
                    > USED AT LINE 119 IN MINT.asm
NEXT:               0246 DEFINED AT LINE 177 IN MINT.asm
                    > USED AT LINE 53 IN MINT.asm
                    > USED AT LINE 236 IN MINT.asm
                    > USED AT LINE 634 IN MINT.asm
                    > USED AT LINE 801 IN MINT.asm
                    > USED AT LINE 1268 IN MINT.asm
RPUSH:              024F DEFINED AT LINE 186 IN MINT.asm
                    > USED AT LINE 218 IN MINT.asm
                    > USED AT LINE 581 IN MINT.asm
                    > USED AT LINE 1085 IN MINT.asm
                    > USED AT LINE 1104 IN MINT.asm
                    > USED AT LINE 1267 IN MINT.asm
RPOP:               025A DEFINED AT LINE 193 IN MINT.asm
                    > USED AT LINE 618 IN MINT.asm
                    > USED AT LINE 648 IN MINT.asm
                    > USED AT LINE 788 IN MINT.asm
                    > USED AT LINE 1091 IN MINT.asm
CRLF:               0265 DEFINED AT LINE 200 IN MINT.asm
                    > USED AT LINE 142 IN MINT.asm
                    > USED AT LINE 1162 IN MINT.asm
SPACE:              026E DEFINED AT LINE 206 IN MINT.asm
                    > USED AT LINE 601 IN MINT.asm
WRITECHAR:          0272 DEFINED AT LINE 210 IN MINT.asm
                    > USED AT LINE 1232 IN MINT.asm
                    > USED AT LINE 1234 IN MINT.asm
                    > USED AT LINE 1240 IN MINT.asm
WRITECHAR1:         0274 DEFINED AT LINE 213 IN MINT.asm
                    > USED AT LINE 204 IN MINT.asm
                    > USED AT LINE 208 IN MINT.asm
ENTER:              0277 DEFINED AT LINE 216 IN MINT.asm
                    > USED AT LINE 34 IN MINT.asm
                    > USED AT LINE 77 IN MINT.asm
                    > USED AT LINE 83 IN MINT.asm
                    > USED AT LINE 1252 IN MINT.asm
COMPNEXT:           0280 DEFINED AT LINE 224 IN MINT.asm
                    > USED AT LINE 1264 IN MINT.asm
COMPNEXT1:          028E DEFINED AT LINE 234 IN MINT.asm
                    > USED AT LINE 231 IN MINT.asm
MACROS:             0293 DEFINED AT LINE 242 IN MINT.asm
EMPTY_:             0293 DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            0295 DEFINED AT LINE 4 IN MINT.asm
EDIT_:              02AF DEFINED AT LINE 7 IN MINT.asm
LIST_:              02C2 DEFINED AT LINE 10 IN MINT.asm
PRINTSTACK_:        02DE DEFINED AT LINE 13 IN MINT.asm
TOGGLEBASE_:        02EF DEFINED AT LINE 16 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 251 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 388 IN MINT.asm
                    > USED AT LINE 71 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 389 IN MINT.asm
                    > USED AT LINE 779 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 524 IN MINT.asm
ALT_:               0400 DEFINED AT LINE 526 IN MINT.asm
AND_:               0403 DEFINED AT LINE 529 IN MINT.asm
AND1:               040A DEFINED AT LINE 537 IN MINT.asm
                    > USED AT LINE 551 IN MINT.asm
                    > USED AT LINE 562 IN MINT.asm
OR_:                040E DEFINED AT LINE 543 IN MINT.asm
XOR_:               0417 DEFINED AT LINE 553 IN MINT.asm
XOR1:               0418 DEFINED AT LINE 555 IN MINT.asm
                    > USED AT LINE 566 IN MINT.asm
INV_:               0420 DEFINED AT LINE 564 IN MINT.asm
ADD_:               0425 DEFINED AT LINE 568 IN MINT.asm
ARRDEF_:            042B DEFINED AT LINE 576 IN MINT.asm
ARREND_:            042E DEFINED AT LINE 577 IN MINT.asm
BEGIN_:             0431 DEFINED AT LINE 578 IN MINT.asm
CALL_:              0434 DEFINED AT LINE 579 IN MINT.asm
DEF_:               0443 DEFINED AT LINE 591 IN MINT.asm
HEXP_:              0446 DEFINED AT LINE 593 IN MINT.asm
DOT_:               044C DEFINED AT LINE 597 IN MINT.asm
DOT2:               0450 DEFINED AT LINE 600 IN MINT.asm
                    > USED AT LINE 596 IN MINT.asm
DROP_:              0455 DEFINED AT LINE 604 IN MINT.asm
DUP_:               0458 DEFINED AT LINE 608 IN MINT.asm
ETX_:               045D DEFINED AT LINE 613 IN MINT.asm
EXIT_:              0460 DEFINED AT LINE 615 IN MINT.asm
FETCH_:             046A DEFINED AT LINE 623 IN MINT.asm
FETCH1:             046B DEFINED AT LINE 625 IN MINT.asm
                    > USED AT LINE 1403 IN MINT.asm
HEX_:               0471 DEFINED AT LINE 632 IN MINT.asm
NOP_:               0474 DEFINED AT LINE 634 IN MINT.asm
NUM_:               0477 DEFINED AT LINE 636 IN MINT.asm
OVER_:              047A DEFINED AT LINE 639 IN MINT.asm
RET_:               0481 DEFINED AT LINE 647 IN MINT.asm
STORE_:             0488 DEFINED AT LINE 652 IN MINT.asm
SWAP_:              048F DEFINED AT LINE 661 IN MINT.asm
SHL_:               0494 DEFINED AT LINE 668 IN MINT.asm
SHR_:               0499 DEFINED AT LINE 676 IN MINT.asm
NEG_:               04A1 DEFINED AT LINE 683 IN MINT.asm
SUB_:               04A7 DEFINED AT LINE 687 IN MINT.asm
SUB_1:              04A8 DEFINED AT LINE 690 IN MINT.asm
SUB_2:              04A9 DEFINED AT LINE 691 IN MINT.asm
                    > USED AT LINE 685 IN MINT.asm
EQ_:                04AF DEFINED AT LINE 696 IN MINT.asm
GETREF_:            04BB DEFINED AT LINE 704 IN MINT.asm
GT_:                04BE DEFINED AT LINE 706 IN MINT.asm
LT_:                04C2 DEFINED AT LINE 710 IN MINT.asm
CMP_:               04C4 DEFINED AT LINE 712 IN MINT.asm
                    > USED AT LINE 708 IN MINT.asm
EQUAL:              04CF DEFINED AT LINE 717 IN MINT.asm
                    > USED AT LINE 700 IN MINT.asm
LESS:               04D0 DEFINED AT LINE 718 IN MINT.asm
                    > USED AT LINE 702 IN MINT.asm
                    > USED AT LINE 714 IN MINT.asm
                    > USED AT LINE 716 IN MINT.asm
VAR_:               04D3 DEFINED AT LINE 722 IN MINT.asm
DIV_:               04DD DEFINED AT LINE 733 IN MINT.asm
MUL_:               04DF DEFINED AT LINE 734 IN MINT.asm
STR_:               04E1 DEFINED AT LINE 736 IN MINT.asm
STR:                04E1 DEFINED AT LINE 737 IN MINT.asm
NEXTCHAR:           04E2 DEFINED AT LINE 740 IN MINT.asm
                    > USED AT LINE 746 IN MINT.asm
STR2:               04ED DEFINED AT LINE 748 IN MINT.asm
                    > USED AT LINE 744 IN MINT.asm
AGAIN_:             04F0 DEFINED AT LINE 752 IN MINT.asm
AGAIN:              04F2 DEFINED AT LINE 757 IN MINT.asm
                    > USED AT LINE 752 IN MINT.asm
AGAIN2:             0512 DEFINED AT LINE 771 IN MINT.asm
                    > USED AT LINE 764 IN MINT.asm
ALT:                0519 DEFINED AT LINE 776 IN MINT.asm
                    > USED AT LINE 527 IN MINT.asm
ARREND:             0524 DEFINED AT LINE 787 IN MINT.asm
                    > USED AT LINE 577 IN MINT.asm
ARREND2:            0539 DEFINED AT LINE 799 IN MINT.asm
                    > USED AT LINE 796 IN MINT.asm
MUL:                0540 DEFINED AT LINE 806 IN MINT.asm
                    > USED AT LINE 734 IN MINT.asm
MUL_LOOP_1:         054A DEFINED AT LINE 815 IN MINT.asm
                    > USED AT LINE 824 IN MINT.asm
DIV:                055C DEFINED AT LINE 844 IN MINT.asm
                    > USED AT LINE 733 IN MINT.asm
DIV_LOOP:           0566 DEFINED AT LINE 854 IN MINT.asm
                    > USED AT LINE 869 IN MINT.asm
DIV_ADJUST:         0573 DEFINED AT LINE 864 IN MINT.asm
                    > USED AT LINE 860 IN MINT.asm
DIV_DONE:           0574 DEFINED AT LINE 867 IN MINT.asm
                    > USED AT LINE 862 IN MINT.asm
DIV_END:            0579 DEFINED AT LINE 874 IN MINT.asm
BEGIN:              057E DEFINED AT LINE 886 IN MINT.asm
                    > USED AT LINE 578 IN MINT.asm
BEGIN1:             059F DEFINED AT LINE 903 IN MINT.asm
                    > USED AT LINE 890 IN MINT.asm
                    > USED AT LINE 1066 IN MINT.asm
                    > USED AT LINE 1201 IN MINT.asm
BEGIN2:             05A1 DEFINED AT LINE 905 IN MINT.asm
                    > USED AT LINE 911 IN MINT.asm
BEGIN3:             05AA DEFINED AT LINE 912 IN MINT.asm
NUMBER:             05AC DEFINED AT LINE 927 IN MINT.asm
                    > USED AT LINE 637 IN MINT.asm
NUMBER1:            05B0 DEFINED AT LINE 931 IN MINT.asm
                    > USED AT LINE 956 IN MINT.asm
TIMES10:            05C2 DEFINED AT LINE 947 IN MINT.asm
ENDNUM:             05CA DEFINED AT LINE 958 IN MINT.asm
                    > USED AT LINE 943 IN MINT.asm
                    > USED AT LINE 945 IN MINT.asm
                    > USED AT LINE 1315 IN MINT.asm
                    > USED AT LINE 1317 IN MINT.asm
PRINTDEC:           05CE DEFINED AT LINE 963 IN MINT.asm
                    > USED AT LINE 599 IN MINT.asm
DISPHL:             05CE DEFINED AT LINE 970 IN MINT.asm
NUM1:               05E7 DEFINED AT LINE 980 IN MINT.asm
                    > USED AT LINE 972 IN MINT.asm
                    > USED AT LINE 974 IN MINT.asm
                    > USED AT LINE 976 IN MINT.asm
                    > USED AT LINE 978 IN MINT.asm
NUM2:               05E9 DEFINED AT LINE 982 IN MINT.asm
                    > USED AT LINE 985 IN MINT.asm
GETGROUP:           05F2 DEFINED AT LINE 989 IN MINT.asm
                    > USED AT LINE 583 IN MINT.asm
                    > USED AT LINE 1284 IN MINT.asm
                    > USED AT LINE 1402 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 1002 IN MINT.asm
CARRDEF_:           0600 DEFINED AT LINE 1004 IN MINT.asm
CFETCH_:            0605 DEFINED AT LINE 1008 IN MINT.asm
ANOP_:              060A DEFINED AT LINE 1013 IN MINT.asm
CHARCODE_:          060C DEFINED AT LINE 1016 IN MINT.asm
COMMENT_:           0614 DEFINED AT LINE 1024 IN MINT.asm
                    > USED AT LINE 1028 IN MINT.asm
CSTORE_:            061D DEFINED AT LINE 1034 IN MINT.asm
DEPTH_:             0622 DEFINED AT LINE 1041 IN MINT.asm
EMIT_:              0634 DEFINED AT LINE 1053 IN MINT.asm
IFTE_:              063B DEFINED AT LINE 1059 IN MINT.asm
IFTE1:              0646 DEFINED AT LINE 1067 IN MINT.asm
                    > USED AT LINE 1063 IN MINT.asm
IFTEEND_:           0648 DEFINED AT LINE 1070 IN MINT.asm
EXEC_:              064E DEFINED AT LINE 1075 IN MINT.asm
EXEC1:              0653 DEFINED AT LINE 1078 IN MINT.asm
                    > USED AT LINE 1076 IN MINT.asm
GO_:                0656 DEFINED AT LINE 1083 IN MINT.asm
ENDGROUP_:          065F DEFINED AT LINE 1090 IN MINT.asm
GROUP_:             0667 DEFINED AT LINE 1095 IN MINT.asm
SYSVAR_:            0682 DEFINED AT LINE 1110 IN MINT.asm
I_:                 068C DEFINED AT LINE 1119 IN MINT.asm
INCR_:              0690 DEFINED AT LINE 1124 IN MINT.asm
INPORT_:            069B DEFINED AT LINE 1136 IN MINT.asm
J_:                 06A6 DEFINED AT LINE 1146 IN MINT.asm
KEY_:               06B0 DEFINED AT LINE 1154 IN MINT.asm
NEWLN_:             06B9 DEFINED AT LINE 1161 IN MINT.asm
OUTPORT_:           06BE DEFINED AT LINE 1165 IN MINT.asm
ROT_:               06C7 DEFINED AT LINE 1174 IN MINT.asm
SIGN_:              06CE DEFINED AT LINE 1182 IN MINT.asm
SIGN2:              06D7 DEFINED AT LINE 1188 IN MINT.asm
                    > USED AT LINE 1186 IN MINT.asm
BREAK_:             06DA DEFINED AT LINE 1192 IN MINT.asm
BREAK1:             06E1 DEFINED AT LINE 1198 IN MINT.asm
                    > USED AT LINE 1196 IN MINT.asm
PRINTSTK_:          06E9 DEFINED AT LINE 1203 IN MINT.asm
EDITDEF_:           06EB DEFINED AT LINE 1205 IN MINT.asm
EDITDEF:            06EB DEFINED AT LINE 1215 IN MINT.asm
EDITDEF1:           070C DEFINED AT LINE 1236 IN MINT.asm
                    > USED AT LINE 1242 IN MINT.asm
EDITDEF2:           070D DEFINED AT LINE 1238 IN MINT.asm
                    > USED AT LINE 1235 IN MINT.asm
EDITDEF3:           0715 DEFINED AT LINE 1243 IN MINT.asm
                    > USED AT LINE 1230 IN MINT.asm
PRINTSTK:           0721 DEFINED AT LINE 1251 IN MINT.asm
                    > USED AT LINE 1204 IN MINT.asm
ARRDEF:             0748 DEFINED AT LINE 1261 IN MINT.asm
                    > USED AT LINE 576 IN MINT.asm
ARRDEF1:            074A DEFINED AT LINE 1263 IN MINT.asm
                    > USED AT LINE 1006 IN MINT.asm
DEF:                075A DEFINED AT LINE 1280 IN MINT.asm
                    > USED AT LINE 591 IN MINT.asm
NEXTBYTE:           0767 DEFINED AT LINE 1289 IN MINT.asm
                    > USED AT LINE 1296 IN MINT.asm
END_DEF:            0772 DEFINED AT LINE 1298 IN MINT.asm
                    > USED AT LINE 1295 IN MINT.asm
HEX:                0779 DEFINED AT LINE 1305 IN MINT.asm
                    > USED AT LINE 632 IN MINT.asm
HEX1:               077C DEFINED AT LINE 1307 IN MINT.asm
                    > USED AT LINE 1324 IN MINT.asm
HEX2:               0784 DEFINED AT LINE 1313 IN MINT.asm
                    > USED AT LINE 1311 IN MINT.asm
PRINT_HEX8:         0796 DEFINED AT LINE 1329 IN MINT.asm
                    > USED AT LINE 1393 IN MINT.asm
                    > USED AT LINE 1395 IN MINT.asm
CONV:               079F DEFINED AT LINE 1338 IN MINT.asm
                    > USED AT LINE 1335 IN MINT.asm
NESTING:            07AA DEFINED AT LINE 1356 IN MINT.asm
                    > USED AT LINE 101 IN MINT.asm
                    > USED AT LINE 131 IN MINT.asm
                    > USED AT LINE 908 IN MINT.asm
NESTING1A:          07B5 DEFINED AT LINE 1363 IN MINT.asm
                    > USED AT LINE 1360 IN MINT.asm
NESTING1:           07B8 DEFINED AT LINE 1366 IN MINT.asm
                    > USED AT LINE 1358 IN MINT.asm
NESTING2:           07C7 DEFINED AT LINE 1375 IN MINT.asm
                    > USED AT LINE 1370 IN MINT.asm
                    > USED AT LINE 1372 IN MINT.asm
NESTING3:           07C9 DEFINED AT LINE 1378 IN MINT.asm
                    > USED AT LINE 1374 IN MINT.asm
NESTING4:           07D4 DEFINED AT LINE 1385 IN MINT.asm
                    > USED AT LINE 1380 IN MINT.asm
                    > USED AT LINE 1382 IN MINT.asm
PRINTHEX:           07D6 DEFINED AT LINE 1389 IN MINT.asm
                    > USED AT LINE 595 IN MINT.asm
GETREF:             07E1 DEFINED AT LINE 1399 IN MINT.asm
                    > USED AT LINE 705 IN MINT.asm
STACK:              0880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             0880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 32 IN MINT.asm
                    > USED AT LINE 42 IN MINT.asm
                    > USED AT LINE 1045 IN MINT.asm
RSTACK:             0900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 52 IN MINT.asm
TIB:                0900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 94 IN MINT.asm
                    > USED AT LINE 126 IN MINT.asm
                    > USED AT LINE 135 IN MINT.asm
                    > USED AT LINE 151 IN MINT.asm
                    > USED AT LINE 1229 IN MINT.asm
                    > USED AT LINE 1244 IN MINT.asm
MINTVARS:           0A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 725 IN MINT.asm
                    > USED AT LINE 1112 IN MINT.asm
SYSVARS:            0A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 55 IN MINT.asm
                    > USED AT LINE 1112 IN MINT.asm
VS0:                0A00 DEFINED AT LINE 16 IN ram.asm
VBASE16:            0A02 DEFINED AT LINE 17 IN ram.asm
VTIBPTR:            0A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 70 IN MINT.asm
                    > USED AT LINE 79 IN MINT.asm
                    > USED AT LINE 88 IN MINT.asm
                    > USED AT LINE 150 IN MINT.asm
                    > USED AT LINE 1248 IN MINT.asm
VDEFS:              0A06 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 994 IN MINT.asm
                    > USED AT LINE 1092 IN MINT.asm
                    > USED AT LINE 1103 IN MINT.asm
                    > USED AT LINE 1107 IN MINT.asm
                    > USED AT LINE 1220 IN MINT.asm
VHEAPPTR:           0A0E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 226 IN MINT.asm
                    > USED AT LINE 235 IN MINT.asm
                    > USED AT LINE 791 IN MINT.asm
                    > USED AT LINE 1266 IN MINT.asm
                    > USED AT LINE 1285 IN MINT.asm
                    > USED AT LINE 1299 IN MINT.asm
VIFTEMODE:          0A34 DEFINED AT LINE 43 IN ram.asm
VBYTEMODE:          0A36 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 228 IN MINT.asm
                    > USED AT LINE 794 IN MINT.asm
                    > USED AT LINE 1265 IN MINT.asm
TBPTR:              0A68 DEFINED AT LINE 46 IN ram.asm
RST08:              0A6A DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0A6C DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0A6E DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0A70 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0A72 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0A74 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0A76 DEFINED AT LINE 54 IN ram.asm
INTVEC:             0A78 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0A7A DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0A7C DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0A7E DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
VARS:               0A80 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 725 IN MINT.asm
DEFS:               0AC0 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 45 IN MINT.asm
                    > USED AT LINE 59 IN MINT.asm
                    > USED AT LINE 1105 IN MINT.asm
HEAP:               0C00 DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 49 IN MINT.asm
