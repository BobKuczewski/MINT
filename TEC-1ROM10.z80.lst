0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 2A 0B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 2C 0B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 2E 0B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 30 0B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 32 0B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 34 0B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 24 0B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 26 0B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                             ; 
0081                             ; 
0081                             ; putting this code here for now
0081                             ; needing to re-integrate support for RC2014
0081                             ; 
0081                             ; .if RC2014        
0081                             ; 
0081                             ; ; **************************************************************************
0081                             ; ; Serial Handling Etc
0081                             ; ; **************************************************************************
0081                             ; 
0081                             ; ; ************************SERIAL HANDLING ROUTINES**********************        
0081                             ; ;
0081                             ; ;        Includes drivers for 68B50 ACIA 
0081                             ; ;		 serial interface I/O primitive routines getchar and putchar
0081                             ; ;        printstring
0081                             ; ;        printdec
0081                             ; ;        printhex
0081                             ; ;        crlf         
0081                             ; 
0081                             ; ; **********************************************************************
0081                             ; ; **  Device Driver                             by Stephen C Cousins  **
0081                             ; ; **  Hardware:  RC2014                                               **
0081                             ; ; **  Interface: Serial 6850 ACIA                                     **
0081                             ; ; **********************************************************************
0081                             ; 
0081                             ; ; This module is the driver for the RC2014 serial I/O interface which is
0081                             ; ; based on the 6850 Asynchronous Communications Interface Adapter (ACIA)
0081                             ; ;
0081                             ; ; Base addresses for ACIA externally defined. eg:
0081                             ; kACIA1:    .EQU 0x80           ;Base address of serial ACIA #1
0081                             ; kACIA2:    .EQU 0x80           ;Base address of serial ACIA #2
0081                             ; ;
0081                             ; ; RC2014 addresses for 68B50 number 2:
0081                             ; ; 0x40   Control registers (read and write)
0081                             ; ; 0x41   Data registers (read and write)
0081                             ; ;
0081                             ; ; Control registers (read and write)
0081                             ; ; Bit   Control write              Control read
0081                             ; ;  0    Counter divide select 1    Receive data register full
0081                             ; ;  1    Counter divide select 2    Transmit data register empty
0081                             ; ;  2    Word select 1              Data carrier detect (/DCD) input
0081                             ; ;  3    Word seelct 2              Clear to send (/CTS) input
0081                             ; ;  4    Word select 3              Framing error
0081                             ; ;  5    Transmit contol 1          Receiver overrun
0081                             ; ;  6    Transmit control 2         Parity error
0081                             ; ;  7    Receive interrupt enable   Interrupt request
0081                             ; ;
0081                             ; ; Control register write
0081                             ; ; Bit   7   6   5   4   3   2   1   0
0081                             ; ;       |   |   |   |   |   |   |   |
0081                             ; ;       |   |   |   |   |   |   0   0     Clock divide 1
0081                             ; ;       |   |   |   |   |   |   0   1     Clock divide 16
0081                             ; ; >     |   |   |   |   |   |   1   0  >  Clock divide 64
0081                             ; ;       |   |   |   |   |   |   1   1     Master reset
0081                             ; ;       |   |   |   |   |   |
0081                             ; ;       |   |   |   0   0   0     7 data bits, even parity, 2 stop bits
0081                             ; ;       |   |   |   0   0   1     7 data bits, odd parity,  2 stop bits
0081                             ; ;       |   |   |   0   1   0     7 data bits, even parity, 1 stop bit
0081                             ; ;       |   |   |   0   1   1     7 data bits, odd parity,  1 stop bit
0081                             ; ;       |   |   |   1   0   0     8 data bits, no parity,   2 stop bits
0081                             ; ;       |   |   |   1   0   1  >  8 data bits, no parity,   1 stop bit
0081                             ; ;       |   |   |   1   1   0     8 data bits, even parity, 1 stop bit
0081                             ; ;       |   |   |   1   1   1     8 data bits, odd parity,  1 stop bit
0081                             ; ;       |   |   |
0081                             ; ;       |   0   0  >  /RTS = low (ready), tx interrupt disabled
0081                             ; ;       |   0   1     /RTS = low (ready), tx interrupt enabled
0081                             ; ;       |   1   0     /RTS = high (not ready), tx interrupt disabled 
0081                             ; ;       |   1   1     /RTS = low, tx break, tx interrupt disabled
0081                             ; ;       |
0081                             ; ;       0  >  Receive interrupt disabled
0081                             ; ;       1     Receive interrupt enabled
0081                             ; ;
0081                             ; ; Control register read
0081                             ; ; Bit   7   6   5   4   3   2   1   0
0081                             ; ;       |   |   |   |   |   |   |   |
0081                             ; ;       |   |   |   |   |   |   |   +-------  Receive data register full
0081                             ; ;       |   |   |   |   |   |   +-------  Transmit data register empty
0081                             ; ;       |   |   |   |   |   +-------  Data carrier detect (/DCD)
0081                             ; ;       |   |   |   |   +-------  Clear to send (/CTS)
0081                             ; ;       |   |   |   +-------  Framing error
0081                             ; ;       |   |   +-------  Receiver overrun 
0081                             ; ;       |   +-------  Parity error
0081                             ; ;       +-------  Interrupt request
0081                             ; 
0081                             ; ; 6850 #1 registers derived from base address (above)
0081                             ; kACIA1Cont: .EQU kACIA1+0       ;I/O address of control register
0081                             ; kACIA1Data: .EQU kACIA1+1       ;I/O address of data register
0081                             ; ; 6850 #2 registers derived from base address (above)
0081                             ; kACIA2Cont: .EQU kACIA2+0       ;I/O address of control register
0081                             ; kACIA2Data: .EQU kACIA2+1       ;I/O address of data register
0081                             ; 
0081                             ; ; Control register values
0081                             ; k6850Reset: .EQU 0b00000011     ;Master reset
0081                             ; k6850Init:  .EQU 0b00010110     ;No int, RTS low, 8+1, /64
0081                             ; 
0081                             ; ; Status (control) register bit numbers
0081                             ; k6850RxRdy: .EQU 0              ;Receive data available bit number
0081                             ; k6850TxRdy: .EQU 1              ;Transmit data empty bit number
0081                             ; 
0081                             ; ; Device detection, test 1
0081                             ; ; This test just reads from the devices' status (control) register
0081                             ; ; and looks for register bits in known states:
0081                             ; ; /CTS input bit = low
0081                             ; ; /DCD input bit = low
0081                             ; ; WARNING
0081                             ; ; Sometimes at power up the Tx data reg empty bit is zero, but
0081                             ; ; recovers after device initialised. So test 1 excludes this bit.
0081                             ; k6850Mask1: .EQU  0b00001100    ;Mask for known bits in control reg
0081                             ; k6850Test1: .EQU  0b00000000    ;Test value following masking
0081                             ; 
0081                             ; ; Device detection, test 2
0081                             ; ; This test just reads from the devices' status (control) register
0081                             ; ; and looks for register bits in known states:
0081                             ; ; /CTS input bit = low
0081                             ; ; /DCD input bit = low
0081                             ; ; Transmit data register empty bit = high
0081                             ; k6850Mask2: .EQU  0b00001110    ;Mask for known bits in control reg
0081                             ; k6850Test2: .EQU  0b00000010    ;Test value following masking
0081                             ; 
0081                             ; ; RC2014 serial 6850 initialise
0081                             ; ;   On entry: No parameters required
0081                             ; ;   On exit:  Z flagged if device is found and initialised
0081                             ; ;             AF BC DE HL not specified
0081                             ; ;             IX IY I AF" BC" DE" HL" preserved
0081                             ; ; If the device is found it is initialised
0081                             ; serial_init:
0081                             ; ; First look to see if the device is present
0081                             ; ; Test 1, just read from chip, do not write anything
0081                             ;         IN   A,(kACIA1Cont) ;Read status (control) register
0081                             ;         AND  k6850Mask1     ;Mask for known bits in control reg
0081                             ;         CP   k6850Test1     ;and check for known values
0081                             ;         RET  NZ             ;If not found return with NZ flag
0081                             ; ; Attempt to initialise the chip
0081                             ;         LD   A,k6850Reset   ;Master reset
0081                             ;         OUT  (kACIA1Cont),A ;Write to ACIA control register
0081                             ;         LD   A,k6850Init    ;No int, RTS low, 8+1, /64
0081                             ;         OUT  (kACIA1Cont),A ;Write to ACIA control register
0081                             ; ; Test 2, perform tests on chip following initialisation
0081                             ;         IN   A,(kACIA1Cont) ;Read status (control) register
0081                             ;         AND  k6850Mask2     ;Mask for known bits in control reg
0081                             ;         CP   k6850Test2     ;Test value following masking
0081                             ; ;           RET  NZ             ;Return not found NZ flagged
0081                             ;         RET                 ;Return Z if found, NZ if not
0081                             ; 
0081                             ; 
0081                             ; ; RC2014 serial 6850 input character
0081                             ; ;   On entry: No parameters required
0081                             ; ;   On exit:  A = Character input from the device
0081                             ; ;             NZ flagged if character input
0081                             ; ;             BC DE IX IY I AF" BC" DE" HL" preserved
0081                             ; ;             HL destroyed
0081                             ; ; This function does not return until a character is available
0081                             ; 
0081                             ; getchar:
0081                             ;         IN   A,(kACIA1Cont) ;Address of status register
0081                             ;         AND  $01            ;Receive byte available
0081                             ;         JR   Z, getchar     ;Return Z if no character
0081                             ;         IN   A,(kACIA1Data) ;Read data byte
0081                             ;         RET                 ;NZ flagged if character input
0081                             ; 
0081                             ; 
0081                             ; ; RC2014 serial 6850 output character
0081                             ; ;   On entry: A = Character to be output to the device
0081                             ; ;   On exit:  If character output successful (eg. device was ready)
0081                             ; ;               NZ flagged and A != 0
0081                             ; ;             If character output failed (eg. device busy)
0081                             ; ;               Z flagged and A = Character to output
0081                             ; ;             BC DE HL IX IY I AF" BC" DE" HL" preserved
0081                             ; putchar:
0081                             ;         PUSH BC
0081                             ;         LD   C,kACIA1Cont   ;ACIA control register
0081                             ;         IN   B,(C)          ;Read ACIA control register
0081                             ;         BIT  k6850TxRdy,B   ;Transmit register full?
0081                             ;         POP  BC
0081                             ;         JR  Z, putchar      ;Return Z as character not output
0081                             ;         OUT  (kACIA1Data),A ;Write data byte
0081                             ;         OR   0xFF           ;Return success A=0xFF and NZ flagged
0081                             ;         RET
0081                             ; 
0081                             ; .endif        
0081                             ; 
0081                GETCHAR:      
0081   2A 20 0B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 22 0B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 09               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 2A 0B               LD   (RST08),HL   
0094   22 2C 0B               LD   (RST10),HL   
0097   22 2E 0B               LD   (RST18),HL   
009A   22 30 0B               LD   (RST20),HL   
009D   22 32 0B               LD   (RST28),HL   
00A0   22 34 0B               LD   (RST30),HL   
00A3   22 24 0B               LD   (INTVEC),HL   
00A6   22 26 0B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 20 0B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 22 0B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                          IF   RC2014   
                                 ; 
                                 ;  *************************************************************************		
                                 ;  Getchar and putchar hooks into SCM for RC2014
                                 ;  *************************************************************************
                                 ; 
                    GETCHAR:   PUSH   BC   
                              LD   C,$01   
                              RST   $30   
                              POP   BC   
                              RET      
                                 ; 
                    PUTCHAR:   PUSH   BC   
                              PUSH   HL   
                              LD   C,$02   
                              RST   $30   
                              OR   $FF   
                              POP   HL   
                              POP   BC   
                              RET      
00C3                          ENDIF      
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;        MINT1_18 Micro-Interpreter for the Z80
00C6                             ; 
00C6                             ;        Ken Boak John Hardy and Craig Jones  November 28th 2021
00C6                             ; 
00C6                             ;        Comparison Operators < and > return 0 (false) when equality is detected
00C6                             ;        Printhex routine shortened
00C6                             ;        Getchar and Putchar hooks into Small Computer Monitor added in page 2 28-11-21
00C6                             ; 
00C6                             ;        Hex entry bug fixed 28-11-21
00C6                             ;        Decimal entry bug fixed  24-11-21
00C6                             ;        Division routine shortened by 13 bytes 24/11
00C6                             ; 
00C6                             ; 
00C6                             ;        Includes serial routines getchar and putchar
00C6                             ;        printstring
00C6                             ;        printdec
00C6                             ;        printhex
00C6                             ;        crlf
00C6                             ; 
00C6                             ;        Register Assignment:
00C6                             ; 
00C6                             ;        BC is the instruction pointer IP
00C6                             ;        DE is a working register and 2nd on stack NOS
00C6                             ;        HL is a working register and Top of stack TOS
00C6                             ;        SP is data stack pointer
00C6                             ;        IX is used to implement the return stack
00C6                             ;        IY is used as a jump back to NEXT
00C6                             ; 
00C6                             ;        All commands accessed via a byte wide look up table
00C6                             ; 
00C6                             ;        Heap used for command storage (HERE)
00C6                             ; 
00C6                             ;        Primitives are on two consecutive pages using a trampoline jump to the 2nd page.
00C6                             ; 
00C6                             ;        This allows single byte opcodes reducing the dispatch time from
00C6                             ;        64 t states to 33 t states
00C6                             ; 
00C6                             ; 
00C6                             ;        User defined commands and variables
00C6                             ; 
00C6                             ;        User Commands  A-Z
00C6                             ;        User Variables a-z
00C6                             ; 
00C6                             ;        Commands now available:
00C6                             ; 
00C6                             ;        Maths
00C6                             ; 
00C6                             ;        +     ADD
00C6                             ;		 -     SUB
00C6                             ;        *     MUL     (max product 65535)
00C6                             ;        /     DIV     Returns quotient and remainder
00C6                             ;        _     NEG
00C6                             ; 
00C6                             ;        }     Shift Right (2/)
00C6                             ;        {     Shift Left  (2*)
00C6                             ; 
00C6                             ;        Comparison - compare the top two elements on the stack
00C6                             ;        Puts 1 on the stack if condition is true, 0 if false
00C6                             ; 
00C6                             ;        <     LT
00C6                             ;        =     EQ
00C6                             ;        >     GT
00C6                             ; 
00C6                             ;        Logic
00C6                             ; 
00C6                             ;        &     AND
00C6                             ;        |     OR
00C6                             ;        ^     XOR
00C6                             ;        ~     INV
00C6                             ; 
00C6                             ;        Stack
00C6                             ; 
00C6                             ;        "     DUP
00C6                             ;        '     DROP
00C6                             ;        $     SWAP
00C6                             ;		 %     OVER
00C6                             ;        .     DOT     (Print the value of the top of stack as a decimal)
00C6                             ;        ,     COMMA   (Print the value of the top of stack as a hexadecimal)
00C6                             ;		 #     HEX     Accept a hexadecimal number
00C6                             ; 
00C6                             ;        Memory
00C6                             ; 
00C6                             ;        @     FETCH
00C6                             ;        !     STORE
00C6                             ; 
00C6                             ;        User Definitions
00C6                             ; 
00C6                             ;        :     Start a user definition
00C6                             ;        ;     End a user definition
00C6                             ; 
00C6                             ;        \     QUIT    (Print OK and return to monitor)
00C6                             ; 
00C6                             ; 
00C6                             ;        Loops    - execute the code between parenthesis
00C6                             ; 
00C6                             ;        The user variable i is used as the loop counter
00C6                             ;        It is decremented every time the loop is executed
00C6                             ; 
00C6                             ;        10(repeat this code 10 times)
00C6                             ; 
00C6                             ;        0(skip this code)
00C6                             ; 
00C6                             ;        1(execute this code only once)
00C6                             ; 
00C6                             ;        a@ b@ = (_print this if a=b_)
00C6                             ; 
00C6                             ;       1000(i@.)    Print out the value of i from 999 to 0
00C6                             ; 
00C6                             ;       10(a@ 1+ a! a@ .)  Increment a 10 times and print it out
00C6                             ; 
00C6                             ;       User Commands are allocated to uppercase alpha characters A to Z
00C6                             ; 
00C6                             ;       A user command can be defined by starting with a colon and
00C6                             ;       ending with a semicolon
00C6                             ; 
00C6                             ;       Example  :A 123 456 + . ;
00C6                             ; 
00C6                             ;       The A character represents a fixed address for the User routine
00C6                             ;       The interpreter copies all the characters after the A to a text buffer
00C6                             ;       located at address A
00C6                             ;       Each time A is encountered (outside of a colon definition)
00C6                             ;       it will execute the code  located there i.e. 123 456 + .
00C6                             ; 
00C6                             ;       Variables are associated with lowercase characters a-z
00C6                             ;       Each variable is allocated 2 bytes located on even addresses
00C6                             ;       They run contiguously from $A800 (a) to $A830 (z)
00C6                             ;       They are accessed using the fetch and store commands @ and !
00C6                             ; 
00C6                             ;       Examples:
00C6                             ; 
00C6                             ;       1234 a!     store 1234 in a
00C6                             ; 
00C6                             ;       b@ .        fetch the value from b and print it out
00C6                             ; 
00C6                             ;       a@ b@ + .   fetch values from a and b, add them together and print the sum
00C6                             ; 
00C6                             ;       a@ b!       copy the value in a and store it in b
00C6                             ; 
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                             ;ROMSTART    EQU $0
00C6                             ;RAMSTART    EQU $800
00C6                             ;EXTENDED    EQU 0
00C6                             ;ROMSIZE     EQU $800
00C6                DSIZE:    EQU   $100   
00C6                RSIZE:    EQU   $100   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                             ;        .ORG ROMSTART
00C6                             ; 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
00C6                             ;        JP start
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180                MINT:        
0180   31 00 09               LD   SP,DSTACK   
0183   CD 9A 01               CALL   initialize   
0186   CD 33 02               CALL   ENTER   
0189   60 4D 49 4E 54 20 56 31 2E 30 60 5C 4E 00 .CSTR   "`MINT V1.0`\\N"   
0197   C3 BB 01               JP   interpret   
019A                INITIALIZE:      
019A   DD 21 00 0A            LD   IX,RSTACK   
019E   FD 21 1A 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01A2   21 60 03               LD   HL,iUserVars   
01A5   11 00 0B               LD   DE,userVars   
01A8   01 20 00               LD   BC,16 * 2   
01AB   ED B0                  LDIR      
01AD   21 F4 0B               LD   HL,defs   
01B0   06 1A                  LD   B,26   
01B2                INIT1:       
01B2   36 98                  LD   (HL),lsb(empty_)   
01B4   23                     INC   HL   
01B5   36 02                  LD   (HL),msb(empty_)   
01B7   23                     INC   HL   
01B8   10 F8                  DJNZ   init1   
01BA   C9                     RET      
01BB                INTERPRET:      
01BB   CD 33 02               CALL   ENTER   
01BE   5C 4E 60 3E 20 60 00   .CSTR   "\\N`> `"   
01C5                INTERPRET1:      ; used by tests
01C5   01 00 00               LD   BC,0   ; load BC with offset into TIB
01C8   ED 43 18 0B            LD   (vTIBPtr),BC   
01CC                INTERPRET2:      ; calc nesting (a macro might have changed it)
01CC   1E 00                  LD   E,0   ; initilize nesting value
01CE   C5                     PUSH   BC   ; save offset into TIB,
01CF                             ; BC is also the count of chars in TIB
01CF   21 00 0A               LD   HL,TIB   ; HL is start of TIB
01D2   18 06                  JR   interpret4   
01D4                INTERPRET3:      
01D4   7E                     LD   A,(HL)   ; A = char in TIB
01D5   23                     INC   HL   ; inc pointer into TIB
01D6   0B                     DEC   BC   ; dec count of chars in TIB
01D7   CD A6 07               CALL   nesting   ; update nesting value
01DA                INTERPRET4:      
01DA   79                     LD   A,C   ; is count zero?
01DB   B0                     OR   B   
01DC   20 F6                  JR   NZ,interpret3   ; if not loop
01DE   C1                     POP   BC   ; restore offset into TIB
01DF                             ; *******************************************************************
01DF                             ; Wait for a character from the serial input (keyboard)
01DF                             ; and store it in the text buffer. Keep accepting characters,
01DF                             ; increasing the instruction pointer BC - until a newline received.
01DF                             ; *******************************************************************
01DF                WAITCHAR:      
01DF   CD 81 00               CALL   getchar   ; loop around waiting for character
01E2   FE 20                  CP   $20   
01E4   30 0D                  JR   NC,waitchar1   
01E6   FE 00                  CP   $0   ; is it end of string?
01E8   28 28                  JR   Z,waitchar4   
01EA   FE 0D                  CP   "\r"   ; carriage return?
01EC   28 13                  JR   Z,waitchar3   
01EE   16 00                  LD   D,0   
01F0   C3 7E 02               JP   macro   
01F3                WAITCHAR1:      
01F3   21 00 0A               LD   HL,TIB   
01F6   09                     ADD   HL,BC   
01F7   77                     LD   (HL),A   ; store the character in textbuf
01F8   03                     INC   BC   
01F9   CD 85 00               CALL   putchar   ; echo character to screen
01FC   CD A6 07               CALL   nesting   
01FF   18 DE                  JR   waitchar   ; wait for next character
0201                WAITCHAR3:      
0201   21 00 0A               LD   HL,TIB   
0204   09                     ADD   HL,BC   
0205   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0207   03                     INC   BC   
0208   CD F4 05               CALL   crlf   ; echo character to screen
020B   7B                     LD   A,E   ; if zero nesting append and ETX after \r
020C   B7                     OR   A   
020D   20 D0                  JR   NZ,waitchar   
020F   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0211   03                     INC   BC   
0212                WAITCHAR4:      
0212   ED 43 18 0B            LD   (vTIBPtr),BC   
0216   01 00 0A               LD   BC,TIB   ; Instructions stored on heap at address HERE
0219   0B                     DEC   BC   
021A                             ; Drop into the NEXT and dispatch routines
021A                             ; ********************************************************************************
021A                             ; 
021A                             ; Dispatch Routine.
021A                             ; 
021A                             ; Get the next character and form a 1 byte jump address
021A                             ; 
021A                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
021A                             ; jump to the selected function.
021A                             ; 
021A                             ; Individual handler routines will deal with each category:
021A                             ; 
021A                             ; 1. Detect characters A-Z and jump to the User Command handler routine
021A                             ; 
021A                             ; 2. Detect characters a-z and jump to the variable handler routine
021A                             ; 
021A                             ; 3. All other characters are punctuation and cause a jump to the associated
021A                             ; primitive code.
021A                             ; 
021A                             ; Instruction Pointer IP BC is incremented
021A                             ; 
021A                             ; *********************************************************************************
021A                NEXT:        
021A   03                     INC   BC   ; 6t    Increment the IP
021B   0A                     LD   A,(BC)   ; 7t    Get the next character and dispatch
021C                             ; 
021C                DISPATCH:      
021C   FE 00                  CP   0   ;       NULL? exit Mint
021E   CA 04 04               JP   Z,exit_   
0221   FE 03                  CP   $03   ;       ETX? interpret next line
0223   CA BB 01               JP   Z,interpret   
0226   D6 20                  SUB   " "   ; 7t    remove char offset
0228   38 F0                  JR   C,NEXT   ;       ignore char
022A   11 00 03               LD   DE,opcodes   ; 7t    Start address of jump table
022D   5F                     LD   E,A   ; 4t    Index into table
022E   1A                     LD   A,(DE)   ; 7t    get low jump address
022F   26 04                  LD   H,msb(page4)   ; 7t    Load H with the 1st page address
0231   6F                     LD   L,A   ; 4t    and put into L
0232   E9                     JP   (HL)   ; 4t    Jump to routine
0233                ENTER:       
0233   60 69                  LD   HL,BC   
0235   CD DE 05               CALL   rpush   ; save Instruction Pointer
0238   C1                     POP   BC   
0239   0B                     DEC   BC   
023A   FD E9                  JP   (IY)   ; Execute code from User def
023C                PRINTDEC:      
023C                             ;Number in hl to decimal ASCII
023C                             ;inputs:	hl = number to ASCII
023C                             ;example: hl=300 outputs "00300"
023C                             ;destroys: af, de, hl
023C                DISPHL:      
023C   11 F0 D8               LD   de,-10000   
023F   CD 55 02               CALL   Num1   
0242   11 18 FC               LD   de,-1000   
0245   CD 55 02               CALL   Num1   
0248   11 9C FF               LD   de,-100   
024B   CD 55 02               CALL   Num1   
024E   1E F6                  LD   e,-10   
0250   CD 55 02               CALL   Num1   
0253   1E FF                  LD   e,-1   
0255                NUM1:        
0255   3E 2F                  LD   a,"0"-1   
0257                NUM2:        
0257   3C                     INC   a   
0258   19                     ADD   hl,de   
0259   38 FC                  JR   c,Num2   
025B   ED 52                  SBC   hl,de   
025D   C3 85 00               JP   putchar   
0260                             ; ARRAY compilation routine
0260                COMPNEXT:      
0260   D1                     POP   DE   ; DE = return address
0261   2A 14 0B               LD   HL,(vHeapPtr)   ; load heap ptr
0264   73                     LD   (HL),E   ; store lsb
0265   3A 1C 0B               LD   A,(vByteMode)   
0268   23                     INC   HL   
0269   B7                     OR   A   
026A   20 02                  JR   NZ,compNext1   
026C   72                     LD   (HL),D   
026D   23                     INC   HL   
026E                COMPNEXT1:      
026E   22 14 0B               LD   (vHeapPtr),HL   ; save heap ptr
0271   C3 1A 02               JP   NEXT   
0274                SPACE:       
0274   3E 20                  LD   A," "   
0276   C3 85 00               JP   putchar   
0279                WRITECHAR:      
0279   12                     LD   (DE),A   
027A   13                     INC   DE   
027B   C3 85 00               JP   putchar   
027E                MACRO:       
027E   ED 43 18 0B            LD   (vTIBPtr),BC   
0282   21 80 03               LD   HL,ctrlCodes   
0285   85                     ADD   A,L   
0286   6F                     LD   L,A   
0287   5E                     LD   E,(HL)   
0288   16 02                  LD   D,msb(macros)   
028A   D5                     PUSH   DE   
028B   CD 33 02               CALL   ENTER   
028E   5C 47 00               .CSTR   "\\G"   
0291   ED 4B 18 0B            LD   BC,(vTIBPtr)   
0295   C3 CC 01               JP   interpret2   
0298                             ; **************************************************************************
0298                             ; Macros must be written in Mint and end with ;
0298                             ; this code must not span pages
0298                             ; **************************************************************************
0298                MACROS:      
0298                EMPTY_:      
0298   3B 00                  .CSTR   ";"   
029A                BACKSP_:      
029A   5C 24 40 30 3D 30 3D 28 31 5C 24 5C 2D 38 5C 45 60 20 60 38 5C 45 29 3B 00 .CSTR   "\\$@0=0=(1\\$\\-8\\E` `8\\E);"   
02B3                EDIT_:       
02B3   60 3F 60 5C 4B 5C 4E 60 3E 20 60 5C 5E 41 2D 5C 5A 3B 00 .CSTR   "`?`\\K\\N`> `\\^A-\\Z;"   
02C6                LIST_:       
02C6   5C 4E 32 36 28 5C 69 40 5C 5A 5C 24 40 30 3E 28 5C 4E 29 29 5C 4E 60 3E 20 60 3B 00 .CSTR   "\\N26(\\i@\\Z\\$@0>(\\N))\\N`> `;"   
02E2                PRINTSTACK_:      
02E2   60 3D 3E 20 60 5C 50 5C 4E 5C 4E 60 3E 20 60 3B 00 .CSTR   "`=> `\\P\\N\\N`> `;"   
02F3                TOGGLEBASE_:      
02F3   5C 42 40 30 3D 5C 42 21 3B 00 .CSTR   "\\B@0=\\B!;"   
02FD                             ; escape_:
02FD                             ;         ; .cstr ";"
02FD                             ;         .cstr "13\\E70(` `)13\\E`> `0\\$!;"
02FD                             ; **************************************************************************
02FD                             ; Page 2  Jump Tables
02FD                             ; **************************************************************************
02FD                          ALIGN   $100   
0300                OPCODES:      
0300   EB                     DB   lsb(nop_)   ;    SP
0301   43                     DB   lsb(store_)   ;    !
0302   4A                     DB   lsb(dup_)   ;    "
0303   C6                     DB   lsb(hex_)   ;    #
0304   4F                     DB   lsb(swap_)   ;    $
0305   54                     DB   lsb(over_)   ;    %
0306   5E                     DB   lsb(and_)   ;    &
0307   5B                     DB   lsb(drop_)   ;    '
0308   F2                     DB   lsb(begin_)   ;    (
0309   E2                     DB   lsb(again_)   ;    )
030A   F6                     DB   lsb(mul_)   ;    *
030B   84                     DB   lsb(add_)   ;    +
030C   00                     DB   lsb(hexp_)   ;    ,
030D   9D                     DB   lsb(sub_)   ;    -
030E   CB                     DB   lsb(dot_)   ;    .
030F   F4                     DB   lsb(div_)   ;    /
0310   0E                     DB   lsb(num_)   ;    0
0311   0E                     DB   lsb(num_)   ;    1
0312   0E                     DB   lsb(num_)   ;    2
0313   0E                     DB   lsb(num_)   ;    3
0314   0E                     DB   lsb(num_)   ;    4
0315   0E                     DB   lsb(num_)   ;    5
0316   0E                     DB   lsb(num_)   ;    6
0317   0E                     DB   lsb(num_)   ;    7
0318   0E                     DB   lsb(num_)   ;    8
0319   0E                     DB   lsb(num_)   ;    9
031A   DF                     DB   lsb(def_)   ;    :
031B   27                     DB   lsb(ret_)   ;    ;
031C   B5                     DB   lsb(lt_)   ;    <
031D   A5                     DB   lsb(eq_)   ;    =
031E   B1                     DB   lsb(gt_)   ;    >
031F   EB                     DB   lsb(nop_)   ;    ?
0320   3C                     DB   lsb(fetch_)   ;    @
0321   11                     DB   lsb(call_)   ;    A
0322   11                     DB   lsb(call_)   ;    B
0323   11                     DB   lsb(call_)   ;    C
0324   11                     DB   lsb(call_)   ;    D
0325   11                     DB   lsb(call_)   ;    E
0326   11                     DB   lsb(call_)   ;    F
0327   11                     DB   lsb(call_)   ;    G
0328   11                     DB   lsb(call_)   ;    H
0329   11                     DB   lsb(call_)   ;    I
032A   11                     DB   lsb(call_)   ;    J
032B   11                     DB   lsb(call_)   ;    K
032C   11                     DB   lsb(call_)   ;    L
032D   11                     DB   lsb(call_)   ;    M
032E   11                     DB   lsb(call_)   ;    N
032F   11                     DB   lsb(call_)   ;    O
0330   11                     DB   lsb(call_)   ;    P
0331   11                     DB   lsb(call_)   ;    Q
0332   11                     DB   lsb(call_)   ;    R
0333   11                     DB   lsb(call_)   ;    S
0334   11                     DB   lsb(call_)   ;    T
0335   11                     DB   lsb(call_)   ;    U
0336   11                     DB   lsb(call_)   ;    V
0337   11                     DB   lsb(call_)   ;    W
0338   11                     DB   lsb(call_)   ;    X
0339   11                     DB   lsb(call_)   ;    Y
033A   11                     DB   lsb(call_)   ;    Z
033B   E5                     DB   lsb(arrDef_)   ;    [
033C   00                     DB   lsb(alt_)   ;    \
033D   E8                     DB   lsb(arrEnd_)   ;    ]
033E   74                     DB   lsb(xor_)   ;    ^
033F   97                     DB   lsb(neg_)   ;    _
0340   EF                     DB   lsb(str_)   ;    `
0341   2E                     DB   lsb(var_)   ;    a
0342   2E                     DB   lsb(var_)   ;    b
0343   2E                     DB   lsb(var_)   ;    c
0344   2E                     DB   lsb(var_)   ;    d
0345   2E                     DB   lsb(var_)   ;    e
0346   2E                     DB   lsb(var_)   ;    f
0347   2E                     DB   lsb(var_)   ;    g
0348   2E                     DB   lsb(var_)   ;    h
0349   2E                     DB   lsb(var_)   ;    i
034A   2E                     DB   lsb(var_)   ;    j
034B   2E                     DB   lsb(var_)   ;    k
034C   2E                     DB   lsb(var_)   ;    l
034D   2E                     DB   lsb(var_)   ;    m
034E   2E                     DB   lsb(var_)   ;    n
034F   2E                     DB   lsb(var_)   ;    o
0350   2E                     DB   lsb(var_)   ;    p
0351   2E                     DB   lsb(var_)   ;    q
0352   2E                     DB   lsb(var_)   ;    r
0353   2E                     DB   lsb(var_)   ;    s
0354   2E                     DB   lsb(var_)   ;    t
0355   2E                     DB   lsb(var_)   ;    u
0356   2E                     DB   lsb(var_)   ;    v
0357   2E                     DB   lsb(var_)   ;    w
0358   2E                     DB   lsb(var_)   ;    x
0359   2E                     DB   lsb(var_)   ;    y
035A   2E                     DB   lsb(var_)   ;    z
035B   8A                     DB   lsb(shl_)   ;    {
035C   69                     DB   lsb(or_)   ;    |
035D   8F                     DB   lsb(shr_)   ;    }
035E   7F                     DB   lsb(inv_)   ;    ~
035F   EB                     DB   lsb(nop_)   ;    backspace
0360                             ; ***********************************************************************
0360                             ; Initial values for user variables		
0360                             ; ***********************************************************************		
0360                IUSERVARS:      
0360   00 09                  DW   dStack   ; \0 cS0
0362   00 0A                  DW   TIB   ; \1 cTIB
0364   F4 0B                  DW   defs   ; \2 cDefs
0366   C0 0B                  DW   vars   ; \3 cVars
0368   00 0B                  DW   userVars   ; \4 cUserVars
036A   00 00                  DW   0   ; \5
036C   00 00                  DW   0   ; \6
036E   00 00                  DW   0   ; \7
0370   00 00                  DW   0   ; \8
0372   00 00                  DW   0   ; \9 vTemp
0374   2A 0C                  DW   HEAP   ; vHeapPtr
0376   00 00                  DW   FALSE   ; vBase16
0378   00 0A                  DW   TIB   ; vTIBPtr
037A   C4 05                  DW   alt1   ; vAltCodes
037C   00 00                  DW   $0   ; 
037E   00 00                  DW   $0   ; 
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   98                     DB   lsb(empty_)   ; NUL ^@
0381   98                     DB   lsb(empty_)   ; SOH ^A
0382   F3                     DB   lsb(toggleBase_)   ; STX ^B
0383   98                     DB   lsb(empty_)   ; ETX ^C
0384   98                     DB   lsb(empty_)   ; EOT ^D
0385   B3                     DB   lsb(edit_)   ; ENQ ^E
0386   98                     DB   lsb(empty_)   ; ACK ^F
0387   98                     DB   lsb(empty_)   ; BEL ^G
0388   9A                     DB   lsb(backsp_)   ; BS  ^H
0389   98                     DB   lsb(empty_)   ; TAB ^I
038A   98                     DB   lsb(empty_)   ; LF  ^J
038B   98                     DB   lsb(empty_)   ; VT  ^K
038C   C6                     DB   lsb(list_)   ; FF  ^L
038D   98                     DB   lsb(empty_)   ; CR  ^M
038E   98                     DB   lsb(empty_)   ; SO  ^N
038F   98                     DB   lsb(empty_)   ; SI  ^O
0390   E2                     DB   lsb(printStack_)   ; DLE ^P
0391   98                     DB   lsb(empty_)   ; DC1 ^Q
0392   98                     DB   lsb(empty_)   ; DC2 ^R
0393   98                     DB   lsb(empty_)   ; DC3 ^S
0394   98                     DB   lsb(empty_)   ; DC4 ^T
0395   98                     DB   lsb(empty_)   ; NAK ^U
0396   98                     DB   lsb(empty_)   ; SYN ^V
0397   98                     DB   lsb(empty_)   ; ETB ^W
0398   98                     DB   lsb(empty_)   ; CAN ^X
0399   98                     DB   lsb(empty_)   ; EM  ^Y
039A   98                     DB   lsb(empty_)   ; SUB ^Z
039B   98                     DB   lsb(empty_)   ; ESC ^[
039C   98                     DB   lsb(empty_)   ; FS  ^\
039D   98                     DB   lsb(empty_)   ; GS  ^]
039E   98                     DB   lsb(empty_)   ; RS  ^^
039F   98                     DB   lsb(empty_)   ; US  ^_)
03A0   04                     DB   lsb(aNop_)   ; SP  ^`
03A1   23                     DB   lsb(cStore_)   ;    !
03A2   04                     DB   lsb(aNop_)   ;    "
03A3   04                     DB   lsb(aNop_)   ; 
03A4   D5                     DB   lsb(TIBPtr_)   ;    $  ( -- adr ) text input ptr
03A5   04                     DB   lsb(aNop_)   ;    %
03A6   04                     DB   lsb(aNop_)   ;    &
03A7   04                     DB   lsb(aNop_)   ;    '
03A8   41                     DB   lsb(else_)   ;    (
03A9   04                     DB   lsb(aNop_)   ;    )
03AA   04                     DB   lsb(aNop_)   ;    *
03AB   69                     DB   lsb(incr_)   ;    +  ( adr -- ) decrements variable at address
03AC   04                     DB   lsb(aNop_)   ;    ,
03AD   74                     DB   lsb(decr_)   ;    -  ( adr -- ) increments variable at address
03AE   04                     DB   lsb(aNop_)   ;    .
03AF   04                     DB   lsb(aNop_)   ;    /
03B0   9B                     DB   lsb(knownVar_)   ;    0  ( -- adr ) start of data stack constant
03B1   9B                     DB   lsb(knownVar_)   ;    1  ; returns HERE variable
03B2   9B                     DB   lsb(knownVar_)   ;    2  ( -- adr ) TIBPtr variable
03B3   9B                     DB   lsb(knownVar_)   ;    3  ( -- adr ) isHex variable
03B4   9B                     DB   lsb(knownVar_)   ;    4
03B5   9B                     DB   lsb(knownVar_)   ;    5
03B6   9B                     DB   lsb(knownVar_)   ;    6
03B7   9B                     DB   lsb(knownVar_)   ;    7
03B8   9B                     DB   lsb(knownVar_)   ;    8
03B9   9B                     DB   lsb(knownVar_)   ;    9
03BA   04                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   04                     DB   lsb(aNop_)   ;    ;
03BC   04                     DB   lsb(aNop_)   ;    <
03BD   04                     DB   lsb(aNop_)   ;    =
03BE   04                     DB   lsb(aNop_)   ;    >
03BF   04                     DB   lsb(aNop_)   ;    ?
03C0   0B                     DB   lsb(cFetch_)   ;    @
03C1   04                     DB   lsb(aNop_)   ;    A
03C2   00                     DB   lsb(base16_)   ;    B
03C3   EB                     DB   lsb(nop_)   ;    C
03C4   28                     DB   lsb(depth_)   ;    D
03C5   3A                     DB   lsb(emit_)   ;    E
03C6   04                     DB   lsb(aNop_)   ;    F
03C7   56                     DB   lsb(go_)   ;    G
03C8   EB                     DB   lsb(nop_)   ;    H
03C9   7F                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   04                     DB   lsb(aNop_)   ;    J
03CB   92                     DB   lsb(key_)   ;    K
03CC   04                     DB   lsb(aNop_)   ;    L
03CD   B1                     DB   lsb(max_)   ;    M  ( a b -- c ) return the maximum value
03CE   BD                     DB   lsb(newln_)   ;    N
03CF   C2                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   DB                     DB   lsb(printStk_)   ;    P
03D1   EE                     DB   lsb(quit_)   ;    Q
03D2   04                     DB   lsb(aNop_)   ;    R
03D3   04                     DB   lsb(aNop_)   ;    S
03D4   04                     DB   lsb(aNop_)   ;    T
03D5   04                     DB   lsb(aNop_)   ;    U
03D6   04                     DB   lsb(aNop_)   ;    V
03D7   DE                     DB   lsb(while_)   ;    W
03D8   4E                     DB   lsb(exec_)   ;    X
03D9   04                     DB   lsb(aNop_)   ;    Y
03DA   ED                     DB   lsb(editDef_)   ;    Z
03DB   06                     DB   lsb(cArrDef_)   ;    [
03DC   1A                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   04                     DB   lsb(aNop_)   ;    ]
03DE   12                     DB   lsb(charCode_)   ;    ^
03DF   C9                     DB   lsb(sign_)   ;    _)  ( n -- b ) returns true if -ve
03E0   04                     DB   lsb(aNop_)   ;    `
03E1   04                     DB   lsb(aNop_)   ;    a
03E2   04                     DB   lsb(aNop_)   ;    b
03E3   04                     DB   lsb(aNop_)   ;    c
03E4   04                     DB   lsb(aNop_)   ;    d  ( -- val ) depth of data stack
03E5   04                     DB   lsb(aNop_)   ;    e  ( val -- ) emits a char to output
03E6   04                     DB   lsb(aNop_)   ;    f
03E7   04                     DB   lsb(aNop_)   ;    g  ( -- ? ) execute mint definition
03E8   5F                     DB   lsb(heapPtr_)   ;    h  ; returns heap ptr variable
03E9   65                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   88                     DB   lsb(j_)   ;    j  ; returns index variable of outer loop
03EB   04                     DB   lsb(aNop_)   ;    k  ( -- val )  read a char from input
03EC   04                     DB   lsb(aNop_)   ;    l
03ED   A9                     DB   lsb(min_)   ;    m  ( a b -- c ) return the minimum value
03EE   04                     DB   lsb(aNop_)   ;    n  ; prints a newline to output
03EF   04                     DB   lsb(aNop_)   ;    o
03F0   04                     DB   lsb(aNop_)   ;    p  ( -- ) non-destructively prints stack
03F1   04                     DB   lsb(aNop_)   ;    q  ; quits from Mint REPL
03F2   04                     DB   lsb(aNop_)   ;    r
03F3   04                     DB   lsb(aNop_)   ;    s
03F4   04                     DB   lsb(aNop_)   ;    t
03F5   04                     DB   lsb(aNop_)   ;    u
03F6   04                     DB   lsb(aNop_)   ;    v
03F7   04                     DB   lsb(aNop_)   ;    w  ; ( b -- ) if false, skip to end of loop
03F8   04                     DB   lsb(aNop_)   ;    x
03F9   04                     DB   lsb(aNop_)   ;    y
03FA   04                     DB   lsb(aNop_)   ;    z
03FB   04                     DB   lsb(aNop_)   ;    {
03FC   04                     DB   lsb(aNop_)   ;    |
03FD   04                     DB   lsb(aNop_)   ;    }
03FE   04                     DB   lsb(aNop_)   ;    ~
03FF   04                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                ALT_:        
0400   2A 1A 0B               LD   HL,(vAlt)   
0403   E9                     JP   (HL)   
0404                EXIT_:       
0404   03                     INC   BC   
0405   50 59                  LD   DE,BC   
0407   CD E9 05               CALL   rpop   ; Restore Instruction pointer
040A   44 4D                  LD   BC,HL   
040C   EB                     EX   DE,HL   
040D   E9                     JP   (HL)   
040E                NUM_:        
040E   C3 75 05               JP   number   
0411                CALL_:       
0411   60 69                  LD   HL,BC   
0413   CD DE 05               CALL   rpush   ; save Instruction Pointer
0416   0A                     LD   A,(BC)   
0417   D6 41                  SUB   "A"   ; Calc index
0419   87                     ADD   A,A   
041A   21 F4 0B               LD   HL,DEFS   
041D   5F                     LD   E,A   
041E   16 00                  LD   D,0   
0420   19                     ADD   HL,DE   
0421   4E                     LD   C,(HL)   
0422   23                     INC   HL   
0423   46                     LD   B,(HL)   
0424   0B                     DEC   BC   
0425   FD E9                  JP   (IY)   ; Execute code from User def
0427                RET_:        
0427   CD E9 05               CALL   rpop   ; Restore Instruction pointer
042A   44 4D                  LD   BC,HL   
042C   FD E9                  JP   (IY)   
042E                VAR_:        
042E   0A                     LD   A,(BC)   
042F   D6 61                  SUB   "a"   ; Calc index
0431   87                     ADD   A,A   
0432   21 C0 0B               LD   HL,VARS   
0435   5F                     LD   E,A   
0436   16 00                  LD   D,0   
0438   19                     ADD   HL,DE   
0439   E5                     PUSH   HL   
043A   FD E9                  JP   (IY)   
043C                FETCH_:      ; Fetch the value from the address placed on the top of the stack
043C   E1                     POP   HL   ; 10t
043D   5E                     LD   E,(HL)   ; 7t
043E   23                     INC   HL   ; 6t
043F   56                     LD   D,(HL)   ; 7t
0440   D5                     PUSH   DE   ; 11t
0441   FD E9                  JP   (IY)   ; 8t
0443                             ; 49t
0443                STORE_:      ; Store the value at the address placed on the top of the stack
0443   E1                     POP   HL   ; 10t
0444   D1                     POP   DE   ; 10t
0445   73                     LD   (HL),E   ; 7t
0446   23                     INC   HL   ; 6t
0447   72                     LD   (HL),D   ; 7t
0448   FD E9                  JP   (IY)   ; 8t
044A                             ; 48t
044A                DUP_:        
044A   E1                     POP   HL   ; Duplicate the top member of the stack
044B   E5                     PUSH   HL   
044C   E5                     PUSH   HL   
044D   FD E9                  JP   (IY)   
044F                             ; $ swap                    ; a b -- b a Swap the top 2 elements of the stack
044F                SWAP_:       
044F   E1                     POP   HL   
0450   E3                     EX   (SP),HL   
0451   E5                     PUSH   HL   
0452   FD E9                  JP   (IY)   
0454                OVER_:       
0454   E1                     POP   HL   ; Duplicate 2nd element of the stack
0455   D1                     POP   DE   
0456   D5                     PUSH   DE   
0457   E5                     PUSH   HL   
0458   D5                     PUSH   DE   ; And push it to top of stack
0459   FD E9                  JP   (IY)   
045B                DROP_:       ; Discard the top member of the stack
045B   E1                     POP   HL   
045C   FD E9                  JP   (IY)   
045E                AND_:        
045E   D1                     POP   DE   ; 10t Bitwise AND the top 2 elements of the stack
045F   E1                     POP   HL   ; 10t
0460   7B                     LD   A,E   ; 4t
0461   A5                     AND   L   ; 4t
0462   6F                     LD   L,A   ; 4t
0463   7A                     LD   A,D   ; 4t
0464   A4                     AND   H   ; 4t
0465   67                     LD   H,A   ; 4t
0466   E5                     PUSH   HL   ; 11t
0467   FD E9                  JP   (IY)   ; 8t
0469                             ; 63t
0469                OR_:         
0469   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
046A   E1                     POP   HL   
046B   7B                     LD   A,E   
046C   B5                     OR   L   
046D   6F                     LD   L,A   
046E   7A                     LD   A,D   
046F   B4                     OR   H   
0470   67                     LD   H,A   
0471   E5                     PUSH   HL   
0472   FD E9                  JP   (IY)   
0474                XOR_:        
0474   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0475                XOR1:        
0475   E1                     POP   HL   
0476   7B                     LD   A,E   
0477   AD                     XOR   L   
0478   6F                     LD   L,A   
0479   7A                     LD   A,D   
047A   AC                     XOR   H   
047B   67                     LD   H,A   
047C   E5                     PUSH   HL   
047D   FD E9                  JP   (IY)   
047F                INV_:        ; Bitwise INVert the top member of the stack
047F   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0482   18 F1                  JR   xor1   
0484                ADD_:        ; Add the top 2 members of the stack
0484   D1                     POP   DE   ; 10t
0485   E1                     POP   HL   ; 10t
0486   19                     ADD   HL,DE   ; 11t
0487   E5                     PUSH   HL   ; 11t
0488   FD E9                  JP   (IY)   ; 8t
048A                             ; 50t
048A                             ;  Left shift { is multply by 2		
048A                SHL_:        
048A   E1                     POP   HL   ; Duplicate the top member of the stack
048B   29                     ADD   HL,HL   
048C   E5                     PUSH   HL   ; shift left fallthrough into add_
048D   FD E9                  JP   (IY)   ; 8t
048F                             ;  Right shift } is a divide by 2		
048F                             ; 
048F                SHR_:        
048F   E1                     POP   HL   ; Get the top member of the stack
0490   CB 3C                  SRL   H   
0492   CB 1D                  RR   L   
0494   E5                     PUSH   HL   
0495   FD E9                  JP   (IY)   ; 8t
0497   21 00 00     NEG_:     LD   HL,0   ; NEGate the value on top of stack (2's complement)
049A   D1                     POP   DE   ; 10t
049B   18 02                  JR   SUB_2   ; use the SUBtract routine
049D                SUB_:        ; Subtract the value 2nd on stack from top of stack
049D   D1                     POP   DE   ; 10t
049E   E1           SUB_1:    POP   HL   ; 10t  Entry point for INVert
049F   A7           SUB_2:    AND   A   ;  4t  Entry point for NEGate
04A0   ED 52                  SBC   HL,DE   ; 15t
04A2   E5                     PUSH   HL   ; 11t
04A3   FD E9                  JP   (IY)   ; 8t
04A5                             ; 58t
04A5   E1           EQ_:      POP   HL   
04A6   D1                     POP   DE   
04A7   A7                     AND   A   ; reset the carry flag
04A8   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04AA   28 16                  JR   Z,equal   
04AC   21 00 00               LD   HL,0   
04AF   18 12                  JR   less   ; HL = 1
04B1   D1           GT_:      POP   DE   
04B2   E1                     POP   HL   
04B3   18 02                  JR   cmp_   
04B5   E1           LT_:      POP   HL   
04B6   D1                     POP   DE   
04B7   A7           CMP_:     AND   A   ; reset the carry flag
04B8   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04BA   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04BC   21 00 00               LD   HL,0   
04BF   FA C3 04               JP   M,less   
04C2   2C           EQUAL:    INC   L   ; HL = 1
04C3                LESS:        
04C3   E5                     PUSH   HL   
04C4   FD E9                  JP   (IY)   
04C6   CD 6B 07     HEX_:     CALL   get_hex   
04C9   18 F8                  JR   less   ; piggyback for ending
04CB                DOT_:        
04CB   E1                     POP   HL   
04CC   3A 16 0B               LD   A,(vBase16)   
04CF   B7                     OR   A   
04D0   28 05                  JR   Z,dot1   
04D2   CD 87 07               CALL   printhex   
04D5   18 03                  JR   dot2   
04D7                DOT1:        
04D7   CD 3C 02               CALL   printdec   
04DA                DOT2:        
04DA   CD 74 02               CALL   space   
04DD   FD E9                  JP   (IY)   
04DF   C3 44 07     DEF_:     JP   def   
04E2   C3 97 05     AGAIN_:   JP   again   
04E5   C3 16 07     ARRDEF_:   JP   arrDef   
04E8   C3 28 07     ARREND_:   JP   arrEnd   
04EB   C3 1A 02     NOP_:     JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
04EE   C9           QUIT_:    RET      ; exit interpreter
04EF   C3 CF 05     STR_:     JP   str   
04F2   18 4F        BEGIN_:   JR   begin   
04F4   18 2A        DIV_:     JR   div   
04F6   18 0E        MUL_:     JR   mul   
04F8                             ;*******************************************************************
04F8                             ; Page 5 primitive routines
04F8                             ;*******************************************************************
04F8                          ALIGN   $100   
0500                HEXP_:       ; print hexadecimal
0500   E1                     POP   HL   
0501   CD 87 07               CALL   printhex   
0504   18 D4                  JR   dot2   
0506                MUL:         ; 16-bit multiply
0506   D1                     POP   DE   ; get first value
0507   E1                     POP   HL   
0508   C5                     PUSH   BC   ; Preserve the IP
0509   44                     LD   B,H   ; BC = 2nd value
050A   4D                     LD   C,L   
050B   21 00 00               LD   HL,0   
050E   3E 10                  LD   A,16   
0510                MUL_LOOP_1:      
0510   29                     ADD   HL,HL   
0511   CB 13                  RL   E   
0513   CB 12                  RL   D   
0515   30 04                  JR   NC,$+6   
0517   09                     ADD   HL,BC   
0518   30 01                  JR   NC,$+3   
051A   13                     INC   DE   
051B   3D                     DEC   A   
051C   20 F2                  JR   NZ,Mul_Loop_1   
051E                             ; 
051E   18 1E                  JR   mul_end   
0520                             ; ********************************************************************
0520                             ; 16-bit division subroutine.
0520                             ; 
0520                             ; BC: divisor, DE: dividend, HL: remainder
0520                             ; *********************************************************************
0520                             ; This divides DE by BC, storing the result in DE, remainder in HL
0520                             ; *********************************************************************
0520                             ; 1382 cycles
0520                             ; 35 bytes (reduced from 48)
0520                             ; 
0520                DIV:         
0520   D1                     POP   DE   ; get first value
0521   E1                     POP   HL   ; get 2nd value
0522   C5                     PUSH   BC   ; Preserve the IP
0523   44                     LD   B,H   ; BC = 2nd value
0524   4D                     LD   C,L   
0525                             ; 
0525   21 00 00               LD   hl,0   ; Zero the remainder
0528   3E 10                  LD   a,16   ; Loop counter
052A                DIV_LOOP:      ;shift the bits from BC (numerator) into HL (accumulator)
052A   CB 21                  SLA   c   
052C   CB 10                  RL   b   
052E   ED 6A                  ADC   hl,hl   
0530   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (HL>=DE)
0532   38 03                  JR   c,div_adjust   
0534   0C                     INC   c   
0535   18 01                  JR   div_done   
0537                DIV_ADJUST:      ; remainder is not >= denominator, so we have to add DE back to HL
0537   19                     ADD   hl,de   
0538                DIV_DONE:      
0538   3D                     DEC   a   
0539   20 EF                  JR   nz,div_loop   
053B   50                     LD   D,B   ; Result from BC to DE
053C   59                     LD   E,C   
053D   EB                     EX   DE,HL   ; swap them over?
053E                             ; 
053E                MUL_END:      
053E                DIV_END:      
053E   C1                     POP   BC   ; Restore the IP
053F   D5                     PUSH   DE   ; Push Result
0540   E5                     PUSH   HL   ; Push remainder
0541   FD E9                  JP   (IY)   
0543                             ; *************************************
0543                             ; Loop Handling Code
0543                             ; *************************************
0543                             ; 
0543                BEGIN:       ; Left parentesis begins a loop
0543   21 1E 0B               LD   HL,vFlags   
0546   00                     RES   fELSE,(HL)   
0547   E1                     POP   HL   
0548   7D                     LD   A,L   ; zero?
0549   B4                     OR   H   
054A   28 1C                  JR   Z,begin1   
054C   2B                     DEC   HL   
054D   11 FA FF               LD   DE,-6   
0550   DD 19                  ADD   IX,DE   
0552   DD 36 00 00            LD   (IX+0),0   ; loop var
0556   DD 36 01 00            LD   (IX+1),0   
055A   DD 75 02               LD   (IX+2),L   ; loop limit
055D   DD 74 03               LD   (IX+3),H   
0560   DD 71 04               LD   (IX+4),C   ; loop address
0563   DD 70 05               LD   (IX+5),B   
0566   FD E9                  JP   (IY)   
0568                BEGIN1:      
0568   1E 01                  LD   E,1   
056A                BEGIN2:      
056A   03                     INC   BC   
056B   0A                     LD   A,(BC)   
056C   CD A6 07               CALL   nesting   
056F   AF                     XOR   A   
0570   B3                     OR   E   
0571   20 F7                  JR   NZ,begin2   
0573   FD E9                  JP   (IY)   
0575                             ; ********************************************************************************
0575                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
0575                             ; Read the first character.
0575                             ;			
0575                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
0575                             ; and then added into the L register. (HL forms a 16-bit accumulator)
0575                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
0575                             ; and then add in the next digit. Repeat this until a non-number character is
0575                             ; detected. Add in the final digit so that HL contains the converted number.
0575                             ; Push HL onto the stack and proceed to the dispatch routine.
0575                             ; ********************************************************************************
0575                             ; 
0575                NUMBER:      
0575   21 00 00               LD   HL,$0000   ; 10t Clear HL to accept the number
0578   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
0579                NUMBER1:      ; corrected KB 24/11/21
0579   D6 30                  SUB   $30   ; 7t    Form decimal digit
057B   85                     ADD   A,L   ; 4t    Add into bottom of HL
057C   6F                     LD   L,A   ; 4t
057D   3E 00                  LD   A,00   ; 4t    Clear A
057F   8C                     ADC   A,H   ; Add with carry H-reg
0580   67                     LD   H,A   ; Put result in H-reg
0581   03                     INC   BC   ; 6t    Increment IP
0582   0A                     LD   A,(BC)   ; 7t    and get the next character
0583   FE 30                  CP   $30   ; 7t    Less than $30
0585   38 0C                  JR   C,endnum   ; 7/12t Not a number / end of number
0587   FE 3A                  CP   $3A   ; 7t    Greater or equal to $3A
0589   30 08                  JR   NC,endnum   ; 7/12t Not a number / end of number
058B                TIMES10:      ; Multiply digit(s) in HL by 10
058B   29                     ADD   HL,HL   ; 11t    2X
058C   5D                     LD   E,L   ;  4t    LD DE,HL
058D   54                     LD   D,H   ;  4t
058E   29                     ADD   HL,HL   ; 11t    4X
058F   29                     ADD   HL,HL   ; 11t    8X
0590   19                     ADD   HL,DE   ; 11t    2X  + 8X  = 10X
0591                             ; 52t cycles
0591   18 E6                  JR   number1   
0593                ENDNUM:      
0593   E5                     PUSH   HL   ; 11t   Put the number on the stack
0594   0B                     DEC   BC   
0595   FD E9                  JP   (IY)   ; and process the next character
0597                AGAIN:       
0597   21 1E 0B               LD   HL,vFlags   
059A   00                     BIT   fELSE,(HL)   
059B   28 25                  JR   Z,again2   
059D   DD 5E 00               LD   E,(IX+0)   ; peek loop var
05A0   DD 56 01               LD   D,(IX+1)   
05A3   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
05A6   DD 66 03               LD   H,(IX+3)   
05A9   B7                     OR   A   
05AA   ED 52                  SBC   HL,DE   
05AC   28 0F                  JR   Z,again1   
05AE   13                     INC   DE   
05AF   DD 73 00               LD   (IX+0),E   ; poke loop var
05B2   DD 72 01               LD   (IX+1),D   
05B5   DD 4E 04               LD   C,(IX+4)   ; peek loop address
05B8   DD 46 05               LD   B,(IX+5)   
05BB   FD E9                  JP   (IY)   
05BD                AGAIN1:      
05BD   11 06 00               LD   DE,6   ; drop loop frame
05C0   DD 19                  ADD   IX,DE   
05C2                AGAIN2:      
05C2   FD E9                  JP   (IY)   
05C4                ALT1:        
05C4   03                     INC   BC   
05C5   0A                     LD   A,(BC)   
05C6   21 80 03               LD   HL,altCodes   
05C9   85                     ADD   A,L   
05CA   6F                     LD   L,A   
05CB   6E                     LD   L,(HL)   ; 7t    get low jump address
05CC   26 06                  LD   H,msb(page5)   ; Load H with the 5th page address
05CE   E9                     JP   (HL)   ; 4t    Jump to routine
05CF                             ; **************************************************************************
05CF                             ; Print the string between the `backticks`
05CF                STR:         
05CF   03                     INC   BC   
05D0                NEXTCHAR:      
05D0   0A                     LD   A,(BC)   
05D1   03                     INC   BC   
05D2   FE 60                  CP   "`"   ; ` is the string terminator
05D4   28 05                  JR   Z,stringend   
05D6   CD 85 00               CALL   putchar   
05D9   18 F5                  JR   nextchar   
05DB                STRINGEND:      
05DB   0B                     DEC   BC   
05DC   FD E9                  JP   (IY)   
05DE                RPUSH:       
05DE   DD 2B                  DEC   IX   
05E0   DD 74 00               LD   (IX+0),H   
05E3   DD 2B                  DEC   IX   
05E5   DD 75 00               LD   (IX+0),L   
05E8   C9                     RET      
05E9                RPOP:        
05E9   DD 6E 00               LD   L,(IX+0)   
05EC   DD 23                  INC   IX   
05EE   DD 66 00               LD   H,(IX+0)   
05F1   DD 23                  INC   IX   
05F3   C9                     RET      
05F4                CRLF:        
05F4   3E 0D                  LD   A,"\r"   
05F6   CD 85 00               CALL   putchar   
05F9   3E 0A                  LD   A,"\n"   
05FB   C3 85 00               JP   putchar   
05FE                             ; **************************************************************************
05FE                             ; Page 6 Alt primitives
05FE                             ; **************************************************************************
05FE                          ALIGN   $100   
0600                PAGE5:       
0600                BASE16_:      
0600   21 16 0B               LD   HL,vBase16   
0603   E5                     PUSH   HL   
0604                ANOP_:       
0604   FD E9                  JP   (IY)   
0606                CARRDEF_:      ; define a byte array
0606   3E 01                  LD   A,TRUE   
0608   C3 18 07               JP   arrDef1   
060B                CFETCH_:      
060B   E1                     POP   HL   ; 10t
060C   5E                     LD   E,(HL)   ; 7t
060D   16 00                  LD   D,0   ; 7t
060F   D5                     PUSH   DE   ; 11t
0610   FD E9                  JP   (IY)   ; 8t
0612                             ; 49t
0612                CHARCODE_:      
0612   03                     INC   BC   
0613   0A                     LD   A,(BC)   
0614   26 00                  LD   H,0   
0616   6F                     LD   L,A   
0617   E5                     PUSH   HL   
0618   FD E9                  JP   (IY)   
061A                COMMENT_:      
061A                COMMENT:      
061A   03                     INC   BC   ; point to next char
061B   0A                     LD   A,(BC)   
061C   FE 0D                  CP   "\r"   ; terminate at newline
061E   20 FA                  JR   NZ,comment   
0620   0B                     DEC   BC   
0621   FD E9                  JP   (IY)   
0623                CSTORE_:      
0623   E1                     POP   HL   ; 10t
0624   D1                     POP   DE   ; 10t
0625   73                     LD   (HL),E   ; 7t
0626   FD E9                  JP   (IY)   ; 8t
0628                             ; 48t
0628                DEPTH_:      
0628   21 00 00               LD   HL,0   
062B   39                     ADD   HL,SP   
062C   EB                     EX   DE,HL   
062D   21 00 09               LD   HL,DSTACK   
0630   B7                     OR   A   
0631   ED 52                  SBC   HL,DE   
0633   CB 3C                  SRL   H   
0635   CB 1D                  RR   L   
0637   E5                     PUSH   HL   
0638   FD E9                  JP   (IY)   
063A                EMIT_:       
063A   E1                     POP   HL   
063B   7D                     LD   A,L   
063C   CD 85 00               CALL   putchar   
063F   FD E9                  JP   (IY)   
0641                ELSE_:       
0641   21 1E 0B               LD   HL,vFlags   
0644   00                     SET   fELSE,(HL)   
0645   E1                     POP   HL   
0646   E5                     PUSH   HL   
0647   7D                     LD   A,L   ; zero?
0648   B4                     OR   H   
0649   C2 68 05               JP   NZ,begin1   
064C   FD E9                  JP   (IY)   
064E                             ; 
064E                EXEC_:       
064E   CD 53 06               CALL   exec1   
0651   FD E9                  JP   (IY)   
0653                EXEC1:       
0653   E1                     POP   HL   
0654   E3                     EX   (SP),HL   
0655   E9                     JP   (HL)   
0656                GO_:         
0656   60 69                  LD   HL,BC   
0658   CD DE 05               CALL   rpush   ; save Instruction Pointer
065B   C1                     POP   BC   
065C   0B                     DEC   BC   
065D   FD E9                  JP   (IY)   ; Execute code from User def
065F                HEAPPTR_:      
065F   21 14 0B               LD   HL,vHeapPtr   
0662   E5                     PUSH   HL   
0663   FD E9                  JP   (IY)   
0665                I_:          
0665   DD E5                  PUSH   IX   
0667   FD E9                  JP   (IY)   
0669                             ; \+    a b -- [b]+a            ; increment variable at b by a
0669                INCR_:       
0669   E1                     POP   HL   
066A   D1                     POP   DE   
066B   7B                     LD   A,E   
066C   86                     ADD   A,(HL)   
066D   77                     LD   (HL),A   
066E   23                     INC   HL   
066F   7A                     LD   A,D   
0670   8E                     ADC   A,(HL)   
0671   77                     LD   (HL),A   
0672   FD E9                  JP   (IY)   
0674                             ; \-    a b -- [b]-a            ; decrement variable at b by a
0674                DECR_:       
0674   E1                     POP   HL   
0675   D1                     POP   DE   
0676   7E                     LD   A,(HL)   
0677   93                     SUB   E   
0678   77                     LD   (HL),A   
0679   23                     INC   HL   
067A   7E                     LD   A,(HL)   
067B   9A                     SBC   A,D   
067C   77                     LD   (HL),A   
067D   FD E9                  JP   (IY)   
067F                INPORT_:      
067F   E1                     POP   HL   
0680   4D                     LD   C,L   
0681   ED 68                  IN   L,(C)   
0683   26 00                  LD   H,0   
0685   E5                     PUSH   HL   
0686   FD E9                  JP   (IY)   
0688                J_:          
0688   DD E5                  PUSH   IX   
068A   E1                     POP   HL   
068B   11 06 00               LD   DE,6   
068E   19                     ADD   HL,DE   
068F   E5                     PUSH   HL   
0690   FD E9                  JP   (IY)   
0692                KEY_:        
0692   CD 81 00               CALL   getchar   
0695   6F                     LD   L,A   
0696   26 00                  LD   H,0   
0698   E5                     PUSH   HL   
0699   FD E9                  JP   (IY)   
069B                KNOWNVAR_:      
069B   0A                     LD   A,(BC)   
069C   D6 30                  SUB   "0"   ; Calc index
069E   87                     ADD   A,A   
069F   5F                     LD   E,A   
06A0   16 00                  LD   D,0   
06A2   21 00 0B               LD   HL,userVars   
06A5   19                     ADD   HL,DE   
06A6   E5                     PUSH   HL   
06A7   FD E9                  JP   (IY)   
06A9                MIN_:        ; a b -- c
06A9   D1                     POP   DE   
06AA   E1                     POP   HL   
06AB   B7                     OR   A   
06AC   ED 52                  SBC   HL,DE   
06AE   3F                     CCF      
06AF   18 05                  JR   max1   
06B1                MAX_:        ; a b -- c
06B1   D1                     POP   DE   
06B2   E1                     POP   HL   
06B3   B7                     OR   A   
06B4   ED 52                  SBC   HL,DE   
06B6                MAX1:        
06B6   38 02                  JR   C,max2   
06B8   19                     ADD   HL,DE   
06B9   EB                     EX   DE,HL   
06BA                MAX2:        
06BA   D5                     PUSH   DE   
06BB   FD E9                  JP   (IY)   
06BD                             ;         POP DE
06BD                             ;         POP HL
06BD                             ;         PUSH HL
06BD                             ;         OR A
06BD                             ;         SBC HL,DE
06BD                             ;         JR C,max1
06BD                             ;         JP (IY)
06BD                             ; max1:
06BD                             ;         EX DE,HL
06BD                             ;         EX (SP),HL
06BD                             ;         JP (IY)
06BD                NEWLN_:      
06BD   CD F4 05               CALL   crlf   
06C0   FD E9                  JP   (IY)   
06C2                OUTPORT_:      
06C2   E1                     POP   HL   
06C3   4D                     LD   C,L   
06C4   E1                     POP   HL   
06C5   ED 69                  OUT   (C),L   
06C7   FD E9                  JP   (IY)   
06C9                SIGN_:       
06C9   E1                     POP   HL   
06CA   CB 7C                  BIT   7,H   
06CC   21 00 00               LD   HL,0   
06CF   28 01                  JR   Z,sign2   
06D1   23                     INC   HL   
06D2                SIGN2:       
06D2   E5                     PUSH   HL   
06D3   FD E9                  JP   (IY)   
06D5                TIBPTR_:      
06D5   21 18 0B               LD   HL,vTIBPtr   
06D8   E5                     PUSH   HL   
06D9   FD E9                  JP   (IY)   
06DB                PRINTSTK_:      
06DB   C3 F0 06               JP   printStk   
06DE                WHILE_:      
06DE   E1                     POP   HL   
06DF   7D                     LD   A,L   ; zero?
06E0   B4                     OR   H   
06E1   28 02                  JR   Z,while1   
06E3   FD E9                  JP   (IY)   
06E5                WHILE1:      
06E5   11 06 00               LD   DE,6   ; drop loop frame
06E8   DD 19                  ADD   IX,DE   
06EA   C3 68 05               JP   begin1   ; skip to end of loop
06ED                EDITDEF_:      
06ED   C3 C7 07               JP   editDef   
06F0                             ; **************************************************************************
06F0                             ; Page 6 primitive routines
06F0                             ; **************************************************************************
06F0                PRINTSTK:      
06F0   CD 33 02               CALL   ENTER   
06F3   5C 30 40 32 2D 5C 44 31 2D 5C 39 21 5C 39 40 5C 5F 30 3D 28 5C 39 40 28 22 40 2E 32 2D 29 29 27 00 DB   "\\0@2-\\D1-\\9!\\9@\\_0=(\\9@(",$22,"@.2-))'",0   
0714   FD E9                  JP   (IY)   
0716                             ;*******************************************************************
0716                             ; Page 5 primitive routines continued
0716                             ;*******************************************************************
0716                             ; define a word array
0716                ARRDEF:      
0716   3E 00                  LD   A,FALSE   
0718                ARRDEF1:      
0718   FD 21 60 02            LD   IY,compNEXT   
071C   32 1C 0B               LD   (vByteMode),A   
071F   2A 14 0B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0722   CD DE 05               CALL   rpush   ; save start of array \[  \]
0725   C3 1A 02               JP   NEXT   ; hardwired to NEXT
0728                             ; end a word array
0728                ARREND:      
0728   CD E9 05               CALL   rpop   ; DE = start of array
072B   E5                     PUSH   HL   
072C   EB                     EX   DE,HL   
072D   2A 14 0B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0730   B7                     OR   A   
0731   ED 52                  SBC   HL,DE   ; bytes on heap
0733   3A 1C 0B               LD   A,(vByteMode)   
0736   B7                     OR   A   
0737   20 04                  JR   NZ,arrEnd2   
0739   CB 3C                  SRL   H   ; BC = m words
073B   CB 1D                  RR   L   
073D                ARREND2:      
073D   E5                     PUSH   HL   
073E   FD 21 1A 02            LD   IY,NEXT   
0742   FD E9                  JP   (IY)   ; hardwired to NEXT
0744                             ; **************************************************************************
0744                             ; def is used to create a colon definition
0744                             ; When a colon is detected, the next character (usually uppercase alpha)
0744                             ; is looked up in the vector table to get its associated code field address
0744                             ; This CFA is updated to point to the character after uppercase alpha
0744                             ; The remainder of the characters are then skipped until after a semicolon
0744                             ; is found.
0744                             ; ***************************************************************************
0744                DEF:         ; Create a colon definition
0744   E5                     PUSH   HL   ; Save HL
0745   21 F4 0B               LD   HL,DEFS   ; Start address of jump table
0748   03                     INC   BC   
0749   0A                     LD   A,(BC)   ; Get the next character
074A   03                     INC   BC   
074B   D6 41                  SUB   "A"   ; Calc index
074D                DEF1:        
074D   87                     ADD   A,A   ; Double A to index even addresses
074E   5F                     LD   E,A   ; Index into table
074F   16 00                  LD   D,0   
0751   19                     ADD   HL,DE   
0752   ED 5B 14 0B            LD   DE,(vHeapPtr)   ; start of defintion
0756   73                     LD   (HL),E   ; Save low byte of address in CFA
0757   23                     INC   HL   
0758   72                     LD   (HL),D   ; Save high byte of address in CFA+1
0759   E1                     POP   HL   ; Restore HL
075A                NEXTBYTE:      ; Skip to end of definition
075A   0A                     LD   A,(BC)   ; Get the next character
075B   03                     INC   BC   ; Point to next character
075C   12                     LD   (DE),A   
075D   13                     INC   DE   
075E   FE 3B                  CP   ";"   ; Is it a semicolon
0760   28 02                  JR   z,end_def   ; end the definition
0762   18 F6                  JR   nextbyte   ; get the next element
0764                END_DEF:      
0764   ED 53 14 0B            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
0768   0B                     DEC   BC   
0769   FD E9                  JP   (IY)   
076B                GET_HEX:      
076B   21 00 00               LD   HL,$0000   ; 10t Clear HL to accept the number
076E   03                     INC   BC   
076F   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
0770                GET_HEX1:      
0770   CB 77                  BIT   6,A   ; 7t    is it uppercase alpha?
0772   28 02                  JR   Z,ASCHX1   ; no a decimal
0774   D6 07                  SUB   7   ; sub 7  to make $A - $F
0776                ASCHX1:      
0776   D6 30                  SUB   $30   ; 7t    Form decimal digit
0778   85                     ADD   A,L   ; 4t    Add into bottom of HL
0779   6F                     LD   L,A   ; 4t
077A                             ;        LD A,00                 ; 4t    Clear A
077A                             ;        ADC	A,H	                ; Add with carry H-reg
077A                             ;	     LD	H,A	                ; Put result in H-reg
077A   03                     INC   BC   ; 6t    Increment IP
077B   0A                     LD   A,(BC)   ; 7t    and get the next character
077C   FE 20                  CP   $20   ; 7t    is a terminating space?
077E   28 06                  JR   Z,endhex   ; 7/12t Not a number / end of number
0780                TIMES16:      ; Multiply digit(s) in HL by 16
0780   29                     ADD   HL,HL   ; 11t    2X
0781   29                     ADD   HL,HL   ; 11t    4X
0782   29                     ADD   HL,HL   ; 11t    8X
0783   29                     ADD   HL,HL   ; 11t   16X
0784   18 EA                  JR   get_hex1   
0786   C9           ENDHEX:   RET      
0787                PRINTHEX:      
0787                             ; Display HL as a 16-bit number in hex.
0787   C5                     PUSH   BC   ; preserve the IP
0788   7C                     LD   A,H   
0789   CD 92 07               CALL   Print_Hex8   
078C   7D                     LD   A,L   
078D   CD 92 07               CALL   Print_Hex8   
0790   C1                     POP   BC   
0791   C9                     RET      
0792                             ; Print an 8-bit HEX number  - shortened KB 25/11/21
0792                             ; A: Number to print
0792                             ; 
0792                PRINT_HEX8:      
0792   4F                     LD   C,A   
0793   1F                     RRA      
0794   1F                     RRA      
0795   1F                     RRA      
0796   1F                     RRA      
0797   CD 9B 07               CALL   conv   
079A   79                     LD   A,C   
079B                CONV:        
079B   E6 0F                  AND   0x0F   
079D   C6 90                  ADD   A,0x90   
079F   27                     DAA      
07A0   CE 40                  ADC   A,0x40   
07A2   27                     DAA      
07A3   C3 85 00               JP   putchar   
07A6                             ; **************************************************************************
07A6                             ; calculate nesting value
07A6                             ; A is char to be tested,
07A6                             ; E is the nesting value (initially 0)
07A6                             ; E is increased by ( and [
07A6                             ; E is decreased by ) and ]
07A6                             ; E has its bit 7 toggled by `
07A6                             ; limited to 127 levels
07A6                             ; **************************************************************************
07A6                NESTING:      
07A6   FE 60                  CP   "`"   
07A8   20 0A                  JR   NZ,nesting1   
07AA   CB 7B                  BIT   7,E   
07AC   28 03                  JR   Z,nesting1a   
07AE   CB BB                  RES   7,E   
07B0   C9                     RET      
07B1                NESTING1A:      
07B1   CB FB                  SET   7,E   
07B3   C9                     RET      
07B4                NESTING1:      
07B4   FE 5B                  CP   "["   
07B6   28 04                  JR   Z,nesting2   
07B8   FE 28                  CP   "("   
07BA   20 02                  JR   NZ,nesting3   
07BC                NESTING2:      
07BC   1C                     INC   E   
07BD   C9                     RET      
07BE                NESTING3:      
07BE   FE 5D                  CP   "]"   
07C0   28 03                  JR   Z,nesting4   
07C2   FE 29                  CP   ")"   
07C4   C0                     RET   NZ   
07C5                NESTING4:      
07C5   1D                     DEC   E   
07C6   C9                     RET      
07C7                             ; **************************************************************************
07C7                             ; copy definition to text input buffer
07C7                             ; update TIBPtr
07C7                             ; **************************************************************************
07C7                EDITDEF:      ; lookup up def based on number
07C7   3E 41                  LD   A,"A"   
07C9   D1                     POP   DE   
07CA   83                     ADD   A,E   
07CB   08                     EX   AF,AF'   
07CC   21 F4 0B               LD   HL,defs   
07CF   19                     ADD   HL,DE   
07D0   19                     ADD   HL,DE   
07D1   5E                     LD   E,(HL)   
07D2   23                     INC   HL   
07D3   56                     LD   D,(HL)   
07D4   EB                     EX   DE,HL   
07D5   7E                     LD   A,(HL)   
07D6   FE 3B                  CP   ";"   
07D8   11 00 0A               LD   DE,TIB   
07DB   28 14                  JR   Z,editDef3   
07DD   3E 3A                  LD   A,":"   
07DF   CD 79 02               CALL   writeChar   
07E2   08                     EX   AF,AF'   
07E3   CD 79 02               CALL   writeChar   
07E6   18 01                  JR   editDef2   
07E8                EDITDEF1:      
07E8   23                     INC   HL   
07E9                EDITDEF2:      
07E9   7E                     LD   A,(HL)   
07EA   CD 79 02               CALL   writeChar   
07ED   FE 3B                  CP   ";"   
07EF   20 F7                  JR   NZ,editDef1   
07F1                EDITDEF3:      
07F1   21 00 0A               LD   HL,TIB   
07F4   EB                     EX   DE,HL   
07F5   B7                     OR   A   
07F6   ED 52                  SBC   HL,DE   
07F8   22 18 0B               LD   (vTIBPtr),HL   
07FB   FD E9                  JP   (IY)   
07FD                             ; ; *********************************************************************
07FD                             ; ; * extended or non-core routines
07FD                             ; ; *********************************************************************
07FD                             ; aDef_:
07FD                             ;         PUSH HL             ; Save HL
07FD                             ;         LD HL, MACROS       ; Start address of jump table
07FD                             ;         INC BC
07FD                             ;         LD  A,(BC)          ; Get the next character
07FD                             ;         INC BC
07FD                             ;         SUB "@"             ; Calc index
07FD                             ;         JP def1
07FD                             ; 
07FD                             ; strDef:
07FD                             ;         INC BC                  ; point to next char
07FD                             ;         PUSH BC                 ; push string address
07FD                             ;         LD DE,0                 ; count = 0
07FD                             ;         JR strDef2
07FD                             ; strDef1:
07FD                             ;         INC BC                  ; point to next char
07FD                             ;         INC DE                  ; increase count
07FD                             ; strDef2:
07FD                             ;         LD A,(BC)
07FD                             ;         CP "`"                  ; ` is the string terminator
07FD                             ;         JR NZ,strDef1
07FD                             ;         PUSH DE                 ; push count
07FD                             ;         JP   (IY)
07FD                             ; type:
07FD                             ;         call ENTER
07FD                             ;         .cstr "(",$22,"\\@\\E1+)"
07FD                             ;         JP (IY)
07FD                             ; userVar:
07FD                             ;         LD DE,userVars
07FD                             ;         POP HL
07FD                             ;         JP knownVar2
07FD                             ;         JP      (IY)
0800                          .ORG   RAMSTART   
0800                          DS   DSIZE   
0900                STACK:       
0900                DSTACK:      
0900                          DS   RSIZE   
0A00                RSTACK:      
0A00                TIB:         
0A00                          DS   TIBSIZE   
0B00                             ; ****************************************************************
0B00                             ; USER variables
0B00                             ; ****************************************************************
0B00                USERVARS:      
0B00   00 00        CS0:      DW   0   ; 0     \00
0B02   00 00        CTIB:     DW   0   ; 1     \01
0B04   00 00        CDEFS:    DW   0   ; 2     \02
0B06   00 00        CVARS:    DW   0   ; 3     \03
0B08   00 00        CUSERVARS:   DW   0   ; 4     \04
0B0A   00 00                  DW   0   ; 5     \05
0B0C   00 00                  DW   0   ; 6     \06
0B0E   00 00                  DW   0   ; 7     \07
0B10   00 00                  DW   0   ; 8     \08
0B12   00 00        VTEMP:    DW   0   ; 9     \09
0B14   00 00        VHEAPPTR:   DW   0   ; 10
0B16   00 00        VBASE16:   DW   0   ; 11
0B18   00 00        VTIBPTR:   DW   0   ; 12
0B1A   00 00        VALT:     DW   0   ; 13
0B1C   00 00        VBYTEMODE:   DW   0   ; 14
0B1E   00 00        VFLAGS:   DW   0   ; 15
0B20   00 00        GETCVEC:   DW   0   ; 16
0B22   00 00        PUTCVEC:   DW   0   ; 17
0B24   00 00        INTVEC:   DW   0   ; 18
0B26   00 00        NMIVEC:   DW   0   ; 19
0B28   00 00        BAUD:     DW   0   ; 20
0B2A   00 00        RST08:    DW   0   ; 21
0B2C   00 00        RST10:    DW   0   ; 22
0B2E   00 00        RST18:    DW   0   ; 23
0B30   00 00        RST20:    DW   0   ; 24
0B32   00 00        RST28:    DW   0   ; 25
0B34   00 00        RST30:    DW   0   ; 26
0B36   00 00                  DW   0   ; 27
0B38   00 00                  DW   0   ; 28
0B3A   00 00                  DW   0   ; 29
0B3C   00 00                  DW   0   ; 30
0B3E   00 00                  DW   0   ; 31
0B40                BUF:      DS   $80   
0BC0                             ; ****************************************************************
0BC0                             ; VARS Table - holds 26 16-bit user variables
0BC0                             ; ****************************************************************
0BC0                VARS:     DS   26 * 2   
0BF4                             ; ****************************************************************
0BF4                             ; DEFS Table - holds 26 addresses of user routines
0BF4                             ; ****************************************************************
0BF4                DEFS:     DS   26 * 2   
0C28   00 00        TBPTR:    DW   0   ; reserved for tests
0C2A                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 18 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 19 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 21 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 162 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 22 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 23 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 24 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 647 IN IOSerial.asm
                    > USED AT LINE 669 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 646 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 652 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 628 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 640 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 638 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 616 IN IOSerial.asm
                    > USED AT LINE 222 IN MINT.asm
                    > USED AT LINE 1255 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 620 IN IOSerial.asm
                    > USED AT LINE 237 IN MINT.asm
                    > USED AT LINE 330 IN MINT.asm
                    > USED AT LINE 349 IN MINT.asm
                    > USED AT LINE 354 IN MINT.asm
                    > USED AT LINE 1085 IN MINT.asm
                    > USED AT LINE 1108 IN MINT.asm
                    > USED AT LINE 1110 IN MINT.asm
                    > USED AT LINE 1174 IN MINT.asm
                    > USED AT LINE 1489 IN MINT.asm
RESET:              008B DEFINED AT LINE 626 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0100 DEFINED AT LINE 149 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0100 DEFINED AT LINE 150 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 151 IN MINT.asm
                    > USED AT LINE 11 IN ram.asm
TRUE:               0001 DEFINED AT LINE 152 IN MINT.asm
                    > USED AT LINE 1125 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 153 IN MINT.asm
                    > USED AT LINE 496 IN MINT.asm
                    > USED AT LINE 1362 IN MINT.asm
START:              0180 DEFINED AT LINE 164 IN MINT.asm
                    > USED AT LINE 6
MINT:               0180 DEFINED AT LINE 165 IN MINT.asm
INITIALIZE:         019A DEFINED AT LINE 172 IN MINT.asm
                    > USED AT LINE 167 IN MINT.asm
INIT1:              01B2 DEFINED AT LINE 181 IN MINT.asm
                    > USED AT LINE 186 IN MINT.asm
INTERPRET:          01BB DEFINED AT LINE 189 IN MINT.asm
                    > USED AT LINE 170 IN MINT.asm
                    > USED AT LINE 289 IN MINT.asm
INTERPRET1:         01C5 DEFINED AT LINE 193 IN MINT.asm
INTERPRET2:         01CC DEFINED AT LINE 197 IN MINT.asm
                    > USED AT LINE 367 IN MINT.asm
INTERPRET3:         01D4 DEFINED AT LINE 204 IN MINT.asm
                    > USED AT LINE 213 IN MINT.asm
INTERPRET4:         01DA DEFINED AT LINE 210 IN MINT.asm
                    > USED AT LINE 202 IN MINT.asm
WAITCHAR:           01DF DEFINED AT LINE 221 IN MINT.asm
                    > USED AT LINE 239 IN MINT.asm
                    > USED AT LINE 249 IN MINT.asm
WAITCHAR1:          01F3 DEFINED AT LINE 232 IN MINT.asm
                    > USED AT LINE 224 IN MINT.asm
WAITCHAR3:          0201 DEFINED AT LINE 241 IN MINT.asm
                    > USED AT LINE 228 IN MINT.asm
WAITCHAR4:          0212 DEFINED AT LINE 253 IN MINT.asm
                    > USED AT LINE 226 IN MINT.asm
NEXT:               021A DEFINED AT LINE 281 IN MINT.asm
                    > USED AT LINE 174 IN MINT.asm
                    > USED AT LINE 291 IN MINT.asm
                    > USED AT LINE 345 IN MINT.asm
                    > USED AT LINE 861 IN MINT.asm
                    > USED AT LINE 1368 IN MINT.asm
                    > USED AT LINE 1385 IN MINT.asm
DISPATCH:           021C DEFINED AT LINE 285 IN MINT.asm
ENTER:              0233 DEFINED AT LINE 299 IN MINT.asm
                    > USED AT LINE 168 IN MINT.asm
                    > USED AT LINE 190 IN MINT.asm
                    > USED AT LINE 364 IN MINT.asm
                    > USED AT LINE 1352 IN MINT.asm
PRINTDEC:           023C DEFINED AT LINE 306 IN MINT.asm
                    > USED AT LINE 852 IN MINT.asm
DISPHL:             023C DEFINED AT LINE 313 IN MINT.asm
NUM1:               0255 DEFINED AT LINE 323 IN MINT.asm
                    > USED AT LINE 315 IN MINT.asm
                    > USED AT LINE 317 IN MINT.asm
                    > USED AT LINE 319 IN MINT.asm
                    > USED AT LINE 321 IN MINT.asm
NUM2:               0257 DEFINED AT LINE 325 IN MINT.asm
                    > USED AT LINE 328 IN MINT.asm
COMPNEXT:           0260 DEFINED AT LINE 333 IN MINT.asm
                    > USED AT LINE 1364 IN MINT.asm
COMPNEXT1:          026E DEFINED AT LINE 343 IN MINT.asm
                    > USED AT LINE 340 IN MINT.asm
SPACE:              0274 DEFINED AT LINE 347 IN MINT.asm
                    > USED AT LINE 854 IN MINT.asm
WRITECHAR:          0279 DEFINED AT LINE 351 IN MINT.asm
                    > USED AT LINE 1549 IN MINT.asm
                    > USED AT LINE 1551 IN MINT.asm
                    > USED AT LINE 1557 IN MINT.asm
MACRO:              027E DEFINED AT LINE 356 IN MINT.asm
                    > USED AT LINE 230 IN MINT.asm
MACROS:             0298 DEFINED AT LINE 373 IN MINT.asm
EMPTY_:             0298 DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            029A DEFINED AT LINE 4 IN MINT.asm
EDIT_:              02B3 DEFINED AT LINE 7 IN MINT.asm
LIST_:              02C6 DEFINED AT LINE 10 IN MINT.asm
PRINTSTACK_:        02E2 DEFINED AT LINE 13 IN MINT.asm
TOGGLEBASE_:        02F3 DEFINED AT LINE 16 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 382 IN MINT.asm
                    > USED AT LINE 292 IN MINT.asm
IUSERVARS:          0360 DEFINED AT LINE 483 IN MINT.asm
                    > USED AT LINE 175 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 505 IN MINT.asm
                    > USED AT LINE 358 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 506 IN MINT.asm
                    > USED AT LINE 1067 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 641 IN MINT.asm
ALT_:               0400 DEFINED AT LINE 643 IN MINT.asm
EXIT_:              0404 DEFINED AT LINE 647 IN MINT.asm
                    > USED AT LINE 287 IN MINT.asm
NUM_:               040E DEFINED AT LINE 655 IN MINT.asm
CALL_:              0411 DEFINED AT LINE 658 IN MINT.asm
RET_:               0427 DEFINED AT LINE 674 IN MINT.asm
VAR_:               042E DEFINED AT LINE 679 IN MINT.asm
FETCH_:             043C DEFINED AT LINE 690 IN MINT.asm
STORE_:             0443 DEFINED AT LINE 699 IN MINT.asm
DUP_:               044A DEFINED AT LINE 708 IN MINT.asm
SWAP_:              044F DEFINED AT LINE 715 IN MINT.asm
OVER_:              0454 DEFINED AT LINE 721 IN MINT.asm
DROP_:              045B DEFINED AT LINE 729 IN MINT.asm
AND_:               045E DEFINED AT LINE 733 IN MINT.asm
OR_:                0469 DEFINED AT LINE 748 IN MINT.asm
XOR_:               0474 DEFINED AT LINE 761 IN MINT.asm
XOR1:               0475 DEFINED AT LINE 763 IN MINT.asm
                    > USED AT LINE 776 IN MINT.asm
INV_:               047F DEFINED AT LINE 774 IN MINT.asm
ADD_:               0484 DEFINED AT LINE 778 IN MINT.asm
SHL_:               048A DEFINED AT LINE 787 IN MINT.asm
SHR_:               048F DEFINED AT LINE 796 IN MINT.asm
NEG_:               0497 DEFINED AT LINE 803 IN MINT.asm
SUB_:               049D DEFINED AT LINE 807 IN MINT.asm
SUB_1:              049E DEFINED AT LINE 810 IN MINT.asm
SUB_2:              049F DEFINED AT LINE 811 IN MINT.asm
                    > USED AT LINE 805 IN MINT.asm
EQ_:                04A5 DEFINED AT LINE 816 IN MINT.asm
GT_:                04B1 DEFINED AT LINE 825 IN MINT.asm
LT_:                04B5 DEFINED AT LINE 829 IN MINT.asm
CMP_:               04B7 DEFINED AT LINE 831 IN MINT.asm
                    > USED AT LINE 827 IN MINT.asm
EQUAL:              04C2 DEFINED AT LINE 836 IN MINT.asm
                    > USED AT LINE 820 IN MINT.asm
LESS:               04C3 DEFINED AT LINE 837 IN MINT.asm
                    > USED AT LINE 822 IN MINT.asm
                    > USED AT LINE 833 IN MINT.asm
                    > USED AT LINE 835 IN MINT.asm
                    > USED AT LINE 842 IN MINT.asm
HEX_:               04C6 DEFINED AT LINE 841 IN MINT.asm
DOT_:               04CB DEFINED AT LINE 844 IN MINT.asm
DOT1:               04D7 DEFINED AT LINE 851 IN MINT.asm
                    > USED AT LINE 848 IN MINT.asm
DOT2:               04DA DEFINED AT LINE 853 IN MINT.asm
                    > USED AT LINE 850 IN MINT.asm
                    > USED AT LINE 876 IN MINT.asm
DEF_:               04DF DEFINED AT LINE 857 IN MINT.asm
AGAIN_:             04E2 DEFINED AT LINE 858 IN MINT.asm
ARRDEF_:            04E5 DEFINED AT LINE 859 IN MINT.asm
ARREND_:            04E8 DEFINED AT LINE 860 IN MINT.asm
NOP_:               04EB DEFINED AT LINE 861 IN MINT.asm
QUIT_:              04EE DEFINED AT LINE 862 IN MINT.asm
STR_:               04EF DEFINED AT LINE 863 IN MINT.asm
BEGIN_:             04F2 DEFINED AT LINE 864 IN MINT.asm
DIV_:               04F4 DEFINED AT LINE 865 IN MINT.asm
MUL_:               04F6 DEFINED AT LINE 866 IN MINT.asm
HEXP_:              0500 DEFINED AT LINE 873 IN MINT.asm
MUL:                0506 DEFINED AT LINE 878 IN MINT.asm
                    > USED AT LINE 866 IN MINT.asm
MUL_LOOP_1:         0510 DEFINED AT LINE 888 IN MINT.asm
                    > USED AT LINE 897 IN MINT.asm
DIV:                0520 DEFINED AT LINE 914 IN MINT.asm
                    > USED AT LINE 865 IN MINT.asm
DIV_LOOP:           052A DEFINED AT LINE 925 IN MINT.asm
                    > USED AT LINE 940 IN MINT.asm
DIV_ADJUST:         0537 DEFINED AT LINE 935 IN MINT.asm
                    > USED AT LINE 931 IN MINT.asm
DIV_DONE:           0538 DEFINED AT LINE 938 IN MINT.asm
                    > USED AT LINE 933 IN MINT.asm
MUL_END:            053E DEFINED AT LINE 947 IN MINT.asm
                    > USED AT LINE 899 IN MINT.asm
DIV_END:            053E DEFINED AT LINE 948 IN MINT.asm
BEGIN:              0543 DEFINED AT LINE 961 IN MINT.asm
                    > USED AT LINE 864 IN MINT.asm
BEGIN1:             0568 DEFINED AT LINE 981 IN MINT.asm
                    > USED AT LINE 968 IN MINT.asm
                    > USED AT LINE 1184 IN MINT.asm
                    > USED AT LINE 1342 IN MINT.asm
BEGIN2:             056A DEFINED AT LINE 983 IN MINT.asm
                    > USED AT LINE 989 IN MINT.asm
NUMBER:             0575 DEFINED AT LINE 1005 IN MINT.asm
                    > USED AT LINE 656 IN MINT.asm
NUMBER1:            0579 DEFINED AT LINE 1009 IN MINT.asm
                    > USED AT LINE 1034 IN MINT.asm
TIMES10:            058B DEFINED AT LINE 1025 IN MINT.asm
ENDNUM:             0593 DEFINED AT LINE 1036 IN MINT.asm
                    > USED AT LINE 1021 IN MINT.asm
                    > USED AT LINE 1023 IN MINT.asm
AGAIN:              0597 DEFINED AT LINE 1041 IN MINT.asm
                    > USED AT LINE 858 IN MINT.asm
AGAIN1:             05BD DEFINED AT LINE 1058 IN MINT.asm
                    > USED AT LINE 1051 IN MINT.asm
AGAIN2:             05C2 DEFINED AT LINE 1061 IN MINT.asm
                    > USED AT LINE 1044 IN MINT.asm
ALT1:               05C4 DEFINED AT LINE 1064 IN MINT.asm
                    > USED AT LINE 498 IN MINT.asm
STR:                05CF DEFINED AT LINE 1077 IN MINT.asm
                    > USED AT LINE 863 IN MINT.asm
NEXTCHAR:           05D0 DEFINED AT LINE 1080 IN MINT.asm
                    > USED AT LINE 1086 IN MINT.asm
STRINGEND:          05DB DEFINED AT LINE 1088 IN MINT.asm
                    > USED AT LINE 1084 IN MINT.asm
RPUSH:              05DE DEFINED AT LINE 1092 IN MINT.asm
                    > USED AT LINE 301 IN MINT.asm
                    > USED AT LINE 660 IN MINT.asm
                    > USED AT LINE 1197 IN MINT.asm
                    > USED AT LINE 1367 IN MINT.asm
RPOP:               05E9 DEFINED AT LINE 1099 IN MINT.asm
                    > USED AT LINE 650 IN MINT.asm
                    > USED AT LINE 675 IN MINT.asm
                    > USED AT LINE 1372 IN MINT.asm
CRLF:               05F4 DEFINED AT LINE 1106 IN MINT.asm
                    > USED AT LINE 246 IN MINT.asm
                    > USED AT LINE 1307 IN MINT.asm
PAGE5:              0600 DEFINED AT LINE 1116 IN MINT.asm
BASE16_:            0600 DEFINED AT LINE 1118 IN MINT.asm
ANOP_:              0604 DEFINED AT LINE 1121 IN MINT.asm
CARRDEF_:           0606 DEFINED AT LINE 1124 IN MINT.asm
CFETCH_:            060B DEFINED AT LINE 1128 IN MINT.asm
CHARCODE_:          0612 DEFINED AT LINE 1135 IN MINT.asm
COMMENT_:           061A DEFINED AT LINE 1143 IN MINT.asm
COMMENT:            061A DEFINED AT LINE 1144 IN MINT.asm
                    > USED AT LINE 1148 IN MINT.asm
CSTORE_:            0623 DEFINED AT LINE 1152 IN MINT.asm
DEPTH_:             0628 DEFINED AT LINE 1159 IN MINT.asm
EMIT_:              063A DEFINED AT LINE 1171 IN MINT.asm
ELSE_:              0641 DEFINED AT LINE 1177 IN MINT.asm
EXEC_:              064E DEFINED AT LINE 1187 IN MINT.asm
EXEC1:              0653 DEFINED AT LINE 1190 IN MINT.asm
                    > USED AT LINE 1188 IN MINT.asm
GO_:                0656 DEFINED AT LINE 1195 IN MINT.asm
HEAPPTR_:           065F DEFINED AT LINE 1202 IN MINT.asm
I_:                 0665 DEFINED AT LINE 1207 IN MINT.asm
INCR_:              0669 DEFINED AT LINE 1212 IN MINT.asm
DECR_:              0674 DEFINED AT LINE 1225 IN MINT.asm
INPORT_:            067F DEFINED AT LINE 1238 IN MINT.asm
J_:                 0688 DEFINED AT LINE 1246 IN MINT.asm
KEY_:               0692 DEFINED AT LINE 1254 IN MINT.asm
KNOWNVAR_:          069B DEFINED AT LINE 1261 IN MINT.asm
MIN_:               06A9 DEFINED AT LINE 1272 IN MINT.asm
MAX_:               06B1 DEFINED AT LINE 1280 IN MINT.asm
MAX1:               06B6 DEFINED AT LINE 1285 IN MINT.asm
                    > USED AT LINE 1278 IN MINT.asm
MAX2:               06BA DEFINED AT LINE 1289 IN MINT.asm
                    > USED AT LINE 1286 IN MINT.asm
NEWLN_:             06BD DEFINED AT LINE 1306 IN MINT.asm
OUTPORT_:           06C2 DEFINED AT LINE 1310 IN MINT.asm
SIGN_:              06C9 DEFINED AT LINE 1317 IN MINT.asm
SIGN2:              06D2 DEFINED AT LINE 1323 IN MINT.asm
                    > USED AT LINE 1321 IN MINT.asm
TIBPTR_:            06D5 DEFINED AT LINE 1327 IN MINT.asm
PRINTSTK_:          06DB DEFINED AT LINE 1331 IN MINT.asm
WHILE_:             06DE DEFINED AT LINE 1333 IN MINT.asm
WHILE1:             06E5 DEFINED AT LINE 1339 IN MINT.asm
                    > USED AT LINE 1337 IN MINT.asm
EDITDEF_:           06ED DEFINED AT LINE 1344 IN MINT.asm
PRINTSTK:           06F0 DEFINED AT LINE 1351 IN MINT.asm
                    > USED AT LINE 1332 IN MINT.asm
ARRDEF:             0716 DEFINED AT LINE 1361 IN MINT.asm
                    > USED AT LINE 859 IN MINT.asm
ARRDEF1:            0718 DEFINED AT LINE 1363 IN MINT.asm
                    > USED AT LINE 1126 IN MINT.asm
ARREND:             0728 DEFINED AT LINE 1371 IN MINT.asm
                    > USED AT LINE 860 IN MINT.asm
ARREND2:            073D DEFINED AT LINE 1383 IN MINT.asm
                    > USED AT LINE 1380 IN MINT.asm
DEF:                0744 DEFINED AT LINE 1397 IN MINT.asm
                    > USED AT LINE 857 IN MINT.asm
DEF1:               074D DEFINED AT LINE 1404 IN MINT.asm
NEXTBYTE:           075A DEFINED AT LINE 1414 IN MINT.asm
                    > USED AT LINE 1421 IN MINT.asm
END_DEF:            0764 DEFINED AT LINE 1423 IN MINT.asm
                    > USED AT LINE 1420 IN MINT.asm
GET_HEX:            076B DEFINED AT LINE 1428 IN MINT.asm
                    > USED AT LINE 841 IN MINT.asm
GET_HEX1:           0770 DEFINED AT LINE 1433 IN MINT.asm
                    > USED AT LINE 1456 IN MINT.asm
ASCHX1:             0776 DEFINED AT LINE 1437 IN MINT.asm
                    > USED AT LINE 1435 IN MINT.asm
TIMES16:            0780 DEFINED AT LINE 1450 IN MINT.asm
ENDHEX:             0786 DEFINED AT LINE 1458 IN MINT.asm
                    > USED AT LINE 1448 IN MINT.asm
PRINTHEX:           0787 DEFINED AT LINE 1460 IN MINT.asm
                    > USED AT LINE 849 IN MINT.asm
                    > USED AT LINE 875 IN MINT.asm
PRINT_HEX8:         0792 DEFINED AT LINE 1474 IN MINT.asm
                    > USED AT LINE 1465 IN MINT.asm
                    > USED AT LINE 1467 IN MINT.asm
CONV:               079B DEFINED AT LINE 1483 IN MINT.asm
                    > USED AT LINE 1480 IN MINT.asm
NESTING:            07A6 DEFINED AT LINE 1501 IN MINT.asm
                    > USED AT LINE 208 IN MINT.asm
                    > USED AT LINE 238 IN MINT.asm
                    > USED AT LINE 986 IN MINT.asm
NESTING1A:          07B1 DEFINED AT LINE 1508 IN MINT.asm
                    > USED AT LINE 1505 IN MINT.asm
NESTING1:           07B4 DEFINED AT LINE 1511 IN MINT.asm
                    > USED AT LINE 1503 IN MINT.asm
NESTING2:           07BC DEFINED AT LINE 1516 IN MINT.asm
                    > USED AT LINE 1513 IN MINT.asm
NESTING3:           07BE DEFINED AT LINE 1519 IN MINT.asm
                    > USED AT LINE 1515 IN MINT.asm
NESTING4:           07C5 DEFINED AT LINE 1524 IN MINT.asm
                    > USED AT LINE 1521 IN MINT.asm
EDITDEF:            07C7 DEFINED AT LINE 1532 IN MINT.asm
                    > USED AT LINE 1345 IN MINT.asm
EDITDEF1:           07E8 DEFINED AT LINE 1553 IN MINT.asm
                    > USED AT LINE 1559 IN MINT.asm
EDITDEF2:           07E9 DEFINED AT LINE 1555 IN MINT.asm
                    > USED AT LINE 1552 IN MINT.asm
EDITDEF3:           07F1 DEFINED AT LINE 1560 IN MINT.asm
                    > USED AT LINE 1547 IN MINT.asm
STACK:              0900 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 627 IN IOSerial.asm
DSTACK:             0900 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 166 IN MINT.asm
                    > USED AT LINE 484 IN MINT.asm
                    > USED AT LINE 1163 IN MINT.asm
RSTACK:             0A00 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 173 IN MINT.asm
TIB:                0A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 201 IN MINT.asm
                    > USED AT LINE 233 IN MINT.asm
                    > USED AT LINE 242 IN MINT.asm
                    > USED AT LINE 255 IN MINT.asm
                    > USED AT LINE 485 IN MINT.asm
                    > USED AT LINE 497 IN MINT.asm
                    > USED AT LINE 1546 IN MINT.asm
                    > USED AT LINE 1561 IN MINT.asm
USERVARS:           0B00 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 176 IN MINT.asm
                    > USED AT LINE 488 IN MINT.asm
                    > USED AT LINE 1267 IN MINT.asm
CS0:                0B00 DEFINED AT LINE 19 IN ram.asm
CTIB:               0B02 DEFINED AT LINE 20 IN ram.asm
CDEFS:              0B04 DEFINED AT LINE 21 IN ram.asm
CVARS:              0B06 DEFINED AT LINE 22 IN ram.asm
CUSERVARS:          0B08 DEFINED AT LINE 23 IN ram.asm
VTEMP:              0B12 DEFINED AT LINE 28 IN ram.asm
VHEAPPTR:           0B14 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 335 IN MINT.asm
                    > USED AT LINE 344 IN MINT.asm
                    > USED AT LINE 1203 IN MINT.asm
                    > USED AT LINE 1366 IN MINT.asm
                    > USED AT LINE 1375 IN MINT.asm
                    > USED AT LINE 1409 IN MINT.asm
                    > USED AT LINE 1424 IN MINT.asm
VBASE16:            0B16 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 846 IN MINT.asm
                    > USED AT LINE 1119 IN MINT.asm
VTIBPTR:            0B18 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 195 IN MINT.asm
                    > USED AT LINE 254 IN MINT.asm
                    > USED AT LINE 357 IN MINT.asm
                    > USED AT LINE 366 IN MINT.asm
                    > USED AT LINE 1328 IN MINT.asm
                    > USED AT LINE 1565 IN MINT.asm
VALT:               0B1A DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 644 IN MINT.asm
VBYTEMODE:          0B1C DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 337 IN MINT.asm
                    > USED AT LINE 1365 IN MINT.asm
                    > USED AT LINE 1378 IN MINT.asm
VFLAGS:             0B1E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 962 IN MINT.asm
                    > USED AT LINE 1042 IN MINT.asm
                    > USED AT LINE 1178 IN MINT.asm
GETCVEC:            0B20 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 617 IN IOSerial.asm
                    > USED AT LINE 639 IN IOSerial.asm
PUTCVEC:            0B22 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 622 IN IOSerial.asm
                    > USED AT LINE 641 IN IOSerial.asm
INTVEC:             0B24 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 635 IN IOSerial.asm
NMIVEC:             0B26 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 636 IN IOSerial.asm
BAUD:               0B28 DEFINED AT LINE 41 IN ram.asm
RST08:              0B2A DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 629 IN IOSerial.asm
RST10:              0B2C DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 630 IN IOSerial.asm
RST18:              0B2E DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 631 IN IOSerial.asm
RST20:              0B30 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 632 IN IOSerial.asm
RST28:              0B32 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 633 IN IOSerial.asm
RST30:              0B34 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 634 IN IOSerial.asm
BUF:                0B40 DEFINED AT LINE 54 IN ram.asm
VARS:               0BC0 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 487 IN MINT.asm
                    > USED AT LINE 683 IN MINT.asm
DEFS:               0BF4 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 179 IN MINT.asm
                    > USED AT LINE 486 IN MINT.asm
                    > USED AT LINE 664 IN MINT.asm
                    > USED AT LINE 1399 IN MINT.asm
                    > USED AT LINE 1537 IN MINT.asm
TBPTR:              0C28 DEFINED AT LINE 66 IN ram.asm
HEAP:               0C2A DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 495 IN MINT.asm
