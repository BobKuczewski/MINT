0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 0C               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 0C               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 0C               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 0C               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 0C               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 0C               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 0C               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 0C               LD   (RST08),HL   
0094   22 38 0C               LD   (RST10),HL   
0097   22 3A 0C               LD   (RST18),HL   
009A   22 3C 0C               LD   (RST20),HL   
009D   22 3E 0C               LD   (RST28),HL   
00A0   22 40 0C               LD   (RST30),HL   
00A3   22 44 0C               LD   (INTVEC),HL   
00A6   22 46 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 1B 02               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   1   ; not FF, for MINT
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in MINT)
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 DB len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 DB (len | $80)
00C6                 DB data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 DB 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put mint code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mint and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                REEDIT_:      
0180   5C 65 5C 40 5C 23 3B   DB   "\\e\\@\\#;"   ; remembers last line edited
0187                EDIT_:       
0187   60 3F 60 3F 5C 3F 5C 23 3B 00 .CSTR   "`?`?\\?\\#;"   
0191                LIST_:       
0191   5C 24 32 36 28 5C 69 40 36 35 2B 5C 23 5C 74 40 30 3E 28 5C 24 29 29 5C 3F 3B 00 .CSTR   "\\$26(\\i@65+\\#\\t@0>(\\$))\\?;"   
01AC                PRINTSTACK_:      
01AC   5C 5F 5C 3F 3B 00      .CSTR   "\\_\\?;"   
01B2                IOPCODES:      
01B2                          ;*Macro unroll:  LITDAT 4		; macros for compression
01B2   04                     DB   4   ; macros for compression
01B3   52                     DB   lsb(exit_)   ;   NUL get least signif byte of address exit_
01B4   6F                     DB   lsb(nop_)   ;   SOH
01B5   6F                     DB   lsb(nop_)   ;   STX
01B6   4F                     DB   lsb(etx_)   ;   ETX
01B7                          ;*Macro unroll:  REPDAT 29, lsb(nop_)
01B7   9D                     DB   (29 | $80)   
01B8   6F                     DB   lsb(nop_)   
01B9                          ;*Macro unroll:  LITDAT 15
01B9   0F                     DB   15   
01BA   94                     DB   lsb(store_)   ;   !
01BB   4A                     DB   lsb(dup_)   ;   "
01BC   63                     DB   lsb(hex_)   ;    #
01BD   9B                     DB   lsb(swap_)   ;    $
01BE   72                     DB   lsb(over_)   ;    %
01BF   00                     DB   lsb(and_)   ;    &
01C0   47                     DB   lsb(drop_)   ;    '
01C1   EF                     DB   lsb(begin_)   ;    (
01C2   29                     DB   lsb(again_)   ;    )
01C3   FB                     DB   lsb(mul_)   ;    *
01C4   22                     DB   lsb(add_)   ;    +
01C5   41                     DB   lsb(hdot_)   ;    ,
01C6   A0                     DB   lsb(sub_)   ;    -
01C7   36                     DB   lsb(dot_)   ;    .
01C8   FD                     DB   lsb(div_)   ;    /	;/MOD
01C9                          ;*Macro unroll:  REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
01C9   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
01CA   EC                     DB   lsb(num_)   
01CB                          ;*Macro unroll:  LITDAT 7
01CB   07                     DB   7   
01CC   F8                     DB   lsb(def_)   ;    :
01CD   79                     DB   lsb(ret_)   ;    ;
01CE   C5                     DB   lsb(lt_)   ;    <
01CF   B5                     DB   lsb(eq_)   ;    =
01D0   C1                     DB   lsb(gt_)   ;    >
01D1   66                     DB   lsb(key_)   ;    ?   ( -- val )  read a char from input
01D2   5C                     DB   lsb(fetch_)   ;    @
01D3                          ;*Macro unroll:  REPDAT 26, lsb(call_)		; call a command A, B ....Z
01D3   9A                     DB   (26 | $80)   ; call a command A, B ....Z
01D4   2C                     DB   lsb(call_)   
01D5                          ;*Macro unroll:  LITDAT 6
01D5   06                     DB   6   
01D6   F2                     DB   lsb(arrDef_)   ;    [
01D7   FF                     DB   lsb(alt_)   ;    \
01D8   F5                     DB   lsb(arrEnd_)   ;    ]
01D9   14                     DB   lsb(xor_)   ;    ^
01DA   6F                     DB   lsb(nop_)   ;    _
01DB   DD                     DB   lsb(str_)   ;    `   ; for printing `hello`
01DC                          ;*Macro unroll:  REPDAT 26, lsb(var_)		; a b c .....z
01DC   9A                     DB   (26 | $80)   ; a b c .....z
01DD   D6                     DB   lsb(var_)   
01DE                          ;*Macro unroll:  LITDAT 5
01DE   05                     DB   5   
01DF   87                     DB   lsb(shl_)   ;    {
01E0   0B                     DB   lsb(or_)   ;    |
01E1   8C                     DB   lsb(shr_)   ;    }
01E2   80                     DB   lsb(rot_)   ;    ~ ( a b c -- b c a ) rotate
01E3   6F                     DB   lsb(nop_)   ;    DEL	; eg 10000()
01E4                          ;*Macro unroll:  LITDAT 5
01E4   05                     DB   5   
01E5   08                     DB   lsb(aNop_)   ;a0    SP  space
01E6   37                     DB   lsb(cstore_)   ;a1    \!  byte store
01E7   08                     DB   lsb(aNop_)   ;a2    \"  				
01E8   59                     DB   lsb(editDef_)   ;a3    \#  utility command		; table of special routines 				
01E9   93                     DB   lsb(newln_)   ;a4    \$  prints a newline to output	
01EA                          ;*Macro unroll:  REPDAT 7, lsb(aNop_)
01EA   87                     DB   (7 | $80)   
01EB   08                     DB   lsb(aNop_)   
01EC                          ;*Macro unroll:  LITDAT 4
01EC   04                     DB   4   
01ED   4A                     DB   lsb(emit_)   ;ac    \,  ( b -- ) prints a char
01EE   3C                     DB   lsb(depth_)   ;      \-  num items on stack
01EF   08                     DB   lsb(aNop_)   ;ae    \.
01F0   08                     DB   lsb(aNop_)   ;af    \/
01F1                          ;*Macro unroll:  REPDAT 10, lsb(aNop_)
01F1   8A                     DB   (10 | $80)   
01F2   08                     DB   lsb(aNop_)   
01F3                          ;*Macro unroll:  LITDAT 7
01F3   07                     DB   7   
01F4   0A                     DB   lsb(anonDef_)   ;ba    \:  return add of a anon def, \: 1 2 3;    \\ ret add of this
01F5   51                     DB   lsb(exec_)   ;bb    \;  execute machine code
01F6   78                     DB   lsb(inPort_)   ;bc    \<  ( port -- val )
01F7   08                     DB   lsb(aNop_)   ;bd    \=
01F8   98                     DB   lsb(outPort_)   ;be    \>  ( val port -- )
01F9   5E                     DB   lsb(prompt_)   ;bf    \?  print MINT prompt
01FA   27                     DB   lsb(cFetch_)   ;c0    \@  byte fetch
01FB                          ;*Macro unroll:  REPDAT 26, lsb(aNop_)
01FB   9A                     DB   (26 | $80)   
01FC   08                     DB   lsb(aNop_)   
01FD                          ;*Macro unroll:  LITDAT 6
01FD   06                     DB   6   
01FE   22                     DB   lsb(cArrDef_)   ;db     \[
01FF   2E                     DB   lsb(comment_)   ;dc     \\  comment text, skips reading until end of line
0200   08                     DB   lsb(aNop_)   ;dd     \]
0201   63                     DB   lsb(go_)   ;de     \^  execute mint definition a is address of mint code
0202   A1                     DB   lsb(printStk_)   ;       \_  non-destructively prints stack
0203   08                     DB   lsb(aNop_)   ;e0     \`
0204                          ;*Macro unroll:  REPDAT 8, lsb(altVar_)  ;e1	    \a...\h
0204   88                     DB   (8 | $80)   ;e1	    \a...\h
0205   00                     DB   lsb(altVar_)   
0206                          ;*Macro unroll:  LITDAT 2
0206   02                     DB   2   
0207   83                     DB   lsb(i_)   ;e9     \i  returns index variable of current loop
0208   89                     DB   lsb(j_)   ;e9     \j  returns index variable of outer loop     \i+6
0209                          ;*Macro unroll:  REPDAT 16, lsb(altVar_) ;       \k...\z
0209   90                     DB   (16 | $80)   ;       \k...\z
020A   00                     DB   lsb(altVar_)   
020B                          ;*Macro unroll:  REPDAT 3, lsb(aNop_)    ;       \{ \| \}
020B   83                     DB   (3 | $80)   ;       \00bbIFx8IFw=
020C   08                     DB   lsb(aNop_)   
020D                          ;*Macro unroll:  LITDAT 1
020D   01                     DB   1   
020E   13                     DB   lsb(break_)   ;       \~ ( b -- ) conditional break from loop
020F                          ;*Macro unroll:  ENDDAT
020F   00                     DB   0   
0210                ETX:         ;=12
0210   21 00 F6               LD   HL,-DSTACK   
0213   39                     ADD   HL,SP   
0214   30 03                  JR   NC,etx1   
0216   31 00 0A               LD   SP,DSTACK   
0219                ETX1:        
0219   18 13                  JR   interpret   
021B                START:       
021B   31 00 0A               LD   SP,DSTACK   ; start of MINT
021E   CD D1 02               CALL   init   ; setups
0221   CD AE 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0224   4D 49 4E 54 31 2E 33 0D 0A 00 .CSTR   "MINT1.3\r\n"   
022E                INTERPRET:      
022E   CD 95 03               CALL   prompt   
0231   01 00 00               LD   BC,0   ; load BC with offset into TIB, decide char into tib or execute or control
0234   ED 43 A6 0C            LD   (vTIBPtr),BC   
0238                INTERPRET2:      ; calc nesting (a macro might have changed it)
0238   1E 00                  LD   E,0   ; initilize nesting value
023A   C5                     PUSH   BC   ; save offset into TIB,
023B                             ; BC is also the count of chars in TIB
023B   21 00 08               LD   HL,TIB   ; HL is start of TIB
023E   18 06                  JR   interpret4   
0240                INTERPRET3:      
0240   7E                     LD   A,(HL)   ; A = char in TIB
0241   23                     INC   HL   ; inc pointer into TIB
0242   0B                     DEC   BC   ; dec count of chars in TIB
0243   CD 69 03               CALL   nesting   ; update nesting value
0246                INTERPRET4:      
0246   79                     LD   A,C   ; is count zero?
0247   B0                     OR   B   
0248   20 F6                  JR   NZ,interpret3   ; if not loop
024A   C1                     POP   BC   ; restore offset into TIB
024B                             ; *******************************************************************
024B                             ; Wait for a character from the serial input (keyboard)
024B                             ; and store it in the text buffer. Keep accepting characters,
024B                             ; increasing the instruction pointer BC - until a newline received.
024B                             ; *******************************************************************
024B                WAITCHAR:      
024B   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
024E   FE 20                  CP   $20   ; compare to space
0250   30 3A                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
0252   FE 00                  CP   $0   ; is it end of string? null end of string
0254   28 5A                  JR   Z,waitchar4   
0256   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0258   28 40                  JR   Z,waitchar3   ; if anything else its macro/control
025A   FE 08                  CP   CTRL_H   
025C   CA C1 02               JP   z,backSpace_   
025F   16 01                  LD   d,msb(macros)   
0261   FE 05                  CP   CTRL_E   
0263   1E 87                  LD   e,lsb(edit_)   
0265   28 14                  JR   z,macro   
0267   FE 0A                  CP   CTRL_J   
0269   1E 80                  LD   e,lsb(reedit_)   
026B   28 0E                  JR   z,macro   
026D   FE 0C                  CP   CTRL_L   
026F   1E 91                  LD   e,lsb(list_)   
0271   28 08                  JR   z,macro   
0273   FE 10                  CP   CTRL_P   
0275   1E AC                  LD   e,lsb(printStack_)   
0277   28 02                  JR   z,macro   
0279   18 BD                  JR   interpret2   
027B                MACRO:       ;=25
027B   ED 43 A6 0C            LD   (vTIBPtr),BC   
027F   D5                     PUSH   DE   
0280   CD A5 03               CALL   ENTER   ;mint go operation and jump to it
0283   5C 5E 00               .CSTR   "\\^"   
0286   ED 4B A6 0C            LD   BC,(vTIBPtr)   
028A   18 AC                  JR   interpret2   
028C                WAITCHAR1:      
028C   21 00 08               LD   HL,TIB   
028F   09                     ADD   HL,BC   
0290   77                     LD   (HL),A   ; store the character in textbuf
0291   03                     INC   BC   
0292   CD 85 00               CALL   putchar   ; echo character to screen
0295   CD 69 03               CALL   nesting   
0298   18 B1                  JR   waitchar   ; wait for next character
029A                WAITCHAR3:      
029A   21 00 08               LD   HL,TIB   
029D   09                     ADD   HL,BC   
029E   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
02A0   23                     INC   HL   
02A1   36 0A                  LD   (HL),"\n"   
02A3   23                     INC   HL   ; ????
02A4   03                     INC   BC   
02A5   03                     INC   BC   
02A6   CD 9E 03               CALL   crlf   ; echo character to screen
02A9   7B                     LD   A,E   ; if zero nesting append and ETX after \r
02AA   B7                     OR   A   
02AB   20 9E                  JR   NZ,waitchar   
02AD   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
02AF   03                     INC   BC   
02B0                WAITCHAR4:      
02B0   ED 43 A6 0C            LD   (vTIBPtr),BC   
02B4   01 00 08               LD   BC,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02B7   0B                     DEC   BC   
02B8                             ; ********************************************************************************
02B8                             ; 
02B8                             ; Dispatch Routine.
02B8                             ; 
02B8                             ; Get the next character and form a 1 byte jump address
02B8                             ; 
02B8                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
02B8                             ; jump to the selected function.
02B8                             ; 
02B8                             ; Individual handler routines will deal with each category:
02B8                             ; 
02B8                             ; 1. Detect characters A-Z and jump to the User Command handler routine
02B8                             ; 
02B8                             ; 2. Detect characters a-z and jump to the variable handler routine
02B8                             ; 
02B8                             ; 3. All other characters are punctuation and cause a jump to the associated
02B8                             ; primitive code.
02B8                             ; 
02B8                             ; Instruction Pointer IP BC is incremented
02B8                             ; 
02B8                             ; *********************************************************************************
02B8                NEXT:        ;=9
02B8   03                     INC   BC   ;       Increment the IP
02B9   0A                     LD   A,(BC)   ;       Get the next character and dispatch
02BA   6F                     LD   L,A   ;       Index into table
02BB   26 0B                  LD   H,msb(opcodes)   ;       Start address of jump table
02BD   6E                     LD   L,(HL)   ;       get low jump address
02BE   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
02C0   E9                     JP   (HL)   ;       Jump to routine
02C1                BACKSPACE_:      
02C1   79                     LD   a,c   
02C2   B0                     OR   b   
02C3   CA 38 02               JP   z,interpret2   
02C6   0B                     DEC   bc   
02C7   CD AE 03               CALL   printStr   
02CA   08 20 08 00            .CSTR   "\b \b"   
02CE   C3 38 02               JP   interpret2   
02D1                INIT:        ;=68
02D1   21 80 0A               LD   HL,LSTACK   
02D4   22 30 0C               LD   (vLoopSP),HL   ; Loop stack pointer stored in memory
02D7   DD 21 80 09            LD   IX,RSTACK   
02DB   FD 21 B8 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
02DF   21 80 0C               LD   hl,altVars   ; init altVars to 0
02E2   06 34                  LD   b,26 * 2   
02E4                INIT1:       
02E4   36 00                  LD   (hl),0   
02E6   23                     INC   hl   
02E7   10 FB                  DJNZ   init1   
02E9   21 00 0A               LD   hl,dStack   
02EC   22 80 0C               LD   (vS0),hl   
02EF   21 41 00               LD   hl,65   
02F2   22 88 0C               LD   (vLastDef),hl   
02F5   21 1C 0D               LD   hl,HEAP   
02F8   22 8E 0C               LD   (vHeapPtr),hl   
02FB   21 B4 0C               LD   HL,VARS   ; init namespaces to 0 using LDIR
02FE   54 5D                  LD   DE,HL   
0300   13                     INC   DE   
0301   36 00                  LD   (HL),0   
0303   01 68 00               LD   BC,VARS_SIZE   
0306   ED B0                  LDIR      
0308                INITOPS:      
0308   21 B2 01               LD   HL,iOpcodes   
030B   11 00 0B               LD   DE,opcodes   
030E   01 00 01               LD   BC,256   
0311                INITOPS1:      
0311   7E                     LD   A,(HL)   
0312   23                     INC   HL   
0313   CB 27                  SLA   A   
0315   C8                     RET   Z   
0316   38 09                  JR   C,initOps2   
0318   CB 3F                  SRL   A   
031A   4F                     LD   C,A   
031B   06 00                  LD   B,0   
031D   ED B0                  LDIR      
031F   18 F0                  JR   initOps1   
0321                INITOPS2:      
0321   CB 3F                  SRL   A   
0323   47                     LD   B,A   
0324   7E                     LD   A,(HL)   
0325   23                     INC   HL   
0326                INITOPS2A:      
0326   12                     LD   (DE),A   
0327   13                     INC   DE   
0328   10 FC                  DJNZ   initOps2a   
032A   18 E5                  JR   initOps1   
032C                LOOKUPREF:      
032C   16 00                  LD   D,0   
032E                LOOKUPREF0:      
032E   FE 61                  CP   "a"   
0330   30 06                  JR   NC,lookupRef2   
0332                LOOKUPREF1:      
0332   D6 41                  SUB   "A"   
0334   1E 00                  LD   E,0   
0336   18 04                  JR   lookupRef3   
0338                LOOKUPREF2:      
0338   D6 61                  SUB   "a"   
033A   1E 34                  LD   E,26*2   
033C                LOOKUPREF3:      
033C   87                     ADD   A,A   
033D   83                     ADD   A,E   
033E   21 B4 0C               LD   HL,VARS   
0341   85                     ADD   A,L   
0342   6F                     LD   L,A   
0343   3E 00                  LD   A,0   
0345   8C                     ADC   A,H   
0346   67                     LD   H,A   
0347   AF                     XOR   A   
0348   B3                     OR   E   ; sets Z flag if A-Z
0349   C9                     RET      
034A                PRINTHEX:      ;=31
034A                             ; Display HL as a 16-bit number in hex.
034A   C5                     PUSH   BC   ; preserve the IP
034B   7C                     LD   A,H   
034C   CD 55 03               CALL   printhex2   
034F   7D                     LD   A,L   
0350   CD 55 03               CALL   printhex2   
0353   C1                     POP   BC   
0354   C9                     RET      
0355                PRINTHEX2:      
0355   4F                     LD   C,A   
0356   1F                     RRA      
0357   1F                     RRA      
0358   1F                     RRA      
0359   1F                     RRA      
035A   CD 5E 03               CALL   printhex3   
035D   79                     LD   A,C   
035E                PRINTHEX3:      
035E   E6 0F                  AND   0x0F   
0360   C6 90                  ADD   A,0x90   
0362   27                     DAA      
0363   CE 40                  ADC   A,0x40   
0365   27                     DAA      
0366   C3 85 00               JP   putchar   
0369                             ; **************************************************************************
0369                             ; calculate nesting value
0369                             ; A is char to be tested,
0369                             ; E is the nesting value (initially 0)
0369                             ; E is increased by ( and [
0369                             ; E is decreased by ) and ]
0369                             ; E has its bit 7 toggled by `
0369                             ; limited to 127 levels
0369                             ; **************************************************************************
0369                NESTING:      ;=44
0369   FE 60                  CP   "`"   
036B   20 0A                  JR   NZ,nesting1   
036D   CB 7B                  BIT   7,E   
036F   28 03                  JR   Z,nesting1a   
0371   CB BB                  RES   7,E   
0373   C9                     RET      
0374                NESTING1A:      
0374   CB FB                  SET   7,E   
0376   C9                     RET      
0377                NESTING1:      
0377   CB 7B                  BIT   7,E   
0379   C0                     RET   NZ   
037A   FE 3A                  CP   ":"   
037C   28 08                  JR   Z,nesting2   
037E   FE 5B                  CP   "["   
0380   28 04                  JR   Z,nesting2   
0382   FE 28                  CP   "("   
0384   20 02                  JR   NZ,nesting3   
0386                NESTING2:      
0386   1C                     INC   E   
0387   C9                     RET      
0388                NESTING3:      
0388   FE 3B                  CP   ";"   
038A   28 07                  JR   Z,nesting4   
038C   FE 5D                  CP   "]"   
038E   28 03                  JR   Z,nesting4   
0390   FE 29                  CP   ")"   
0392   C0                     RET   NZ   
0393                NESTING4:      
0393   1D                     DEC   E   
0394   C9                     RET      
0395                PROMPT:      ;=9
0395   CD AE 03               CALL   printStr   
0398   0D 0A 3E 20 00         .CSTR   "\r\n> "   
039D   C9                     RET      
039E                CRLF:        ;=7
039E   CD AE 03               CALL   printStr   
03A1   0D 0A 00               .CSTR   "\r\n"   
03A4   C9                     RET      
03A5                ENTER:       ;=9
03A5   60 69                  LD   HL,BC   
03A7   CD BE 03               CALL   rpush   ; save Instruction Pointer
03AA   C1                     POP   BC   
03AB   0B                     DEC   BC   
03AC   FD E9                  JP   (IY)   
03AE                PRINTSTR:      ;=7
03AE   E3                     EX   (SP),HL   ; swap			
03AF   CD B9 03               CALL   putStr   
03B2   23                     INC   HL   ; inc past null
03B3   E3                     EX   (SP),HL   ; put it back	
03B4   C9                     RET      
03B5                PUTSTR0:      ;=9
03B5   CD 85 00               CALL   putchar   
03B8   23                     INC   HL   
03B9                PUTSTR:      
03B9   7E                     LD   A,(HL)   
03BA   B7                     OR   A   
03BB   20 F8                  JR   NZ,putStr0   
03BD   C9                     RET      
03BE                RPUSH:       ;=11
03BE   DD 2B                  DEC   IX   
03C0   DD 74 00               LD   (IX+0),H   
03C3   DD 2B                  DEC   IX   
03C5   DD 75 00               LD   (IX+0),L   
03C8   C9                     RET      
03C9                RPOP:        ;=11
03C9   DD 6E 00               LD   L,(IX+0)   
03CC   DD 23                  INC   IX   
03CE   DD 66 00               LD   H,(IX+0)   
03D1   DD 23                  INC   IX   
03D3                RPOP2:       
03D3   C9                     RET      
03D4                CARRY:       ;=10
03D4   21 00 00               LD   hl,0   
03D7   CB 15                  RL   l   
03D9   22 84 0C               LD   (vCarry),hl   
03DC   FD E9                  JP   (iy)   
03DE                WRITECHAR:      ;=5
03DE   77                     LD   (HL),A   
03DF   23                     INC   HL   
03E0   C3 85 00               JP   putchar   
03E3                HEX:         ;=26
03E3   21 00 00               LD   HL,0   ; Clear HL to accept the number
03E6                HEX1:        
03E6   03                     INC   BC   
03E7   0A                     LD   A,(BC)   ; Get the character which is a numeral
03E8   CB 77                  BIT   6,A   ; is it uppercase alpha?
03EA   28 02                  JR   Z,hex2   ; no a decimal
03EC   D6 07                  SUB   7   ; sub 7  to make $A - $F
03EE                HEX2:        
03EE   D6 30                  SUB   $30   ; Form decimal digit
03F0   DA E3 06               JP   C,num2   
03F3   FE 10                  CP   $0F+1   
03F5   D2 E3 06               JP   NC,num2   
03F8   29                     ADD   HL,HL   ; 2X ; Multiply digit(s) in HL by 16
03F9   29                     ADD   HL,HL   ; 4X
03FA   29                     ADD   HL,HL   ; 8X
03FB   29                     ADD   HL,HL   ; 16X
03FC   85                     ADD   A,L   ; Add into bottom of HL
03FD   6F                     LD   L,A   ; 
03FE   18 E6                  JR   hex1   
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                AND_:        
0400   D1                     POP   DE   ;     Bitwise AND the top 2 elements of the stack
0401   E1                     POP   HL   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   HL   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                OR_:         
040B   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
040C   E1                     POP   HL   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                XOR_:        
0414   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0415                XOR1:        
0415   E1                     POP   HL   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                INV_:        ; Bitwise INVert the top member of the stack
041D   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0420   18 F3                  JR   xor1   
0422                ADD_:        ; Add the top 2 members of the stack
0422   D1                     POP   DE   
0423   E1                     POP   HL   
0424   19                     ADD   HL,DE   
0425   E5                     PUSH   HL   
0426   C3 D4 03               JP   carry   
0429   C3 B3 05     AGAIN_:   JP   again   ; close loop
042C                CALL_:       
042C   0A                     LD   A,(BC)   
042D   CD 32 03               CALL   lookupRef1   
0430   5E                     LD   E,(HL)   
0431   23                     INC   HL   
0432   56                     LD   D,(HL)   
0433   C3 64 06               JP   go1   
0436                DOT_:        
0436   E1                     POP   HL   
0437   CD 21 07               CALL   printDec   
043A                DOT2:        
043A   3E 20                  LD   A," "   
043C   CD 85 00               CALL   putChar   
043F   FD E9                  JP   (IY)   
0441                HDOT_:       ; print hexadecimal
0441   E1                     POP   HL   
0442   CD 4A 03               CALL   printhex   
0445   18 F3                  JR   dot2   
0447                DROP_:       ; Discard the top member of the stack
0447   E1                     POP   HL   
0448   FD E9                  JP   (IY)   
044A                DUP_:        
044A   E1                     POP   HL   ; Duplicate the top member of the stack
044B   E5                     PUSH   HL   
044C   E5                     PUSH   HL   
044D   FD E9                  JP   (IY)   
044F                ETX_:        
044F   C3 10 02               JP   ETX   
0452                EXIT_:       
0452   03                     INC   BC   ; store offests into a table of bytes, smaller
0453   50 59                  LD   DE,BC   
0455   CD C9 03               CALL   rpop   ; Restore Instruction pointer
0458   44 4D                  LD   BC,HL   
045A   EB                     EX   DE,HL   
045B   E9                     JP   (HL)   
045C                FETCH_:      ; Fetch the value from the address placed on the top of the stack
045C   E1                     POP   HL   
045D                FETCH1:      
045D   5E                     LD   E,(HL)   
045E   23                     INC   HL   
045F   56                     LD   D,(HL)   
0460   D5                     PUSH   DE   
0461   FD E9                  JP   (IY)   
0463   C3 E3 03     HEX_:     JP   hex   
0466                KEY_:        
0466   CD 81 00               CALL   getchar   
0469   26 00                  LD   H,0   
046B   6F                     LD   L,A   
046C   E5                     PUSH   HL   
046D   FD E9                  JP   (IY)   
046F                NOP_:        
046F   C3 B8 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0472                OVER_:       
0472   E1                     POP   HL   ; Duplicate 2nd element of the stack
0473   D1                     POP   DE   
0474   D5                     PUSH   DE   
0475   E5                     PUSH   HL   
0476   D5                     PUSH   DE   ; And push it to top of stack
0477   FD E9                  JP   (IY)   
0479                RET_:        
0479   CD C9 03               CALL   rpop   ; Restore Instruction pointer
047C   44 4D                  LD   BC,HL   
047E   FD E9                  JP   (IY)   
0480                ROT_:        ; a b c -- b c a
0480   D1                     POP   DE   ; a b                   de = c
0481   E1                     POP   HL   ; a                     hl = b
0482   E3                     EX   (SP),HL   ; b                     hl = a
0483   D5                     PUSH   DE   ; b c
0484   E5                     PUSH   HL   ; b c a
0485   FD E9                  JP   (IY)   
0487                             ;  Left shift { is multiply by 2		
0487                SHL_:        
0487   E1                     POP   HL   ; Duplicate the top member of the stack
0488   29                     ADD   HL,HL   
0489   E5                     PUSH   HL   ; shift left fallthrough into add_
048A   FD E9                  JP   (IY)   ; 
048C                             ;  Right shift } is a divide by 2		
048C                SHR_:        
048C   E1                     POP   HL   ; Get the top member of the stack
048D                SHR1:        
048D   CB 3C                  SRL   H   
048F   CB 1D                  RR   L   
0491   E5                     PUSH   HL   
0492   FD E9                  JP   (IY)   ; 
0494                STORE_:      ; Store the value at the address placed on the top of the stack
0494   E1                     POP   HL   
0495   D1                     POP   DE   
0496   73                     LD   (HL),E   
0497   23                     INC   HL   
0498   72                     LD   (HL),D   
0499   FD E9                  JP   (IY)   
049B                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
049B                SWAP_:       
049B   E1                     POP   HL   
049C   E3                     EX   (SP),HL   
049D   E5                     PUSH   HL   
049E   FD E9                  JP   (IY)   
04A0                SUB_:        ; Subtract the value 2nd on stack from top of stack
04A0   03                     INC   bc   ; check if sign of a number
04A1   0A                     LD   a,(bc)   
04A2   0B                     DEC   bc   
04A3   FE 30                  CP   "0"   
04A5   38 05                  JR   c,sub1   
04A7   FE 3A                  CP   "9"+1   
04A9   DA C1 06               JP   c,num   
04AC                SUB1:        
04AC   D1                     POP   DE   ; 
04AD   E1                     POP   HL   ;      Entry point for INVert
04AE                SUB2:        
04AE   A7                     AND   A   ;      Entry point for NEGate
04AF   ED 52                  SBC   HL,DE   ; 
04B1   E5                     PUSH   HL   ; 
04B2   C3 D4 03               JP   carry   
04B5                             ; 5
04B5                EQ_:         
04B5   E1                     POP   HL   
04B6   D1                     POP   DE   
04B7   A7                     AND   A   ; reset the carry flag
04B8   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04BA   28 16                  JR   Z,equal   
04BC   21 00 00               LD   HL,0   
04BF   18 12                  JR   less   ; HL = 1
04C1                GT_:         
04C1   D1                     POP   DE   
04C2   E1                     POP   HL   
04C3   18 02                  JR   cmp_   
04C5                LT_:         
04C5   E1                     POP   HL   
04C6   D1                     POP   DE   
04C7                CMP_:        
04C7   A7                     AND   A   ; reset the carry flag
04C8   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04CA   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04CC   21 00 00               LD   HL,0   
04CF   FA D3 04               JP   M,less   
04D2                EQUAL:       
04D2   2C                     INC   L   ; HL = 1
04D3                LESS:        
04D3   E5                     PUSH   HL   
04D4   FD E9                  JP   (IY)   
04D6                VAR_:        
04D6   0A                     LD   A,(BC)   
04D7   CD 38 03               CALL   lookupRef2   
04DA   E5                     PUSH   HL   
04DB   FD E9                  JP   (IY)   
04DD                STR_:        
04DD                STR:         
04DD   03                     INC   BC   
04DE                STR1:        
04DE   0A                     LD   A,(BC)   
04DF   03                     INC   BC   
04E0   FE 60                  CP   "`"   ; ` is the string terminator
04E2   28 05                  JR   Z,str2   
04E4   CD 85 00               CALL   putchar   
04E7   18 F5                  JR   str1   
04E9                STR2:        
04E9   0B                     DEC   BC   
04EA   FD E9                  JP   (IY)   
04EC   C3 C1 06     NUM_:     JP   num   
04EF   C3 6F 05     BEGIN_:   JP   begin   
04F2   C3 7D 07     ARRDEF_:   JP   arrDef   
04F5   C3 8F 07     ARREND_:   JP   arrEnd   
04F8   C3 AB 07     DEF_:     JP   def   
04FB   18 11        MUL_:     JR   mul   
04FD   18 2B        DIV_:     JR   div   
04FF                ALT_:        
04FF                             ;*******************************************************************
04FF                             ; Page 5 primitive routines
04FF                             ;*******************************************************************
04FF                             ;falls through
04FF                ALT:         ;=11
04FF   03                     INC   BC   
0500   0A                     LD   A,(BC)   
0501   D6 20                  SUB   32   
0503   21 80 0B               LD   HL,altCodes   
0506   85                     ADD   A,L   
0507   6F                     LD   L,A   
0508                ALT2:        
0508   7E                     LD   A,(HL)   ;       get low jump address
0509   21 00 06               LD   HL,page6   
050C   6F                     LD   L,A   
050D   E9                     JP   (HL)   ;       Jump to routine
050E                             ; ********************************************************************
050E                             ; 16-bit multiply
050E                MUL:         ;=19
050E   D1                     POP   DE   ; get first value
050F   E1                     POP   HL   
0510   C5                     PUSH   BC   ; Preserve the IP
0511   44                     LD   B,H   ; BC = 2nd value
0512   4D                     LD   C,L   
0513   21 00 00               LD   HL,0   
0516   3E 10                  LD   A,16   
0518                MUL2:        
0518   29                     ADD   HL,HL   
0519   CB 13                  RL   E   
051B   CB 12                  RL   D   
051D   30 04                  JR   NC,$+6   
051F   09                     ADD   HL,BC   
0520   30 01                  JR   NC,$+3   
0522   13                     INC   DE   
0523   3D                     DEC   A   
0524   20 F2                  JR   NZ,mul2   
0526   C1                     POP   BC   ; Restore the IP
0527   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
0528   FD E9                  JP   (IY)   
052A                DIV:         
052A   60 69                  LD   hl,bc   ; hl = IP
052C   C1                     POP   bc   ; bc = denominator
052D   E3                     EX   (sp),hl   ; save IP, hl = numerator
052E   7C                     LD   a,h   
052F   A8                     XOR   b   
0530   F5                     PUSH   af   
0531   A8                     XOR   b   
0532   F2 3B 05               JP   p,absBC   
0535                             ;absHL
0535   AF                     XOR   a   
0536   95                     SUB   l   
0537   6F                     LD   l,a   
0538   9F                     SBC   a,a   
0539   94                     SUB   h   
053A   67                     LD   h,a   
053B                ABSBC:       
053B   A8                     XOR   b   
053C   F2 45 05               JP   p,$+9   
053F   AF                     XOR   a   
0540   91                     SUB   c   
0541   4F                     LD   c,a   
0542   9F                     SBC   a,a   
0543   90                     SUB   b   
0544   47                     LD   b,a   
0545   29                     ADD   hl,hl   
0546   3E 0F                  LD   a,15   
0548   11 00 00               LD   de,0   
054B   EB                     EX   de,hl   
054C   18 04                  JR   jumpin   
054E                LOOP1:       
054E   09                     ADD   hl,bc   ;--
054F                LOOP2:       
054F   3D                     DEC   a   ;4
0550   28 0E                  JR   z,EndSDiv   ;12|7
0552                JUMPIN:      
0552   CB 23                  SLA   e   ;8
0554   CB 12                  RL   d   ;8
0556   ED 6A                  ADC   hl,hl   ;15
0558   ED 42                  SBC   hl,bc   ;15
055A   38 F2                  JR   c,Loop1   ;23-2b
055C   1C                     INC   e   ;--
055D   C3 4F 05               JP   Loop2   ;--
0560                ENDSDIV:      
0560   F1                     POP   af   
0561   F2 6A 05               JP   p,div10   
0564   AF                     XOR   a   
0565   93                     SUB   e   
0566   5F                     LD   e,a   
0567   9F                     SBC   a,a   
0568   92                     SUB   d   
0569   57                     LD   d,a   
056A                DIV10:       
056A   C1                     POP   bc   
056B   D5                     PUSH   de   ; quotient
056C   E5                     PUSH   hl   ; remainder
056D   FD E9                  JP   (iy)   
056F                             ;=57
056F                BEGIN:       ; Left parentheses begins a loop
056F   E1                     POP   HL   
0570   7D                     LD   A,L   ; zero?
0571   B4                     OR   H   
0572   28 27                  JR   Z,begin1   
0574   DD E5                  PUSH   IX   
0576   DD 2A 30 0C            LD   IX,(vLoopSP)   
057A   11 FA FF               LD   DE,-6   
057D   DD 19                  ADD   IX,DE   
057F   DD 36 00 00            LD   (IX+0),0   ; loop var
0583   DD 36 01 00            LD   (IX+1),0   
0587   DD 75 02               LD   (IX+2),L   ; loop limit
058A   DD 74 03               LD   (IX+3),H   
058D   DD 71 04               LD   (IX+4),C   ; loop address
0590   DD 70 05               LD   (IX+5),B   
0593   DD 22 30 0C            LD   (vLoopSP),IX   
0597   DD E1                  POP   IX   
0599   FD E9                  JP   (IY)   
059B                BEGIN1:      
059B   1E 01                  LD   E,1   
059D                BEGIN2:      
059D   03                     INC   BC   
059E   0A                     LD   A,(BC)   
059F   CD 69 03               CALL   nesting   
05A2   AF                     XOR   A   
05A3   B3                     OR   E   
05A4   20 F7                  JR   NZ,begin2   
05A6   21 01 00               LD   HL,1   
05A9                BEGIN3:      
05A9   03                     INC   BC   
05AA   0A                     LD   A,(BC)   
05AB   0B                     DEC   BC   
05AC   FE 28                  CP   "("   
05AE   20 01                  JR   NZ,begin4   
05B0   E5                     PUSH   HL   
05B1                BEGIN4:      
05B1   FD E9                  JP   (IY)   
05B3                AGAIN:       ;=72
05B3   DD E5                  PUSH   IX   
05B5   DD 2A 30 0C            LD   IX,(vLoopSP)   
05B9   DD 5E 00               LD   E,(IX+0)   ; peek loop var
05BC   DD 56 01               LD   D,(IX+1)   
05BF   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
05C2   DD 66 03               LD   H,(IX+3)   
05C5   2B                     DEC   HL   
05C6   B7                     OR   A   
05C7   ED 52                  SBC   HL,DE   
05C9   28 0F                  JR   Z,again2   
05CB   13                     INC   DE   
05CC   DD 73 00               LD   (IX+0),E   ; poke loop var
05CF   DD 72 01               LD   (IX+1),D   
05D2                AGAIN1:      
05D2   DD 4E 04               LD   C,(IX+4)   ; peek loop address
05D5   DD 46 05               LD   B,(IX+5)   
05D8   18 05                  JR   again4   
05DA                AGAIN2:      
05DA   11 06 00               LD   DE,6   ; drop loop frame
05DD                AGAIN3:      
05DD   DD 19                  ADD   IX,DE   
05DF                AGAIN4:      
05DF   DD 22 30 0C            LD   (vLoopSP),IX   
05E3   DD E1                  POP   IX   
05E5   21 00 00               LD   HL,0   ; skip ELSE clause
05E8   18 BF                  JR   begin3   
05EA                             ; **************************************************************************
05EA                             ; Page 6 Alt primitives
05EA                             ; **************************************************************************
05EA                          ALIGN   $100   
0600                PAGE6:       
0600                ALTVAR_:      
0600   0A                     LD   A,(BC)   
0601   D6 21                  SUB   "a" - ((altVars - mintVars)/2)   
0603   87                     ADD   A,A   
0604   26 0C                  LD   H,msb(mintVars)   
0606   6F                     LD   L,A   
0607   E5                     PUSH   HL   
0608                ANOP_:       
0608   FD E9                  JP   (IY)   
060A                ANONDEF_:      ;= 7
060A   03                     INC   BC   
060B   ED 5B 8E 0C            LD   DE,(vHeapPtr)   ; start of defintion
060F   D5                     PUSH   DE   
0610   C3 BB 07               JP   def1   
0613                BREAK_:      
0613   E1                     POP   HL   
0614   7D                     LD   A,L   ; zero?
0615   B4                     OR   H   
0616   20 02                  JR   NZ,break1   
0618   FD E9                  JP   (IY)   
061A                BREAK1:      
061A   11 06 00               LD   DE,6   ; drop loop frame
061D   DD 19                  ADD   IX,DE   
061F   C3 9B 05               JP   begin1   ; skip to end of loop
0622                CARRDEF_:      ; define a byte array
0622   3E 01                  LD   A,TRUE   
0624   C3 7F 07               JP   arrDef1   
0627                CFETCH_:      
0627   E1                     POP   HL   
0628   16 00                  LD   D,0   
062A   5E                     LD   E,(HL)   
062B   D5                     PUSH   DE   
062C   FD E9                  JP   (IY)   
062E                COMMENT_:      
062E   03                     INC   BC   ; point to next char
062F   0A                     LD   A,(BC)   
0630   FE 0D                  CP   "\r"   ; terminate at cr
0632   20 FA                  JR   NZ,comment_   
0634   0B                     DEC   BC   
0635   FD E9                  JP   (IY)   
0637                CSTORE_:      
0637   E1                     POP   HL   
0638   D1                     POP   DE   
0639   73                     LD   (HL),E   
063A   FD E9                  JP   (IY)   
063C                DEPTH_:      
063C                DEPTH:       
063C   21 00 00               LD   HL,0   
063F   39                     ADD   HL,SP   
0640   EB                     EX   DE,HL   
0641   21 00 0A               LD   HL,DSTACK   
0644   B7                     OR   A   
0645   ED 52                  SBC   HL,DE   
0647   C3 8D 04               JP   shr1   
064A                EMIT_:       
064A   E1                     POP   HL   
064B   7D                     LD   A,L   
064C   CD 85 00               CALL   putchar   
064F   FD E9                  JP   (IY)   
0651                EXEC_:       
0651   CD 56 06               CALL   exec1   
0654   FD E9                  JP   (IY)   
0656                EXEC1:       
0656   E1                     POP   HL   
0657   E3                     EX   (SP),HL   
0658   E9                     JP   (HL)   
0659                EDITDEF_:      
0659   CD F1 06               CALL   editDef   
065C   FD E9                  JP   (IY)   
065E                PROMPT_:      
065E   CD 95 03               CALL   prompt   
0661   FD E9                  JP   (IY)   
0663                GO_:         ;\^
0663   D1                     POP   DE   
0664                GO1:         
0664   7A                     LD   A,D   ; skip if destination address is null
0665   B3                     OR   E   
0666   28 0E                  JR   Z,go3   
0668   60 69                  LD   HL,BC   
066A   03                     INC   BC   ; read next char from source
066B   0A                     LD   A,(BC)   ; if ; to tail call optimise
066C   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
066E   28 03                  JR   Z,go2   
0670   CD BE 03               CALL   rpush   ; save Instruction Pointer
0673                GO2:         
0673   42 4B                  LD   BC,DE   
0675   0B                     DEC   BC   
0676                GO3:         
0676   FD E9                  JP   (IY)   
0678                INPORT_:      ; \<
0678   E1                     POP   HL   
0679   79                     LD   A,C   
067A   4D                     LD   C,L   
067B   ED 68                  IN   L,(C)   
067D   26 00                  LD   H,0   
067F   4F                     LD   C,A   
0680   E5                     PUSH   HL   
0681   FD E9                  JP   (IY)   
0683                I_:          
0683   2A 30 0C               LD   HL,(vLoopSP)   
0686   E5                     PUSH   HL   
0687   FD E9                  JP   (IY)   
0689                J_:          ;=9
0689   2A 30 0C               LD   HL,(vLoopSP)   ;the address of j is 6 bytes more than i
068C   11 06 00               LD   DE,6   
068F   19                     ADD   HL,DE   
0690   E5                     PUSH   HL   
0691   FD E9                  JP   (IY)   
0693                NEWLN_:      
0693   CD 9E 03               CALL   crlf   
0696   FD E9                  JP   (IY)   
0698                OUTPORT_:      
0698   E1                     POP   HL   
0699   59                     LD   E,C   
069A   4D                     LD   C,L   
069B   E1                     POP   HL   
069C   ED 69                  OUT   (C),L   
069E   4B                     LD   C,E   
069F   FD E9                  JP   (IY)   
06A1                PRINTSTK_:      
06A1                PRINTSTK:      ;=40
06A1                             ; MINT: \a@2- \- 1- ("@ \b@ \(,)(.) 2-) '
06A1   CD A5 03               CALL   ENTER   
06A4   60 3D 3E 20 60 5C 61 40 32 2D 20 5C 2D 20 31 2D 28 22 40 2E 32 2D 29 27 5C 24 00 .CSTR   "`=> `\\a@2- \\- 1-(",$22,"@.2-)'\\$"   
06BF   FD E9                  JP   (IY)   
06C1                             ;*******************************************************************
06C1                             ; Page 5 primitive routines continued
06C1                             ;*******************************************************************
06C1                             ; ********************************************************************************
06C1                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
06C1                             ; Read the first character.
06C1                             ;			
06C1                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
06C1                             ; and then added into the L register. (HL forms a 16-bit accumulator)
06C1                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
06C1                             ; and then add in the next digit. Repeat this until a non-number character is
06C1                             ; detected. Add in the final digit so that HL contains the converted number.
06C1                             ; Push HL onto the stack and proceed to the dispatch routine.
06C1                             ; ********************************************************************************
06C1                NUM:         
06C1   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06C4   0A                     LD   a,(bc)   ; Get numeral or -
06C5   FE 2D                  CP   "-"   
06C7   20 01                  JR   nz,num0   
06C9   03                     INC   bc   ; move to next char, no flags affected
06CA                NUM0:        
06CA   08                     EX   af,af'   ; save zero flag = 0 for later
06CB                NUM1:        
06CB   0A                     LD   a,(bc)   ; read digit
06CC   D6 30                  SUB   "0"   ; less than 0?
06CE   38 13                  JR   c,num2   ; not a digit, exit loop
06D0   FE 0A                  CP   10   ; greater that 9?
06D2   30 0F                  JR   nc,num2   ; not a digit, exit loop
06D4   03                     INC   bc   ; inc IP
06D5   54 5D                  LD   de,hl   ; multiply hl * 10
06D7   29                     ADD   hl,hl   
06D8   29                     ADD   hl,hl   
06D9   19                     ADD   hl,de   
06DA   29                     ADD   hl,hl   
06DB   85                     ADD   a,l   ; add digit in a to hl
06DC   6F                     LD   l,a   
06DD   3E 00                  LD   a,0   
06DF   8C                     ADC   a,h   
06E0   67                     LD   h,a   
06E1   18 E8                  JR   num1   
06E3                NUM2:        
06E3   0B                     DEC   bc   
06E4   08                     EX   af,af'   ; restore zero flag
06E5   20 07                  JR   nz,num3   
06E7   EB                     EX   de,hl   ; negate the value of hl
06E8   21 00 00               LD   hl,0   
06EB   B7                     OR   a   ; jump to sub2
06EC   ED 52                  SBC   hl,de   
06EE                NUM3:        
06EE   E5                     PUSH   hl   ; Put the number on the stack
06EF   FD E9                  JP   (iy)   ; and process the next character
06F1                             ;*******************************************************************
06F1                             ; Subroutines
06F1                             ;*******************************************************************
06F1                EDITDEF:      ;=50 lookup up def based on number
06F1   E1                     POP   HL   ; pop ret address
06F2   E3                     EX   (SP),HL   ; swap with TOS
06F3   7D                     LD   A,L   
06F4   08                     EX   AF,AF'   
06F5   7D                     LD   A,L   
06F6   CD 2C 03               CALL   lookupRef   
06F9   5E                     LD   E,(HL)   
06FA   23                     INC   HL   
06FB   56                     LD   D,(HL)   
06FC   7A                     LD   A,D   
06FD   B3                     OR   E   
06FE   21 00 08               LD   HL,TIB   
0701   28 14                  JR   Z,editDef3   
0703   3E 3A                  LD   A,":"   
0705   CD DE 03               CALL   writeChar   
0708   08                     EX   AF,AF'   
0709   CD DE 03               CALL   writeChar   
070C   18 01                  JR   editDef2   
070E                EDITDEF1:      
070E   13                     INC   DE   
070F                EDITDEF2:      
070F   1A                     LD   A,(DE)   
0710   CD DE 03               CALL   writeChar   
0713   FE 3B                  CP   ";"   
0715   20 F7                  JR   NZ,editDef1   
0717                EDITDEF3:      
0717   11 00 08               LD   DE,TIB   
071A   B7                     OR   A   
071B   ED 52                  SBC   HL,DE   
071D   22 A6 0C               LD   (vTIBPtr),HL   
0720   C9                     RET      
0721                             ; hl = value
0721                PRINTDEC:      
0721   CB 7C                  BIT   7,h   
0723   28 0B                  JR   z,printDec2   
0725   3E 2D                  LD   a,"-"   
0727   CD 85 00               CALL   putchar   
072A   AF                     XOR   a   
072B   95                     SUB   l   
072C   6F                     LD   l,a   
072D   9F                     SBC   a,a   
072E   94                     SUB   h   
072F   67                     LD   h,a   
0730                PRINTDEC2:      
0730   C5                     PUSH   bc   
0731   0E 00                  LD   c,0   ; leading zeros flag = false
0733   11 F0 D8               LD   de,-10000   
0736   CD 52 07               CALL   printDec4   
0739   11 18 FC               LD   de,-1000   
073C   CD 52 07               CALL   printDec4   
073F   11 9C FF               LD   de,-100   
0742   CD 52 07               CALL   printDec4   
0745   1E F6                  LD   e,-10   
0747   CD 52 07               CALL   printDec4   
074A   0C                     INC   c   ; flag = true for at least digit
074B   1E FF                  LD   e,-1   
074D   CD 52 07               CALL   printDec4   
0750   C1                     POP   bc   
0751   C9                     RET      
0752                PRINTDEC4:      
0752   06 2F                  LD   b,"0"-1   
0754                PRINTDEC5:      
0754   04                     INC   b   
0755   19                     ADD   hl,de   
0756   38 FC                  JR   c,printDec5   
0758   ED 52                  SBC   hl,de   
075A   3E 30                  LD   a,"0"   
075C   B8                     CP   b   
075D   20 05                  JR   nz,printDec6   
075F   AF                     XOR   a   
0760   B1                     OR   c   
0761   C8                     RET   z   
0762   18 01                  JR   printDec7   
0764                PRINTDEC6:      
0764   0C                     INC   c   
0765                PRINTDEC7:      
0765   78                     LD   a,b   
0766   C3 85 00               JP   putchar   
0769                             ; ARRAY compilation routine
0769                COMPNEXT:      ;=26
0769   D1                     POP   DE   ; DE = return address
076A   2A 8E 0C               LD   HL,(vHeapPtr)   ; load heap ptr
076D   73                     LD   (HL),E   ; store lsb
076E   3A 32 0C               LD   A,(vByteMode)   
0771   23                     INC   HL   
0772   B7                     OR   A   
0773   20 02                  JR   NZ,compNext1   
0775   72                     LD   (HL),D   
0776   23                     INC   HL   
0777                COMPNEXT1:      
0777   22 8E 0C               LD   (vHeapPtr),HL   ; save heap ptr
077A   C3 B8 02               JP   NEXT   
077D                ARRDEF:      ;=18
077D   3E 00                  LD   A,FALSE   
077F                ARRDEF1:      
077F   FD 21 69 07            LD   IY,compNEXT   
0783   32 32 0C               LD   (vByteMode),A   
0786   2A 8E 0C               LD   HL,(vHeapPtr)   ; HL = heap ptr
0789   CD BE 03               CALL   rpush   ; save start of array \[  \]
078C   C3 B8 02               JP   NEXT   ; hardwired to NEXT
078F                ARREND:      ;=27
078F   CD C9 03               CALL   rpop   ; DE = start of array
0792   E5                     PUSH   HL   
0793   EB                     EX   DE,HL   
0794   2A 8E 0C               LD   HL,(vHeapPtr)   ; HL = heap ptr
0797   B7                     OR   A   
0798   ED 52                  SBC   HL,DE   ; bytes on heap
079A   3A 32 0C               LD   A,(vByteMode)   
079D   B7                     OR   A   
079E   20 04                  JR   NZ,arrEnd2   
07A0   CB 3C                  SRL   H   ; BC = m words
07A2   CB 1D                  RR   L   
07A4                ARREND2:      
07A4   E5                     PUSH   HL   
07A5   FD 21 B8 02            LD   IY,NEXT   
07A9   FD E9                  JP   (IY)   ; hardwired to NEXT
07AB                             ; **************************************************************************
07AB                             ; def is used to create a colon definition
07AB                             ; When a colon is detected, the next character (usually uppercase alpha)
07AB                             ; is looked up in the vector table to get its associated code field address
07AB                             ; This CFA is updated to point to the character after uppercase alpha
07AB                             ; The remainder of the characters are then skipped until after a semicolon
07AB                             ; is found.
07AB                             ; ***************************************************************************
07AB                DEF:         ; Create a colon definition
07AB   03                     INC   BC   
07AC   0A                     LD   A,(BC)   ; Get the next character
07AD   32 88 0C               LD   (vLastDef),A   
07B0   CD 2C 03               CALL   lookupRef   
07B3   ED 5B 8E 0C            LD   DE,(vHeapPtr)   ; start of defintion
07B7   73                     LD   (HL),E   ; Save low byte of address in CFA
07B8   23                     INC   HL   
07B9   72                     LD   (HL),D   ; Save high byte of address in CFA+1
07BA   03                     INC   BC   
07BB                DEF1:        ; Skip to end of definition
07BB   0A                     LD   A,(BC)   ; Get the next character
07BC   03                     INC   BC   ; Point to next character
07BD   12                     LD   (DE),A   
07BE   13                     INC   DE   
07BF   FE 3B                  CP   ";"   ; Is it a semicolon
07C1   28 02                  JR   Z,def2   ; end the definition
07C3   18 F6                  JR   def1   ; get the next element
07C5                DEF2:        
07C5   0B                     DEC   BC   
07C6                DEF3:        
07C6   ED 53 8E 0C            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
07CA   FD E9                  JP   (IY)   
07CC                DSIZE:    EQU   $80   
07CC                RSIZE:    EQU   $80   
07CC                LSIZE:    EQU   $80   
07CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
07CC                VARS_SIZE:   EQU   26*2*2   ; A..Z, a..z words
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                          DS   LSIZE   
0A80                LSTACK:      
0A80                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80   
0B80                ALTCODES:      
0B80                          DS   $80-32   
0BE0                          ALIGN   $100   
0C00                MINTVARS:      
0C00                          DS   $30   
0C30                VLOOPSP:   DS   2   ; 
0C32                VBYTEMODE:   DS   2   ; 
0C34                TBPTR:    DS   2   ; reserved for tests
0C36                RST08:    DS   2   
0C38                RST10:    DS   2   
0C3A                RST18:    DS   2   
0C3C                RST20:    DS   2   
0C3E                RST28:    DS   2   
0C40                RST30:    DS   2   ; 
0C42                BAUD:     DS   2   ; 
0C44                INTVEC:   DS   2   ; 
0C46                NMIVEC:   DS   2   ; 
0C48                GETCVEC:   DS   2   ; 
0C4A                PUTCVEC:   DS   2   ; 
0C4C                          DS   26*2   
0C80                ALTVARS:      
0C80                VS0:      DS   2   ; a
0C82                VBASE16:   DS   2   ; b
0C84                VCARRY:   DS   2   ; c
0C86                VNS:      DS   2   ; d
0C88                VLASTDEF:   DS   2   ; e
0C8A                          DS   2   ; f
0C8C                          DS   2   ; g
0C8E                VHEAPPTR:   DS   2   ; h
0C90                          DS   2   ; i
0C92                          DS   2   ; j
0C94                          DS   2   ; k
0C96                          DS   2   ; l
0C98                          DS   2   ; m
0C9A                          DS   2   ; n
0C9C                          DS   2   ; o
0C9E                          DS   2   ; p
0CA0                          DS   2   ; q
0CA2                          DS   2   ; r
0CA4                          DS   2   ; s
0CA6                VTIBPTR:   DS   2   ; t
0CA8                          DS   2   ; u
0CAA                          DS   2   ; v
0CAC                          DS   2   ; w
0CAE                          DS   2   ; x
0CB0                          DS   2   ; y
0CB2                          DS   2   ; z
0CB4                             ; .align $40
0CB4                VARS:     DS   VARS_SIZE   
0D1C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 40 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 8 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 211 IN MINT.asm
                    > USED AT LINE 646 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 248 IN MINT.asm
                    > USED AT LINE 414 IN MINT.asm
                    > USED AT LINE 484 IN MINT.asm
                    > USED AT LINE 516 IN MINT.asm
                    > USED AT LINE 606 IN MINT.asm
                    > USED AT LINE 770 IN MINT.asm
                    > USED AT LINE 1025 IN MINT.asm
                    > USED AT LINE 1201 IN MINT.asm
                    > USED AT LINE 1242 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               0001 DEFINED AT LINE 12 IN MINT.asm
                    > USED AT LINE 988 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 1260 IN MINT.asm
EMPTY:              0000 DEFINED AT LINE 14 IN MINT.asm
CTRL_E:             0005 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 221 IN MINT.asm
CTRL_H:             0008 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 218 IN MINT.asm
CTRL_J:             000A DEFINED AT LINE 18 IN MINT.asm
                    > USED AT LINE 224 IN MINT.asm
CTRL_L:             000C DEFINED AT LINE 19 IN MINT.asm
                    > USED AT LINE 227 IN MINT.asm
CTRL_P:             0010 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 230 IN MINT.asm
MACROS:             0180 DEFINED AT LINE 46 IN MINT.asm
REEDIT_:            0180 DEFINED AT LINE 48 IN MINT.asm
EDIT_:              0187 DEFINED AT LINE 51 IN MINT.asm
LIST_:              0191 DEFINED AT LINE 54 IN MINT.asm
PRINTSTACK_:        01AC DEFINED AT LINE 57 IN MINT.asm
IOPCODES:           01B2 DEFINED AT LINE 60 IN MINT.asm
                    > USED AT LINE 339 IN MINT.asm
ETX:                0210 DEFINED AT LINE 166 IN MINT.asm
                    > USED AT LINE 624 IN MINT.asm
ETX1:               0219 DEFINED AT LINE 171 IN MINT.asm
                    > USED AT LINE 169 IN MINT.asm
START:              021B DEFINED AT LINE 174 IN MINT.asm
                    > USED AT LINE 6
INTERPRET:          022E DEFINED AT LINE 180 IN MINT.asm
                    > USED AT LINE 172 IN MINT.asm
INTERPRET2:         0238 DEFINED AT LINE 186 IN MINT.asm
                    > USED AT LINE 233 IN MINT.asm
                    > USED AT LINE 241 IN MINT.asm
                    > USED AT LINE 306 IN MINT.asm
                    > USED AT LINE 310 IN MINT.asm
INTERPRET3:         0240 DEFINED AT LINE 193 IN MINT.asm
                    > USED AT LINE 202 IN MINT.asm
INTERPRET4:         0246 DEFINED AT LINE 199 IN MINT.asm
                    > USED AT LINE 191 IN MINT.asm
WAITCHAR:           024B DEFINED AT LINE 210 IN MINT.asm
                    > USED AT LINE 250 IN MINT.asm
                    > USED AT LINE 264 IN MINT.asm
MACRO:              027B DEFINED AT LINE 235 IN MINT.asm
                    > USED AT LINE 223 IN MINT.asm
                    > USED AT LINE 226 IN MINT.asm
                    > USED AT LINE 229 IN MINT.asm
                    > USED AT LINE 232 IN MINT.asm
WAITCHAR1:          028C DEFINED AT LINE 243 IN MINT.asm
                    > USED AT LINE 213 IN MINT.asm
WAITCHAR3:          029A DEFINED AT LINE 252 IN MINT.asm
                    > USED AT LINE 217 IN MINT.asm
WAITCHAR4:          02B0 DEFINED AT LINE 268 IN MINT.asm
                    > USED AT LINE 215 IN MINT.asm
NEXT:               02B8 DEFINED AT LINE 294 IN MINT.asm
                    > USED AT LINE 316 IN MINT.asm
                    > USED AT LINE 653 IN MINT.asm
                    > USED AT LINE 1257 IN MINT.asm
                    > USED AT LINE 1266 IN MINT.asm
                    > USED AT LINE 1282 IN MINT.asm
BACKSPACE_:         02C1 DEFINED AT LINE 303 IN MINT.asm
                    > USED AT LINE 219 IN MINT.asm
INIT:               02D1 DEFINED AT LINE 312 IN MINT.asm
                    > USED AT LINE 176 IN MINT.asm
INIT1:              02E4 DEFINED AT LINE 320 IN MINT.asm
                    > USED AT LINE 323 IN MINT.asm
INITOPS:            0308 DEFINED AT LINE 338 IN MINT.asm
INITOPS1:           0311 DEFINED AT LINE 343 IN MINT.asm
                    > USED AT LINE 353 IN MINT.asm
                    > USED AT LINE 364 IN MINT.asm
INITOPS2:           0321 DEFINED AT LINE 355 IN MINT.asm
                    > USED AT LINE 348 IN MINT.asm
INITOPS2A:          0326 DEFINED AT LINE 360 IN MINT.asm
                    > USED AT LINE 363 IN MINT.asm
LOOKUPREF:          032C DEFINED AT LINE 366 IN MINT.asm
                    > USED AT LINE 1169 IN MINT.asm
                    > USED AT LINE 1298 IN MINT.asm
LOOKUPREF0:         032E DEFINED AT LINE 368 IN MINT.asm
LOOKUPREF1:         0332 DEFINED AT LINE 371 IN MINT.asm
                    > USED AT LINE 595 IN MINT.asm
LOOKUPREF2:         0338 DEFINED AT LINE 375 IN MINT.asm
                    > USED AT LINE 370 IN MINT.asm
                    > USED AT LINE 757 IN MINT.asm
LOOKUPREF3:         033C DEFINED AT LINE 378 IN MINT.asm
                    > USED AT LINE 374 IN MINT.asm
PRINTHEX:           034A DEFINED AT LINE 391 IN MINT.asm
                    > USED AT LINE 611 IN MINT.asm
PRINTHEX2:          0355 DEFINED AT LINE 400 IN MINT.asm
                    > USED AT LINE 395 IN MINT.asm
                    > USED AT LINE 397 IN MINT.asm
PRINTHEX3:          035E DEFINED AT LINE 408 IN MINT.asm
                    > USED AT LINE 406 IN MINT.asm
NESTING:            0369 DEFINED AT LINE 426 IN MINT.asm
                    > USED AT LINE 197 IN MINT.asm
                    > USED AT LINE 249 IN MINT.asm
                    > USED AT LINE 910 IN MINT.asm
NESTING1A:          0374 DEFINED AT LINE 433 IN MINT.asm
                    > USED AT LINE 430 IN MINT.asm
NESTING1:           0377 DEFINED AT LINE 436 IN MINT.asm
                    > USED AT LINE 428 IN MINT.asm
NESTING2:           0386 DEFINED AT LINE 445 IN MINT.asm
                    > USED AT LINE 440 IN MINT.asm
                    > USED AT LINE 442 IN MINT.asm
NESTING3:           0388 DEFINED AT LINE 448 IN MINT.asm
                    > USED AT LINE 444 IN MINT.asm
NESTING4:           0393 DEFINED AT LINE 455 IN MINT.asm
                    > USED AT LINE 450 IN MINT.asm
                    > USED AT LINE 452 IN MINT.asm
PROMPT:             0395 DEFINED AT LINE 459 IN MINT.asm
                    > USED AT LINE 181 IN MINT.asm
                    > USED AT LINE 1041 IN MINT.asm
CRLF:               039E DEFINED AT LINE 464 IN MINT.asm
                    > USED AT LINE 261 IN MINT.asm
                    > USED AT LINE 1086 IN MINT.asm
ENTER:              03A5 DEFINED AT LINE 469 IN MINT.asm
                    > USED AT LINE 238 IN MINT.asm
                    > USED AT LINE 1101 IN MINT.asm
PRINTSTR:           03AE DEFINED AT LINE 476 IN MINT.asm
                    > USED AT LINE 177 IN MINT.asm
                    > USED AT LINE 308 IN MINT.asm
                    > USED AT LINE 460 IN MINT.asm
                    > USED AT LINE 465 IN MINT.asm
PUTSTR0:            03B5 DEFINED AT LINE 483 IN MINT.asm
                    > USED AT LINE 489 IN MINT.asm
PUTSTR:             03B9 DEFINED AT LINE 486 IN MINT.asm
                    > USED AT LINE 478 IN MINT.asm
RPUSH:              03BE DEFINED AT LINE 492 IN MINT.asm
                    > USED AT LINE 471 IN MINT.asm
                    > USED AT LINE 1056 IN MINT.asm
                    > USED AT LINE 1265 IN MINT.asm
RPOP:               03C9 DEFINED AT LINE 499 IN MINT.asm
                    > USED AT LINE 629 IN MINT.asm
                    > USED AT LINE 665 IN MINT.asm
                    > USED AT LINE 1269 IN MINT.asm
RPOP2:              03D3 DEFINED AT LINE 504 IN MINT.asm
CARRY:              03D4 DEFINED AT LINE 507 IN MINT.asm
                    > USED AT LINE 589 IN MINT.asm
                    > USED AT LINE 723 IN MINT.asm
WRITECHAR:          03DE DEFINED AT LINE 513 IN MINT.asm
                    > USED AT LINE 1178 IN MINT.asm
                    > USED AT LINE 1180 IN MINT.asm
                    > USED AT LINE 1186 IN MINT.asm
HEX:                03E3 DEFINED AT LINE 518 IN MINT.asm
                    > USED AT LINE 643 IN MINT.asm
HEX1:               03E6 DEFINED AT LINE 520 IN MINT.asm
                    > USED AT LINE 537 IN MINT.asm
HEX2:               03EE DEFINED AT LINE 526 IN MINT.asm
                    > USED AT LINE 524 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 543 IN MINT.asm
AND_:               0400 DEFINED AT LINE 545 IN MINT.asm
AND1:               0407 DEFINED AT LINE 553 IN MINT.asm
                    > USED AT LINE 567 IN MINT.asm
                    > USED AT LINE 578 IN MINT.asm
OR_:                040B DEFINED AT LINE 559 IN MINT.asm
XOR_:               0414 DEFINED AT LINE 569 IN MINT.asm
XOR1:               0415 DEFINED AT LINE 571 IN MINT.asm
                    > USED AT LINE 582 IN MINT.asm
INV_:               041D DEFINED AT LINE 580 IN MINT.asm
ADD_:               0422 DEFINED AT LINE 584 IN MINT.asm
AGAIN_:             0429 DEFINED AT LINE 591 IN MINT.asm
CALL_:              042C DEFINED AT LINE 593 IN MINT.asm
DOT_:               0436 DEFINED AT LINE 601 IN MINT.asm
DOT2:               043A DEFINED AT LINE 604 IN MINT.asm
                    > USED AT LINE 612 IN MINT.asm
HDOT_:              0441 DEFINED AT LINE 609 IN MINT.asm
DROP_:              0447 DEFINED AT LINE 614 IN MINT.asm
DUP_:               044A DEFINED AT LINE 618 IN MINT.asm
ETX_:               044F DEFINED AT LINE 623 IN MINT.asm
EXIT_:              0452 DEFINED AT LINE 626 IN MINT.asm
FETCH_:             045C DEFINED AT LINE 634 IN MINT.asm
FETCH1:             045D DEFINED AT LINE 636 IN MINT.asm
HEX_:               0463 DEFINED AT LINE 643 IN MINT.asm
KEY_:               0466 DEFINED AT LINE 645 IN MINT.asm
NOP_:               046F DEFINED AT LINE 652 IN MINT.asm
OVER_:              0472 DEFINED AT LINE 656 IN MINT.asm
RET_:               0479 DEFINED AT LINE 664 IN MINT.asm
ROT_:               0480 DEFINED AT LINE 669 IN MINT.asm
SHL_:               0487 DEFINED AT LINE 678 IN MINT.asm
SHR_:               048C DEFINED AT LINE 685 IN MINT.asm
SHR1:               048D DEFINED AT LINE 687 IN MINT.asm
                    > USED AT LINE 1020 IN MINT.asm
STORE_:             0494 DEFINED AT LINE 693 IN MINT.asm
SWAP_:              049B DEFINED AT LINE 702 IN MINT.asm
SUB_:               04A0 DEFINED AT LINE 708 IN MINT.asm
SUB1:               04AC DEFINED AT LINE 716 IN MINT.asm
                    > USED AT LINE 713 IN MINT.asm
SUB2:               04AE DEFINED AT LINE 719 IN MINT.asm
EQ_:                04B5 DEFINED AT LINE 725 IN MINT.asm
GT_:                04C1 DEFINED AT LINE 734 IN MINT.asm
LT_:                04C5 DEFINED AT LINE 739 IN MINT.asm
CMP_:               04C7 DEFINED AT LINE 743 IN MINT.asm
                    > USED AT LINE 737 IN MINT.asm
EQUAL:              04D2 DEFINED AT LINE 749 IN MINT.asm
                    > USED AT LINE 730 IN MINT.asm
LESS:               04D3 DEFINED AT LINE 751 IN MINT.asm
                    > USED AT LINE 732 IN MINT.asm
                    > USED AT LINE 746 IN MINT.asm
                    > USED AT LINE 748 IN MINT.asm
VAR_:               04D6 DEFINED AT LINE 755 IN MINT.asm
STR_:               04DD DEFINED AT LINE 761 IN MINT.asm
STR:                04DD DEFINED AT LINE 762 IN MINT.asm
STR1:               04DE DEFINED AT LINE 765 IN MINT.asm
                    > USED AT LINE 771 IN MINT.asm
STR2:               04E9 DEFINED AT LINE 772 IN MINT.asm
                    > USED AT LINE 769 IN MINT.asm
NUM_:               04EC DEFINED AT LINE 776 IN MINT.asm
BEGIN_:             04EF DEFINED AT LINE 777 IN MINT.asm
ARRDEF_:            04F2 DEFINED AT LINE 778 IN MINT.asm
ARREND_:            04F5 DEFINED AT LINE 779 IN MINT.asm
DEF_:               04F8 DEFINED AT LINE 780 IN MINT.asm
MUL_:               04FB DEFINED AT LINE 782 IN MINT.asm
DIV_:               04FD DEFINED AT LINE 783 IN MINT.asm
ALT_:               04FF DEFINED AT LINE 784 IN MINT.asm
ALT:                04FF DEFINED AT LINE 790 IN MINT.asm
ALT2:               0508 DEFINED AT LINE 797 IN MINT.asm
MUL:                050E DEFINED AT LINE 805 IN MINT.asm
                    > USED AT LINE 782 IN MINT.asm
MUL2:               0518 DEFINED AT LINE 814 IN MINT.asm
                    > USED AT LINE 823 IN MINT.asm
DIV:                052A DEFINED AT LINE 828 IN MINT.asm
                    > USED AT LINE 783 IN MINT.asm
ABSBC:              053B DEFINED AT LINE 844 IN MINT.asm
                    > USED AT LINE 836 IN MINT.asm
LOOP1:              054E DEFINED AT LINE 858 IN MINT.asm
                    > USED AT LINE 868 IN MINT.asm
LOOP2:              054F DEFINED AT LINE 860 IN MINT.asm
                    > USED AT LINE 870 IN MINT.asm
JUMPIN:             0552 DEFINED AT LINE 863 IN MINT.asm
                    > USED AT LINE 857 IN MINT.asm
ENDSDIV:            0560 DEFINED AT LINE 871 IN MINT.asm
                    > USED AT LINE 862 IN MINT.asm
DIV10:              056A DEFINED AT LINE 880 IN MINT.asm
                    > USED AT LINE 873 IN MINT.asm
BEGIN:              056F DEFINED AT LINE 887 IN MINT.asm
                    > USED AT LINE 777 IN MINT.asm
BEGIN1:             059B DEFINED AT LINE 905 IN MINT.asm
                    > USED AT LINE 891 IN MINT.asm
                    > USED AT LINE 985 IN MINT.asm
BEGIN2:             059D DEFINED AT LINE 907 IN MINT.asm
                    > USED AT LINE 913 IN MINT.asm
BEGIN3:             05A9 DEFINED AT LINE 915 IN MINT.asm
                    > USED AT LINE 951 IN MINT.asm
BEGIN4:             05B1 DEFINED AT LINE 922 IN MINT.asm
                    > USED AT LINE 920 IN MINT.asm
AGAIN:              05B3 DEFINED AT LINE 925 IN MINT.asm
                    > USED AT LINE 591 IN MINT.asm
AGAIN1:             05D2 DEFINED AT LINE 939 IN MINT.asm
AGAIN2:             05DA DEFINED AT LINE 943 IN MINT.asm
                    > USED AT LINE 935 IN MINT.asm
AGAIN3:             05DD DEFINED AT LINE 945 IN MINT.asm
AGAIN4:             05DF DEFINED AT LINE 947 IN MINT.asm
                    > USED AT LINE 942 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 957 IN MINT.asm
                    > USED AT LINE 799 IN MINT.asm
ALTVAR_:            0600 DEFINED AT LINE 960 IN MINT.asm
ANOP_:              0608 DEFINED AT LINE 967 IN MINT.asm
ANONDEF_:           060A DEFINED AT LINE 970 IN MINT.asm
BREAK_:             0613 DEFINED AT LINE 976 IN MINT.asm
BREAK1:             061A DEFINED AT LINE 982 IN MINT.asm
                    > USED AT LINE 980 IN MINT.asm
CARRDEF_:           0622 DEFINED AT LINE 987 IN MINT.asm
CFETCH_:            0627 DEFINED AT LINE 991 IN MINT.asm
COMMENT_:           062E DEFINED AT LINE 998 IN MINT.asm
                    > USED AT LINE 1002 IN MINT.asm
CSTORE_:            0637 DEFINED AT LINE 1006 IN MINT.asm
DEPTH_:             063C DEFINED AT LINE 1012 IN MINT.asm
DEPTH:              063C DEFINED AT LINE 1013 IN MINT.asm
EMIT_:              064A DEFINED AT LINE 1022 IN MINT.asm
EXEC_:              0651 DEFINED AT LINE 1028 IN MINT.asm
EXEC1:              0656 DEFINED AT LINE 1031 IN MINT.asm
                    > USED AT LINE 1029 IN MINT.asm
EDITDEF_:           0659 DEFINED AT LINE 1036 IN MINT.asm
PROMPT_:            065E DEFINED AT LINE 1040 IN MINT.asm
GO_:                0663 DEFINED AT LINE 1045 IN MINT.asm
GO1:                0664 DEFINED AT LINE 1047 IN MINT.asm
                    > USED AT LINE 599 IN MINT.asm
GO2:                0673 DEFINED AT LINE 1057 IN MINT.asm
                    > USED AT LINE 1055 IN MINT.asm
GO3:                0676 DEFINED AT LINE 1060 IN MINT.asm
                    > USED AT LINE 1050 IN MINT.asm
INPORT_:            0678 DEFINED AT LINE 1063 IN MINT.asm
I_:                 0683 DEFINED AT LINE 1073 IN MINT.asm
J_:                 0689 DEFINED AT LINE 1078 IN MINT.asm
NEWLN_:             0693 DEFINED AT LINE 1085 IN MINT.asm
OUTPORT_:           0698 DEFINED AT LINE 1089 IN MINT.asm
PRINTSTK_:          06A1 DEFINED AT LINE 1098 IN MINT.asm
PRINTSTK:           06A1 DEFINED AT LINE 1099 IN MINT.asm
NUM:                06C1 DEFINED AT LINE 1121 IN MINT.asm
                    > USED AT LINE 715 IN MINT.asm
                    > USED AT LINE 776 IN MINT.asm
NUM0:               06CA DEFINED AT LINE 1127 IN MINT.asm
                    > USED AT LINE 1125 IN MINT.asm
NUM1:               06CB DEFINED AT LINE 1129 IN MINT.asm
                    > USED AT LINE 1146 IN MINT.asm
NUM2:               06E3 DEFINED AT LINE 1147 IN MINT.asm
                    > USED AT LINE 528 IN MINT.asm
                    > USED AT LINE 530 IN MINT.asm
                    > USED AT LINE 1132 IN MINT.asm
                    > USED AT LINE 1134 IN MINT.asm
NUM3:               06EE DEFINED AT LINE 1155 IN MINT.asm
                    > USED AT LINE 1150 IN MINT.asm
EDITDEF:            06F1 DEFINED AT LINE 1163 IN MINT.asm
                    > USED AT LINE 1037 IN MINT.asm
EDITDEF1:           070E DEFINED AT LINE 1182 IN MINT.asm
                    > USED AT LINE 1188 IN MINT.asm
EDITDEF2:           070F DEFINED AT LINE 1184 IN MINT.asm
                    > USED AT LINE 1181 IN MINT.asm
EDITDEF3:           0717 DEFINED AT LINE 1189 IN MINT.asm
                    > USED AT LINE 1176 IN MINT.asm
PRINTDEC:           0721 DEFINED AT LINE 1197 IN MINT.asm
                    > USED AT LINE 603 IN MINT.asm
PRINTDEC2:          0730 DEFINED AT LINE 1208 IN MINT.asm
                    > USED AT LINE 1199 IN MINT.asm
PRINTDEC4:          0752 DEFINED AT LINE 1224 IN MINT.asm
                    > USED AT LINE 1212 IN MINT.asm
                    > USED AT LINE 1214 IN MINT.asm
                    > USED AT LINE 1216 IN MINT.asm
                    > USED AT LINE 1218 IN MINT.asm
                    > USED AT LINE 1221 IN MINT.asm
PRINTDEC5:          0754 DEFINED AT LINE 1226 IN MINT.asm
                    > USED AT LINE 1229 IN MINT.asm
PRINTDEC6:          0764 DEFINED AT LINE 1238 IN MINT.asm
                    > USED AT LINE 1233 IN MINT.asm
PRINTDEC7:          0765 DEFINED AT LINE 1240 IN MINT.asm
                    > USED AT LINE 1237 IN MINT.asm
COMPNEXT:           0769 DEFINED AT LINE 1245 IN MINT.asm
                    > USED AT LINE 1262 IN MINT.asm
COMPNEXT1:          0777 DEFINED AT LINE 1255 IN MINT.asm
                    > USED AT LINE 1252 IN MINT.asm
ARRDEF:             077D DEFINED AT LINE 1259 IN MINT.asm
                    > USED AT LINE 778 IN MINT.asm
ARRDEF1:            077F DEFINED AT LINE 1261 IN MINT.asm
                    > USED AT LINE 989 IN MINT.asm
ARREND:             078F DEFINED AT LINE 1268 IN MINT.asm
                    > USED AT LINE 779 IN MINT.asm
ARREND2:            07A4 DEFINED AT LINE 1280 IN MINT.asm
                    > USED AT LINE 1277 IN MINT.asm
DEF:                07AB DEFINED AT LINE 1294 IN MINT.asm
                    > USED AT LINE 780 IN MINT.asm
DEF1:               07BB DEFINED AT LINE 1304 IN MINT.asm
                    > USED AT LINE 974 IN MINT.asm
                    > USED AT LINE 1311 IN MINT.asm
DEF2:               07C5 DEFINED AT LINE 1312 IN MINT.asm
                    > USED AT LINE 1310 IN MINT.asm
DEF3:               07C6 DEFINED AT LINE 1314 IN MINT.asm
DSIZE:              0080 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 12 IN ram.asm
LSIZE:              0080 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
VARS_SIZE:          0068 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 335 IN MINT.asm
                    > USED AT LINE 76 IN ram.asm
TIB:                0800 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 190 IN MINT.asm
                    > USED AT LINE 244 IN MINT.asm
                    > USED AT LINE 253 IN MINT.asm
                    > USED AT LINE 270 IN MINT.asm
                    > USED AT LINE 1175 IN MINT.asm
                    > USED AT LINE 1190 IN MINT.asm
RSTACK:             0980 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 315 IN MINT.asm
DSTACK:             0A00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 167 IN MINT.asm
                    > USED AT LINE 170 IN MINT.asm
                    > USED AT LINE 175 IN MINT.asm
                    > USED AT LINE 324 IN MINT.asm
                    > USED AT LINE 1017 IN MINT.asm
STACK:              0A00 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
LSTACK:             0A80 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 313 IN MINT.asm
OPCODES:            0B00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 340 IN MINT.asm
ALTCODES:           0B80 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 794 IN MINT.asm
MINTVARS:           0C00 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 962 IN MINT.asm
VLOOPSP:            0C30 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 314 IN MINT.asm
                    > USED AT LINE 893 IN MINT.asm
                    > USED AT LINE 902 IN MINT.asm
                    > USED AT LINE 927 IN MINT.asm
                    > USED AT LINE 948 IN MINT.asm
                    > USED AT LINE 1074 IN MINT.asm
                    > USED AT LINE 1079 IN MINT.asm
VBYTEMODE:          0C32 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1249 IN MINT.asm
                    > USED AT LINE 1263 IN MINT.asm
                    > USED AT LINE 1275 IN MINT.asm
TBPTR:              0C34 DEFINED AT LINE 31 IN ram.asm
RST08:              0C36 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0C38 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0C3A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0C3C DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0C3E DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0C40 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0C42 DEFINED AT LINE 39 IN ram.asm
INTVEC:             0C44 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0C46 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0C48 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0C4A DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            0C80 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 318 IN MINT.asm
                    > USED AT LINE 962 IN MINT.asm
VS0:                0C80 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 325 IN MINT.asm
VBASE16:            0C82 DEFINED AT LINE 49 IN ram.asm
VCARRY:             0C84 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 510 IN MINT.asm
VNS:                0C86 DEFINED AT LINE 51 IN ram.asm
VLASTDEF:           0C88 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 327 IN MINT.asm
                    > USED AT LINE 1297 IN MINT.asm
VHEAPPTR:           0C8E DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 329 IN MINT.asm
                    > USED AT LINE 972 IN MINT.asm
                    > USED AT LINE 1247 IN MINT.asm
                    > USED AT LINE 1256 IN MINT.asm
                    > USED AT LINE 1264 IN MINT.asm
                    > USED AT LINE 1272 IN MINT.asm
                    > USED AT LINE 1299 IN MINT.asm
                    > USED AT LINE 1315 IN MINT.asm
VTIBPTR:            0CA6 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 184 IN MINT.asm
                    > USED AT LINE 236 IN MINT.asm
                    > USED AT LINE 240 IN MINT.asm
                    > USED AT LINE 269 IN MINT.asm
                    > USED AT LINE 1193 IN MINT.asm
VARS:               0CB4 DEFINED AT LINE 76 IN ram.asm
                    > USED AT LINE 331 IN MINT.asm
                    > USED AT LINE 381 IN MINT.asm
HEAP:               0D1C DEFINED AT LINE 78 IN ram.asm
                    > USED AT LINE 328 IN MINT.asm
