0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A B0 0B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A B2 0B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A B4 0B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A B6 0B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A B8 0B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A BA 0B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A BE 0B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A C0 0B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                             ; 
0081                             ; 
0081                             ; putting this code here for now
0081                             ; needing to re-integrate support for RC2014
0081                             ; 
0081                             ; .if RC2014        
0081                             ; 
0081                             ; ; **************************************************************************
0081                             ; ; Serial Handling Etc
0081                             ; ; **************************************************************************
0081                             ; 
0081                             ; ; ************************SERIAL HANDLING ROUTINES**********************        
0081                             ; ;
0081                             ; ;        Includes drivers for 68B50 ACIA 
0081                             ; ;		 serial interface I/O primitive routines getchar and putchar
0081                             ; ;        printstring
0081                             ; ;        printdec
0081                             ; ;        printhex
0081                             ; ;        crlf         
0081                             ; 
0081                             ; ; **********************************************************************
0081                             ; ; **  Device Driver                             by Stephen C Cousins  **
0081                             ; ; **  Hardware:  RC2014                                               **
0081                             ; ; **  Interface: Serial 6850 ACIA                                     **
0081                             ; ; **********************************************************************
0081                             ; 
0081                             ; ; This module is the driver for the RC2014 serial I/O interface which is
0081                             ; ; based on the 6850 Asynchronous Communications Interface Adapter (ACIA)
0081                             ; ;
0081                             ; ; Base addresses for ACIA externally defined. eg:
0081                             ; kACIA1:    .EQU 0x80           ;Base address of serial ACIA #1
0081                             ; kACIA2:    .EQU 0x80           ;Base address of serial ACIA #2
0081                             ; ;
0081                             ; ; RC2014 addresses for 68B50 number 2:
0081                             ; ; 0x40   Control registers (read and write)
0081                             ; ; 0x41   Data registers (read and write)
0081                             ; ;
0081                             ; ; Control registers (read and write)
0081                             ; ; Bit   Control write              Control read
0081                             ; ;  0    Counter divide select 1    Receive data register full
0081                             ; ;  1    Counter divide select 2    Transmit data register empty
0081                             ; ;  2    Word select 1              Data carrier detect (/DCD) input
0081                             ; ;  3    Word seelct 2              Clear to send (/CTS) input
0081                             ; ;  4    Word select 3              Framing error
0081                             ; ;  5    Transmit contol 1          Receiver overrun
0081                             ; ;  6    Transmit control 2         Parity error
0081                             ; ;  7    Receive interrupt enable   Interrupt request
0081                             ; ;
0081                             ; ; Control register write
0081                             ; ; Bit   7   6   5   4   3   2   1   0
0081                             ; ;       |   |   |   |   |   |   |   |
0081                             ; ;       |   |   |   |   |   |   0   0     Clock divide 1
0081                             ; ;       |   |   |   |   |   |   0   1     Clock divide 16
0081                             ; ; >     |   |   |   |   |   |   1   0  >  Clock divide 64
0081                             ; ;       |   |   |   |   |   |   1   1     Master reset
0081                             ; ;       |   |   |   |   |   |
0081                             ; ;       |   |   |   0   0   0     7 data bits, even parity, 2 stop bits
0081                             ; ;       |   |   |   0   0   1     7 data bits, odd parity,  2 stop bits
0081                             ; ;       |   |   |   0   1   0     7 data bits, even parity, 1 stop bit
0081                             ; ;       |   |   |   0   1   1     7 data bits, odd parity,  1 stop bit
0081                             ; ;       |   |   |   1   0   0     8 data bits, no parity,   2 stop bits
0081                             ; ;       |   |   |   1   0   1  >  8 data bits, no parity,   1 stop bit
0081                             ; ;       |   |   |   1   1   0     8 data bits, even parity, 1 stop bit
0081                             ; ;       |   |   |   1   1   1     8 data bits, odd parity,  1 stop bit
0081                             ; ;       |   |   |
0081                             ; ;       |   0   0  >  /RTS = low (ready), tx interrupt disabled
0081                             ; ;       |   0   1     /RTS = low (ready), tx interrupt enabled
0081                             ; ;       |   1   0     /RTS = high (not ready), tx interrupt disabled 
0081                             ; ;       |   1   1     /RTS = low, tx break, tx interrupt disabled
0081                             ; ;       |
0081                             ; ;       0  >  Receive interrupt disabled
0081                             ; ;       1     Receive interrupt enabled
0081                             ; ;
0081                             ; ; Control register read
0081                             ; ; Bit   7   6   5   4   3   2   1   0
0081                             ; ;       |   |   |   |   |   |   |   |
0081                             ; ;       |   |   |   |   |   |   |   +-------  Receive data register full
0081                             ; ;       |   |   |   |   |   |   +-------  Transmit data register empty
0081                             ; ;       |   |   |   |   |   +-------  Data carrier detect (/DCD)
0081                             ; ;       |   |   |   |   +-------  Clear to send (/CTS)
0081                             ; ;       |   |   |   +-------  Framing error
0081                             ; ;       |   |   +-------  Receiver overrun 
0081                             ; ;       |   +-------  Parity error
0081                             ; ;       +-------  Interrupt request
0081                             ; 
0081                             ; ; 6850 #1 registers derived from base address (above)
0081                             ; kACIA1Cont: .EQU kACIA1+0       ;I/O address of control register
0081                             ; kACIA1Data: .EQU kACIA1+1       ;I/O address of data register
0081                             ; ; 6850 #2 registers derived from base address (above)
0081                             ; kACIA2Cont: .EQU kACIA2+0       ;I/O address of control register
0081                             ; kACIA2Data: .EQU kACIA2+1       ;I/O address of data register
0081                             ; 
0081                             ; ; Control register values
0081                             ; k6850Reset: .EQU 0b00000011     ;Master reset
0081                             ; k6850Init:  .EQU 0b00010110     ;No int, RTS low, 8+1, /64
0081                             ; 
0081                             ; ; Status (control) register bit numbers
0081                             ; k6850RxRdy: .EQU 0              ;Receive data available bit number
0081                             ; k6850TxRdy: .EQU 1              ;Transmit data empty bit number
0081                             ; 
0081                             ; ; Device detection, test 1
0081                             ; ; This test just reads from the devices' status (control) register
0081                             ; ; and looks for register bits in known states:
0081                             ; ; /CTS input bit = low
0081                             ; ; /DCD input bit = low
0081                             ; ; WARNING
0081                             ; ; Sometimes at power up the Tx data reg empty bit is zero, but
0081                             ; ; recovers after device initialised. So test 1 excludes this bit.
0081                             ; k6850Mask1: .EQU  0b00001100    ;Mask for known bits in control reg
0081                             ; k6850Test1: .EQU  0b00000000    ;Test value following masking
0081                             ; 
0081                             ; ; Device detection, test 2
0081                             ; ; This test just reads from the devices' status (control) register
0081                             ; ; and looks for register bits in known states:
0081                             ; ; /CTS input bit = low
0081                             ; ; /DCD input bit = low
0081                             ; ; Transmit data register empty bit = high
0081                             ; k6850Mask2: .EQU  0b00001110    ;Mask for known bits in control reg
0081                             ; k6850Test2: .EQU  0b00000010    ;Test value following masking
0081                             ; 
0081                             ; ; RC2014 serial 6850 initialise
0081                             ; ;   On entry: No parameters required
0081                             ; ;   On exit:  Z flagged if device is found and initialised
0081                             ; ;             AF BC DE HL not specified
0081                             ; ;             IX IY I AF" BC" DE" HL" preserved
0081                             ; ; If the device is found it is initialised
0081                             ; serial_init:
0081                             ; ; First look to see if the device is present
0081                             ; ; Test 1, just read from chip, do not write anything
0081                             ;         IN   A,(kACIA1Cont) ;Read status (control) register
0081                             ;         AND  k6850Mask1     ;Mask for known bits in control reg
0081                             ;         CP   k6850Test1     ;and check for known values
0081                             ;         RET  NZ             ;If not found return with NZ flag
0081                             ; ; Attempt to initialise the chip
0081                             ;         LD   A,k6850Reset   ;Master reset
0081                             ;         OUT  (kACIA1Cont),A ;Write to ACIA control register
0081                             ;         LD   A,k6850Init    ;No int, RTS low, 8+1, /64
0081                             ;         OUT  (kACIA1Cont),A ;Write to ACIA control register
0081                             ; ; Test 2, perform tests on chip following initialisation
0081                             ;         IN   A,(kACIA1Cont) ;Read status (control) register
0081                             ;         AND  k6850Mask2     ;Mask for known bits in control reg
0081                             ;         CP   k6850Test2     ;Test value following masking
0081                             ; ;           RET  NZ             ;Return not found NZ flagged
0081                             ;         RET                 ;Return Z if found, NZ if not
0081                             ; 
0081                             ; 
0081                             ; ; RC2014 serial 6850 input character
0081                             ; ;   On entry: No parameters required
0081                             ; ;   On exit:  A = Character input from the device
0081                             ; ;             NZ flagged if character input
0081                             ; ;             BC DE IX IY I AF" BC" DE" HL" preserved
0081                             ; ;             HL destroyed
0081                             ; ; This function does not return until a character is available
0081                             ; 
0081                             ; getchar:
0081                             ;         IN   A,(kACIA1Cont) ;Address of status register
0081                             ;         AND  $01            ;Receive byte available
0081                             ;         JR   Z, getchar     ;Return Z if no character
0081                             ;         IN   A,(kACIA1Data) ;Read data byte
0081                             ;         RET                 ;NZ flagged if character input
0081                             ; 
0081                             ; 
0081                             ; ; RC2014 serial 6850 output character
0081                             ; ;   On entry: A = Character to be output to the device
0081                             ; ;   On exit:  If character output successful (eg. device was ready)
0081                             ; ;               NZ flagged and A != 0
0081                             ; ;             If character output failed (eg. device busy)
0081                             ; ;               Z flagged and A = Character to output
0081                             ; ;             BC DE HL IX IY I AF" BC" DE" HL" preserved
0081                             ; putchar:
0081                             ;         PUSH BC
0081                             ;         LD   C,kACIA1Cont   ;ACIA control register
0081                             ;         IN   B,(C)          ;Read ACIA control register
0081                             ;         BIT  k6850TxRdy,B   ;Transmit register full?
0081                             ;         POP  BC
0081                             ;         JR  Z, putchar      ;Return Z as character not output
0081                             ;         OUT  (kACIA1Data),A ;Write data byte
0081                             ;         OR   0xFF           ;Return success A=0xFF and NZ flagged
0081                             ;         RET
0081                             ; 
0081                             ; .endif        
0081                             ; 
0081                GETCHAR:      
0081   2A C2 0B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A C4 0B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 09               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 B0 0B               LD   (RST08),HL   
0094   22 B2 0B               LD   (RST10),HL   
0097   22 B4 0B               LD   (RST18),HL   
009A   22 B6 0B               LD   (RST20),HL   
009D   22 B8 0B               LD   (RST28),HL   
00A0   22 BA 0B               LD   (RST30),HL   
00A3   22 BE 0B               LD   (INTVEC),HL   
00A6   22 C0 0B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 C2 0B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 C4 0B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;        MINT1_18 Micro-Interpreter for the Z80
00C6                             ; 
00C6                             ;        Ken Boak John Hardy and Craig Jones  December 2nd 2021
00C6                             ; 
00C6                             ;		 Multiplication stack bug fixed
00C6                             ; 
00C6                             ;        Comparison Operators < and > return 0 (false) when equality is detected
00C6                             ;        Printhex routine shortened
00C6                             ; 
00C6                             ; 
00C6                             ;        Hex entry bug fixed 28-11-21
00C6                             ;        Decimal entry bug fixed  24-11-21
00C6                             ;        Division routine shortened by 13 bytes 24/11
00C6                             ; 
00C6                             ; 
00C6                             ;        Includes serial routines getchar and putchar
00C6                             ;        printstring
00C6                             ;        printdec
00C6                             ;        printhex
00C6                             ;        crlf
00C6                             ; 
00C6                             ;        Register Assignment:
00C6                             ; 
00C6                             ;        BC is the instruction pointer IP
00C6                             ;        DE is a working register and 2nd on stack NOS
00C6                             ;        HL is a working register and Top of stack TOS
00C6                             ;        SP is data stack pointer
00C6                             ;        IX is used to implement the return stack
00C6                             ;        IY is used as a jump back to NEXT
00C6                             ; 
00C6                             ;        All commands accessed via a byte wide look up table
00C6                             ; 
00C6                             ;        Heap used for command storage (HERE)
00C6                             ; 
00C6                             ;        Primitives are on two consecutive pages using a trampoline jump to the 2nd page.
00C6                             ; 
00C6                             ;        This allows single byte opcodes reducing the dispatch time from
00C6                             ;        64 t states to 33 t states
00C6                             ; 
00C6                             ; 
00C6                             ;        User defined commands and mintVars
00C6                             ; 
00C6                             ;        User Commands  A-Z
00C6                             ;        User mintVars a-z
00C6                             ; 
00C6                             ;        Commands now available:
00C6                             ; 
00C6                             ;        Maths
00C6                             ; 
00C6                             ;        +     ADD
00C6                             ;		 -     SUB
00C6                             ;        *     MUL     (max product 65535)
00C6                             ;        /     DIV     Returns quotient and remainder
00C6                             ;        _     NEG
00C6                             ; 
00C6                             ;        }     Shift Right (2/)
00C6                             ;        {     Shift Left  (2*)
00C6                             ; 
00C6                             ;        Comparison - compare the top two elements on the stack
00C6                             ;        Puts 1 on the stack if condition is true, 0 if false
00C6                             ; 
00C6                             ;        <     LT
00C6                             ;        =     EQ
00C6                             ;        >     GT
00C6                             ; 
00C6                             ;        Logic
00C6                             ; 
00C6                             ;        &     AND
00C6                             ;        |     OR
00C6                             ;        ^     XOR
00C6                             ;        ~     INV
00C6                             ; 
00C6                             ;        Stack
00C6                             ; 
00C6                             ;        "     DUP
00C6                             ;        '     DROP
00C6                             ;        $     SWAP
00C6                             ;		 %     OVER
00C6                             ;        .     DOT     (Print the value of the top of stack as a decimal)
00C6                             ;        ,     COMMA   (Print the value of the top of stack as a hexadecimal)
00C6                             ;		 #     HEX     Accept a hexadecimal number
00C6                             ; 
00C6                             ;        Memory
00C6                             ; 
00C6                             ;        @     FETCH
00C6                             ;        !     STORE
00C6                             ; 
00C6                             ;        User Definitions
00C6                             ; 
00C6                             ;        :     Start a user definition
00C6                             ;        ;     End a user definition
00C6                             ; 
00C6                             ;        \     QUIT    (Print OK and return to monitor)
00C6                             ; 
00C6                             ; 
00C6                             ;        Loops    - execute the code between parenthesis
00C6                             ; 
00C6                             ;        The user variable i is used as the loop counter
00C6                             ;        It is decremented every time the loop is executed
00C6                             ; 
00C6                             ;        10(repeat this code 10 times)
00C6                             ; 
00C6                             ;        0(skip this code)
00C6                             ; 
00C6                             ;        1(execute this code only once)
00C6                             ; 
00C6                             ;        a@ b@ = (_print this if a=b_)
00C6                             ; 
00C6                             ;       1000(i@.)    Print out the value of i from 999 to 0
00C6                             ; 
00C6                             ;       10(a@ 1+ a! a@ .)  Increment a 10 times and print it out
00C6                             ; 
00C6                             ;       User Commands are allocated to uppercase alpha characters A to Z
00C6                             ; 
00C6                             ;       A user command can be defined by starting with a colon and
00C6                             ;       ending with a semicolon
00C6                             ; 
00C6                             ;       Example  :A 123 456 + . ;
00C6                             ; 
00C6                             ;       The A character represents a fixed address for the User routine
00C6                             ;       The interpreter copies all the characters after the A to a text buffer
00C6                             ;       located at address A
00C6                             ;       Each time A is encountered (outside of a colon definition)
00C6                             ;       it will execute the code  located there i.e. 123 456 + .
00C6                             ; 
00C6                             ;       mintVars are associated with lowercase characters a-z
00C6                             ;       Each variable is allocated 2 bytes located on even addresses
00C6                             ;       They run contiguously from $A800 (a) to $A830 (z)
00C6                             ;       They are accessed using the fetch and store commands @ and !
00C6                             ; 
00C6                             ;       Examples:
00C6                             ; 
00C6                             ;       1234 a!     store 1234 in a
00C6                             ; 
00C6                             ;       b@ .        fetch the value from b and print it out
00C6                             ; 
00C6                             ;       a@ b@ + .   fetch values from a and b, add them together and print the sum
00C6                             ; 
00C6                             ;       a@ b!       copy the value in a and store it in b
00C6                             ; 
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                             ;ROMSTART    EQU $0
00C6                             ;RAMSTART    EQU $800
00C6                             ;EXTENDED    EQU 0
00C6                             ;ROMSIZE     EQU $800
00C6                DSIZE:    EQU   $100   
00C6                RSIZE:    EQU   $100   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                             ;        .ORG ROMSTART
00C6                             ; 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
00C6                             ;        JP start
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180                MINT:        
0180   31 00 09               LD   SP,DSTACK   
0183   CD 9A 01               CALL   initialize   
0186   CD 33 02               CALL   ENTER   
0189   60 4D 49 4E 54 20 56 31 2E 30 60 5C 4E 00 .CSTR   "`MINT V1.0`\\N"   
0197   C3 BB 01               JP   interpret   
019A                INITIALIZE:      
019A   DD 21 00 0A            LD   IX,RSTACK   
019E   FD 21 1A 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01A2   21 60 03               LD   HL,iSysConsts   
01A5   11 00 0B               LD   DE,sysConsts   
01A8   01 20 00               LD   BC,16 * 2   
01AB   ED B0                  LDIR      
01AD   21 78 0B               LD   HL,defs   
01B0   06 1A                  LD   B,26   
01B2                INIT1:       
01B2   36 98                  LD   (HL),lsb(empty_)   
01B4   23                     INC   HL   
01B5   36 02                  LD   (HL),msb(empty_)   
01B7   23                     INC   HL   
01B8   10 F8                  DJNZ   init1   
01BA   C9                     RET      
01BB                INTERPRET:      
01BB   CD 33 02               CALL   ENTER   
01BE   5C 4E 60 3E 20 60 00   .CSTR   "\\N`> `"   
01C5                INTERPRET1:      ; used by tests
01C5   01 00 00               LD   BC,0   ; load BC with offset into TIB
01C8   ED 43 14 0B            LD   (vTIBPtr),BC   
01CC                INTERPRET2:      ; calc nesting (a macro might have changed it)
01CC   1E 00                  LD   E,0   ; initilize nesting value
01CE   C5                     PUSH   BC   ; save offset into TIB,
01CF                             ; BC is also the count of chars in TIB
01CF   21 00 0A               LD   HL,TIB   ; HL is start of TIB
01D2   18 06                  JR   interpret4   
01D4                INTERPRET3:      
01D4   7E                     LD   A,(HL)   ; A = char in TIB
01D5   23                     INC   HL   ; inc pointer into TIB
01D6   0B                     DEC   BC   ; dec count of chars in TIB
01D7   CD D2 07               CALL   nesting   ; update nesting value
01DA                INTERPRET4:      
01DA   79                     LD   A,C   ; is count zero?
01DB   B0                     OR   B   
01DC   20 F6                  JR   NZ,interpret3   ; if not loop
01DE   C1                     POP   BC   ; restore offset into TIB
01DF                             ; *******************************************************************
01DF                             ; Wait for a character from the serial input (keyboard)
01DF                             ; and store it in the text buffer. Keep accepting characters,
01DF                             ; increasing the instruction pointer BC - until a newline received.
01DF                             ; *******************************************************************
01DF                WAITCHAR:      
01DF   CD 81 00               CALL   getchar   ; loop around waiting for character
01E2   FE 20                  CP   $20   
01E4   30 0D                  JR   NC,waitchar1   
01E6   FE 00                  CP   $0   ; is it end of string?
01E8   28 28                  JR   Z,waitchar4   
01EA   FE 0D                  CP   "\r"   ; carriage return?
01EC   28 13                  JR   Z,waitchar3   
01EE   16 00                  LD   D,0   
01F0   C3 7E 02               JP   macro   
01F3                WAITCHAR1:      
01F3   21 00 0A               LD   HL,TIB   
01F6   09                     ADD   HL,BC   
01F7   77                     LD   (HL),A   ; store the character in textbuf
01F8   03                     INC   BC   
01F9   CD 85 00               CALL   putchar   ; echo character to screen
01FC   CD D2 07               CALL   nesting   
01FF   18 DE                  JR   waitchar   ; wait for next character
0201                WAITCHAR3:      
0201   21 00 0A               LD   HL,TIB   
0204   09                     ADD   HL,BC   
0205   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0207   03                     INC   BC   
0208   CD E8 05               CALL   crlf   ; echo character to screen
020B   7B                     LD   A,E   ; if zero nesting append and ETX after \r
020C   B7                     OR   A   
020D   20 D0                  JR   NZ,waitchar   
020F   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0211   03                     INC   BC   
0212                WAITCHAR4:      
0212   ED 43 14 0B            LD   (vTIBPtr),BC   
0216   01 00 0A               LD   BC,TIB   ; Instructions stored on heap at address HERE
0219   0B                     DEC   BC   
021A                             ; Drop into the NEXT and dispatch routines
021A                             ; ********************************************************************************
021A                             ; 
021A                             ; Dispatch Routine.
021A                             ; 
021A                             ; Get the next character and form a 1 byte jump address
021A                             ; 
021A                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
021A                             ; jump to the selected function.
021A                             ; 
021A                             ; Individual handler routines will deal with each category:
021A                             ; 
021A                             ; 1. Detect characters A-Z and jump to the User Command handler routine
021A                             ; 
021A                             ; 2. Detect characters a-z and jump to the variable handler routine
021A                             ; 
021A                             ; 3. All other characters are punctuation and cause a jump to the associated
021A                             ; primitive code.
021A                             ; 
021A                             ; Instruction Pointer IP BC is incremented
021A                             ; 
021A                             ; *********************************************************************************
021A                NEXT:        
021A   03                     INC   BC   ; 6t    Increment the IP
021B   0A                     LD   A,(BC)   ; 7t    Get the next character and dispatch
021C                             ; 
021C                DISPATCH:      
021C   FE 00                  CP   0   ;       NULL? exit Mint
021E   CA 6A 04               JP   Z,exit_   
0221   FE 03                  CP   $03   ;       ETX? interpret next line
0223   CA BB 01               JP   Z,interpret   
0226   D6 20                  SUB   " "   ; 7t    remove char offset
0228   38 F0                  JR   C,NEXT   ;       ignore char
022A   11 00 03               LD   DE,opcodes   ; 7t    Start address of jump table
022D   5F                     LD   E,A   ; 4t    Index into table
022E   1A                     LD   A,(DE)   ; 7t    get low jump address
022F   26 04                  LD   H,msb(page4)   ; 7t    Load H with the 1st page address
0231   6F                     LD   L,A   ; 4t    and put into L
0232   E9                     JP   (HL)   ; 4t    Jump to routine
0233                ENTER:       
0233   60 69                  LD   HL,BC   
0235   CD D2 05               CALL   rpush   ; save Instruction Pointer
0238   C1                     POP   BC   
0239   0B                     DEC   BC   
023A   FD E9                  JP   (IY)   ; Execute code from User def
023C                PRINTDEC:      
023C                             ;Number in hl to decimal ASCII
023C                             ;inputs:	hl = number to ASCII
023C                             ;example: hl=300 outputs "00300"
023C                             ;destroys: af, de, hl
023C                DISPHL:      
023C   11 F0 D8               LD   de,-10000   
023F   CD 55 02               CALL   Num1   
0242   11 18 FC               LD   de,-1000   
0245   CD 55 02               CALL   Num1   
0248   11 9C FF               LD   de,-100   
024B   CD 55 02               CALL   Num1   
024E   1E F6                  LD   e,-10   
0250   CD 55 02               CALL   Num1   
0253   1E FF                  LD   e,-1   
0255                NUM1:        
0255   3E 2F                  LD   a,"0"-1   
0257                NUM2:        
0257   3C                     INC   a   
0258   19                     ADD   hl,de   
0259   38 FC                  JR   c,Num2   
025B   ED 52                  SBC   hl,de   
025D   C3 85 00               JP   putchar   
0260                             ; ARRAY compilation routine
0260                COMPNEXT:      
0260   D1                     POP   DE   ; DE = return address
0261   2A 1E 0B               LD   HL,(vHeapPtr)   ; load heap ptr
0264   73                     LD   (HL),E   ; store lsb
0265   3A AE 0B               LD   A,(vByteMode)   
0268   23                     INC   HL   
0269   B7                     OR   A   
026A   20 02                  JR   NZ,compNext1   
026C   72                     LD   (HL),D   
026D   23                     INC   HL   
026E                COMPNEXT1:      
026E   22 1E 0B               LD   (vHeapPtr),HL   ; save heap ptr
0271   C3 1A 02               JP   NEXT   
0274                SPACE:       
0274   3E 20                  LD   A," "   
0276   C3 85 00               JP   putchar   
0279                WRITECHAR:      
0279   12                     LD   (DE),A   
027A   13                     INC   DE   
027B   C3 85 00               JP   putchar   
027E                MACRO:       
027E   ED 43 14 0B            LD   (vTIBPtr),BC   
0282   21 80 03               LD   HL,ctrlCodes   
0285   85                     ADD   A,L   
0286   6F                     LD   L,A   
0287   5E                     LD   E,(HL)   
0288   16 02                  LD   D,msb(macros)   
028A   D5                     PUSH   DE   
028B   CD 33 02               CALL   ENTER   
028E   5C 47 00               .CSTR   "\\G"   
0291   ED 4B 14 0B            LD   BC,(vTIBPtr)   
0295   C3 CC 01               JP   interpret2   
0298                             ; **************************************************************************
0298                             ; Macros must be written in Mint and end with ;
0298                             ; this code must not span pages
0298                             ; **************************************************************************
0298                MACROS:      
0298                EMPTY_:      
0298   3B 00                  .CSTR   ";"   
029A                BACKSP_:      
029A   5C 63 40 30 3D 30 3D 28 31 5F 5C 63 5C 2B 38 5C 45 60 20 60 38 5C 45 29 3B 00 .CSTR   "\\c@0=0=(1_\\c\\+8\\E` `8\\E);"   
02B4                EDIT_:       
02B4   60 3F 60 5C 4B 5C 4E 60 3E 20 60 5C 5E 41 2D 5C 5A 3B 00 .CSTR   "`?`\\K\\N`> `\\^A-\\Z;"   
02C7                LIST_:       
02C7   5C 4E 32 36 28 5C 69 40 5C 5A 5C 63 40 30 3E 28 5C 4E 29 29 5C 4E 60 3E 20 60 3B 00 .CSTR   "\\N26(\\i@\\Z\\c@0>(\\N))\\N`> `;"   
02E3                PRINTSTACK_:      
02E3   60 3D 3E 20 60 5C 50 5C 4E 5C 4E 60 3E 20 60 3B 00 .CSTR   "`=> `\\P\\N\\N`> `;"   
02F4                TOGGLEBASE_:      
02F4   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
02FE                             ; **************************************************************************
02FE                             ; Page 2  Jump Tables
02FE                             ; **************************************************************************
02FE                          ALIGN   $100   
0300                OPCODES:      
0300   84                     DB   lsb(nop_)   ;    SP
0301   99                     DB   lsb(store_)   ;    !
0302   65                     DB   lsb(dup_)   ;    "
0303   7B                     DB   lsb(hex_)   ;    #
0304   A0                     DB   lsb(swap_)   ;    $
0305   8A                     DB   lsb(over_)   ;    %
0306   04                     DB   lsb(and_)   ;    &
0307   62                     DB   lsb(drop_)   ;    '
0308   32                     DB   lsb(begin_)   ;    (
0309   ED                     DB   lsb(again_)   ;    )
030A   EF                     DB   lsb(mul_)   ;    *
030B   26                     DB   lsb(add_)   ;    +
030C   7E                     DB   lsb(hexp_)   ;    ,
030D   B8                     DB   lsb(sub_)   ;    -
030E   4E                     DB   lsb(dot_)   ;    .
030F   F1                     DB   lsb(div_)   ;    /
0310   87                     DB   lsb(num_)   ;    0
0311   87                     DB   lsb(num_)   ;    1
0312   87                     DB   lsb(num_)   ;    2
0313   87                     DB   lsb(num_)   ;    3
0314   87                     DB   lsb(num_)   ;    4
0315   87                     DB   lsb(num_)   ;    5
0316   87                     DB   lsb(num_)   ;    6
0317   87                     DB   lsb(num_)   ;    7
0318   87                     DB   lsb(num_)   ;    8
0319   87                     DB   lsb(num_)   ;    9
031A   4B                     DB   lsb(def_)   ;    :
031B   92                     DB   lsb(ret_)   ;    ;
031C   D0                     DB   lsb(lt_)   ;    <
031D   C0                     DB   lsb(eq_)   ;    =
031E   CC                     DB   lsb(gt_)   ;    >
031F   F3                     DB   lsb(getRef_)   ;    ?
0320   74                     DB   lsb(fetch_)   ;    @
0321   35                     DB   lsb(call_)   ;    A
0322   35                     DB   lsb(call_)   ;    B
0323   35                     DB   lsb(call_)   ;    C
0324   35                     DB   lsb(call_)   ;    D
0325   35                     DB   lsb(call_)   ;    E
0326   35                     DB   lsb(call_)   ;    F
0327   35                     DB   lsb(call_)   ;    G
0328   35                     DB   lsb(call_)   ;    H
0329   35                     DB   lsb(call_)   ;    I
032A   35                     DB   lsb(call_)   ;    J
032B   35                     DB   lsb(call_)   ;    K
032C   35                     DB   lsb(call_)   ;    L
032D   35                     DB   lsb(call_)   ;    M
032E   35                     DB   lsb(call_)   ;    N
032F   35                     DB   lsb(call_)   ;    O
0330   35                     DB   lsb(call_)   ;    P
0331   35                     DB   lsb(call_)   ;    Q
0332   35                     DB   lsb(call_)   ;    R
0333   35                     DB   lsb(call_)   ;    S
0334   35                     DB   lsb(call_)   ;    T
0335   35                     DB   lsb(call_)   ;    U
0336   35                     DB   lsb(call_)   ;    V
0337   35                     DB   lsb(call_)   ;    W
0338   35                     DB   lsb(call_)   ;    X
0339   35                     DB   lsb(call_)   ;    Y
033A   35                     DB   lsb(call_)   ;    Z
033B   2C                     DB   lsb(arrDef_)   ;    [
033C   00                     DB   lsb(alt_)   ;    \
033D   2F                     DB   lsb(arrEnd_)   ;    ]
033E   18                     DB   lsb(xor_)   ;    ^
033F   B2                     DB   lsb(neg_)   ;    _
0340   EB                     DB   lsb(str_)   ;    `
0341   E1                     DB   lsb(var_)   ;    a
0342   E1                     DB   lsb(var_)   ;    b
0343   E1                     DB   lsb(var_)   ;    c
0344   E1                     DB   lsb(var_)   ;    d
0345   E1                     DB   lsb(var_)   ;    e
0346   E1                     DB   lsb(var_)   ;    f
0347   E1                     DB   lsb(var_)   ;    g
0348   E1                     DB   lsb(var_)   ;    h
0349   E1                     DB   lsb(var_)   ;    i
034A   E1                     DB   lsb(var_)   ;    j
034B   E1                     DB   lsb(var_)   ;    k
034C   E1                     DB   lsb(var_)   ;    l
034D   E1                     DB   lsb(var_)   ;    m
034E   E1                     DB   lsb(var_)   ;    n
034F   E1                     DB   lsb(var_)   ;    o
0350   E1                     DB   lsb(var_)   ;    p
0351   E1                     DB   lsb(var_)   ;    q
0352   E1                     DB   lsb(var_)   ;    r
0353   E1                     DB   lsb(var_)   ;    s
0354   E1                     DB   lsb(var_)   ;    t
0355   E1                     DB   lsb(var_)   ;    u
0356   E1                     DB   lsb(var_)   ;    v
0357   E1                     DB   lsb(var_)   ;    w
0358   E1                     DB   lsb(var_)   ;    x
0359   E1                     DB   lsb(var_)   ;    y
035A   E1                     DB   lsb(var_)   ;    z
035B   A5                     DB   lsb(shl_)   ;    {
035C   0F                     DB   lsb(or_)   ;    |
035D   AA                     DB   lsb(shr_)   ;    }
035E   21                     DB   lsb(inv_)   ;    ~
035F   84                     DB   lsb(nop_)   ;    backspace
0360                             ; ***********************************************************************
0360                             ; Initial values for user mintVars		
0360                             ; ***********************************************************************		
0360                ISYSCONSTS:      
0360   00 09                  DW   dStack   ; \0 cS0
0362   00 0A                  DW   TIB   ; \1 cTIB
0364   78 0B                  DW   defs   ; \2 cDefs
0366   44 0B                  DW   vars   ; \3 cVars
0368   00 03                  DW   opcodes   ; \4 cOpcodes
036A   98 02                  DW   macros   ; \5 cMacros
036C   10 0B                  DW   userVars   ; \6 cUserVars
036E   00 00                  DW   0   ; \7
0370                IUSERVARS:      
0370   F2 05                  DW   alt1   ; a vAltCodes
0372   00 00                  DW   FALSE   ; b vBase16
0374   00 00                  DW   0   ; c vTIBPtr
0376   00 00                  DW   0   ; d putChar
0378   00 00                  DW   0   ; e enter
037A   00 00                  DW   0   ; f vIFTEMode
037C   00 00                  DW   0   ; g vByteMode
037E   80 0C                  DW   HEAP   ; h vHeapPtr
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   98                     DB   lsb(empty_)   ; NUL ^@
0381   98                     DB   lsb(empty_)   ; SOH ^A
0382   F4                     DB   lsb(toggleBase_)   ; STX ^B
0383   98                     DB   lsb(empty_)   ; ETX ^C
0384   98                     DB   lsb(empty_)   ; EOT ^D
0385   B4                     DB   lsb(edit_)   ; ENQ ^E
0386   98                     DB   lsb(empty_)   ; ACK ^F
0387   98                     DB   lsb(empty_)   ; BEL ^G
0388   9A                     DB   lsb(backsp_)   ; BS  ^H
0389   98                     DB   lsb(empty_)   ; TAB ^I
038A   98                     DB   lsb(empty_)   ; LF  ^J
038B   98                     DB   lsb(empty_)   ; VT  ^K
038C   C7                     DB   lsb(list_)   ; FF  ^L
038D   98                     DB   lsb(empty_)   ; CR  ^M
038E   98                     DB   lsb(empty_)   ; SO  ^N
038F   98                     DB   lsb(empty_)   ; SI  ^O
0390   E3                     DB   lsb(printStack_)   ; DLE ^P
0391   98                     DB   lsb(empty_)   ; DC1 ^Q
0392   98                     DB   lsb(empty_)   ; DC2 ^R
0393   98                     DB   lsb(empty_)   ; DC3 ^S
0394   98                     DB   lsb(empty_)   ; DC4 ^T
0395   98                     DB   lsb(empty_)   ; NAK ^U
0396   98                     DB   lsb(empty_)   ; SYN ^V
0397   98                     DB   lsb(empty_)   ; ETB ^W
0398   98                     DB   lsb(empty_)   ; CAN ^X
0399   98                     DB   lsb(empty_)   ; EM  ^Y
039A   98                     DB   lsb(empty_)   ; SUB ^Z
039B   98                     DB   lsb(empty_)   ; ESC ^[
039C   98                     DB   lsb(empty_)   ; FS  ^\
039D   98                     DB   lsb(empty_)   ; GS  ^]
039E   98                     DB   lsb(empty_)   ; RS  ^^
039F   98                     DB   lsb(empty_)   ; US  ^_)
03A0   0A                     DB   lsb(aNop_)   ; SP  ^`
03A1   1D                     DB   lsb(cStore_)   ;    !
03A2   0A                     DB   lsb(aNop_)   ;    "
03A3   0A                     DB   lsb(aNop_)   ;    #
03A4   0A                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   0A                     DB   lsb(aNop_)   ;    %
03A6   0A                     DB   lsb(aNop_)   ;    &
03A7   0A                     DB   lsb(aNop_)   ;    '
03A8   3B                     DB   lsb(ifte_)   ;    (
03A9   0A                     DB   lsb(aNop_)   ;    )
03AA   0A                     DB   lsb(aNop_)   ;    *
03AB   6C                     DB   lsb(incr_)   ;    +  ( adr -- ) decrements variable at address
03AC   0A                     DB   lsb(aNop_)   ;    ,
03AD   0A                     DB   lsb(aNop_)   ;    -
03AE   0A                     DB   lsb(aNop_)   ;    .
03AF   0A                     DB   lsb(aNop_)   ;    /
03B0   95                     DB   lsb(sysConst_)   ;    0  ( -- adr ) start of data stack constant
03B1   95                     DB   lsb(sysConst_)   ;    1  ; returns HERE variable
03B2   95                     DB   lsb(sysConst_)   ;    2  ( -- adr ) TIBPtr variable
03B3   95                     DB   lsb(sysConst_)   ;    3  ( -- adr ) isHex variable
03B4   95                     DB   lsb(sysConst_)   ;    4
03B5   95                     DB   lsb(sysConst_)   ;    5
03B6   95                     DB   lsb(sysConst_)   ;    6
03B7   95                     DB   lsb(sysConst_)   ;    7
03B8   0A                     DB   lsb(aNop_)   ;    8
03B9   0A                     DB   lsb(aNop_)   ;    9
03BA   0A                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   0A                     DB   lsb(aNop_)   ;    ;
03BC   0A                     DB   lsb(aNop_)   ;    <
03BD   0A                     DB   lsb(aNop_)   ;    =
03BE   0A                     DB   lsb(aNop_)   ;    >
03BF   0A                     DB   lsb(aNop_)   ;    ?
03C0   05                     DB   lsb(cFetch_)   ;    @
03C1   0A                     DB   lsb(aNop_)   ;    A
03C2   0A                     DB   lsb(aNop_)   ;    B
03C3   84                     DB   lsb(nop_)   ;    C
03C4   22                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   34                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   0A                     DB   lsb(aNop_)   ;    F
03C7   55                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   0A                     DB   lsb(aNop_)   ;    H
03C9   77                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   0A                     DB   lsb(aNop_)   ;    J
03CB   8C                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   A0                     DB   lsb(least_)   ;    L  ( a b -- c ) return the smallest value
03CD   A8                     DB   lsb(most_)   ;    M  ( a b -- c ) return the largest value
03CE   B4                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   B9                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   E6                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   91                     DB   lsb(quit_)   ;    Q  quits from Mint REPL
03D2   C2                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   0A                     DB   lsb(aNop_)   ;    S
03D4   0A                     DB   lsb(aNop_)   ;    T
03D5   0A                     DB   lsb(aNop_)   ;    U
03D6   0A                     DB   lsb(aNop_)   ;    V
03D7   D5                     DB   lsb(while_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   4D                     DB   lsb(exec_)   ;    X
03D9   0A                     DB   lsb(aNop_)   ;    Y
03DA   E4                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   14                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   0A                     DB   lsb(aNop_)   ;    ]
03DE   0C                     DB   lsb(charCode_)   ;    ^
03DF   C9                     DB   lsb(sign_)   ;    _)  ( n -- b ) returns true if -ve
03E0   0A                     DB   lsb(aNop_)   ;    `
03E1   5E                     DB   lsb(userVar_)   ;    a
03E2   5E                     DB   lsb(userVar_)   ;    b  ; base16 variable
03E3   5E                     DB   lsb(userVar_)   ;    c  ; TIBPtr variable
03E4   5E                     DB   lsb(userVar_)   ;    d
03E5   5E                     DB   lsb(userVar_)   ;    e
03E6   5E                     DB   lsb(userVar_)   ;    f
03E7   5E                     DB   lsb(userVar_)   ;    g
03E8   5E                     DB   lsb(userVar_)   ;    h  ; heap ptr variable
03E9   68                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   82                     DB   lsb(j_)   ;    j  ; returns index variable of outer loop
03EB   5E                     DB   lsb(userVar_)   ;    k
03EC   5E                     DB   lsb(userVar_)   ;    l
03ED   5E                     DB   lsb(userVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   5E                     DB   lsb(userVar_)   ;    n
03EF   5E                     DB   lsb(userVar_)   ;    o
03F0   5E                     DB   lsb(userVar_)   ;    p
03F1   5E                     DB   lsb(userVar_)   ;    q
03F2   5E                     DB   lsb(userVar_)   ;    r
03F3   5E                     DB   lsb(userVar_)   ;    s
03F4   5E                     DB   lsb(userVar_)   ;    t
03F5   5E                     DB   lsb(userVar_)   ;    u
03F6   5E                     DB   lsb(userVar_)   ;    v
03F7   5E                     DB   lsb(userVar_)   ;    w
03F8   5E                     DB   lsb(userVar_)   ;    x
03F9   5E                     DB   lsb(userVar_)   ;    y
03FA   5E                     DB   lsb(userVar_)   ;    z
03FB   0A                     DB   lsb(aNop_)   ;    {
03FC   0A                     DB   lsb(aNop_)   ;    |
03FD   0A                     DB   lsb(aNop_)   ;    }
03FE   0A                     DB   lsb(aNop_)   ;    ~
03FF   0A                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                ALT_:        
0400   2A 10 0B               LD   HL,(vAlt)   
0403   E9                     JP   (HL)   
0404                AND_:        
0404   D1                     POP   DE   ; 10t Bitwise AND the top 2 elements of the stack
0405   E1                     POP   HL   ; 10t
0406   7B                     LD   A,E   ; 4t
0407   A5                     AND   L   ; 4t
0408   6F                     LD   L,A   ; 4t
0409   7A                     LD   A,D   ; 4t
040A   A4                     AND   H   ; 4t
040B                AND1:        
040B   67                     LD   H,A   ; 4t
040C   E5                     PUSH   HL   ; 11t
040D   FD E9                  JP   (IY)   ; 8t
040F                             ; 63t
040F                OR_:         
040F   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
0410   E1                     POP   HL   
0411   7B                     LD   A,E   
0412   B5                     OR   L   
0413   6F                     LD   L,A   
0414   7A                     LD   A,D   
0415   B4                     OR   H   
0416   18 F3                  JR   and1   
0418                XOR_:        
0418   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0419                XOR1:        
0419   E1                     POP   HL   
041A   7B                     LD   A,E   
041B   AD                     XOR   L   
041C   6F                     LD   L,A   
041D   7A                     LD   A,D   
041E   AC                     XOR   H   
041F   18 EA                  JR   and1   
0421                INV_:        ; Bitwise INVert the top member of the stack
0421   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0424   18 F3                  JR   xor1   
0426                ADD_:        ; Add the top 2 members of the stack
0426   D1                     POP   DE   ; 10t
0427   E1                     POP   HL   ; 10t
0428   19                     ADD   HL,DE   ; 11t
0429   E5                     PUSH   HL   ; 11t
042A   FD E9                  JP   (IY)   ; 8t
042C                             ; 50t
042C   C3 41 07     ARRDEF_:   JP   arrDef   
042F   C3 53 07     ARREND_:   JP   arrEnd   
0432   C3 7D 05     BEGIN_:   JP   begin   
0435                CALL_:       
0435   60 69                  LD   HL,BC   
0437   CD D2 05               CALL   rpush   ; save Instruction Pointer
043A   0A                     LD   A,(BC)   
043B   D6 41                  SUB   "A"   ; Calc index
043D   87                     ADD   A,A   
043E   21 78 0B               LD   HL,DEFS   
0441   5F                     LD   E,A   
0442   16 00                  LD   D,0   
0444   19                     ADD   HL,DE   
0445   4E                     LD   C,(HL)   
0446   23                     INC   HL   
0447   46                     LD   B,(HL)   
0448   0B                     DEC   BC   
0449   FD E9                  JP   (IY)   ; Execute code from User def
044B   C3 6F 07     DEF_:     JP   def   
044E                DOT_:        
044E   E1                     POP   HL   
044F   3A 12 0B               LD   A,(vBase16)   
0452   B7                     OR   A   
0453   28 05                  JR   Z,dot1   
0455   CD B3 07               CALL   printhex   
0458   18 03                  JR   dot2   
045A                DOT1:        
045A   CD 3C 02               CALL   printdec   
045D                DOT2:        
045D   CD 74 02               CALL   space   
0460   FD E9                  JP   (IY)   
0462                DROP_:       ; Discard the top member of the stack
0462   E1                     POP   HL   
0463   FD E9                  JP   (IY)   
0465                DUP_:        
0465   E1                     POP   HL   ; Duplicate the top member of the stack
0466   E5                     PUSH   HL   
0467   E5                     PUSH   HL   
0468   FD E9                  JP   (IY)   
046A                EXIT_:       
046A   03                     INC   BC   
046B   50 59                  LD   DE,BC   
046D   CD DD 05               CALL   rpop   ; Restore Instruction pointer
0470   44 4D                  LD   BC,HL   
0472   EB                     EX   DE,HL   
0473   E9                     JP   (HL)   
0474                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0474   E1                     POP   HL   ; 10t
0475                FETCH1:      
0475   5E                     LD   E,(HL)   ; 7t
0476   23                     INC   HL   ; 6t
0477   56                     LD   D,(HL)   ; 7t
0478   D5                     PUSH   DE   ; 11t
0479   FD E9                  JP   (IY)   ; 8t
047B                             ; 49t
047B   C3 96 07     HEX_:     JP   hex   
047E                HEXP_:       ; print hexadecimal
047E   E1                     POP   HL   
047F   CD B3 07               CALL   printhex   
0482   18 D9                  JR   dot2   
0484   C3 1A 02     NOP_:     JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0487                NUM_:        
0487   C3 B0 05               JP   number   
048A                OVER_:       
048A   E1                     POP   HL   ; Duplicate 2nd element of the stack
048B   D1                     POP   DE   
048C   D5                     PUSH   DE   
048D   E5                     PUSH   HL   
048E   D5                     PUSH   DE   ; And push it to top of stack
048F   FD E9                  JP   (IY)   
0491   C9           QUIT_:    RET      ; exit interpreter
0492                RET_:        
0492   CD DD 05               CALL   rpop   ; Restore Instruction pointer
0495   44 4D                  LD   BC,HL   
0497   FD E9                  JP   (IY)   
0499                STORE_:      ; Store the value at the address placed on the top of the stack
0499   E1                     POP   HL   ; 10t
049A   D1                     POP   DE   ; 10t
049B   73                     LD   (HL),E   ; 7t
049C   23                     INC   HL   ; 6t
049D   72                     LD   (HL),D   ; 7t
049E   FD E9                  JP   (IY)   ; 8t
04A0                             ; 48t
04A0                             ; $ swap                    ; a b -- b a Swap the top 2 elements of the stack
04A0                SWAP_:       
04A0   E1                     POP   HL   
04A1   E3                     EX   (SP),HL   
04A2   E5                     PUSH   HL   
04A3   FD E9                  JP   (IY)   
04A5                             ;  Left shift { is multply by 2		
04A5                SHL_:        
04A5   E1                     POP   HL   ; Duplicate the top member of the stack
04A6   29                     ADD   HL,HL   
04A7   E5                     PUSH   HL   ; shift left fallthrough into add_
04A8   FD E9                  JP   (IY)   ; 8t
04AA                             ;  Right shift } is a divide by 2		
04AA                             ; 
04AA                SHR_:        
04AA   E1                     POP   HL   ; Get the top member of the stack
04AB   CB 3C                  SRL   H   
04AD   CB 1D                  RR   L   
04AF   E5                     PUSH   HL   
04B0   FD E9                  JP   (IY)   ; 8t
04B2   21 00 00     NEG_:     LD   HL,0   ; NEGate the value on top of stack (2's complement)
04B5   D1                     POP   DE   ; 10t
04B6   18 02                  JR   SUB_2   ; use the SUBtract routine
04B8                SUB_:        ; Subtract the value 2nd on stack from top of stack
04B8   D1                     POP   DE   ; 10t
04B9   E1           SUB_1:    POP   HL   ; 10t  Entry point for INVert
04BA   A7           SUB_2:    AND   A   ;  4t  Entry point for NEGate
04BB   ED 52                  SBC   HL,DE   ; 15t
04BD   E5                     PUSH   HL   ; 11t
04BE   FD E9                  JP   (IY)   ; 8t
04C0                             ; 58t
04C0   E1           EQ_:      POP   HL   
04C1   D1                     POP   DE   
04C2   A7                     AND   A   ; reset the carry flag
04C3   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04C5   28 16                  JR   Z,equal   
04C7   21 00 00               LD   HL,0   
04CA   18 12                  JR   less   ; HL = 1
04CC   D1           GT_:      POP   DE   
04CD   E1                     POP   HL   
04CE   18 02                  JR   cmp_   
04D0   E1           LT_:      POP   HL   
04D1   D1                     POP   DE   
04D2   A7           CMP_:     AND   A   ; reset the carry flag
04D3   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04D5   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04D7   21 00 00               LD   HL,0   
04DA   FA DE 04               JP   M,less   
04DD   2C           EQUAL:    INC   L   ; HL = 1
04DE                LESS:        
04DE   E5                     PUSH   HL   
04DF   FD E9                  JP   (IY)   
04E1                VAR_:        
04E1   0A                     LD   A,(BC)   
04E2   D6 3F                  SUB   "a" - ((VARS - mintVars)/2)   
04E4   87                     ADD   A,A   
04E5   6F                     LD   L,A   
04E6   26 0B                  LD   H,msb(mintVars)   
04E8   E5                     PUSH   HL   
04E9   FD E9                  JP   (IY)   
04EB   18 15        STR_:     JR   str   
04ED   18 22        AGAIN_:   JR   again   
04EF   18 4E        MUL_:     JR   mul   
04F1   18 68        DIV_:     JR   div   
04F3                GETREF_:      
04F3                             ;*******************************************************************
04F3                             ; Page 5 primitive routines
04F3                             ;*******************************************************************
04F3                             ;falls through
04F3                GETREF:      
04F3   03                     INC   BC   
04F4   0A                     LD   A,(BC)   
04F5   D6 41                  SUB   "A"   
04F7   87                     ADD   A,A   
04F8   5F                     LD   E,A   
04F9   16 00                  LD   D,0   
04FB   21 78 0B               LD   HL,defs   
04FE   19                     ADD   HL,DE   
04FF   C3 75 04               JP   fetch1   
0502                             ; **************************************************************************
0502                             ; Print the string between the `backticks`
0502                STR:         
0502   03                     INC   BC   
0503                NEXTCHAR:      
0503   0A                     LD   A,(BC)   
0504   03                     INC   BC   
0505   FE 60                  CP   "`"   ; ` is the string terminator
0507   28 05                  JR   Z,str2   
0509   CD 85 00               CALL   putchar   
050C   18 F5                  JR   nextchar   
050E                STR2:        
050E   0B                     DEC   BC   
050F   FD E9                  JP   (IY)   
0511                AGAIN:       ;20
0511   21 AC 0B               LD   HL,vIFTEMode   
0514   AF                     XOR   A   
0515   B6                     OR   (HL)   
0516   20 25                  JR   NZ,again2   
0518   DD 5E 00               LD   E,(IX+0)   ; peek loop var
051B   DD 56 01               LD   D,(IX+1)   
051E   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
0521   DD 66 03               LD   H,(IX+3)   
0524   B7                     OR   A   
0525   ED 52                  SBC   HL,DE   
0527   28 0F                  JR   Z,again1   
0529   13                     INC   DE   
052A   DD 73 00               LD   (IX+0),E   ; poke loop var
052D   DD 72 01               LD   (IX+1),D   
0530   DD 4E 04               LD   C,(IX+4)   ; peek loop address
0533   DD 46 05               LD   B,(IX+5)   
0536   FD E9                  JP   (IY)   
0538                AGAIN1:      
0538   11 06 00               LD   DE,6   ; drop loop frame
053B   DD 19                  ADD   IX,DE   
053D                AGAIN2:      
053D   FD E9                  JP   (IY)   
053F                             ; ********************************************************************
053F                             ; 16-bit multiply
053F                MUL:         ; 19
053F   D1                     POP   DE   ; get first value
0540   E1                     POP   HL   
0541   C5                     PUSH   BC   ; Preserve the IP
0542   44                     LD   B,H   ; BC = 2nd value
0543   4D                     LD   C,L   
0544   21 00 00               LD   HL,0   
0547   3E 10                  LD   A,16   
0549                MUL_LOOP_1:      
0549   29                     ADD   HL,HL   
054A   CB 13                  RL   E   
054C   CB 12                  RL   D   
054E   30 04                  JR   NC,$+6   
0550   09                     ADD   HL,BC   
0551   30 01                  JR   NC,$+3   
0553   13                     INC   DE   
0554   3D                     DEC   A   
0555   20 F2                  JR   NZ,Mul_Loop_1   
0557                             ; 
0557   C1                     POP   BC   ; Restore the IP
0558   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
0559                             ; 
0559   FD E9                  JP   (IY)   
055B                             ; ********************************************************************
055B                             ; 16-bit division subroutine.
055B                             ; 
055B                             ; BC: divisor, DE: dividend, HL: remainder
055B                             ; *********************************************************************
055B                             ; This divides DE by BC, storing the result in DE, remainder in HL
055B                             ; *********************************************************************
055B                             ; 1382 cycles
055B                             ; 35 bytes (reduced from 48)
055B                             ; 
055B                DIV:         ; 24
055B   D1                     POP   DE   ; get first value
055C   E1                     POP   HL   ; get 2nd value
055D   C5                     PUSH   BC   ; Preserve the IP
055E   44                     LD   B,H   ; BC = 2nd value
055F   4D                     LD   C,L   
0560                             ; 
0560   21 00 00               LD   hl,0   ; Zero the remainder
0563   3E 10                  LD   a,16   ; Loop counter
0565                DIV_LOOP:      ;shift the bits from BC (numerator) into HL (accumulator)
0565   CB 21                  SLA   c   
0567   CB 10                  RL   b   
0569   ED 6A                  ADC   hl,hl   
056B   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (HL>=DE)
056D   38 03                  JR   c,div_adjust   
056F   0C                     INC   c   
0570   18 01                  JR   div_done   
0572                DIV_ADJUST:      ; remainder is not >= denominator, so we have to add DE back to HL
0572   19                     ADD   hl,de   
0573                DIV_DONE:      
0573   3D                     DEC   a   
0574   20 EF                  JR   nz,div_loop   
0576   50                     LD   D,B   ; Result from BC to DE
0577   59                     LD   E,C   
0578                DIV_END:      
0578   C1                     POP   BC   ; Restore the IP
0579   D5                     PUSH   DE   ; Push Result
057A   E5                     PUSH   HL   ; Push remainder
057B   FD E9                  JP   (IY)   
057D                             ; *************************************
057D                             ; Loop Handling Code
057D                             ; *************************************
057D                             ; 
057D                BEGIN:       ;23                     ; Left parentesis begins a loop
057D   21 AC 0B               LD   HL,vIFTEMode   
0580   36 00                  LD   (HL),0   
0582   E1                     POP   HL   
0583   7D                     LD   A,L   ; zero?
0584   B4                     OR   H   
0585   28 1C                  JR   Z,begin1   
0587   2B                     DEC   HL   
0588   11 FA FF               LD   DE,-6   
058B   DD 19                  ADD   IX,DE   
058D   DD 36 00 00            LD   (IX+0),0   ; loop var
0591   DD 36 01 00            LD   (IX+1),0   
0595   DD 75 02               LD   (IX+2),L   ; loop limit
0598   DD 74 03               LD   (IX+3),H   
059B   DD 71 04               LD   (IX+4),C   ; loop address
059E   DD 70 05               LD   (IX+5),B   
05A1   FD E9                  JP   (IY)   
05A3                BEGIN1:      
05A3   1E 01                  LD   E,1   
05A5                BEGIN2:      
05A5   03                     INC   BC   
05A6   0A                     LD   A,(BC)   
05A7   CD D2 07               CALL   nesting   
05AA   AF                     XOR   A   
05AB   B3                     OR   E   
05AC   20 F7                  JR   NZ,begin2   
05AE   FD E9                  JP   (IY)   
05B0                             ; ********************************************************************************
05B0                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
05B0                             ; Read the first character.
05B0                             ;			
05B0                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
05B0                             ; and then added into the L register. (HL forms a 16-bit accumulator)
05B0                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
05B0                             ; and then add in the next digit. Repeat this until a non-number character is
05B0                             ; detected. Add in the final digit so that HL contains the converted number.
05B0                             ; Push HL onto the stack and proceed to the dispatch routine.
05B0                             ; ********************************************************************************
05B0                NUMBER:      ; 23
05B0   21 00 00               LD   HL,$0000   ; 10t Clear HL to accept the number
05B3   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
05B4                NUMBER1:      ; corrected KB 24/11/21
05B4   D6 30                  SUB   $30   ; 7t    Form decimal digit
05B6   85                     ADD   A,L   ; 4t    Add into bottom of HL
05B7   6F                     LD   L,A   ; 4t
05B8   3E 00                  LD   A,00   ; 4t    Clear A
05BA   8C                     ADC   A,H   ; Add with carry H-reg
05BB   67                     LD   H,A   ; Put result in H-reg
05BC   03                     INC   BC   ; 6t    Increment IP
05BD   0A                     LD   A,(BC)   ; 7t    and get the next character
05BE   FE 30                  CP   $30   ; 7t    Less than $30
05C0   38 0C                  JR   C,endnum   ; 7/12t Not a number / end of number
05C2   FE 3A                  CP   $3A   ; 7t    Greater or equal to $3A
05C4   30 08                  JR   NC,endnum   ; 7/12t Not a number / end of number
05C6                TIMES10:      ; Multiply digit(s) in HL by 10
05C6   29                     ADD   HL,HL   ; 11t    2X
05C7   5D                     LD   E,L   ;  4t    LD DE,HL
05C8   54                     LD   D,H   ;  4t
05C9   29                     ADD   HL,HL   ; 11t    4X
05CA   29                     ADD   HL,HL   ; 11t    8X
05CB   19                     ADD   HL,DE   ; 11t    2X  + 8X  = 10X
05CC                             ; 52t cycles
05CC   18 E6                  JR   number1   
05CE                ENDNUM:      
05CE   0B                     DEC   BC   
05CF   E5                     PUSH   HL   ; 11t   Put the number on the stack
05D0   FD E9                  JP   (IY)   ; and process the next character
05D2                RPUSH:       
05D2   DD 2B                  DEC   IX   
05D4   DD 74 00               LD   (IX+0),H   
05D7   DD 2B                  DEC   IX   
05D9   DD 75 00               LD   (IX+0),L   
05DC   C9                     RET      
05DD                RPOP:        
05DD   DD 6E 00               LD   L,(IX+0)   
05E0   DD 23                  INC   IX   
05E2   DD 66 00               LD   H,(IX+0)   
05E5   DD 23                  INC   IX   
05E7   C9                     RET      
05E8                CRLF:        
05E8   3E 0D                  LD   A,"\r"   
05EA   CD 85 00               CALL   putchar   
05ED   3E 0A                  LD   A,"\n"   
05EF   C3 85 00               JP   putchar   
05F2                ALT1:        
05F2   03                     INC   BC   
05F3   0A                     LD   A,(BC)   
05F4   21 80 03               LD   HL,altCodes   
05F7   85                     ADD   A,L   
05F8   6F                     LD   L,A   
05F9   6E                     LD   L,(HL)   ; 7t    get low jump address
05FA   26 06                  LD   H,msb(page6)   ; Load H with the 5th page address
05FC   E9                     JP   (HL)   ; 4t    Jump to routine
05FD                             ; **************************************************************************
05FD                             ; Page 6 Alt primitives
05FD                             ; **************************************************************************
05FD                          ALIGN   $100   
0600                PAGE6:       
0600                CARRDEF_:      ; define a byte array
0600   3E 01                  LD   A,TRUE   
0602   C3 43 07               JP   arrDef1   
0605                CFETCH_:      
0605   E1                     POP   HL   ; 10t
0606   16 00                  LD   D,0   ; 7t
0608   5E                     LD   E,(HL)   ; 7t
0609   D5                     PUSH   DE   ; 11t
060A                ANOP_:       
060A   FD E9                  JP   (IY)   ; 8t
060C                             ; 49t
060C                CHARCODE_:      
060C   03                     INC   BC   
060D   0A                     LD   A,(BC)   
060E   26 00                  LD   H,0   
0610   6F                     LD   L,A   
0611   E5                     PUSH   HL   
0612   FD E9                  JP   (IY)   
0614                COMMENT_:      
0614   03                     INC   BC   ; point to next char
0615   0A                     LD   A,(BC)   
0616   FE 0D                  CP   "\r"   ; terminate at newline
0618   20 FA                  JR   NZ,comment_   
061A   0B                     DEC   BC   
061B   FD E9                  JP   (IY)   
061D                CSTORE_:      
061D   E1                     POP   HL   ; 10t
061E   D1                     POP   DE   ; 10t
061F   73                     LD   (HL),E   ; 7t
0620   FD E9                  JP   (IY)   ; 8t
0622                             ; 48t
0622                DEPTH_:      
0622   21 00 00               LD   HL,0   
0625   39                     ADD   HL,SP   
0626   EB                     EX   DE,HL   
0627   21 00 09               LD   HL,DSTACK   
062A   B7                     OR   A   
062B   ED 52                  SBC   HL,DE   
062D   CB 3C                  SRL   H   
062F   CB 1D                  RR   L   
0631   E5                     PUSH   HL   
0632   FD E9                  JP   (IY)   
0634                EMIT_:       
0634   E1                     POP   HL   
0635   7D                     LD   A,L   
0636   CD 85 00               CALL   putchar   
0639   FD E9                  JP   (IY)   
063B                IFTE_:       
063B   21 AC 0B               LD   HL,vIFTEMode   
063E   36 01                  LD   (HL),TRUE   
0640   B7                     OR   A   ; invert condition
0641   ED 62                  SBC   HL,HL   
0643   D1                     POP   DE   
0644   ED 52                  SBC   HL,DE   
0646   23                     INC   HL   
0647   E5                     PUSH   HL   
0648   CA A3 05               JP   Z,begin1   
064B   FD E9                  JP   (IY)   
064D                             ; 
064D                EXEC_:       
064D   CD 52 06               CALL   exec1   
0650   FD E9                  JP   (IY)   
0652                EXEC1:       
0652   E1                     POP   HL   
0653   E3                     EX   (SP),HL   
0654   E9                     JP   (HL)   
0655                GO_:         
0655   60 69                  LD   HL,BC   
0657   CD D2 05               CALL   rpush   ; save Instruction Pointer
065A   C1                     POP   BC   
065B   0B                     DEC   BC   
065C   FD E9                  JP   (IY)   ; Execute code from User def
065E                USERVAR_:      
065E   0A                     LD   A,(BC)   
065F   D6 59                  SUB   "a" - ((userVars - mintVars) / 2)   
0661   87                     ADD   A,A   
0662   6F                     LD   L,A   
0663   26 0B                  LD   H,msb(mintVars)   
0665   E5                     PUSH   HL   
0666   FD E9                  JP   (IY)   ; Execute code from User def
0668                I_:          
0668   DD E5                  PUSH   IX   
066A   FD E9                  JP   (IY)   
066C                             ; \+    a b -- [b]+a            ; increment variable at b by a
066C                INCR_:       
066C   E1                     POP   HL   
066D   D1                     POP   DE   
066E   7B                     LD   A,E   
066F   86                     ADD   A,(HL)   
0670   77                     LD   (HL),A   
0671   23                     INC   HL   
0672   7A                     LD   A,D   
0673   8E                     ADC   A,(HL)   
0674   77                     LD   (HL),A   
0675   FD E9                  JP   (IY)   
0677                INPORT_:      
0677   E1                     POP   HL   
0678   79                     LD   A,C   
0679   4D                     LD   C,L   
067A   ED 68                  IN   L,(C)   
067C   26 00                  LD   H,0   
067E   4F                     LD   C,A   
067F   E5                     PUSH   HL   
0680   FD E9                  JP   (IY)   
0682                J_:          
0682   DD E5                  PUSH   IX   
0684   E1                     POP   HL   
0685   11 06 00               LD   DE,6   
0688   19                     ADD   HL,DE   
0689   E5                     PUSH   HL   
068A   FD E9                  JP   (IY)   
068C                KEY_:        
068C   CD 81 00               CALL   getchar   
068F   6F                     LD   L,A   
0690   26 00                  LD   H,0   
0692   E5                     PUSH   HL   
0693   FD E9                  JP   (IY)   
0695                SYSCONST_:      
0695   0A                     LD   A,(BC)   
0696   D6 30                  SUB   "0"   ; Calc index
0698   87                     ADD   A,A   
0699   21 00 0B               LD   HL,sysConsts   
069C   6F                     LD   L,A   
069D   C3 75 04               JP   fetch1   
06A0                LEAST_:      ; a b -- c
06A0   D1                     POP   DE   
06A1   E1                     POP   HL   
06A2   B7                     OR   A   
06A3   ED 52                  SBC   HL,DE   
06A5   3F                     CCF      
06A6   18 05                  JR   most1   
06A8                MOST_:       ; a b -- c
06A8   D1                     POP   DE   
06A9   E1                     POP   HL   
06AA   B7                     OR   A   
06AB   ED 52                  SBC   HL,DE   
06AD                MOST1:       
06AD   38 02                  JR   C,most2   
06AF   19                     ADD   HL,DE   
06B0   EB                     EX   DE,HL   
06B1                MOST2:       
06B1   D5                     PUSH   DE   
06B2   FD E9                  JP   (IY)   
06B4                NEWLN_:      
06B4   CD E8 05               CALL   crlf   
06B7   FD E9                  JP   (IY)   
06B9                OUTPORT_:      
06B9   E1                     POP   HL   
06BA   59                     LD   E,C   
06BB   4D                     LD   C,L   
06BC   E1                     POP   HL   
06BD   ED 69                  OUT   (C),L   
06BF   4B                     LD   C,E   
06C0   FD E9                  JP   (IY)   
06C2                ROT_:        ; a b c -- b c a
06C2   D1                     POP   DE   ; a b                   de = c
06C3   E1                     POP   HL   ; a                     hl = b
06C4   E3                     EX   (SP),HL   ; b                     hl = a
06C5   D5                     PUSH   DE   ; b c
06C6   E5                     PUSH   HL   ; b c a
06C7   FD E9                  JP   (IY)   
06C9                SIGN_:       
06C9   E1                     POP   HL   
06CA   CB 7C                  BIT   7,H   
06CC   21 00 00               LD   HL,0   
06CF   28 01                  JR   Z,sign2   
06D1   23                     INC   HL   
06D2                SIGN2:       
06D2   E5                     PUSH   HL   
06D3   FD E9                  JP   (IY)   
06D5                WHILE_:      
06D5   E1                     POP   HL   
06D6   7D                     LD   A,L   ; zero?
06D7   B4                     OR   H   
06D8   28 02                  JR   Z,while1   
06DA   FD E9                  JP   (IY)   
06DC                WHILE1:      
06DC   11 06 00               LD   DE,6   ; drop loop frame
06DF   DD 19                  ADD   IX,DE   
06E1   C3 A3 05               JP   begin1   ; skip to end of loop
06E4                EDITDEF_:      
06E4   18 25                  JR   editDef   
06E6                PRINTSTK_:      
06E6                             ; **************************************************************************
06E6                             ; Page 6 primitive routines
06E6                             ; **************************************************************************
06E6                             ; falls through
06E6                PRINTSTK:      
06E6   CD 33 02               CALL   ENTER   
06E9   5C 30 32 2D 5C 44 31 2D 5C 78 21 5C 78 40 5C 5F 30 3D 28 5C 78 40 28 22 40 2E 32 2D 29 29 27 00 DB   "\\02-\\D1-\\x!\\x@\\_0=(\\x@(",$22,"@.2-))'",0   
0709   FD E9                  JP   (IY)   
070B                             ; **************************************************************************
070B                             ; copy definition to text input buffer
070B                             ; update TIBPtr
070B                             ; **************************************************************************
070B                EDITDEF:      ; lookup up def based on number
070B   3E 41                  LD   A,"A"   
070D   D1                     POP   DE   
070E   83                     ADD   A,E   
070F   08                     EX   AF,AF'   
0710   21 78 0B               LD   HL,defs   
0713   19                     ADD   HL,DE   
0714   19                     ADD   HL,DE   
0715   5E                     LD   E,(HL)   
0716   23                     INC   HL   
0717   56                     LD   D,(HL)   
0718   EB                     EX   DE,HL   
0719   7E                     LD   A,(HL)   
071A   FE 3B                  CP   ";"   
071C   11 00 0A               LD   DE,TIB   
071F   28 14                  JR   Z,editDef3   
0721   3E 3A                  LD   A,":"   
0723   CD 79 02               CALL   writeChar   
0726   08                     EX   AF,AF'   
0727   CD 79 02               CALL   writeChar   
072A   18 01                  JR   editDef2   
072C                EDITDEF1:      
072C   23                     INC   HL   
072D                EDITDEF2:      
072D   7E                     LD   A,(HL)   
072E   CD 79 02               CALL   writeChar   
0731   FE 3B                  CP   ";"   
0733   20 F7                  JR   NZ,editDef1   
0735                EDITDEF3:      
0735   21 00 0A               LD   HL,TIB   
0738   EB                     EX   DE,HL   
0739   B7                     OR   A   
073A   ED 52                  SBC   HL,DE   
073C   22 14 0B               LD   (vTIBPtr),HL   
073F   FD E9                  JP   (IY)   
0741                             ;*******************************************************************
0741                             ; Page 5 primitive routines continued
0741                             ;*******************************************************************
0741                             ; define a word array
0741                ARRDEF:      
0741   3E 00                  LD   A,FALSE   
0743                ARRDEF1:      
0743   FD 21 60 02            LD   IY,compNEXT   
0747   32 AE 0B               LD   (vByteMode),A   
074A   2A 1E 0B               LD   HL,(vHeapPtr)   ; HL = heap ptr
074D   CD D2 05               CALL   rpush   ; save start of array \[  \]
0750   C3 1A 02               JP   NEXT   ; hardwired to NEXT
0753                             ; end a word array
0753                ARREND:      
0753   CD DD 05               CALL   rpop   ; DE = start of array
0756   E5                     PUSH   HL   
0757   EB                     EX   DE,HL   
0758   2A 1E 0B               LD   HL,(vHeapPtr)   ; HL = heap ptr
075B   B7                     OR   A   
075C   ED 52                  SBC   HL,DE   ; bytes on heap
075E   3A AE 0B               LD   A,(vByteMode)   
0761   B7                     OR   A   
0762   20 04                  JR   NZ,arrEnd2   
0764   CB 3C                  SRL   H   ; BC = m words
0766   CB 1D                  RR   L   
0768                ARREND2:      
0768   E5                     PUSH   HL   
0769   FD 21 1A 02            LD   IY,NEXT   
076D   FD E9                  JP   (IY)   ; hardwired to NEXT
076F                             ; **************************************************************************
076F                             ; def is used to create a colon definition
076F                             ; When a colon is detected, the next character (usually uppercase alpha)
076F                             ; is looked up in the vector table to get its associated code field address
076F                             ; This CFA is updated to point to the character after uppercase alpha
076F                             ; The remainder of the characters are then skipped until after a semicolon
076F                             ; is found.
076F                             ; ***************************************************************************
076F                DEF:         ; Create a colon definition
076F   E5                     PUSH   HL   ; Save HL
0770   21 78 0B               LD   HL,DEFS   ; Start address of jump table
0773   03                     INC   BC   
0774   0A                     LD   A,(BC)   ; Get the next character
0775   03                     INC   BC   
0776   D6 05                  SUB   "A" - ((DEFS - mintVars)/2)   
0778   87                     ADD   A,A   
0779   6F                     LD   L,A   
077A   26 0B                  LD   H,msb(mintVars)   
077C   ED 5B 1E 0B            LD   DE,(vHeapPtr)   ; start of defintion
0780   73                     LD   (HL),E   ; Save low byte of address in CFA
0781   23                     INC   HL   
0782   72                     LD   (HL),D   ; Save high byte of address in CFA+1
0783   E1                     POP   HL   ; Restore HL
0784                NEXTBYTE:      ; Skip to end of definition
0784   0A                     LD   A,(BC)   ; Get the next character
0785   03                     INC   BC   ; Point to next character
0786   12                     LD   (DE),A   
0787   13                     INC   DE   
0788   FE 3B                  CP   ";"   ; Is it a semicolon
078A   CA 8F 07               JP   z,end_def   ; end the definition
078D   18 F5                  JR   nextbyte   ; get the next element
078F                END_DEF:      
078F   ED 53 1E 0B            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
0793   0B                     DEC   BC   
0794   FD E9                  JP   (IY)   
0796                             ; ***************************************************************************
0796                HEX:         
0796   21 00 00               LD   HL,$0000   ; 10t Clear HL to accept the number
0799                HEX1:        
0799   03                     INC   BC   
079A   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
079B   CB 77                  BIT   6,A   ; 7t    is it uppercase alpha?
079D   28 02                  JR   Z,hex2   ; no a decimal
079F   D6 07                  SUB   7   ; sub 7  to make $A - $F
07A1                HEX2:        
07A1   D6 30                  SUB   $30   ; 7t    Form decimal digit
07A3   DA CE 05               JP   C,endnum   
07A6   FE 10                  CP   $0F+1   
07A8   D2 CE 05               JP   NC,endnum   
07AB   29                     ADD   HL,HL   ; 11t    2X ; Multiply digit(s) in HL by 16
07AC   29                     ADD   HL,HL   ; 11t    4X
07AD   29                     ADD   HL,HL   ; 11t    8X
07AE   29                     ADD   HL,HL   ; 11t   16X
07AF   85                     ADD   A,L   ; 4t    Add into bottom of HL
07B0   6F                     LD   L,A   ; 4t
07B1   18 E6                  JR   hex1   
07B3                PRINTHEX:      
07B3                             ; Display HL as a 16-bit number in hex.
07B3   C5                     PUSH   BC   ; preserve the IP
07B4   7C                     LD   A,H   
07B5   CD BE 07               CALL   Print_Hex8   
07B8   7D                     LD   A,L   
07B9   CD BE 07               CALL   Print_Hex8   
07BC   C1                     POP   BC   
07BD   C9                     RET      
07BE                             ; Print an 8-bit HEX number  - shortened KB 25/11/21
07BE                             ; A: Number to print
07BE                             ; 
07BE                PRINT_HEX8:      
07BE   4F                     LD   C,A   
07BF   1F                     RRA      
07C0   1F                     RRA      
07C1   1F                     RRA      
07C2   1F                     RRA      
07C3   CD C7 07               CALL   conv   
07C6   79                     LD   A,C   
07C7                CONV:        
07C7   E6 0F                  AND   0x0F   
07C9   C6 90                  ADD   A,0x90   
07CB   27                     DAA      
07CC   CE 40                  ADC   A,0x40   
07CE   27                     DAA      
07CF   C3 85 00               JP   putchar   
07D2                             ; **************************************************************************
07D2                             ; calculate nesting value
07D2                             ; A is char to be tested,
07D2                             ; E is the nesting value (initially 0)
07D2                             ; E is increased by ( and [
07D2                             ; E is decreased by ) and ]
07D2                             ; E has its bit 7 toggled by `
07D2                             ; limited to 127 levels
07D2                             ; **************************************************************************
07D2                NESTING:      
07D2   FE 60                  CP   "`"   
07D4   20 0A                  JR   NZ,nesting1   
07D6   CB 7B                  BIT   7,E   
07D8   28 03                  JR   Z,nesting1a   
07DA   CB BB                  RES   7,E   
07DC   C9                     RET      
07DD                NESTING1A:      
07DD   CB FB                  SET   7,E   
07DF   C9                     RET      
07E0                NESTING1:      
07E0   CB 7B                  BIT   7,E   
07E2   C0                     RET   NZ   
07E3   FE 3A                  CP   ":"   
07E5   28 08                  JR   Z,nesting2   
07E7   FE 5B                  CP   "["   
07E9   28 04                  JR   Z,nesting2   
07EB   FE 28                  CP   "("   
07ED   20 02                  JR   NZ,nesting3   
07EF                NESTING2:      
07EF   1C                     INC   E   
07F0   C9                     RET      
07F1                NESTING3:      
07F1   FE 3B                  CP   ";"   
07F3   28 07                  JR   Z,nesting4   
07F5   FE 5D                  CP   "]"   
07F7   28 03                  JR   Z,nesting4   
07F9   FE 29                  CP   ")"   
07FB   C0                     RET   NZ   
07FC                NESTING4:      
07FC   1D                     DEC   E   
07FD   C9                     RET      
0800                          .ORG   RAMSTART   
0800                          DS   DSIZE   
0900                STACK:       
0900                DSTACK:      
0900                          DS   RSIZE   
0A00                RSTACK:      
0A00                TIB:         
0A00                          DS   TIBSIZE   
0B00                          ALIGN   $100   
0B00                MINTVARS:      
0B00                             ; ****************************************************************
0B00                             ; System constants
0B00                             ; ****************************************************************
0B00                SYSCONSTS:      
0B00   00 00        CS0:      DW   0   ; 0
0B02   00 00        CTIB:     DW   0   ; 1
0B04   00 00        CDEFS:    DW   0   ; 2
0B06   00 00        CVARS:    DW   0   ; 3
0B08   00 00        COPCODES:   DW   0   ; 4
0B0A   00 00        CMACROS:   DW   0   ; 5
0B0C   00 00        CUSERVARS:   DW   0   ; 6
0B0E   00 00                  DW   0   ; 7
0B10                             ; ****************************************************************
0B10                             ; USER variables
0B10                             ; ****************************************************************
0B10                USERVARS:      
0B10   00 00        VALT:     DW   0   ; a
0B12   00 00        VBASE16:   DW   0   ; b
0B14   00 00        VTIBPTR:   DW   0   ; c
0B16   00 00                  DW   0   ; d
0B18   00 00                  DW   0   ; e
0B1A   00 00                  DW   0   ; f
0B1C   00 00                  DW   0   ; g
0B1E   00 00        VHEAPPTR:   DW   0   ; h
0B20   00 00                  DW   0   ; i
0B22   00 00                  DW   0   ; j
0B24   00 00                  DW   0   ; k
0B26   00 00                  DW   0   ; l
0B28   00 00                  DW   0   ; m
0B2A   00 00                  DW   0   ; n
0B2C   00 00                  DW   0   ; o
0B2E   00 00                  DW   0   ; p
0B30   00 00                  DW   0   ; q
0B32   00 00                  DW   0   ; r
0B34   00 00                  DW   0   ; s
0B36   00 00                  DW   0   ; t
0B38   00 00                  DW   0   ; u
0B3A   00 00                  DW   0   ; v
0B3C   00 00                  DW   0   ; w
0B3E   00 00                  DW   0   ; x
0B40   00 00                  DW   0   ; y
0B42   00 00                  DW   0   ; z
0B44                             ; ****************************************************************
0B44                             ; VARS Table - holds 26 16-bit user variables
0B44                             ; ****************************************************************
0B44                VARS:     DS   26 * 2   
0B78                             ; ****************************************************************
0B78                             ; DEFS Table - holds 26 addresses of user routines
0B78                             ; ****************************************************************
0B78                DEFS:     DS   26 * 2   
0BAC   00 00        VIFTEMODE:   DW   0   ; 
0BAE   00 00        VBYTEMODE:   DW   0   ; 
0BB0   00 00        RST08:    DW   0   ; 
0BB2   00 00        RST10:    DW   0   ; 
0BB4   00 00        RST18:    DW   0   ; 
0BB6   00 00        RST20:    DW   0   ; 
0BB8   00 00        RST28:    DW   0   ; 
0BBA   00 00        RST30:    DW   0   ; 
0BBC   00 00        BAUD:     DW   0   ; 
0BBE   00 00        INTVEC:   DW   0   ; 
0BC0   00 00        NMIVEC:   DW   0   ; 
0BC2   00 00        GETCVEC:   DW   0   ; 
0BC4   00 00        PUTCVEC:   DW   0   ; 
0BC6   00 00        TBPTR:    DW   0   ; reserved for tests
0BC8                BUF:      DS   $80   
0C48                          ALIGN   $40   
0C80                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 164 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 647 IN IOSerial.asm
                    > USED AT LINE 669 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 646 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 652 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 628 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 640 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 638 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 616 IN IOSerial.asm
                    > USED AT LINE 224 IN MINT.asm
                    > USED AT LINE 1250 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 620 IN IOSerial.asm
                    > USED AT LINE 239 IN MINT.asm
                    > USED AT LINE 332 IN MINT.asm
                    > USED AT LINE 351 IN MINT.asm
                    > USED AT LINE 356 IN MINT.asm
                    > USED AT LINE 897 IN MINT.asm
                    > USED AT LINE 1105 IN MINT.asm
                    > USED AT LINE 1107 IN MINT.asm
                    > USED AT LINE 1175 IN MINT.asm
                    > USED AT LINE 1503 IN MINT.asm
RESET:              008B DEFINED AT LINE 626 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0100 DEFINED AT LINE 151 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0100 DEFINED AT LINE 152 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 153 IN MINT.asm
                    > USED AT LINE 11 IN ram.asm
TRUE:               0001 DEFINED AT LINE 154 IN MINT.asm
                    > USED AT LINE 1126 IN MINT.asm
                    > USED AT LINE 1180 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 155 IN MINT.asm
                    > USED AT LINE 497 IN MINT.asm
                    > USED AT LINE 1385 IN MINT.asm
START:              0180 DEFINED AT LINE 166 IN MINT.asm
                    > USED AT LINE 6
MINT:               0180 DEFINED AT LINE 167 IN MINT.asm
INITIALIZE:         019A DEFINED AT LINE 174 IN MINT.asm
                    > USED AT LINE 169 IN MINT.asm
INIT1:              01B2 DEFINED AT LINE 183 IN MINT.asm
                    > USED AT LINE 188 IN MINT.asm
INTERPRET:          01BB DEFINED AT LINE 191 IN MINT.asm
                    > USED AT LINE 172 IN MINT.asm
                    > USED AT LINE 291 IN MINT.asm
INTERPRET1:         01C5 DEFINED AT LINE 195 IN MINT.asm
INTERPRET2:         01CC DEFINED AT LINE 199 IN MINT.asm
                    > USED AT LINE 369 IN MINT.asm
INTERPRET3:         01D4 DEFINED AT LINE 206 IN MINT.asm
                    > USED AT LINE 215 IN MINT.asm
INTERPRET4:         01DA DEFINED AT LINE 212 IN MINT.asm
                    > USED AT LINE 204 IN MINT.asm
WAITCHAR:           01DF DEFINED AT LINE 223 IN MINT.asm
                    > USED AT LINE 241 IN MINT.asm
                    > USED AT LINE 251 IN MINT.asm
WAITCHAR1:          01F3 DEFINED AT LINE 234 IN MINT.asm
                    > USED AT LINE 226 IN MINT.asm
WAITCHAR3:          0201 DEFINED AT LINE 243 IN MINT.asm
                    > USED AT LINE 230 IN MINT.asm
WAITCHAR4:          0212 DEFINED AT LINE 255 IN MINT.asm
                    > USED AT LINE 228 IN MINT.asm
NEXT:               021A DEFINED AT LINE 283 IN MINT.asm
                    > USED AT LINE 176 IN MINT.asm
                    > USED AT LINE 293 IN MINT.asm
                    > USED AT LINE 347 IN MINT.asm
                    > USED AT LINE 766 IN MINT.asm
                    > USED AT LINE 1391 IN MINT.asm
                    > USED AT LINE 1408 IN MINT.asm
DISPATCH:           021C DEFINED AT LINE 287 IN MINT.asm
ENTER:              0233 DEFINED AT LINE 301 IN MINT.asm
                    > USED AT LINE 170 IN MINT.asm
                    > USED AT LINE 192 IN MINT.asm
                    > USED AT LINE 366 IN MINT.asm
                    > USED AT LINE 1335 IN MINT.asm
PRINTDEC:           023C DEFINED AT LINE 308 IN MINT.asm
                    > USED AT LINE 727 IN MINT.asm
DISPHL:             023C DEFINED AT LINE 315 IN MINT.asm
NUM1:               0255 DEFINED AT LINE 325 IN MINT.asm
                    > USED AT LINE 317 IN MINT.asm
                    > USED AT LINE 319 IN MINT.asm
                    > USED AT LINE 321 IN MINT.asm
                    > USED AT LINE 323 IN MINT.asm
NUM2:               0257 DEFINED AT LINE 327 IN MINT.asm
                    > USED AT LINE 330 IN MINT.asm
COMPNEXT:           0260 DEFINED AT LINE 335 IN MINT.asm
                    > USED AT LINE 1387 IN MINT.asm
COMPNEXT1:          026E DEFINED AT LINE 345 IN MINT.asm
                    > USED AT LINE 342 IN MINT.asm
SPACE:              0274 DEFINED AT LINE 349 IN MINT.asm
                    > USED AT LINE 729 IN MINT.asm
WRITECHAR:          0279 DEFINED AT LINE 353 IN MINT.asm
                    > USED AT LINE 1360 IN MINT.asm
                    > USED AT LINE 1362 IN MINT.asm
                    > USED AT LINE 1368 IN MINT.asm
MACRO:              027E DEFINED AT LINE 358 IN MINT.asm
                    > USED AT LINE 232 IN MINT.asm
MACROS:             0298 DEFINED AT LINE 375 IN MINT.asm
                    > USED AT LINE 491 IN MINT.asm
EMPTY_:             0298 DEFINED AT LINE 1 IN MINT.asm
BACKSP_:            029A DEFINED AT LINE 4 IN MINT.asm
EDIT_:              02B4 DEFINED AT LINE 7 IN MINT.asm
LIST_:              02C7 DEFINED AT LINE 10 IN MINT.asm
PRINTSTACK_:        02E3 DEFINED AT LINE 13 IN MINT.asm
TOGGLEBASE_:        02F4 DEFINED AT LINE 16 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 384 IN MINT.asm
                    > USED AT LINE 294 IN MINT.asm
                    > USED AT LINE 490 IN MINT.asm
ISYSCONSTS:         0360 DEFINED AT LINE 485 IN MINT.asm
                    > USED AT LINE 177 IN MINT.asm
IUSERVARS:          0370 DEFINED AT LINE 495 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 509 IN MINT.asm
                    > USED AT LINE 360 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 510 IN MINT.asm
                    > USED AT LINE 1112 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 645 IN MINT.asm
ALT_:               0400 DEFINED AT LINE 647 IN MINT.asm
AND_:               0404 DEFINED AT LINE 651 IN MINT.asm
AND1:               040B DEFINED AT LINE 659 IN MINT.asm
                    > USED AT LINE 673 IN MINT.asm
                    > USED AT LINE 684 IN MINT.asm
OR_:                040F DEFINED AT LINE 665 IN MINT.asm
XOR_:               0418 DEFINED AT LINE 675 IN MINT.asm
XOR1:               0419 DEFINED AT LINE 677 IN MINT.asm
                    > USED AT LINE 688 IN MINT.asm
INV_:               0421 DEFINED AT LINE 686 IN MINT.asm
ADD_:               0426 DEFINED AT LINE 690 IN MINT.asm
ARRDEF_:            042C DEFINED AT LINE 698 IN MINT.asm
ARREND_:            042F DEFINED AT LINE 699 IN MINT.asm
BEGIN_:             0432 DEFINED AT LINE 700 IN MINT.asm
CALL_:              0435 DEFINED AT LINE 701 IN MINT.asm
DEF_:               044B DEFINED AT LINE 718 IN MINT.asm
DOT_:               044E DEFINED AT LINE 719 IN MINT.asm
DOT1:               045A DEFINED AT LINE 726 IN MINT.asm
                    > USED AT LINE 723 IN MINT.asm
DOT2:               045D DEFINED AT LINE 728 IN MINT.asm
                    > USED AT LINE 725 IN MINT.asm
                    > USED AT LINE 764 IN MINT.asm
DROP_:              0462 DEFINED AT LINE 732 IN MINT.asm
DUP_:               0465 DEFINED AT LINE 736 IN MINT.asm
EXIT_:              046A DEFINED AT LINE 742 IN MINT.asm
                    > USED AT LINE 289 IN MINT.asm
FETCH_:             0474 DEFINED AT LINE 750 IN MINT.asm
FETCH1:             0475 DEFINED AT LINE 752 IN MINT.asm
                    > USED AT LINE 884 IN MINT.asm
                    > USED AT LINE 1262 IN MINT.asm
HEX_:               047B DEFINED AT LINE 759 IN MINT.asm
HEXP_:              047E DEFINED AT LINE 761 IN MINT.asm
NOP_:               0484 DEFINED AT LINE 766 IN MINT.asm
NUM_:               0487 DEFINED AT LINE 768 IN MINT.asm
OVER_:              048A DEFINED AT LINE 771 IN MINT.asm
QUIT_:              0491 DEFINED AT LINE 779 IN MINT.asm
RET_:               0492 DEFINED AT LINE 781 IN MINT.asm
STORE_:             0499 DEFINED AT LINE 786 IN MINT.asm
SWAP_:              04A0 DEFINED AT LINE 795 IN MINT.asm
SHL_:               04A5 DEFINED AT LINE 802 IN MINT.asm
SHR_:               04AA DEFINED AT LINE 810 IN MINT.asm
NEG_:               04B2 DEFINED AT LINE 817 IN MINT.asm
SUB_:               04B8 DEFINED AT LINE 821 IN MINT.asm
SUB_1:              04B9 DEFINED AT LINE 824 IN MINT.asm
SUB_2:              04BA DEFINED AT LINE 825 IN MINT.asm
                    > USED AT LINE 819 IN MINT.asm
EQ_:                04C0 DEFINED AT LINE 830 IN MINT.asm
GT_:                04CC DEFINED AT LINE 839 IN MINT.asm
LT_:                04D0 DEFINED AT LINE 843 IN MINT.asm
CMP_:               04D2 DEFINED AT LINE 845 IN MINT.asm
                    > USED AT LINE 841 IN MINT.asm
EQUAL:              04DD DEFINED AT LINE 850 IN MINT.asm
                    > USED AT LINE 834 IN MINT.asm
LESS:               04DE DEFINED AT LINE 851 IN MINT.asm
                    > USED AT LINE 836 IN MINT.asm
                    > USED AT LINE 847 IN MINT.asm
                    > USED AT LINE 849 IN MINT.asm
VAR_:               04E1 DEFINED AT LINE 855 IN MINT.asm
STR_:               04EB DEFINED AT LINE 866 IN MINT.asm
AGAIN_:             04ED DEFINED AT LINE 867 IN MINT.asm
MUL_:               04EF DEFINED AT LINE 868 IN MINT.asm
DIV_:               04F1 DEFINED AT LINE 869 IN MINT.asm
GETREF_:            04F3 DEFINED AT LINE 870 IN MINT.asm
GETREF:             04F3 DEFINED AT LINE 875 IN MINT.asm
STR:                0502 DEFINED AT LINE 889 IN MINT.asm
                    > USED AT LINE 866 IN MINT.asm
NEXTCHAR:           0503 DEFINED AT LINE 892 IN MINT.asm
                    > USED AT LINE 898 IN MINT.asm
STR2:               050E DEFINED AT LINE 900 IN MINT.asm
                    > USED AT LINE 896 IN MINT.asm
AGAIN:              0511 DEFINED AT LINE 904 IN MINT.asm
                    > USED AT LINE 867 IN MINT.asm
AGAIN1:             0538 DEFINED AT LINE 922 IN MINT.asm
                    > USED AT LINE 915 IN MINT.asm
AGAIN2:             053D DEFINED AT LINE 925 IN MINT.asm
                    > USED AT LINE 908 IN MINT.asm
MUL:                053F DEFINED AT LINE 930 IN MINT.asm
                    > USED AT LINE 868 IN MINT.asm
MUL_LOOP_1:         0549 DEFINED AT LINE 939 IN MINT.asm
                    > USED AT LINE 948 IN MINT.asm
DIV:                055B DEFINED AT LINE 968 IN MINT.asm
                    > USED AT LINE 869 IN MINT.asm
DIV_LOOP:           0565 DEFINED AT LINE 978 IN MINT.asm
                    > USED AT LINE 993 IN MINT.asm
DIV_ADJUST:         0572 DEFINED AT LINE 988 IN MINT.asm
                    > USED AT LINE 984 IN MINT.asm
DIV_DONE:           0573 DEFINED AT LINE 991 IN MINT.asm
                    > USED AT LINE 986 IN MINT.asm
DIV_END:            0578 DEFINED AT LINE 998 IN MINT.asm
BEGIN:              057D DEFINED AT LINE 1010 IN MINT.asm
                    > USED AT LINE 700 IN MINT.asm
BEGIN1:             05A3 DEFINED AT LINE 1030 IN MINT.asm
                    > USED AT LINE 1017 IN MINT.asm
                    > USED AT LINE 1187 IN MINT.asm
                    > USED AT LINE 1325 IN MINT.asm
BEGIN2:             05A5 DEFINED AT LINE 1032 IN MINT.asm
                    > USED AT LINE 1038 IN MINT.asm
NUMBER:             05B0 DEFINED AT LINE 1053 IN MINT.asm
                    > USED AT LINE 769 IN MINT.asm
NUMBER1:            05B4 DEFINED AT LINE 1057 IN MINT.asm
                    > USED AT LINE 1082 IN MINT.asm
TIMES10:            05C6 DEFINED AT LINE 1073 IN MINT.asm
ENDNUM:             05CE DEFINED AT LINE 1084 IN MINT.asm
                    > USED AT LINE 1069 IN MINT.asm
                    > USED AT LINE 1071 IN MINT.asm
                    > USED AT LINE 1464 IN MINT.asm
                    > USED AT LINE 1466 IN MINT.asm
RPUSH:              05D2 DEFINED AT LINE 1089 IN MINT.asm
                    > USED AT LINE 303 IN MINT.asm
                    > USED AT LINE 703 IN MINT.asm
                    > USED AT LINE 1200 IN MINT.asm
                    > USED AT LINE 1390 IN MINT.asm
RPOP:               05DD DEFINED AT LINE 1096 IN MINT.asm
                    > USED AT LINE 745 IN MINT.asm
                    > USED AT LINE 782 IN MINT.asm
                    > USED AT LINE 1395 IN MINT.asm
CRLF:               05E8 DEFINED AT LINE 1103 IN MINT.asm
                    > USED AT LINE 248 IN MINT.asm
                    > USED AT LINE 1286 IN MINT.asm
ALT1:               05F2 DEFINED AT LINE 1109 IN MINT.asm
                    > USED AT LINE 496 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 1123 IN MINT.asm
CARRDEF_:           0600 DEFINED AT LINE 1125 IN MINT.asm
CFETCH_:            0605 DEFINED AT LINE 1129 IN MINT.asm
ANOP_:              060A DEFINED AT LINE 1134 IN MINT.asm
CHARCODE_:          060C DEFINED AT LINE 1137 IN MINT.asm
COMMENT_:           0614 DEFINED AT LINE 1145 IN MINT.asm
                    > USED AT LINE 1149 IN MINT.asm
CSTORE_:            061D DEFINED AT LINE 1153 IN MINT.asm
DEPTH_:             0622 DEFINED AT LINE 1160 IN MINT.asm
EMIT_:              0634 DEFINED AT LINE 1172 IN MINT.asm
IFTE_:              063B DEFINED AT LINE 1178 IN MINT.asm
EXEC_:              064D DEFINED AT LINE 1190 IN MINT.asm
EXEC1:              0652 DEFINED AT LINE 1193 IN MINT.asm
                    > USED AT LINE 1191 IN MINT.asm
GO_:                0655 DEFINED AT LINE 1198 IN MINT.asm
USERVAR_:           065E DEFINED AT LINE 1205 IN MINT.asm
I_:                 0668 DEFINED AT LINE 1214 IN MINT.asm
INCR_:              066C DEFINED AT LINE 1219 IN MINT.asm
INPORT_:            0677 DEFINED AT LINE 1231 IN MINT.asm
J_:                 0682 DEFINED AT LINE 1241 IN MINT.asm
KEY_:               068C DEFINED AT LINE 1249 IN MINT.asm
SYSCONST_:          0695 DEFINED AT LINE 1256 IN MINT.asm
LEAST_:             06A0 DEFINED AT LINE 1264 IN MINT.asm
MOST_:              06A8 DEFINED AT LINE 1272 IN MINT.asm
MOST1:              06AD DEFINED AT LINE 1277 IN MINT.asm
                    > USED AT LINE 1270 IN MINT.asm
MOST2:              06B1 DEFINED AT LINE 1281 IN MINT.asm
                    > USED AT LINE 1278 IN MINT.asm
NEWLN_:             06B4 DEFINED AT LINE 1285 IN MINT.asm
OUTPORT_:           06B9 DEFINED AT LINE 1289 IN MINT.asm
ROT_:               06C2 DEFINED AT LINE 1298 IN MINT.asm
SIGN_:              06C9 DEFINED AT LINE 1306 IN MINT.asm
SIGN2:              06D2 DEFINED AT LINE 1312 IN MINT.asm
                    > USED AT LINE 1310 IN MINT.asm
WHILE_:             06D5 DEFINED AT LINE 1316 IN MINT.asm
WHILE1:             06DC DEFINED AT LINE 1322 IN MINT.asm
                    > USED AT LINE 1320 IN MINT.asm
EDITDEF_:           06E4 DEFINED AT LINE 1327 IN MINT.asm
PRINTSTK_:          06E6 DEFINED AT LINE 1329 IN MINT.asm
PRINTSTK:           06E6 DEFINED AT LINE 1334 IN MINT.asm
EDITDEF:            070B DEFINED AT LINE 1343 IN MINT.asm
                    > USED AT LINE 1328 IN MINT.asm
EDITDEF1:           072C DEFINED AT LINE 1364 IN MINT.asm
                    > USED AT LINE 1370 IN MINT.asm
EDITDEF2:           072D DEFINED AT LINE 1366 IN MINT.asm
                    > USED AT LINE 1363 IN MINT.asm
EDITDEF3:           0735 DEFINED AT LINE 1371 IN MINT.asm
                    > USED AT LINE 1358 IN MINT.asm
ARRDEF:             0741 DEFINED AT LINE 1384 IN MINT.asm
                    > USED AT LINE 698 IN MINT.asm
ARRDEF1:            0743 DEFINED AT LINE 1386 IN MINT.asm
                    > USED AT LINE 1127 IN MINT.asm
ARREND:             0753 DEFINED AT LINE 1394 IN MINT.asm
                    > USED AT LINE 699 IN MINT.asm
ARREND2:            0768 DEFINED AT LINE 1406 IN MINT.asm
                    > USED AT LINE 1403 IN MINT.asm
DEF:                076F DEFINED AT LINE 1420 IN MINT.asm
                    > USED AT LINE 718 IN MINT.asm
NEXTBYTE:           0784 DEFINED AT LINE 1437 IN MINT.asm
                    > USED AT LINE 1444 IN MINT.asm
END_DEF:            078F DEFINED AT LINE 1446 IN MINT.asm
                    > USED AT LINE 1443 IN MINT.asm
HEX:                0796 DEFINED AT LINE 1454 IN MINT.asm
                    > USED AT LINE 759 IN MINT.asm
HEX1:               0799 DEFINED AT LINE 1456 IN MINT.asm
                    > USED AT LINE 1473 IN MINT.asm
HEX2:               07A1 DEFINED AT LINE 1462 IN MINT.asm
                    > USED AT LINE 1460 IN MINT.asm
PRINTHEX:           07B3 DEFINED AT LINE 1475 IN MINT.asm
                    > USED AT LINE 724 IN MINT.asm
                    > USED AT LINE 763 IN MINT.asm
PRINT_HEX8:         07BE DEFINED AT LINE 1488 IN MINT.asm
                    > USED AT LINE 1479 IN MINT.asm
                    > USED AT LINE 1481 IN MINT.asm
CONV:               07C7 DEFINED AT LINE 1497 IN MINT.asm
                    > USED AT LINE 1494 IN MINT.asm
NESTING:            07D2 DEFINED AT LINE 1515 IN MINT.asm
                    > USED AT LINE 210 IN MINT.asm
                    > USED AT LINE 240 IN MINT.asm
                    > USED AT LINE 1035 IN MINT.asm
NESTING1A:          07DD DEFINED AT LINE 1522 IN MINT.asm
                    > USED AT LINE 1519 IN MINT.asm
NESTING1:           07E0 DEFINED AT LINE 1525 IN MINT.asm
                    > USED AT LINE 1517 IN MINT.asm
NESTING2:           07EF DEFINED AT LINE 1534 IN MINT.asm
                    > USED AT LINE 1529 IN MINT.asm
                    > USED AT LINE 1531 IN MINT.asm
NESTING3:           07F1 DEFINED AT LINE 1537 IN MINT.asm
                    > USED AT LINE 1533 IN MINT.asm
NESTING4:           07FC DEFINED AT LINE 1544 IN MINT.asm
                    > USED AT LINE 1539 IN MINT.asm
                    > USED AT LINE 1541 IN MINT.asm
STACK:              0900 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 627 IN IOSerial.asm
DSTACK:             0900 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 168 IN MINT.asm
                    > USED AT LINE 486 IN MINT.asm
                    > USED AT LINE 1164 IN MINT.asm
RSTACK:             0A00 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 175 IN MINT.asm
TIB:                0A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 203 IN MINT.asm
                    > USED AT LINE 235 IN MINT.asm
                    > USED AT LINE 244 IN MINT.asm
                    > USED AT LINE 257 IN MINT.asm
                    > USED AT LINE 487 IN MINT.asm
                    > USED AT LINE 1357 IN MINT.asm
                    > USED AT LINE 1372 IN MINT.asm
MINTVARS:           0B00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 858 IN MINT.asm
                    > USED AT LINE 1207 IN MINT.asm
                    > USED AT LINE 1427 IN MINT.asm
SYSCONSTS:          0B00 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 178 IN MINT.asm
                    > USED AT LINE 1260 IN MINT.asm
CS0:                0B00 DEFINED AT LINE 20 IN ram.asm
CTIB:               0B02 DEFINED AT LINE 21 IN ram.asm
CDEFS:              0B04 DEFINED AT LINE 22 IN ram.asm
CVARS:              0B06 DEFINED AT LINE 23 IN ram.asm
COPCODES:           0B08 DEFINED AT LINE 24 IN ram.asm
CMACROS:            0B0A DEFINED AT LINE 25 IN ram.asm
CUSERVARS:          0B0C DEFINED AT LINE 26 IN ram.asm
USERVARS:           0B10 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 492 IN MINT.asm
                    > USED AT LINE 1207 IN MINT.asm
VALT:               0B10 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 648 IN MINT.asm
VBASE16:            0B12 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 721 IN MINT.asm
VTIBPTR:            0B14 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 197 IN MINT.asm
                    > USED AT LINE 256 IN MINT.asm
                    > USED AT LINE 359 IN MINT.asm
                    > USED AT LINE 368 IN MINT.asm
                    > USED AT LINE 1376 IN MINT.asm
VHEAPPTR:           0B1E DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 337 IN MINT.asm
                    > USED AT LINE 346 IN MINT.asm
                    > USED AT LINE 1389 IN MINT.asm
                    > USED AT LINE 1398 IN MINT.asm
                    > USED AT LINE 1432 IN MINT.asm
                    > USED AT LINE 1447 IN MINT.asm
VARS:               0B44 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 489 IN MINT.asm
                    > USED AT LINE 858 IN MINT.asm
DEFS:               0B78 DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 181 IN MINT.asm
                    > USED AT LINE 488 IN MINT.asm
                    > USED AT LINE 707 IN MINT.asm
                    > USED AT LINE 882 IN MINT.asm
                    > USED AT LINE 1348 IN MINT.asm
                    > USED AT LINE 1422 IN MINT.asm
                    > USED AT LINE 1427 IN MINT.asm
VIFTEMODE:          0BAC DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 905 IN MINT.asm
                    > USED AT LINE 1011 IN MINT.asm
                    > USED AT LINE 1179 IN MINT.asm
VBYTEMODE:          0BAE DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 339 IN MINT.asm
                    > USED AT LINE 1388 IN MINT.asm
                    > USED AT LINE 1401 IN MINT.asm
RST08:              0BB0 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 629 IN IOSerial.asm
RST10:              0BB2 DEFINED AT LINE 74 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 630 IN IOSerial.asm
RST18:              0BB4 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 631 IN IOSerial.asm
RST20:              0BB6 DEFINED AT LINE 76 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 632 IN IOSerial.asm
RST28:              0BB8 DEFINED AT LINE 77 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 633 IN IOSerial.asm
RST30:              0BBA DEFINED AT LINE 78 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 634 IN IOSerial.asm
BAUD:               0BBC DEFINED AT LINE 79 IN ram.asm
INTVEC:             0BBE DEFINED AT LINE 80 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 635 IN IOSerial.asm
NMIVEC:             0BC0 DEFINED AT LINE 81 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 636 IN IOSerial.asm
GETCVEC:            0BC2 DEFINED AT LINE 82 IN ram.asm
                    > USED AT LINE 617 IN IOSerial.asm
                    > USED AT LINE 639 IN IOSerial.asm
PUTCVEC:            0BC4 DEFINED AT LINE 83 IN ram.asm
                    > USED AT LINE 622 IN IOSerial.asm
                    > USED AT LINE 641 IN IOSerial.asm
TBPTR:              0BC6 DEFINED AT LINE 84 IN ram.asm
BUF:                0BC8 DEFINED AT LINE 86 IN ram.asm
HEAP:               0C80 DEFINED AT LINE 90 IN ram.asm
                    > USED AT LINE 503 IN MINT.asm
