0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 06 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 08 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 0A 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 0C 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 0E 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 10 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 14 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 16 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 18 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 1A 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 06 0A               LD   (RST08),HL   
0094   22 08 0A               LD   (RST10),HL   
0097   22 0A 0A               LD   (RST18),HL   
009A   22 0C 0A               LD   (RST20),HL   
009D   22 0E 0A               LD   (RST28),HL   
00A0   22 10 0A               LD   (RST30),HL   
00A3   22 14 0A               LD   (INTVEC),HL   
00A6   22 16 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 18 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 1A 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 18 02               JP   start   ; into #180 of the prog
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT 2.0 Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       John Hardy and Ken Boak
00C6                             ;       incorporates bit-bang serial routines by Craig Jones
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   
00C6                FALSE:    EQU   0   
00C6                UNLIMITED:   EQU   -1   
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_R:   EQU   18   
00C6                CTRL_S:   EQU   19   
00C6                BSLASH:   EQU   $5c   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 db len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 db (len | $80)
00C6                 db data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 db 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put mint code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mint and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                REEDIT_:      
0180   2F 7A 2F 5A 3B         DB   "/z/Z;"   ; remembers last line edited
0185                EDIT_:       
0185   60 3F 60 2F 4B 2F 50 2F 5A 3B 00 .CSTR   "`?`/K/P/Z;"   
0190                LIST_:       
0190   2F 4E 32 36 28 2F 69 36 35 2B 2F 5A 2F 6B 30 3E 28 2F 4E 29 29 2F 50 3B 00 .CSTR   "/N26(/i65+/Z/k0>(/N))/P;"   
01A9                PRINTSTACK_:      
01A9   60 3D 3E 20 60 2F 73 32 2D 20 2F 44 31 2D 28 22 2C 32 2D 29 27 2F 4E 2F 50 3B 00 .CSTR   "`=> `/s2- /D1-(",$22,",2-)'/N/P;"   
01C4                IOPCODES:      
01C4                          ;*Macro unroll:  LITDAT 15
01C4   0F                     DB   15   
01C5   1D                     DB   lsb(bang_)   ;   !
01C6   71                     DB   lsb(dquote_)   ;   "
01C7   F1                     DB   lsb(hash_)   ;   #
01C8   94                     DB   lsb(dollar_)   ;   $
01C9   79                     DB   lsb(percent_)   ;   %
01CA   2D                     DB   lsb(amper_)   ;   &
01CB   00                     DB   lsb(quote_)   ;   '
01CC   EC                     DB   lsb(lparen_)   ;   (
01CD   E3                     DB   lsb(rparen_)   ;   )
01CE   F3                     DB   lsb(star_)   ;   *
01CF   4F                     DB   lsb(plus_)   ;   +
01D0   6B                     DB   lsb(comma_)   ;   ,
01D1   99                     DB   lsb(minus_)   ;   -
01D2   60                     DB   lsb(dot_)   ;   .
01D3   F5                     DB   lsb(slash_)   ;   /	
01D4                          ;*Macro unroll:  REPDAT 10, lsb(num_)	; 10 x repeat lsb of add to the num routine
01D4   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
01D5   E0                     DB   lsb(num_)   
01D6                          ;*Macro unroll:  LITDAT 7
01D6   07                     DB   7   
01D7   E9                     DB   lsb(colon_)   ;    :
01D8   80                     DB   lsb(semi_)   ;    ;
01D9   BD                     DB   lsb(lt_)   ;    <
01DA   AE                     DB   lsb(eq_)   ;    =
01DB   B9                     DB   lsb(gt_)   ;    >
01DC   EF                     DB   lsb(question_)   ;    ?
01DD   01                     DB   lsb(at_)   ;    @
01DE                          ;*Macro unroll:  REPDAT 26, lsb(call_)	; call a command a, B ....Z
01DE   9A                     DB   (26 | $80)   ; call a command a, B ....Z
01DF   56                     DB   lsb(call_)   
01E0                          ;*Macro unroll:  LITDAT 6
01E0   06                     DB   6   
01E1   D7                     DB   lsb(lbrack_)   ;    [
01E2   03                     DB   lsb(bslash_)   ;    \
01E3   E6                     DB   lsb(rbrack_)   ;    ]
01E4   41                     DB   lsb(caret_)   ;    ^
01E5   01                     DB   lsb(underscore_)   ;    _
01E6   C8                     DB   lsb(grave_)   ;    `   ; for printing `hello`
01E7                          ;*Macro unroll:  REPDAT 26, lsb(var_)	; a b c .....z
01E7   9A                     DB   (26 | $80)   ; a b c .....z
01E8   05                     DB   lsb(var_)   
01E9                          ;*Macro unroll:  LITDAT 4
01E9   04                     DB   4   
01EA   87                     DB   lsb(lbrace_)   ;    {
01EB   38                     DB   lsb(pipe_)   ;    |
01EC   8C                     DB   lsb(rbrace_)   ;    }
01ED   4A                     DB   lsb(tilde_)   ;    ~ ( a b c -- b c a ) rotate
01EE                IALTCODES:      
01EE                          ;*Macro unroll:  LITDAT 26
01EE   1A                     DB   26   
01EF   00                     DB   lsb(alloc_)   ;A      allocate some heap memory
01F0   09                     DB   lsb(aNop_)   ;B
01F1   36                     DB   lsb(printChar_)   ;C      print a char
01F2   28                     DB   lsb(depth_)   ;D      depth of stack
01F3   09                     DB   lsb(aNop_)   ;E
01F4   EB                     DB   lsb(false_)   ;F      false condition
01F5   4F                     DB   lsb(go_)   ;G      go execute mint code
01F6   09                     DB   lsb(aNop_)   ;H
01F7   6D                     DB   lsb(inPort_)   ;I      input from port
01F8   09                     DB   lsb(aNop_)   ;J
01F9   64                     DB   lsb(key_)   ;K      read a char from input
01FA   09                     DB   lsb(aNop_)   ;L
01FB   09                     DB   lsb(aNop_)   ;M
01FC   78                     DB   lsb(newln_)   ;N      prints a newline to output
01FD   7D                     DB   lsb(outPort_)   ;O      output to port
01FE   4A                     DB   lsb(prompt_)   ;P      print MINT prompt
01FF   09                     DB   lsb(aNop_)   ;Q
0200   09                     DB   lsb(aNop_)   ;R
0201   0B                     DB   lsb(arrSize_)   ;S      array size
0202   09                     DB   lsb(aNop_)   ;T
0203   09                     DB   lsb(aNop_)   ;U
0204   09                     DB   lsb(aNop_)   ;V
0205   18                     DB   lsb(while_)   ;W      conditional break from loop
0206   3D                     DB   lsb(exec_)   ;X      execute machine code
0207   09                     DB   lsb(aNop_)   ;Y
0208   45                     DB   lsb(editDef_)   ;Z      edit line
0209                          ;*Macro unroll:  ENDDAT
0209   00                     DB   0   
020A                BACKSPACE:      
020A   79                     LD   a,c   
020B   B0                     OR   b   
020C   28 27                  JR   z,interpret2   
020E   0B                     DEC   bc   
020F   CD 9C 03               CALL   printStr   
0212   08 20 08 00            .CSTR   "\b \b"   
0216   18 1D                  JR   interpret2   
0218                START:       
0218   31 00 0A               LD   SP,DSTACK   ; start of MINT
021B   CD DE 02               CALL   init   ; setups
021E   CD 9C 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0221   4D 49 4E 54 32 2E 30 0D 0A 00 .CSTR   "MINT2.0\r\n"   
022B                INTERPRET:      
022B   CD 8C 03               CALL   prompt   
022E   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0231   ED 43 7C 0C            LD   (vTIBPtr),bc   
0235                INTERPRET2:      ; calc nesting (a macro might have changed it)
0235   1E 00                  LD   E,0   ; initilize nesting value
0237   C5                     PUSH   bc   ; save offset into TIB,
0238                             ; bc is also the count of chars in TIB
0238   21 00 08               LD   hl,TIB   ; hl is start of TIB
023B   18 06                  JR   interpret4   
023D                INTERPRET3:      
023D   7E                     LD   a,(hl)   ; A = char in TIB
023E   23                     INC   hl   ; inc pointer into TIB
023F   0B                     DEC   bc   ; dec count of chars in TIB
0240   CD 65 03               CALL   nesting   ; update nesting value
0243                INTERPRET4:      
0243   79                     LD   a,C   ; is count zero?
0244   B0                     OR   B   
0245   20 F6                  JR   NZ,interpret3   ; if not loop
0247   C1                     POP   bc   ; restore offset into TIB
0248                WAITCHAR:      
0248   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
024B   FE 20                  CP   $20   ; compare to space
024D   30 39                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
024F   FE 00                  CP   $0   ; is it end of string? null end of string
0251   28 59                  JR   Z,waitchar4   
0253   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0255   28 3F                  JR   Z,waitchar3   ; if anything else its macro/control
0257   FE 08                  CP   CTRL_H   
0259   28 AF                  JR   z,backSpace   
025B   16 01                  LD   d,msb(macros)   
025D   FE 05                  CP   CTRL_E   
025F   1E 85                  LD   e,lsb(edit_)   
0261   28 14                  JR   z,macro   
0263   FE 12                  CP   CTRL_R   
0265   1E 80                  LD   e,lsb(reedit_)   
0267   28 0E                  JR   z,macro   
0269   FE 0C                  CP   CTRL_L   
026B   1E 90                  LD   e,lsb(list_)   
026D   28 08                  JR   z,macro   
026F   FE 13                  CP   CTRL_S   
0271   1E A9                  LD   e,lsb(printStack_)   
0273   28 02                  JR   z,macro   
0275   18 BE                  JR   interpret2   
0277                MACRO:       
0277   ED 43 7C 0C            LD   (vTIBPtr),bc   
027B   D5                     PUSH   de   
027C   CD C7 03               CALL   ENTER   ;mint go operation and jump to it
027F   2F 47 00               .CSTR   "/G"   
0282   ED 4B 7C 0C            LD   bc,(vTIBPtr)   
0286   18 AD                  JR   interpret2   
0288                WAITCHAR1:      
0288   21 00 08               LD   hl,TIB   
028B   09                     ADD   hl,bc   
028C   77                     LD   (hl),A   ; store the character in textbuf
028D   03                     INC   bc   
028E   CD 85 00               CALL   putchar   ; echo character to screen
0291   CD 65 03               CALL   nesting   
0294   18 B2                  JR   waitchar   ; wait for next character
0296                WAITCHAR3:      
0296   21 00 08               LD   hl,TIB   
0299   09                     ADD   hl,bc   
029A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
029C   23                     INC   hl   
029D   36 0A                  LD   (hl),"\n"   
029F   23                     INC   hl   ; ????
02A0   03                     INC   bc   
02A1   03                     INC   bc   
02A2   CD 95 03               CALL   crlf   ; echo character to screen
02A5   7B                     LD   a,E   ; if zero nesting append and ETX after \r
02A6   B7                     OR   A   
02A7   20 9F                  JR   NZ,waitchar   
02A9   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02AB   03                     INC   bc   
02AC                WAITCHAR4:      
02AC   ED 43 7C 0C            LD   (vTIBPtr),bc   
02B0   01 00 08               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02B3   0B                     DEC   bc   
02B4                NEXT:        
02B4   03                     INC   bc   ; Increment the IP
02B5   0A                     LD   a,(bc)   ; Get the next character and dispatch
02B6   B7                     OR   a   ; is it NUL?
02B7   28 0F                  JR   z,exit   
02B9   FE 03                  CP   CTRL_C   
02BB   28 15                  JR   z,etx   
02BD   D6 21                  SUB   "!"   
02BF   38 F3                  JR   c,NEXT   
02C1   6F                     LD   L,A   ; Index into table
02C2   26 0B                  LD   H,msb(opcodes)   ; Start address of jump table
02C4   6E                     LD   L,(hl)   ; get low jump address
02C5   26 04                  LD   H,msb(page4)   ; Load H with the 1st page address
02C7   E9                     JP   (hl)   ; Jump to routine
02C8                EXIT:        
02C8   03                     INC   bc   ; store offests into a table of bytes, smaller
02C9   50 59                  LD   de,bc   
02CB   CD B7 03               CALL   rpop   ; Restore Instruction pointer
02CE   44 4D                  LD   bc,hl   
02D0   EB                     EX   de,hl   
02D1   E9                     JP   (hl)   
02D2                ETX:         
02D2   21 00 F6               LD   hl,-DSTACK   ; check if stack pointer is underwater
02D5   39                     ADD   hl,SP   
02D6   30 03                  JR   NC,etx1   
02D8   31 00 0A               LD   SP,DSTACK   
02DB                ETX1:        
02DB   C3 2B 02               JP   interpret   
02DE                INIT:        
02DE   DD 21 80 09            LD   IX,RSTACK   
02E2   FD 21 B4 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
02E6   21 00 0C               LD   hl,vars   
02E9   54 5D                  LD   de,hl   
02EB   13                     INC   de   
02EC   36 00                  LD   (hl),0   
02EE   01 9C 00               LD   bc,VARS_SIZE * 3   ; init vars, defs and altVars
02F1   ED B0                  LDIR      
02F3   21 FF FF               LD   hl,TRUE   ; hl = TRUE
02F6   22 8E 0C               LD   (vTrue),hl   
02F9   2B                     DEC   hl   ; hl = Unlimited
02FA   22 90 0C               LD   (vUnlimited),hl   
02FD   21 00 0A               LD   hl,dStack   
0300   22 8C 0C               LD   (vStkStart),hl   
0303   21 41 00               LD   hl,65   
0306   22 9A 0C               LD   (vLastDef),hl   
0309   21 9C 0C               LD   hl,HEAP   
030C   22 76 0C               LD   (vHeapPtr),hl   
030F                INITOPS:      
030F   21 C4 01               LD   hl,iOpcodes   
0312   11 00 0B               LD   de,opcodes   
0315   01 78 00               LD   bc,$80-32-1-1+26   
0318                INITOPS1:      
0318   7E                     LD   a,(hl)   
0319   23                     INC   hl   
031A   CB 27                  SLA   A   
031C   C8                     RET   Z   
031D   38 09                  JR   C,initOps2   
031F   CB 3F                  SRL   A   
0321   4F                     LD   C,A   
0322   06 00                  LD   B,0   
0324   ED B0                  LDIR      
0326   18 F0                  JR   initOps1   
0328                INITOPS2:      
0328   CB 3F                  SRL   A   
032A   47                     LD   B,A   
032B   7E                     LD   a,(hl)   
032C   23                     INC   hl   
032D                INITOPS2A:      
032D   12                     LD   (de),A   
032E   13                     INC   de   
032F   10 FC                  DJNZ   initOps2a   
0331   18 E5                  JR   initOps1   
0333                LOOKUPREF0:      
0333   21 34 0C               LD   hl,defs   
0336   D6 41                  SUB   "A"   
0338   18 02                  JR   lookupRef1   
033A                LOOKUPREF:      
033A   D6 61                  SUB   "a"   
033C                LOOKUPREF1:      
033C   87                     ADD   a,a   
033D   85                     ADD   a,l   
033E   6F                     LD   l,a   
033F   3E 00                  LD   a,0   
0341   8C                     ADC   a,h   
0342   67                     LD   h,a   
0343   AF                     XOR   a   
0344   B3                     OR   e   ; sets Z flag if A-Z
0345   C9                     RET      
0346                PRINTHEX:      
0346                             ; Display hl as a 16-bit number in hex.
0346   C5                     PUSH   bc   ; preserve the IP
0347   7C                     LD   a,H   
0348   CD 51 03               CALL   printhex2   
034B   7D                     LD   a,L   
034C   CD 51 03               CALL   printhex2   
034F   C1                     POP   bc   
0350   C9                     RET      
0351                PRINTHEX2:      
0351   4F                     LD   C,A   
0352   1F                     RRA      
0353   1F                     RRA      
0354   1F                     RRA      
0355   1F                     RRA      
0356   CD 5A 03               CALL   printhex3   
0359   79                     LD   a,C   
035A                PRINTHEX3:      
035A   E6 0F                  AND   0x0F   
035C   C6 90                  ADD   a,0x90   
035E   27                     DAA      
035F   CE 40                  ADC   a,0x40   
0361   27                     DAA      
0362   C3 85 00               JP   putchar   
0365                             ; **************************************************************************
0365                             ; calculate nesting value
0365                             ; A is char to be tested,
0365                             ; E is the nesting value (initially 0)
0365                             ; E is increased by ( and [
0365                             ; E is decreased by ) and ]
0365                             ; E has its bit 7 toggled by `
0365                             ; limited to 127 levels
0365                             ; **************************************************************************
0365                NESTING:      
0365   FE 60                  CP   "`"   
0367   20 05                  JR   NZ,nesting1   
0369   3E 80                  LD   a,$80   
036B   AB                     XOR   e   
036C   5F                     LD   e,a   
036D   C9                     RET      
036E                NESTING1:      
036E   CB 7B                  BIT   7,E   
0370   C0                     RET   NZ   
0371   FE 3A                  CP   ":"   
0373   28 08                  JR   Z,nesting2   
0375   FE 5B                  CP   "["   
0377   28 04                  JR   Z,nesting2   
0379   FE 28                  CP   "("   
037B   20 02                  JR   NZ,nesting3   
037D                NESTING2:      
037D   1C                     INC   E   
037E   C9                     RET      
037F                NESTING3:      
037F   FE 3B                  CP   ";"   
0381   28 07                  JR   Z,nesting4   
0383   FE 5D                  CP   "]"   
0385   28 03                  JR   Z,nesting4   
0387   FE 29                  CP   ")"   
0389   C0                     RET   NZ   
038A                NESTING4:      
038A   1D                     DEC   E   
038B   C9                     RET      
038C                PROMPT:      
038C   CD 9C 03               CALL   printStr   
038F   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0394   C9                     RET      
0395                CRLF:        
0395   CD 9C 03               CALL   printStr   
0398   0D 0A 00               .CSTR   "\r\n"   
039B   C9                     RET      
039C                PRINTSTR:      
039C   E3                     EX   (SP),hl   ; swap			
039D   CD A7 03               CALL   putStr   
03A0   23                     INC   hl   ; inc past null
03A1   E3                     EX   (SP),hl   ; put it back	
03A2   C9                     RET      
03A3                PUTSTR0:      
03A3   CD 85 00               CALL   putchar   
03A6   23                     INC   hl   
03A7                PUTSTR:      
03A7   7E                     LD   a,(hl)   
03A8   B7                     OR   A   
03A9   20 F8                  JR   NZ,putStr0   
03AB   C9                     RET      
03AC                RPUSH:       
03AC   DD 2B                  DEC   IX   
03AE   DD 74 00               LD   (IX+0),H   
03B1   DD 2B                  DEC   IX   
03B3   DD 75 00               LD   (IX+0),L   
03B6   C9                     RET      
03B7                RPOP:        
03B7   DD 6E 00               LD   L,(IX+0)   
03BA   DD 23                  INC   IX   
03BC   DD 66 00               LD   H,(IX+0)   
03BF   DD 23                  INC   IX   
03C1                RPOP2:       
03C1   C9                     RET      
03C2                WRITECHAR:      
03C2   77                     LD   (hl),A   
03C3   23                     INC   hl   
03C4   C3 85 00               JP   putchar   
03C7                ENTER:       
03C7   60 69                  LD   hl,bc   
03C9   CD AC 03               CALL   rpush   ; save Instruction Pointer
03CC   C1                     POP   bc   
03CD   0B                     DEC   bc   
03CE   FD E9                  JP   (iy)   
03D0                CARRY:       
03D0   21 00 00               LD   hl,0   
03D3   CB 15                  RL   l   
03D5   22 6C 0C               LD   (vCarry),hl   
03D8   FD E9                  JP   (iy)   
03DA                SETBYTEMODE:      
03DA   3E FF                  LD   a,$FF   
03DC   18 01                  JR   assignByteMode   
03DE                RESETBYTEMODE:      
03DE   AF                     XOR   a   
03DF                ASSIGNBYTEMODE:      
03DF   32 6A 0C               LD   (vByteMode),a   
03E2   32 6B 0C               LD   (vByteMode+1),a   
03E5   FD E9                  JP   (iy)   
03E7                             ; **********************************************************************			
03E7                             ; Page 4 primitive routines
03E7                             ; **********************************************************************
03E7                          ALIGN   $100   
0400                PAGE4:       
0400                QUOTE_:      ; Discard the top member of the stack
0400   E1                     POP   hl   
0401                AT_:         
0401                UNDERSCORE_:      
0401   FD E9                  JP   (IY)   
0403                BSLASH_:      
0403   18 D5                  JR   setByteMode   
0405                VAR_:        
0405   0A                     LD   a,(bc)   
0406   21 00 0C               LD   hl,vars   
0409   CD 3A 03               CALL   lookupRef   
040C                VAR1:        
040C   22 86 0C               LD   (vPointer),hl   
040F   16 00                  LD   d,0   
0411   5E                     LD   e,(hl)   
0412   3A 6A 0C               LD   a,(vByteMode)   
0415   3C                     INC   a   ; is it byte?
0416   28 02                  JR   z,var2   
0418   23                     INC   hl   
0419   56                     LD   d,(hl)   
041A                VAR2:        
041A   D5                     PUSH   de   
041B   18 C1                  JR   resetByteMode   
041D                BANG_:       ; Store the value at the address placed on the top of the stack
041D                ASSIGN:      
041D   E1                     POP   hl   ; discard value of last accessed variable
041E   D1                     POP   de   ; new value
041F   2A 86 0C               LD   hl,(vPointer)   
0422   73                     LD   (hl),e   
0423   3A 6A 0C               LD   a,(vByteMode)   
0426   3C                     INC   a   ; is it byte?
0427   28 02                  JR   z,assign1   
0429   23                     INC   hl   
042A   72                     LD   (hl),d   
042B                ASSIGN1:      
042B   18 B1                  JR   resetByteMode   
042D                AMPER_:      
042D   D1                     POP   de   ;     Bitwise and the top 2 elements of the stack
042E   E1                     POP   hl   
042F   7B                     LD   a,E   
0430   A5                     AND   L   
0431   6F                     LD   L,A   
0432   7A                     LD   a,D   
0433   A4                     AND   H   
0434                AND1:        
0434   67                     LD   h,a   
0435   E5                     PUSH   hl   
0436   FD E9                  JP   (iy)   
0438                PIPE_:       
0438   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0439   E1                     POP   hl   
043A   7B                     LD   a,E   
043B   B5                     OR   L   
043C   6F                     LD   L,A   
043D   7A                     LD   a,D   
043E   B4                     OR   h   
043F   18 F3                  JR   and1   
0441                CARET_:      
0441   D1                     POP   de   ; Bitwise XOR the top 2 elements of the stack
0442                XOR1:        
0442   E1                     POP   hl   
0443   7B                     LD   a,E   
0444   AD                     XOR   L   
0445   6F                     LD   L,A   
0446   7A                     LD   a,D   
0447   AC                     XOR   H   
0448   18 EA                  JR   and1   
044A                TILDE_:      
044A                INVERT:      ; Bitwise INVert the top member of the stack
044A   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
044D   18 F3                  JR   xor1   
044F                PLUS_:       ; add the top 2 members of the stack
044F   D1                     POP   de   
0450   E1                     POP   hl   
0451   19                     ADD   hl,de   
0452   E5                     PUSH   hl   
0453   C3 D0 03               JP   carry   
0456                CALL_:       
0456   0A                     LD   a,(bc)   
0457   CD 33 03               CALL   lookupRef0   
045A   5E                     LD   E,(hl)   
045B   23                     INC   hl   
045C   56                     LD   D,(hl)   
045D   C3 50 06               JP   go1   
0460                DOT_:        
0460   E1                     POP   hl   
0461   CD B6 06               CALL   printDec   
0464                DOT2:        
0464   3E 20                  LD   a," "   
0466   CD 85 00               CALL   putChar   
0469   FD E9                  JP   (IY)   
046B                COMMA_:      ; print hexadecimal
046B   E1                     POP   hl   
046C   CD 46 03               CALL   printhex   
046F   18 F3                  JR   dot2   
0471                DQUOTE_:      
0471   E1                     POP   hl   ; Duplicate the top member of the stack
0472   E5                     PUSH   hl   
0473   E5                     PUSH   hl   
0474   FD E9                  JP   (IY)   
0476   C3 B4 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0479                PERCENT_:      
0479   E1                     POP   hl   ; Duplicate 2nd element of the stack
047A   D1                     POP   de   
047B   D5                     PUSH   de   
047C   E5                     PUSH   hl   
047D   D5                     PUSH   de   ; and push it to top of stack
047E   FD E9                  JP   (IY)   
0480                SEMI_:       
0480   CD B7 03               CALL   rpop   ; Restore Instruction pointer
0483   44 4D                  LD   bc,hl   
0485   FD E9                  JP   (IY)   
0487                             ;  Left shift { is multiply by 2		
0487                LBRACE_:      
0487   E1                     POP   hl   ; Duplicate the top member of the stack
0488   29                     ADD   hl,hl   
0489   E5                     PUSH   hl   ; shift left fallthrough into plus_
048A   FD E9                  JP   (IY)   
048C                             ;  Right shift } is a divide by 2		
048C                RBRACE_:      
048C   E1                     POP   hl   ; Get the top member of the stack
048D                SHR1:        
048D   CB 3C                  SRL   H   
048F   CB 1D                  RR   L   
0491   E5                     PUSH   hl   
0492   FD E9                  JP   (IY)   
0494                             ; $ swap                    ; a b -- b a Swap the top 2 elements of the stack
0494                DOLLAR_:      
0494   E1                     POP   hl   
0495   E3                     EX   (SP),hl   
0496   E5                     PUSH   hl   
0497   FD E9                  JP   (IY)   
0499                MINUS_:      ; Subtract the value 2nd on stack from top of stack
0499   03                     INC   bc   ; check if sign of a number
049A   0A                     LD   a,(bc)   
049B   0B                     DEC   bc   
049C   FE 30                  CP   "0"   
049E   38 05                  JR   c,sub1   
04A0   FE 3A                  CP   "9"+1   
04A2   DA 2B 07               JP   c,num   
04A5                SUB1:        
04A5   D1                     POP   de   
04A6   E1                     POP   hl   
04A7                SUB2:        
04A7   A7                     AND   A   
04A8   ED 52                  SBC   hl,de   
04AA   E5                     PUSH   hl   
04AB   C3 D0 03               JP   carry   
04AE                EQ_:         
04AE   E1                     POP   hl   
04AF   D1                     POP   de   
04B0   B7                     OR   a   ; reset the carry flag
04B1   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04B3   CA F0 07               JP   z,true_   
04B6   C3 EB 07               JP   false_   
04B9                GT_:         
04B9   E1                     POP   hl   
04BA   D1                     POP   de   
04BB   18 02                  JR   lt1_   
04BD                LT_:         
04BD   D1                     POP   de   
04BE   E1                     POP   hl   
04BF                LT1_:        
04BF   B7                     OR   a   ; reset the carry flag
04C0   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04C2   DA F0 07               JP   c,true_   
04C5   C3 EB 07               JP   false_   
04C8                GRAVE_:      
04C8                STR:         
04C8   03                     INC   bc   
04C9                STR1:        
04C9   0A                     LD   a,(bc)   
04CA   03                     INC   bc   
04CB   FE 60                  CP   "`"   ; ` is the string terminator
04CD   28 05                  JR   Z,str2   
04CF   CD 85 00               CALL   putchar   
04D2   18 F5                  JR   str1   
04D4                STR2:        
04D4   0B                     DEC   bc   
04D5   FD E9                  JP   (IY)   
04D7                LBRACK_:      
04D7                ARRDEF:      
04D7   21 00 00               LD   hl,0   
04DA   39                     ADD   hl,sp   ; save
04DB   CD AC 03               CALL   rpush   
04DE   FD E9                  JP   (iy)   
04E0                NUM_:        
04E0   C3 2B 07               JP   num   
04E3                RPAREN_:      
04E3   C3 C3 05               JP   again   ; close loop
04E6                RBRACK_:      
04E6   C3 5B 07               JP   arrEnd   
04E9                COLON_:      
04E9   C3 FE 06               JP   def   
04EC                LPAREN_:      
04EC   C3 89 05               JP   begin   
04EF                QUESTION_:      
04EF   18 50                  JR   arrAccess   
04F1                HASH_:       
04F1   18 5B                  JR   hex   
04F3                STAR_:       
04F3   18 78                  JR   mul   
04F5                SLASH_:      
04F5                ALT_:        ; falls through (must be on page 4)
04F5                             ;*******************************************************************
04F5                             ; Page 5 primitive routines
04F5                             ;*******************************************************************
04F5                ALT:         
04F5   03                     INC   bc   
04F6   0A                     LD   a,(bc)   
04F7   FE 7B                  CP   "z"+1   
04F9   30 0C                  JR   nc,alt1   
04FB   FE 61                  CP   "a"   
04FD   30 0C                  JR   nc,altVar   
04FF   FE 5B                  CP   "Z"+1   
0501   30 04                  JR   nc,alt1   
0503   FE 41                  CP   "A"   
0505   30 2D                  JR   nc,altCode   
0507                ALT1:        
0507   0B                     DEC   bc   
0508   C3 A4 07               JP   div   
050B                ALTVAR:      
050B   FE 69                  CP   "i"   
050D   2E 00                  LD   l,0   
050F   CA 21 05               JP   z,loopVar   
0512   FE 6A                  CP   "j"   
0514   2E 08                  LD   l,8   
0516   28 09                  JR   z,loopVar   
0518   21 68 0C               LD   hl,altVars   
051B   CD 3A 03               CALL   lookupRef   
051E   C3 0C 04               JP   var1   
0521                LOOPVAR:      
0521   26 00                  LD   h,0   
0523   DD 54                  LD   d,ixh   
0525   DD 5D                  LD   e,ixl   
0527   19                     ADD   hl,de   
0528   C3 0C 04               JP   var1   
052B                COMMENT:      
052B   03                     INC   bc   ; point to next char
052C   0A                     LD   a,(bc)   
052D   FE 0D                  CP   "\r"   ; terminate at cr
052F   20 FA                  JR   NZ,comment   
0531   0B                     DEC   bc   
0532   FD E9                  JP   (IY)   
0534                ALTCODE:      
0534   21 5E 0B               LD   hl,altCodes   
0537   D6 41                  SUB   "A"   
0539   85                     ADD   a,L   
053A   6F                     LD   L,A   
053B   7E                     LD   a,(hl)   ;       get low jump address
053C   21 00 06               LD   hl,page6   
053F   6F                     LD   L,A   
0540   E9                     JP   (hl)   ;       Jump to routine
0541                ARRACCESS:      
0541   E1                     POP   hl   ; hl = index
0542   D1                     POP   de   ; de = array
0543   3A 6A 0C               LD   a,(vByteMode)   ; a = data width
0546   3C                     INC   a   
0547   28 01                  JR   z,arrAccess1   
0549   29                     ADD   hl,hl   ; if data width = 2 then double
054A                ARRACCESS1:      
054A   19                     ADD   hl,de   ; hl = addr
054B   C3 0C 04               JP   var1   
054E                HEX:         
054E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0551                HEX1:        
0551   03                     INC   bc   
0552   0A                     LD   a,(bc)   ; Get the character which is a numeral
0553   CB 77                  BIT   6,A   ; is it uppercase alpha?
0555   CA 5A 05               JP   Z,hex2   ; no a decimal
0558   D6 07                  SUB   7   ; sub 7  to make $A - $F
055A                HEX2:        
055A   D6 30                  SUB   $30   ; Form decimal digit
055C   DA 4D 07               JP   C,num2   
055F   FE 10                  CP   $0F+1   
0561   D2 4D 07               JP   NC,num2   
0564   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0565   29                     ADD   hl,hl   ; 4X
0566   29                     ADD   hl,hl   ; 8X
0567   29                     ADD   hl,hl   ; 16X
0568   85                     ADD   a,L   ; add into bottom of hl
0569   6F                     LD   L,A   
056A   C3 51 05               JP   hex1   
056D                MUL:         
056D   D1                     POP   de   ; get first value
056E   E1                     POP   hl   
056F   C5                     PUSH   bc   ; Preserve the IP
0570   44                     LD   B,H   ; bc = 2nd value
0571   4D                     LD   C,L   
0572   21 00 00               LD   hl,0   
0575   3E 10                  LD   a,16   
0577                MUL2:        
0577   29                     ADD   hl,hl   
0578   CB 13                  RL   E   
057A   CB 12                  RL   D   
057C   30 04                  JR   NC,$+6   
057E   09                     ADD   hl,bc   
057F   30 01                  JR   NC,$+3   
0581   13                     INC   de   
0582   3D                     DEC   A   
0583   20 F2                  JR   NZ,mul2   
0585   C1                     POP   bc   ; Restore the IP
0586   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0587   FD E9                  JP   (IY)   
0589                BEGIN:       
0589                LOOPSTART:      
0589   ED 43 02 0A            LD   (vTemp1),bc   ; save start
058D   1E 01                  LD   e,1   ; skip to loop end, nesting = 1
058F                LOOPSTART1:      
058F   03                     INC   bc   
0590   0A                     LD   a,(bc)   
0591   CD 65 03               CALL   nesting   ; affects zero flag
0594   20 F9                  JR   nz,loopStart1   
0596   D1                     POP   de   ; de = limit
0597   7B                     LD   a,e   ; is it zero?
0598   B2                     OR   d   
0599   20 07                  JR   nz,loopStart2   
059B   1B                     DEC   de   ; de = TRUE
059C   ED 53 70 0C            LD   (vElse),de   
05A0   18 1F                  JR   loopStart4   ; yes continue after skip
05A2                LOOPSTART2:      
05A2   3E 02                  LD   a,2   ; is it TRUE
05A4   83                     ADD   a,e   
05A5   82                     ADD   a,d   
05A6   20 03                  JR   nz,loopStart3   
05A8   11 01 00               LD   de,1   ; yes make it 1
05AB                LOOPSTART3:      
05AB   60 69                  LD   hl,bc   
05AD   CD AC 03               CALL   rpush   ; rpush loop end
05B0   0B                     DEC   bc   ; IP points to ")"
05B1   2A 02 0A               LD   hl,(vTemp1)   ; restore start
05B4   CD AC 03               CALL   rpush   ; rpush start
05B7   EB                     EX   de,hl   ; hl = limit
05B8   CD AC 03               CALL   rpush   ; rpush limit
05BB   21 FF FF               LD   hl,-1   ; hl = count = -1
05BE   CD AC 03               CALL   rpush   ; rpush count
05C1                LOOPSTART4:      
05C1   FD E9                  JP   (iy)   
05C3                AGAIN:       
05C3                LOOPEND:      
05C3   DD 5E 02               LD   e,(ix+2)   ; de = limit
05C6   DD 56 03               LD   d,(ix+3)   
05C9   7B                     LD   a,e   ; a = lsb(limit)
05CA   B2                     OR   d   ; if limit 0 exit loop
05CB   28 2B                  JR   z,loopEnd4   
05CD   13                     INC   de   ; is limit -2
05CE   13                     INC   de   
05CF   7B                     LD   a,e   ; a = lsb(limit)
05D0   B2                     OR   d   ; if limit 0 exit loop
05D1   28 09                  JR   z,loopEnd2   ; yes, loop again
05D3   1B                     DEC   de   
05D4   1B                     DEC   de   
05D5   1B                     DEC   de   
05D6   DD 73 02               LD   (ix+2),e   
05D9   DD 72 03               LD   (ix+3),d   
05DC                LOOPEND2:      
05DC   DD 5E 00               LD   e,(ix+0)   ; inc counter
05DF   DD 56 01               LD   d,(ix+1)   
05E2   13                     INC   de   
05E3   DD 73 00               LD   (ix+0),e   
05E6   DD 72 01               LD   (ix+1),d   
05E9                LOOPEND3:      
05E9   11 00 00               LD   de,FALSE   ; if clause ran then vElse = FALSE
05EC   ED 53 70 0C            LD   (vElse),de   
05F0   DD 4E 04               LD   c,(ix+4)   ; IP = start
05F3   DD 46 05               LD   b,(ix+5)   
05F6   FD E9                  JP   (iy)   
05F8                LOOPEND4:      
05F8   11 08 00               LD   de,2*4   ; rpop frame
05FB   DD 19                  ADD   ix,de   
05FD   FD E9                  JP   (iy)   
05FF                             ; **************************************************************************
05FF                             ; Page 6 Alt primitives
05FF                             ; **************************************************************************
05FF                          ALIGN   $100   
0600                PAGE6:       
0600                             ; allocates raw heap memory in bytes (ignores byte mode)
0600                             ; n -- a
0600                ALLOC_:      
0600   D1                     POP   de   
0601   2A 76 0C               LD   hl,(vHeapPtr)   
0604   E5                     PUSH   hl   
0605   19                     ADD   hl,de   
0606   22 76 0C               LD   (vHeapPtr),hl   
0609                ANOP_:       
0609   FD E9                  JP   (iy)   
060B                             ; returns the size of an array
060B                             ; a -- n
060B                ARRSIZE_:      
060B                ARRSIZE:      
060B   E1                     POP   hl   
060C   2B                     DEC   hl   ; msb size
060D   56                     LD   d,(hl)   
060E   2B                     DEC   hl   ; lsb size
060F   5E                     LD   e,(hl)   
0610   D5                     PUSH   de   
0611   FD E9                  JP   (iy)   
0613                BMODE_:      
0613   3E FF                  LD   a,$FF   
0615   C3 DA 03               JP   setByteMode   
0618                BREAK_:      
0618                WHILE_:      
0618                WHILE:       
0618   E1                     POP   hl   
0619   7D                     LD   a,l   
061A   B4                     OR   h   
061B   20 09                  JR   nz,while2   
061D   DD 4E 06               LD   c,(ix+6)   ; IP = )
0620   DD 46 07               LD   b,(ix+7)   
0623   C3 F8 05               JP   loopEnd4   
0626                WHILE2:      
0626   FD E9                  JP   (iy)   
0628                DEPTH_:      
0628                DEPTH:       
0628   21 00 00               LD   hl,0   
062B   39                     ADD   hl,SP   
062C   EB                     EX   de,hl   
062D   21 00 0A               LD   hl,DSTACK   
0630   B7                     OR   A   
0631   ED 52                  SBC   hl,de   
0633   C3 8D 04               JP   shr1   
0636                PRINTCHAR_:      
0636   E1                     POP   hl   
0637   7D                     LD   a,L   
0638   CD 85 00               CALL   putchar   
063B   FD E9                  JP   (IY)   
063D                EXEC_:       
063D   CD 42 06               CALL   exec1   
0640   FD E9                  JP   (IY)   
0642                EXEC1:       
0642   E1                     POP   hl   
0643   E3                     EX   (SP),hl   
0644   E9                     JP   (hl)   
0645                EDITDEF_:      
0645   CD 86 06               CALL   editDef   
0648   FD E9                  JP   (IY)   
064A                PROMPT_:      
064A   CD 8C 03               CALL   prompt   
064D   FD E9                  JP   (IY)   
064F                GO_:         
064F   D1                     POP   de   
0650                GO1:         
0650   7A                     LD   a,D   ; skip if destination address is null
0651   B3                     OR   E   
0652   28 0E                  JR   Z,go3   
0654   60 69                  LD   hl,bc   
0656   03                     INC   bc   ; read next char from source
0657   0A                     LD   a,(bc)   ; if ; to tail call optimise
0658   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
065A   28 03                  JR   Z,go2   
065C   CD AC 03               CALL   rpush   ; save Instruction Pointer
065F                GO2:         
065F   42 4B                  LD   bc,de   
0661   0B                     DEC   bc   
0662                GO3:         
0662   FD E9                  JP   (IY)   
0664                KEY_:        
0664   CD 81 00               CALL   getchar   
0667   26 00                  LD   H,0   
0669   6F                     LD   L,A   
066A   E5                     PUSH   hl   
066B   FD E9                  JP   (IY)   
066D                INPORT_:      ; \<
066D   E1                     POP   hl   
066E   79                     LD   a,C   
066F   4D                     LD   C,L   
0670   ED 68                  IN   L,(C)   
0672   26 00                  LD   H,0   
0674   4F                     LD   C,A   
0675   E5                     PUSH   hl   
0676   FD E9                  JP   (IY)   
0678                NEWLN_:      
0678   CD 95 03               CALL   crlf   
067B   FD E9                  JP   (IY)   
067D                OUTPORT_:      
067D   E1                     POP   hl   
067E   59                     LD   E,C   
067F   4D                     LD   C,L   
0680   E1                     POP   hl   
0681   ED 69                  OUT   (C),L   
0683   4B                     LD   C,E   
0684   FD E9                  JP   (IY)   
0686                             ;*******************************************************************
0686                             ; Subroutines
0686                             ;*******************************************************************
0686                EDITDEF:      ; lookup up def based on number
0686   E1                     POP   hl   ; pop ret address
0687   E3                     EX   (SP),hl   ; swap with TOS
0688   7D                     LD   a,L   
0689   08                     EX   AF,AF'   
068A   7D                     LD   a,l   
068B   CD 33 03               CALL   lookupRef0   
068E   5E                     LD   E,(hl)   
068F   23                     INC   hl   
0690   56                     LD   D,(hl)   
0691   7A                     LD   a,D   
0692   B3                     OR   E   
0693   21 00 08               LD   hl,TIB   
0696   28 14                  JR   Z,editDef3   
0698   3E 3A                  LD   a,":"   
069A   CD C2 03               CALL   writeChar   
069D   08                     EX   AF,AF'   
069E   CD C2 03               CALL   writeChar   
06A1   18 01                  JR   editDef2   
06A3                EDITDEF1:      
06A3   13                     INC   de   
06A4                EDITDEF2:      
06A4   1A                     LD   a,(de)   
06A5   CD C2 03               CALL   writeChar   
06A8   FE 3B                  CP   ";"   
06AA   20 F7                  JR   NZ,editDef1   
06AC                EDITDEF3:      
06AC   11 00 08               LD   de,TIB   
06AF   B7                     OR   A   
06B0   ED 52                  SBC   hl,de   
06B2   22 7C 0C               LD   (vTIBPtr),hl   
06B5   C9                     RET      
06B6                             ; hl = value
06B6                PRINTDEC:      
06B6   CB 7C                  BIT   7,h   
06B8   28 0B                  JR   z,printDec2   
06BA   3E 2D                  LD   a,"-"   
06BC   CD 85 00               CALL   putchar   
06BF   AF                     XOR   a   
06C0   95                     SUB   l   
06C1   6F                     LD   l,a   
06C2   9F                     SBC   a,a   
06C3   94                     SUB   h   
06C4   67                     LD   h,a   
06C5                PRINTDEC2:      
06C5   C5                     PUSH   bc   
06C6   0E 00                  LD   c,0   ; leading zeros flag = false
06C8   11 F0 D8               LD   de,-10000   
06CB   CD E7 06               CALL   printDec4   
06CE   11 18 FC               LD   de,-1000   
06D1   CD E7 06               CALL   printDec4   
06D4   11 9C FF               LD   de,-100   
06D7   CD E7 06               CALL   printDec4   
06DA   1E F6                  LD   e,-10   
06DC   CD E7 06               CALL   printDec4   
06DF   0C                     INC   c   ; flag = true for at least digit
06E0   1E FF                  LD   e,-1   
06E2   CD E7 06               CALL   printDec4   
06E5   C1                     POP   bc   
06E6   C9                     RET      
06E7                PRINTDEC4:      
06E7   06 2F                  LD   b,"0"-1   
06E9                PRINTDEC5:      
06E9   04                     INC   b   
06EA   19                     ADD   hl,de   
06EB   38 FC                  JR   c,printDec5   
06ED   ED 52                  SBC   hl,de   
06EF   3E 30                  LD   a,"0"   
06F1   B8                     CP   b   
06F2   20 05                  JR   nz,printDec6   
06F4   AF                     XOR   a   
06F5   B1                     OR   c   
06F6   C8                     RET   z   
06F7   18 01                  JR   printDec7   
06F9                PRINTDEC6:      
06F9   0C                     INC   c   
06FA                PRINTDEC7:      
06FA   78                     LD   a,b   
06FB   C3 85 00               JP   putchar   
06FE                             ;*******************************************************************
06FE                             ; Page 5 primitive routines continued
06FE                             ;*******************************************************************
06FE                DEF:         ; Create a colon definition
06FE   03                     INC   bc   
06FF   0A                     LD   a,(bc)   ; Get the next character
0700   FE 3A                  CP   ":"   ; is it anonymouse
0702   20 08                  JR   nz,def0   
0704   03                     INC   bc   
0705   ED 5B 76 0C            LD   de,(vHeapPtr)   ; return start of definition
0709   D5                     PUSH   de   
070A   18 0E                  JR   def1   
070C                DEF0:        
070C   32 9A 0C               LD   (vLastDef),a   
070F   CD 33 03               CALL   lookupRef0   
0712   ED 5B 76 0C            LD   de,(vHeapPtr)   ; start of defintion
0716   73                     LD   (hl),E   ; Save low byte of address in CFA
0717   23                     INC   hl   
0718   72                     LD   (hl),D   ; Save high byte of address in CFA+1
0719   03                     INC   bc   
071A                DEF1:        ; Skip to end of definition
071A   0A                     LD   a,(bc)   ; Get the next character
071B   03                     INC   bc   ; Point to next character
071C   12                     LD   (de),A   
071D   13                     INC   de   
071E   FE 3B                  CP   ";"   ; Is it a semicolon
0720   28 02                  JR   Z,def2   ; end the definition
0722   18 F6                  JR   def1   ; get the next element
0724                DEF2:        
0724   0B                     DEC   bc   
0725                DEF3:        
0725   ED 53 76 0C            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0729   FD E9                  JP   (IY)   
072B                NUM:         
072B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
072E   0A                     LD   a,(bc)   ; Get numeral or -
072F   FE 2D                  CP   "-"   
0731   20 01                  JR   nz,num0   
0733   03                     INC   bc   ; move to next char, no flags affected
0734                NUM0:        
0734   08                     EX   af,af'   ; save zero flag = 0 for later
0735                NUM1:        
0735   0A                     LD   a,(bc)   ; read digit
0736   D6 30                  SUB   "0"   ; less than 0?
0738   38 13                  JR   c,num2   ; not a digit, exit loop
073A   FE 0A                  CP   10   ; greater that 9?
073C   30 0F                  JR   nc,num2   ; not a digit, exit loop
073E   03                     INC   bc   ; inc IP
073F   54 5D                  LD   de,hl   ; multiply hl * 10
0741   29                     ADD   hl,hl   
0742   29                     ADD   hl,hl   
0743   19                     ADD   hl,de   
0744   29                     ADD   hl,hl   
0745   85                     ADD   a,l   ; add digit in a to hl
0746   6F                     LD   l,a   
0747   3E 00                  LD   a,0   
0749   8C                     ADC   a,h   
074A   67                     LD   h,a   
074B   18 E8                  JR   num1   
074D                NUM2:        
074D   0B                     DEC   bc   
074E   08                     EX   af,af'   ; restore zero flag
074F   20 07                  JR   nz,num3   
0751   EB                     EX   de,hl   ; negate the value of hl
0752   21 00 00               LD   hl,0   
0755   B7                     OR   a   ; jump to sub2
0756   ED 52                  SBC   hl,de   
0758                NUM3:        
0758   E5                     PUSH   hl   ; Put the number on the stack
0759   FD E9                  JP   (iy)   ; and process the next character
075B                ARREND:      
075B   ED 43 02 0A            LD   (vTemp1),bc   ; save IP
075F   CD B7 03               CALL   rpop   
0762   22 04 0A               LD   (vTemp2),hl   ; save old SP
0765   54 5D                  LD   de,hl   ; de = hl = old SP
0767   B7                     OR   a   
0768   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
076A   CB 3C                  SRL   h   ; num items = num bytes / 2
076C   CB 1D                  RR   l   
076E   44 4D                  LD   bc,hl   ; bc = count
0770   2A 76 0C               LD   hl,(vHeapPtr)   ; hl = array[-4]
0773   71                     LD   (hl),c   ; write num items in length word
0774   23                     INC   hl   
0775   70                     LD   (hl),b   
0776   23                     INC   hl   ; hl = array[0], bc = count
0777                             ; de = old SP, hl = array[0], bc = count
0777   18 11                  JR   arrayEnd2   
0779                ARRAYEND1:      
0779   0B                     DEC   bc   ; dec items count
077A   1B                     DEC   de   
077B   1B                     DEC   de   
077C   1A                     LD   a,(de)   ; a = lsb of stack item
077D   77                     LD   (hl),a   ; write lsb of array item
077E   23                     INC   hl   ; move to msb of array item
077F   3A 6A 0C               LD   a,(vByteMode)   ; vByteMode=1?
0782   3C                     INC   a   
0783   28 05                  JR   z,arrayEnd2   
0785   13                     INC   de   
0786   1A                     LD   a,(de)   ; a = msb of stack item
0787   1B                     DEC   de   
0788   77                     LD   (hl),a   ; write msb of array item
0789   23                     INC   hl   ; move to next word in array
078A                ARRAYEND2:      
078A   79                     LD   a,c   ; if not zero loop
078B   B0                     OR   b   
078C   20 EB                  JR   nz,arrayEnd1   
078E   EB                     EX   de,hl   ; de = end of array
078F   2A 04 0A               LD   hl,(vTemp2)   
0792   F9                     LD   sp,hl   ; SP = old SP
0793   2A 76 0C               LD   hl,(vHeapPtr)   ; de = array[-2]
0796   23                     INC   hl   
0797   23                     INC   hl   
0798   E5                     PUSH   hl   ; return array[0]
0799   ED 53 76 0C            LD   (vHeapPtr),de   ; move heap* to end of array
079D   ED 4B 02 0A            LD   bc,(vTemp1)   ; restore IP
07A1   C3 DE 03               JP   resetByteMode   
07A4                DIV:         
07A4   60 69                  LD   hl,bc   ; hl = IP
07A6   C1                     POP   bc   ; bc = denominator
07A7   E3                     EX   (sp),hl   ; save IP, hl = numerator
07A8   7C                     LD   a,h   
07A9   A8                     XOR   b   
07AA   F5                     PUSH   af   
07AB   A8                     XOR   b   
07AC   F2 B5 07               JP   p,absbc   
07AF                             ;absHL
07AF   AF                     XOR   a   
07B0   95                     SUB   l   
07B1   6F                     LD   l,a   
07B2   9F                     SBC   a,a   
07B3   94                     SUB   h   
07B4   67                     LD   h,a   
07B5                ABSBC:       
07B5   A8                     XOR   b   
07B6   F2 BF 07               JP   p,$+9   
07B9   AF                     XOR   a   
07BA   91                     SUB   c   
07BB   4F                     LD   c,a   
07BC   9F                     SBC   a,a   
07BD   90                     SUB   b   
07BE   47                     LD   b,a   
07BF   29                     ADD   hl,hl   
07C0   3E 0F                  LD   a,15   
07C2   11 00 00               LD   de,0   
07C5   EB                     EX   de,hl   
07C6   18 04                  JR   jumpin   
07C8                LOOP1:       
07C8   09                     ADD   hl,bc   ;--
07C9                LOOP2:       
07C9   3D                     DEC   a   ;4
07CA   28 0E                  JR   z,EndSDiv   ;12|7
07CC                JUMPIN:      
07CC   CB 23                  SLA   e   ;8
07CE   CB 12                  RL   d   ;8
07D0   ED 6A                  ADC   hl,hl   ;15
07D2   ED 42                  SBC   hl,bc   ;15
07D4   38 F2                  JR   c,Loop1   ;23-2b
07D6   1C                     INC   e   ;--
07D7   C3 C9 07               JP   Loop2   ;--
07DA                ENDSDIV:      
07DA   F1                     POP   af   
07DB   F2 E4 07               JP   p,div10   
07DE   AF                     XOR   a   
07DF   93                     SUB   e   
07E0   5F                     LD   e,a   
07E1   9F                     SBC   a,a   
07E2   92                     SUB   d   
07E3   57                     LD   d,a   
07E4                DIV10:       
07E4   C1                     POP   bc   
07E5   D5                     PUSH   de   ; quotient
07E6   22 8A 0C               LD   (vRemain),hl   ; remainder
07E9   FD E9                  JP   (iy)   
07EB                FALSE_:      
07EB   21 00 00               LD   hl,FALSE   
07EE   18 03                  JR   true1   
07F0                TRUE_:       
07F0   21 FF FF               LD   hl,TRUE   
07F3                TRUE1:       
07F3   E5                     PUSH   hl   
07F4   FD E9                  JP   (iy)   
07F6                DSIZE:    EQU   $80   
07F6                RSIZE:    EQU   $80   
07F6                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
07F6                VARS_SIZE:   EQU   26*2   
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                TBPTR:    DS   2   ; reserved for tests
0A02                VTEMP1:   DS   2   ; 
0A04                VTEMP2:   DS   2   ; 
0A06                RST08:    DS   2   
0A08                RST10:    DS   2   
0A0A                RST18:    DS   2   
0A0C                RST20:    DS   2   
0A0E                RST28:    DS   2   
0A10                RST30:    DS   2   ; 
0A12                BAUD:     DS   2   ; 
0A14                INTVEC:   DS   2   ; 
0A16                NMIVEC:   DS   2   ; 
0A18                GETCVEC:   DS   2   ; 
0A1A                PUTCVEC:   DS   2   ; 
0A1C                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80-32-1-1   
0B5E                ALTCODES:      
0B5E                          DS   26   
0B78                          ALIGN   $100   
0C00                VARS:     DS   VARS_SIZE   
0C34                DEFS:     DS   VARS_SIZE   
0C68                ALTVARS:      
0C68                          DS   2   ; a
0C6A                VBYTEMODE:   DS   2   ; b
0C6C                VCARRY:   DS   2   ; c
0C6E                          DS   2   ; d
0C70                VELSE:    DS   2   ; e
0C72                VFALSE:   DS   2   ; f
0C74                          DS   2   ; g
0C76                VHEAPPTR:   DS   2   ; h
0C78                          DS   2   ; i
0C7A                          DS   2   ; j
0C7C                VTIBPTR:   DS   2   ; k
0C7E                          DS   2   ; l
0C80                          DS   2   ; m
0C82                          DS   2   ; n
0C84                          DS   2   ; o
0C86                VPOINTER:   DS   2   ; p
0C88                          DS   2   ; q
0C8A                VREMAIN:   DS   2   ; r
0C8C                VSTKSTART:   DS   2   ; s
0C8E                VTRUE:    DS   2   ; t
0C90                VUNLIMITED:   DS   2   ; u
0C92                          DS   2   ; v
0C94                          DS   2   ; w
0C96                          DS   2   ; x
0C98                          DS   2   ; y
0C9A                VLASTDEF:   DS   2   ; z
0C9C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 44 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 6 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 220 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 13 IN MAIN.asm
                    > USED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 14 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
UNLIMITED:          00-1 DEFINED AT LINE 15 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
CTRL_R:             0012 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
BSLASH:             005C DEFINED AT LINE 24 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 50 IN MAIN.asm
REEDIT_:            0180 DEFINED AT LINE 52 IN MAIN.asm
EDIT_:              0185 DEFINED AT LINE 55 IN MAIN.asm
LIST_:              0190 DEFINED AT LINE 58 IN MAIN.asm
PRINTSTACK_:        01A9 DEFINED AT LINE 61 IN MAIN.asm
IOPCODES:           01C4 DEFINED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
IALTCODES:          01EE DEFINED AT LINE 111 IN MAIN.asm
BACKSPACE:          020A DEFINED AT LINE 142 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
START:              0218 DEFINED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 6
INTERPRET:          022B DEFINED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
INTERPRET2:         0235 DEFINED AT LINE 163 IN MAIN.asm
                    > USED AT LINE 145 IN MAIN.asm
                    > USED AT LINE 149 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
INTERPRET3:         023D DEFINED AT LINE 170 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
INTERPRET4:         0243 DEFINED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 168 IN MAIN.asm
WAITCHAR:           0248 DEFINED AT LINE 182 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
MACRO:              0277 DEFINED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
WAITCHAR1:          0288 DEFINED AT LINE 215 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
WAITCHAR3:          0296 DEFINED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
WAITCHAR4:          02AC DEFINED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
NEXT:               02B4 DEFINED AT LINE 245 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
EXIT:               02C8 DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
ETX:                02D2 DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
ETX1:               02DB DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
INIT:               02DE DEFINED AT LINE 276 IN MAIN.asm
                    > USED AT LINE 153 IN MAIN.asm
INITOPS:            030F DEFINED AT LINE 298 IN MAIN.asm
INITOPS1:           0318 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
INITOPS2:           0328 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
INITOPS2A:          032D DEFINED AT LINE 320 IN MAIN.asm
                    > USED AT LINE 323 IN MAIN.asm
LOOKUPREF0:         0333 DEFINED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
LOOKUPREF:          033A DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
LOOKUPREF1:         033C DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 329 IN MAIN.asm
PRINTHEX:           0346 DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
PRINTHEX2:          0351 DEFINED AT LINE 352 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
PRINTHEX3:          035A DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
NESTING:            0365 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
NESTING1:           036E DEFINED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
NESTING2:           037D DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
NESTING3:           037F DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 393 IN MAIN.asm
NESTING4:           038A DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
PROMPT:             038C DEFINED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
CRLF:               0395 DEFINED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
PRINTSTR:           039C DEFINED AT LINE 418 IN MAIN.asm
                    > USED AT LINE 147 IN MAIN.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
PUTSTR0:            03A3 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
PUTSTR:             03A7 DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
RPUSH:              03AC DEFINED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
RPOP:               03B7 DEFINED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
RPOP2:              03C1 DEFINED AT LINE 446 IN MAIN.asm
WRITECHAR:          03C2 DEFINED AT LINE 449 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
ENTER:              03C7 DEFINED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
CARRY:              03D0 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
SETBYTEMODE:        03DA DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
RESETBYTEMODE:      03DE DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
ASSIGNBYTEMODE:     03DF DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
PAGE4:              0400 DEFINED AT LINE 481 IN MAIN.asm
QUOTE_:             0400 DEFINED AT LINE 483 IN MAIN.asm
AT_:                0401 DEFINED AT LINE 485 IN MAIN.asm
UNDERSCORE_:        0401 DEFINED AT LINE 486 IN MAIN.asm
BSLASH_:            0403 DEFINED AT LINE 489 IN MAIN.asm
VAR_:               0405 DEFINED AT LINE 492 IN MAIN.asm
VAR1:               040C DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
VAR2:               041A DEFINED AT LINE 505 IN MAIN.asm
                    > USED AT LINE 502 IN MAIN.asm
BANG_:              041D DEFINED AT LINE 509 IN MAIN.asm
ASSIGN:             041D DEFINED AT LINE 510 IN MAIN.asm
ASSIGN1:            042B DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
AMPER_:             042D DEFINED AT LINE 523 IN MAIN.asm
AND1:               0434 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PIPE_:              0438 DEFINED AT LINE 536 IN MAIN.asm
CARET_:             0441 DEFINED AT LINE 546 IN MAIN.asm
XOR1:               0442 DEFINED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
TILDE_:             044A DEFINED AT LINE 557 IN MAIN.asm
INVERT:             044A DEFINED AT LINE 558 IN MAIN.asm
PLUS_:              044F DEFINED AT LINE 562 IN MAIN.asm
CALL_:              0456 DEFINED AT LINE 569 IN MAIN.asm
DOT_:               0460 DEFINED AT LINE 577 IN MAIN.asm
DOT2:               0464 DEFINED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
COMMA_:             046B DEFINED AT LINE 585 IN MAIN.asm
DQUOTE_:            0471 DEFINED AT LINE 590 IN MAIN.asm
PERCENT_:           0479 DEFINED AT LINE 598 IN MAIN.asm
SEMI_:              0480 DEFINED AT LINE 606 IN MAIN.asm
LBRACE_:            0487 DEFINED AT LINE 612 IN MAIN.asm
RBRACE_:            048C DEFINED AT LINE 619 IN MAIN.asm
SHR1:               048D DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
DOLLAR_:            0494 DEFINED AT LINE 628 IN MAIN.asm
MINUS_:             0499 DEFINED AT LINE 634 IN MAIN.asm
SUB1:               04A5 DEFINED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
SUB2:               04A7 DEFINED AT LINE 645 IN MAIN.asm
EQ_:                04AE DEFINED AT LINE 651 IN MAIN.asm
GT_:                04B9 DEFINED AT LINE 659 IN MAIN.asm
LT_:                04BD DEFINED AT LINE 664 IN MAIN.asm
LT1_:               04BF DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
GRAVE_:             04C8 DEFINED AT LINE 674 IN MAIN.asm
STR:                04C8 DEFINED AT LINE 675 IN MAIN.asm
STR1:               04C9 DEFINED AT LINE 678 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
STR2:               04D4 DEFINED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
LBRACK_:            04D7 DEFINED AT LINE 689 IN MAIN.asm
ARRDEF:             04D7 DEFINED AT LINE 690 IN MAIN.asm
NUM_:               04E0 DEFINED AT LINE 696 IN MAIN.asm
RPAREN_:            04E3 DEFINED AT LINE 698 IN MAIN.asm
RBRACK_:            04E6 DEFINED AT LINE 700 IN MAIN.asm
COLON_:             04E9 DEFINED AT LINE 702 IN MAIN.asm
LPAREN_:            04EC DEFINED AT LINE 704 IN MAIN.asm
QUESTION_:          04EF DEFINED AT LINE 707 IN MAIN.asm
HASH_:              04F1 DEFINED AT LINE 709 IN MAIN.asm
STAR_:              04F3 DEFINED AT LINE 711 IN MAIN.asm
SLASH_:             04F5 DEFINED AT LINE 713 IN MAIN.asm
ALT_:               04F5 DEFINED AT LINE 715 IN MAIN.asm
ALT:                04F5 DEFINED AT LINE 719 IN MAIN.asm
ALT1:               0507 DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
ALTVAR:             050B DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
LOOPVAR:            0521 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
COMMENT:            052B DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
ALTCODE:            0534 DEFINED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
ARRACCESS:          0541 DEFINED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
ARRACCESS1:         054A DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
HEX:                054E DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
HEX1:               0551 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
HEX2:               055A DEFINED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
MUL:                056D DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
MUL2:               0577 DEFINED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
BEGIN:              0589 DEFINED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
LOOPSTART:          0589 DEFINED AT LINE 826 IN MAIN.asm
LOOPSTART1:         058F DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
LOOPSTART2:         05A2 DEFINED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
LOOPSTART3:         05AB DEFINED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
LOOPSTART4:         05C1 DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
AGAIN:              05C3 DEFINED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
LOOPEND:            05C3 DEFINED AT LINE 861 IN MAIN.asm
LOOPEND2:           05DC DEFINED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
LOOPEND3:           05E9 DEFINED AT LINE 883 IN MAIN.asm
LOOPEND4:           05F8 DEFINED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
PAGE6:              0600 DEFINED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
ALLOC_:             0600 DEFINED AT LINE 902 IN MAIN.asm
ANOP_:              0609 DEFINED AT LINE 908 IN MAIN.asm
ARRSIZE_:           060B DEFINED AT LINE 913 IN MAIN.asm
ARRSIZE:            060B DEFINED AT LINE 914 IN MAIN.asm
BMODE_:             0613 DEFINED AT LINE 923 IN MAIN.asm
BREAK_:             0618 DEFINED AT LINE 927 IN MAIN.asm
WHILE_:             0618 DEFINED AT LINE 928 IN MAIN.asm
WHILE:              0618 DEFINED AT LINE 929 IN MAIN.asm
WHILE2:             0626 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
DEPTH_:             0628 DEFINED AT LINE 940 IN MAIN.asm
DEPTH:              0628 DEFINED AT LINE 941 IN MAIN.asm
PRINTCHAR_:         0636 DEFINED AT LINE 950 IN MAIN.asm
EXEC_:              063D DEFINED AT LINE 956 IN MAIN.asm
EXEC1:              0642 DEFINED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
EDITDEF_:           0645 DEFINED AT LINE 964 IN MAIN.asm
PROMPT_:            064A DEFINED AT LINE 968 IN MAIN.asm
GO_:                064F DEFINED AT LINE 972 IN MAIN.asm
GO1:                0650 DEFINED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 575 IN MAIN.asm
GO2:                065F DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
GO3:                0662 DEFINED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
KEY_:               0664 DEFINED AT LINE 990 IN MAIN.asm
INPORT_:            066D DEFINED AT LINE 997 IN MAIN.asm
NEWLN_:             0678 DEFINED AT LINE 1007 IN MAIN.asm
OUTPORT_:           067D DEFINED AT LINE 1011 IN MAIN.asm
EDITDEF:            0686 DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
EDITDEF1:           06A3 DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
EDITDEF2:           06A4 DEFINED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
EDITDEF3:           06AC DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
PRINTDEC:           06B6 DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
PRINTDEC2:          06C5 DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
PRINTDEC4:          06E7 DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
PRINTDEC5:          06E9 DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
PRINTDEC6:          06F9 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
PRINTDEC7:          06FA DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
DEF:                06FE DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
DEF0:               070C DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
DEF1:               071A DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
DEF2:               0724 DEFINED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
DEF3:               0725 DEFINED AT LINE 1136 IN MAIN.asm
NUM:                072B DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 697 IN MAIN.asm
NUM0:               0734 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
NUM1:               0735 DEFINED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
NUM2:               074D DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
NUM3:               0758 DEFINED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
ARREND:             075B DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
ARRAYEND1:          0779 DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
ARRAYEND2:          078A DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
DIV:                07A4 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
ABSBC:              07B5 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
LOOP1:              07C8 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
LOOP2:              07C9 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
JUMPIN:             07CC DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
ENDSDIV:            07DA DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
DIV10:              07E4 DEFINED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
FALSE_:             07EB DEFINED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 672 IN MAIN.asm
TRUE_:              07F0 DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
TRUE1:              07F3 DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
DSIZE:              0080 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 8 IN ram.asm
VARS_SIZE:          0034 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 40 IN ram.asm
                    > USED AT LINE 41 IN ram.asm
TIB:                0800 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 167 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
RSTACK:             0980 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 277 IN MAIN.asm
DSTACK:             0A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
STACK:              0A00 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
TBPTR:              0A00 DEFINED AT LINE 16 IN ram.asm
VTEMP1:             0A02 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
VTEMP2:             0A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
RST08:              0A06 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0A08 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0A0A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0A0C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0A0E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0A10 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0A12 DEFINED AT LINE 26 IN ram.asm
INTVEC:             0A14 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0A16 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0A18 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0A1A DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
OPCODES:            0B00 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 300 IN MAIN.asm
ALTCODES:           0B5E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 761 IN MAIN.asm
VARS:               0C00 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
DEFS:               0C34 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 327 IN MAIN.asm
ALTVARS:            0C68 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 741 IN MAIN.asm
VBYTEMODE:          0C6A DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
VCARRY:             0C6C DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 464 IN MAIN.asm
VELSE:              0C70 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
VFALSE:             0C72 DEFINED AT LINE 49 IN ram.asm
VHEAPPTR:           0C76 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
VTIBPTR:            0C7C DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
VPOINTER:           0C86 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
VREMAIN:            0C8A DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 1280 IN MAIN.asm
VSTKSTART:          0C8C DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
VTRUE:              0C8E DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 288 IN MAIN.asm
VUNLIMITED:         0C90 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 290 IN MAIN.asm
VLASTDEF:           0C9A DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
HEAP:               0C9C DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 295 IN MAIN.asm
