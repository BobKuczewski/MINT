0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 3A 0C               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 3C 0C               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3E 0C               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 40 0C               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 42 0C               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 44 0C               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 48 0C               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 4A 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 4C 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4E 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 3A 0C               LD   (RST08),HL   
0094   22 3C 0C               LD   (RST10),HL   
0097   22 3E 0C               LD   (RST18),HL   
009A   22 40 0C               LD   (RST20),HL   
009D   22 42 0C               LD   (RST28),HL   
00A0   22 44 0C               LD   (RST30),HL   
00A3   22 48 0C               LD   (INTVEC),HL   
00A6   22 4A 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 4C 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4E 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 37 02               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   1   ; not FF, for MINT
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in MINT)
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 db len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 db (len | $80)
00C6                 db data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 db 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put mint code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mint and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                REEDIT_:      
0180   5C 65 5C 40 5C 4C 3B   DB   "\\e\\@\\L;"   ; remembers last line edited
0187                EDIT_:       
0187   60 3F 60 3F 5C 50 5C 4C 3B 00 .CSTR   "`?`?\\P\\L;"   
0191                LIST_:       
0191   5C 4E 32 36 28 5C 69 40 36 35 2B 5C 4C 5C 74 40 30 3E 28 5C 4E 29 29 5C 50 3B 00 .CSTR   "\\N26(\\i@65+\\L\\t@0>(\\N))\\P;"   
01AC                PRINTSTACK_:      
01AC   60 3D 3E 20 60 5C 61 40 32 2D 20 5C 2D 20 31 2D 28 22 40 2E 32 2D 29 27 5C 4E 5C 50 3B 00 .CSTR   "`=> `\\a@2- \\- 1-(",$22,"@.2-)'\\N\\P;"   
01CA                IOPCODES:      
01CA                          ;*Macro unroll:  LITDAT 15
01CA   0F                     DB   15   
01CB   7B                     DB   lsb(store_)   ;   !
01CC   4A                     DB   lsb(dup_)   ;   "
01CD   ED                     DB   lsb(hex_)   ;    #
01CE   82                     DB   lsb(swap_)   ;    $
01CF   59                     DB   lsb(over_)   ;    %
01D0   00                     DB   lsb(and_)   ;    &
01D1   47                     DB   lsb(drop_)   ;    '
01D2   DF                     DB   lsb(begin_)   ;    (
01D3   29                     DB   lsb(again_)   ;    )
01D4   EF                     DB   lsb(mul_)   ;    *
01D5   22                     DB   lsb(add_)   ;    +
01D6   41                     DB   lsb(hdot_)   ;    ,
01D7   87                     DB   lsb(sub_)   ;    -
01D8   36                     DB   lsb(dot_)   ;    .
01D9   F1                     DB   lsb(div_)   ;    /	;/MOD
01DA                          ;*Macro unroll:  REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
01DA   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
01DB   DC                     DB   lsb(num_)   
01DC                          ;*Macro unroll:  LITDAT 7
01DC   07                     DB   7   
01DD   E8                     DB   lsb(def_)   ;    :
01DE   60                     DB   lsb(ret_)   ;    ;
01DF   AC                     DB   lsb(lt_)   ;    <
01E0   9C                     DB   lsb(eq_)   ;    =
01E1   A8                     DB   lsb(gt_)   ;    >
01E2   D3                     DB   lsb(key_)   ;    ?   ( -- val )  read a char from input
01E3   4F                     DB   lsb(fetch_)   ;    @
01E4                          ;*Macro unroll:  REPDAT 26, lsb(call_)		; call a command A, B ....Z
01E4   9A                     DB   (26 | $80)   ; call a command A, B ....Z
01E5   2C                     DB   lsb(call_)   
01E6                          ;*Macro unroll:  LITDAT 6
01E6   06                     DB   6   
01E7   E2                     DB   lsb(arrDef_)   ;    [
01E8   F3                     DB   lsb(alt_)   ;    \
01E9   E5                     DB   lsb(arrEnd_)   ;    ]
01EA   14                     DB   lsb(xor_)   ;    ^
01EB   EB                     DB   lsb(arrIndex_)   ;    _
01EC   C4                     DB   lsb(str_)   ;    `   ; for printing `hello`
01ED                          ;*Macro unroll:  REPDAT 26, lsb(var_)		; a b c .....z
01ED   9A                     DB   (26 | $80)   ; a b c .....z
01EE   BD                     DB   lsb(var_)   
01EF                          ;*Macro unroll:  LITDAT 4
01EF   04                     DB   4   
01F0   6E                     DB   lsb(shl_)   ;    {
01F1   0B                     DB   lsb(or_)   ;    |
01F2   73                     DB   lsb(shr_)   ;    }
01F3   67                     DB   lsb(rot_)   ;    ~ ( a b c -- b c a ) rotate
01F4                IALTCODES:      
01F4                          ;*Macro unroll:  LITDAT 4
01F4   04                     DB   4   
01F5   4E                     DB   lsb(cstore_)   ;!  byte store
01F6   16                     DB   lsb(aNop_)   ;"  				
01F7   16                     DB   lsb(aNop_)   ;#  edit definition 				
01F8   16                     DB   lsb(aNop_)   ;$  prints a newline to output	
01F9                          ;*Macro unroll:  REPDAT 7, lsb(aNop_)
01F9   87                     DB   (7 | $80)   
01FA   16                     DB   lsb(aNop_)   
01FB                             ; %
01FB                             ; &
01FB                             ; '
01FB                             ; (
01FB                             ; )
01FB                             ; *
01FB                             ; +
01FB                          ;*Macro unroll:  LITDAT 2
01FB   02                     DB   2   
01FC   16                     DB   lsb(aNop_)   ;,  ( b -- ) prints a char
01FD   16                     DB   lsb(aNop_)   ;-  num items on stack
01FE                          ;*Macro unroll:  REPDAT 12, lsb(aNop_)
01FE   8C                     DB   (12 | $80)   
01FF   16                     DB   lsb(aNop_)   
0200                             ;.
0200                             ;/
0200                             ;0
0200                             ;1
0200                             ;2
0200                             ;3
0200                             ;4
0200                             ;5
0200                             ;6
0200                             ;7
0200                             ;8
0200                             ;9
0200                          ;*Macro unroll:  LITDAT 1
0200   01                     DB   1   
0201   18                     DB   lsb(anonDef_)   ;:  return add of a anon def, \: 1 2 3;    \\ ret add of this
0202                          ;*Macro unroll:  REPDAT 5, lsb(aNop_)
0202   85                     DB   (5 | $80)   
0203   16                     DB   lsb(aNop_)   
0204                             ; 
0204                             ;<
0204                             ;=
0204                             ;>
0204                             ;?
0204                          ;*Macro unroll:  LITDAT 21
0204   15                     DB   21   
0205   3E                     DB   lsb(cFetch_)   ;@      byte fetch
0206   16                     DB   lsb(aNop_)   ;A
0207   16                     DB   lsb(aNop_)   ;B
0208   16                     DB   lsb(aNop_)   ;C
0209   53                     DB   lsb(depth_)   ;D      num items on stack
020A   61                     DB   lsb(emit_)   ;E      emit a char
020B   16                     DB   lsb(aNop_)   ;F
020C   7A                     DB   lsb(go_)   ;G      execute mint code
020D   16                     DB   lsb(aNop_)   ;H
020E   8F                     DB   lsb(inPort_)   ;I      input from port
020F   16                     DB   lsb(aNop_)   ;J
0210   16                     DB   lsb(aNop_)   ;K
0211   70                     DB   lsb(editDef_)   ;L      edit line
0212   16                     DB   lsb(aNop_)   ;M
0213   9A                     DB   lsb(newln_)   ;N      prints a newline to output
0214   9F                     DB   lsb(outPort_)   ;O      output to port
0215   75                     DB   lsb(prompt_)   ;P      print MINT prompt
0216   16                     DB   lsb(aNop_)   ;Q
0217   16                     DB   lsb(aNop_)   ;R
0218   21                     DB   lsb(arrSize_)   ;S      array size
0219   A8                     DB   lsb(printStk_)   ;T      non-destructively prints stack
021A                          ;*Macro unroll:  REPDAT 2, lsb(aNop_)
021A   82                     DB   (2 | $80)   
021B   16                     DB   lsb(aNop_)   
021C                             ;U
021C                             ;V
021C                          ;*Macro unroll:  LITDAT 2
021C   02                     DB   2   
021D   29                     DB   lsb(while_)   ;W      conditional break from loop
021E   68                     DB   lsb(exec_)   ;X      execute machine code
021F                          ;*Macro unroll:  REPDAT 2, lsb(aNop_)
021F   82                     DB   (2 | $80)   
0220   16                     DB   lsb(aNop_)   
0221                             ;Y
0221                             ;Z
0221                          ;*Macro unroll:  LITDAT 2
0221   02                     DB   2   
0222   39                     DB   lsb(cArrDef_)   ;[      byte array
0223   45                     DB   lsb(comment_)   ;\      comment text, skips reading until end of line
0224                          ;*Macro unroll:  REPDAT 4, lsb(aNop_)
0224   84                     DB   (4 | $80)   
0225   16                     DB   lsb(aNop_)   
0226                             ; ]
0226                             ; ^
0226                             ; _
0226                             ; `
0226                          ;*Macro unroll:  REPDAT 26, lsb(altVar_)  ;a...z
0226   9A                     DB   (26 | $80)   ;a...z
0227   00                     DB   lsb(altVar_)   
0228                          ;*Macro unroll:  ENDDAT
0228   00                     DB   0   
0229                BACKSPACE:      
0229   79                     LD   a,c   
022A   B0                     OR   b   
022B   28 27                  JR   z,interpret2   
022D   0B                     DEC   bc   
022E   CD D1 03               CALL   printStr   
0231   08 20 08 00            .CSTR   "\b \b"   
0235   18 1D                  JR   interpret2   
0237                START:       
0237   31 00 0A               LD   SP,DSTACK   ; start of MINT
023A   CD FD 02               CALL   init   ; setups
023D   CD D1 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0240   4D 49 4E 54 31 2E 33 0D 0A 00 .CSTR   "MINT1.3\r\n"   
024A                INTERPRET:      
024A   CD C1 03               CALL   prompt   
024D   01 00 00               LD   BC,0   ; load BC with offset into TIB, decide char into tib or execute or control
0250   ED 43 98 0C            LD   (vTIBPtr),BC   
0254                INTERPRET2:      ; calc nesting (a macro might have changed it)
0254   1E 00                  LD   E,0   ; initilize nesting value
0256   C5                     PUSH   BC   ; save offset into TIB,
0257                             ; BC is also the count of chars in TIB
0257   21 00 08               LD   hl,TIB   ; hl is start of TIB
025A   18 06                  JR   interpret4   
025C                INTERPRET3:      
025C   7E                     LD   A,(hl)   ; A = char in TIB
025D   23                     INC   hl   ; inc pointer into TIB
025E   0B                     DEC   BC   ; dec count of chars in TIB
025F   CD 95 03               CALL   nesting   ; update nesting value
0262                INTERPRET4:      
0262   79                     LD   A,C   ; is count zero?
0263   B0                     OR   B   
0264   20 F6                  JR   NZ,interpret3   ; if not loop
0266   C1                     POP   BC   ; restore offset into TIB
0267                             ; *******************************************************************
0267                             ; Wait for a character from the serial input (keyboard)
0267                             ; and store it in the text buffer. Keep accepting characters,
0267                             ; increasing the instruction pointer BC - until a newline received.
0267                             ; *******************************************************************
0267                WAITCHAR:      
0267   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
026A   FE 20                  CP   $20   ; compare to space
026C   30 39                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
026E   FE 00                  CP   $0   ; is it end of string? null end of string
0270   28 59                  JR   Z,waitchar4   
0272   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0274   28 3F                  JR   Z,waitchar3   ; if anything else its macro/control
0276   FE 08                  CP   CTRL_H   
0278   28 AF                  JR   z,backSpace   
027A   16 01                  LD   d,msb(macros)   
027C   FE 05                  CP   CTRL_E   
027E   1E 87                  LD   e,lsb(edit_)   
0280   28 14                  JR   z,macro   
0282   FE 0A                  CP   CTRL_J   
0284   1E 80                  LD   e,lsb(reedit_)   
0286   28 0E                  JR   z,macro   
0288   FE 0C                  CP   CTRL_L   
028A   1E 91                  LD   e,lsb(list_)   
028C   28 08                  JR   z,macro   
028E   FE 10                  CP   CTRL_P   
0290   1E AC                  LD   e,lsb(printStack_)   
0292   28 02                  JR   z,macro   
0294   18 BE                  JR   interpret2   
0296                MACRO:       ;=25
0296   ED 43 98 0C            LD   (vTIBPtr),BC   
029A   D5                     PUSH   de   
029B   CD E1 07               CALL   ENTER   ;mint go operation and jump to it
029E   5C 47 00               .CSTR   "\\G"   
02A1   ED 4B 98 0C            LD   BC,(vTIBPtr)   
02A5   18 AD                  JR   interpret2   
02A7                WAITCHAR1:      
02A7   21 00 08               LD   hl,TIB   
02AA   09                     ADD   hl,BC   
02AB   77                     LD   (hl),A   ; store the character in textbuf
02AC   03                     INC   BC   
02AD   CD 85 00               CALL   putchar   ; echo character to screen
02B0   CD 95 03               CALL   nesting   
02B3   18 B2                  JR   waitchar   ; wait for next character
02B5                WAITCHAR3:      
02B5   21 00 08               LD   hl,TIB   
02B8   09                     ADD   hl,BC   
02B9   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02BB   23                     INC   hl   
02BC   36 0A                  LD   (hl),"\n"   
02BE   23                     INC   hl   ; ????
02BF   03                     INC   BC   
02C0   03                     INC   BC   
02C1   CD CA 03               CALL   crlf   ; echo character to screen
02C4   7B                     LD   A,E   ; if zero nesting append and ETX after \r
02C5   B7                     OR   A   
02C6   20 9F                  JR   NZ,waitchar   
02C8   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02CA   03                     INC   BC   
02CB                WAITCHAR4:      
02CB   ED 43 98 0C            LD   (vTIBPtr),BC   
02CF   01 00 08               LD   BC,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02D2   0B                     DEC   BC   
02D3                             ; ********************************************************************************
02D3                             ; 
02D3                             ; Dispatch Routine.
02D3                             ; 
02D3                             ; Get the next character and form a 1 byte jump address
02D3                             ; 
02D3                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
02D3                             ; jump to the selected function.
02D3                             ; 
02D3                             ; Individual handler routines will deal with each category:
02D3                             ; 
02D3                             ; 1. Detect characters A-Z and jump to the User Command handler routine
02D3                             ; 
02D3                             ; 2. Detect characters a-z and jump to the variable handler routine
02D3                             ; 
02D3                             ; 3. All other characters are punctuation and cause a jump to the associated
02D3                             ; primitive code.
02D3                             ; 
02D3                             ; Instruction Pointer IP BC is incremented
02D3                             ; 
02D3                             ; *********************************************************************************
02D3                NEXT:        ; 
02D3   03                     INC   BC   ;       Increment the IP
02D4   0A                     LD   A,(BC)   ;       Get the next character and dispatch
02D5   B7                     OR   a   ; is it NUL?
02D6   28 0F                  JR   z,exit   
02D8   FE 03                  CP   CTRL_C   
02DA   28 15                  JR   z,etx   
02DC   D6 21                  SUB   "!"   
02DE   38 F3                  JR   c,NEXT   
02E0   6F                     LD   L,A   ;       Index into table
02E1   26 0B                  LD   H,msb(opcodes)   ;       Start address of jump table
02E3   6E                     LD   L,(hl)   ;       get low jump address
02E4   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
02E6   E9                     JP   (hl)   ;       Jump to routine
02E7                EXIT:        
02E7   03                     INC   BC   ; store offests into a table of bytes, smaller
02E8   50 59                  LD   de,BC   
02EA   CD EC 03               CALL   rpop   ; Restore Instruction pointer
02ED   44 4D                  LD   BC,hl   
02EF   EB                     EX   de,hl   
02F0   E9                     JP   (hl)   
02F1                ETX:         ;=12
02F1   21 00 F6               LD   hl,-DSTACK   ; check if stack pointer is underwater
02F4   39                     ADD   hl,SP   
02F5   30 03                  JR   NC,etx1   
02F7   31 00 0A               LD   SP,DSTACK   
02FA                ETX1:        
02FA   C3 4A 02               JP   interpret   
02FD                INIT:        ;=68
02FD   21 80 0A               LD   hl,LSTACK   
0300   22 30 0C               LD   (vLoopSP),hl   ; Loop stack pointer stored in memory
0303   DD 21 80 09            LD   IX,RSTACK   
0307   FD 21 D3 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
030B   21 84 0C               LD   hl,altVars   ; init altVars to 0
030E   06 34                  LD   b,26 * 2   
0310                INIT1:       
0310   36 00                  LD   (hl),0   
0312   23                     INC   hl   
0313   10 FB                  DJNZ   init1   
0315   21 00 0A               LD   hl,dStack   
0318   22 84 0C               LD   (vS0),hl   
031B   21 41 00               LD   hl,65   
031E   22 B6 0C               LD   (vLastDef),hl   
0321   21 20 0D               LD   hl,HEAP   
0324   22 92 0C               LD   (vHeapPtr),hl   
0327   21 B8 0C               LD   hl,VARS   ; init namespaces to 0 using LDIR
032A   54 5D                  LD   de,hl   
032C   13                     INC   de   
032D   36 00                  LD   (hl),0   
032F   01 68 00               LD   BC,VARS_SIZE   
0332   ED B0                  LDIR      
0334                INITOPS:      
0334   21 CA 01               LD   hl,iOpcodes   
0337   11 00 0B               LD   de,opcodes   
033A   01 00 01               LD   BC,256   
033D                INITOPS1:      
033D   7E                     LD   A,(hl)   
033E   23                     INC   hl   
033F   CB 27                  SLA   A   
0341   C8                     RET   Z   
0342   38 09                  JR   C,initOps2   
0344   CB 3F                  SRL   A   
0346   4F                     LD   C,A   
0347   06 00                  LD   B,0   
0349   ED B0                  LDIR      
034B   18 F0                  JR   initOps1   
034D                INITOPS2:      
034D   CB 3F                  SRL   A   
034F   47                     LD   B,A   
0350   7E                     LD   A,(hl)   
0351   23                     INC   hl   
0352                INITOPS2A:      
0352   12                     LD   (de),A   
0353   13                     INC   de   
0354   10 FC                  DJNZ   initOps2a   
0356   18 E5                  JR   initOps1   
0358                LOOKUPREF:      
0358   16 00                  LD   D,0   
035A                LOOKUPREF0:      
035A   FE 61                  CP   "a"   
035C   30 06                  JR   NC,lookupRef2   
035E                LOOKUPREF1:      
035E   D6 41                  SUB   "A"   
0360   1E 00                  LD   E,0   
0362   18 04                  JR   lookupRef3   
0364                LOOKUPREF2:      
0364   D6 61                  SUB   "a"   
0366   1E 34                  LD   E,26*2   
0368                LOOKUPREF3:      
0368   87                     ADD   A,A   
0369   83                     ADD   A,E   
036A   21 B8 0C               LD   hl,VARS   
036D   85                     ADD   A,L   
036E   6F                     LD   L,A   
036F   3E 00                  LD   A,0   
0371   8C                     ADC   A,H   
0372   67                     LD   H,A   
0373   AF                     XOR   A   
0374   B3                     OR   E   ; sets Z flag if A-Z
0375   C9                     RET      
0376                PRINTHEX:      ;=31
0376                             ; Display hl as a 16-bit number in hex.
0376   C5                     PUSH   BC   ; preserve the IP
0377   7C                     LD   A,H   
0378   CD 81 03               CALL   printhex2   
037B   7D                     LD   A,L   
037C   CD 81 03               CALL   printhex2   
037F   C1                     POP   BC   
0380   C9                     RET      
0381                PRINTHEX2:      
0381   4F                     LD   C,A   
0382   1F                     RRA      
0383   1F                     RRA      
0384   1F                     RRA      
0385   1F                     RRA      
0386   CD 8A 03               CALL   printhex3   
0389   79                     LD   A,C   
038A                PRINTHEX3:      
038A   E6 0F                  AND   0x0F   
038C   C6 90                  ADD   A,0x90   
038E   27                     DAA      
038F   CE 40                  ADC   A,0x40   
0391   27                     DAA      
0392   C3 85 00               JP   putchar   
0395                             ; **************************************************************************
0395                             ; calculate nesting value
0395                             ; A is char to be tested,
0395                             ; E is the nesting value (initially 0)
0395                             ; E is increased by ( and [
0395                             ; E is decreased by ) and ]
0395                             ; E has its bit 7 toggled by `
0395                             ; limited to 127 levels
0395                             ; **************************************************************************
0395                NESTING:      ;=44
0395   FE 60                  CP   "`"   
0397   20 0A                  JR   NZ,nesting1   
0399   CB 7B                  BIT   7,E   
039B   28 03                  JR   Z,nesting1a   
039D   CB BB                  RES   7,E   
039F   C9                     RET      
03A0                NESTING1A:      
03A0   CB FB                  SET   7,E   
03A2   C9                     RET      
03A3                NESTING1:      
03A3   CB 7B                  BIT   7,E   
03A5   C0                     RET   NZ   
03A6   FE 3A                  CP   ":"   
03A8   28 08                  JR   Z,nesting2   
03AA   FE 5B                  CP   "["   
03AC   28 04                  JR   Z,nesting2   
03AE   FE 28                  CP   "("   
03B0   20 02                  JR   NZ,nesting3   
03B2                NESTING2:      
03B2   1C                     INC   E   
03B3   C9                     RET      
03B4                NESTING3:      
03B4   FE 3B                  CP   ";"   
03B6   28 07                  JR   Z,nesting4   
03B8   FE 5D                  CP   "]"   
03BA   28 03                  JR   Z,nesting4   
03BC   FE 29                  CP   ")"   
03BE   C0                     RET   NZ   
03BF                NESTING4:      
03BF   1D                     DEC   E   
03C0   C9                     RET      
03C1                PROMPT:      ;=9
03C1   CD D1 03               CALL   printStr   
03C4   0D 0A 3E 20 00         .CSTR   "\r\n> "   
03C9   C9                     RET      
03CA                CRLF:        ;=7
03CA   CD D1 03               CALL   printStr   
03CD   0D 0A 00               .CSTR   "\r\n"   
03D0   C9                     RET      
03D1                PRINTSTR:      ;=7
03D1   E3                     EX   (SP),hl   ; swap			
03D2   CD DC 03               CALL   putStr   
03D5   23                     INC   hl   ; inc past null
03D6   E3                     EX   (SP),hl   ; put it back	
03D7   C9                     RET      
03D8                PUTSTR0:      ;=9
03D8   CD 85 00               CALL   putchar   
03DB   23                     INC   hl   
03DC                PUTSTR:      
03DC   7E                     LD   A,(hl)   
03DD   B7                     OR   A   
03DE   20 F8                  JR   NZ,putStr0   
03E0   C9                     RET      
03E1                RPUSH:       ;=11
03E1   DD 2B                  DEC   IX   
03E3   DD 74 00               LD   (IX+0),H   
03E6   DD 2B                  DEC   IX   
03E8   DD 75 00               LD   (IX+0),L   
03EB   C9                     RET      
03EC                RPOP:        ;=11
03EC   DD 6E 00               LD   L,(IX+0)   
03EF   DD 23                  INC   IX   
03F1   DD 66 00               LD   H,(IX+0)   
03F4   DD 23                  INC   IX   
03F6                RPOP2:       
03F6   C9                     RET      
03F7                WRITECHAR:      ;=5
03F7   77                     LD   (hl),A   
03F8   23                     INC   hl   
03F9   C3 85 00               JP   putchar   
03FC                             ; **********************************************************************			
03FC                             ; Page 4 primitive routines
03FC                             ; **********************************************************************
03FC                          ALIGN   $100   
0400                PAGE4:       
0400                AND_:        
0400   D1                     POP   de   ;     Bitwise and the top 2 elements of the stack
0401   E1                     POP   hl   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   hl   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                OR_:         
040B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
040C   E1                     POP   hl   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                XOR_:        
0414   D1                     POP   de   ; Bitwise XOR the top 2 elements of the stack
0415                XOR1:        
0415   E1                     POP   hl   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                INV_:        ; Bitwise INVert the top member of the stack
041D   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0420   18 F3                  JR   xor1   
0422                ADD_:        ; add the top 2 members of the stack
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   19                     ADD   hl,de   
0425   E5                     PUSH   hl   
0426   C3 D7 07               JP   carry   
0429   C3 C3 05     AGAIN_:   JP   again   ; close loop
042C                CALL_:       
042C   0A                     LD   A,(BC)   
042D   CD 5E 03               CALL   lookupRef1   
0430   5E                     LD   E,(hl)   
0431   23                     INC   hl   
0432   56                     LD   D,(hl)   
0433   C3 7B 06               JP   go1   
0436                DOT_:        
0436   E1                     POP   hl   
0437   CD 2F 07               CALL   printDec   
043A                DOT2:        
043A   3E 20                  LD   A," "   
043C   CD 85 00               CALL   putChar   
043F   FD E9                  JP   (IY)   
0441                HDOT_:       ; print hexadecimal
0441   E1                     POP   hl   
0442   CD 76 03               CALL   printhex   
0445   18 F3                  JR   dot2   
0447                DROP_:       ; Discard the top member of the stack
0447   E1                     POP   hl   
0448   FD E9                  JP   (IY)   
044A                DUP_:        
044A   E1                     POP   hl   ; Duplicate the top member of the stack
044B   E5                     PUSH   hl   
044C   E5                     PUSH   hl   
044D   FD E9                  JP   (IY)   
044F                FETCH_:      ; Fetch the value from the address placed on the top of the stack
044F   E1                     POP   hl   
0450                FETCH1:      
0450   5E                     LD   E,(hl)   
0451   23                     INC   hl   
0452   56                     LD   D,(hl)   
0453   D5                     PUSH   de   
0454   FD E9                  JP   (IY)   
0456                NOP_:        
0456   C3 D3 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0459                OVER_:       
0459   E1                     POP   hl   ; Duplicate 2nd element of the stack
045A   D1                     POP   de   
045B   D5                     PUSH   de   
045C   E5                     PUSH   hl   
045D   D5                     PUSH   de   ; and push it to top of stack
045E   FD E9                  JP   (IY)   
0460                RET_:        
0460   CD EC 03               CALL   rpop   ; Restore Instruction pointer
0463   44 4D                  LD   BC,hl   
0465   FD E9                  JP   (IY)   
0467                ROT_:        ; a b c -- b c a
0467   D1                     POP   de   ; a b                   de = c
0468   E1                     POP   hl   ; a                     hl = b
0469   E3                     EX   (SP),hl   ; b                     hl = a
046A   D5                     PUSH   de   ; b c
046B   E5                     PUSH   hl   ; b c a
046C   FD E9                  JP   (IY)   
046E                             ;  Left shift { is multiply by 2		
046E                SHL_:        
046E   E1                     POP   hl   ; Duplicate the top member of the stack
046F   29                     ADD   hl,hl   
0470   E5                     PUSH   hl   ; shift left fallthrough into add_
0471   FD E9                  JP   (IY)   ; 
0473                             ;  Right shift } is a divide by 2		
0473                SHR_:        
0473   E1                     POP   hl   ; Get the top member of the stack
0474                SHR1:        
0474   CB 3C                  SRL   H   
0476   CB 1D                  RR   L   
0478   E5                     PUSH   hl   
0479   FD E9                  JP   (IY)   ; 
047B                STORE_:      ; Store the value at the address placed on the top of the stack
047B   E1                     POP   hl   
047C   D1                     POP   de   
047D   73                     LD   (hl),E   
047E   23                     INC   hl   
047F   72                     LD   (hl),D   
0480   FD E9                  JP   (IY)   
0482                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
0482                SWAP_:       
0482   E1                     POP   hl   
0483   E3                     EX   (SP),hl   
0484   E5                     PUSH   hl   
0485   FD E9                  JP   (IY)   
0487                SUB_:        ; Subtract the value 2nd on stack from top of stack
0487   03                     INC   bc   ; check if sign of a number
0488   0A                     LD   a,(bc)   
0489   0B                     DEC   bc   
048A   FE 30                  CP   "0"   
048C   38 05                  JR   c,sub1   
048E   FE 3A                  CP   "9"+1   
0490   DA AE 06               JP   c,num   
0493                SUB1:        
0493   D1                     POP   de   ; 
0494   E1                     POP   hl   ;      Entry point for INVert
0495                SUB2:        
0495   A7                     AND   A   ;      Entry point for NEGate
0496   ED 52                  SBC   hl,de   ; 
0498   E5                     PUSH   hl   ; 
0499   C3 D7 07               JP   carry   
049C                             ; 5
049C                EQ_:         
049C   E1                     POP   hl   
049D   D1                     POP   de   
049E   A7                     AND   A   ; reset the carry flag
049F   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04A1   28 16                  JR   Z,equal   
04A3   21 00 00               LD   hl,0   
04A6   18 12                  JR   less   ; hl = 1
04A8                GT_:         
04A8   D1                     POP   de   
04A9   E1                     POP   hl   
04AA   18 02                  JR   cmp_   
04AC                LT_:         
04AC   E1                     POP   hl   
04AD   D1                     POP   de   
04AE                CMP_:        
04AE   A7                     AND   A   ; reset the carry flag
04AF   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04B1   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04B3   21 00 00               LD   hl,0   
04B6   FA BA 04               JP   M,less   
04B9                EQUAL:       
04B9   2C                     INC   L   ; hl = 1
04BA                LESS:        
04BA   E5                     PUSH   hl   
04BB   FD E9                  JP   (IY)   
04BD                VAR_:        
04BD   0A                     LD   A,(BC)   
04BE   CD 64 03               CALL   lookupRef2   
04C1   E5                     PUSH   hl   
04C2   FD E9                  JP   (IY)   
04C4                STR_:        
04C4                STR:         
04C4   03                     INC   BC   
04C5                STR1:        
04C5   0A                     LD   A,(BC)   
04C6   03                     INC   BC   
04C7   FE 60                  CP   "`"   ; ` is the string terminator
04C9   28 05                  JR   Z,str2   
04CB   CD 85 00               CALL   putchar   
04CE   18 F5                  JR   str1   
04D0                STR2:        
04D0   0B                     DEC   BC   
04D1   FD E9                  JP   (IY)   
04D3                KEY_:        
04D3   CD 81 00               CALL   getchar   
04D6   26 00                  LD   H,0   
04D8   6F                     LD   L,A   
04D9   E5                     PUSH   hl   
04DA   FD E9                  JP   (IY)   
04DC                NUM_:        
04DC   C3 AE 06               JP   num   
04DF                BEGIN_:      
04DF   C3 89 05               JP   begin   
04E2                ARRDEF_:      
04E2   C3 77 07               JP   arrDef   
04E5                ARREND_:      
04E5   C3 85 07               JP   arrEnd   
04E8                DEF_:        
04E8   C3 0E 07               JP   def   
04EB                ARRINDEX_:      
04EB   18 15                  JR   arrIndex   
04ED                HEX_:        
04ED   18 1A                  JR   hex   
04EF                MUL_:        
04EF   18 37                  JR   mul   
04F1                DIV_:        
04F1   18 51                  JR   div   
04F3                ALT_:        
04F3                             ;*******************************************************************
04F3                             ; Page 5 primitive routines
04F3                             ;*******************************************************************
04F3                             ;falls through
04F3                ALT:         ;=11
04F3   03                     INC   BC   
04F4   0A                     LD   A,(BC)   
04F5   21 5E 0B               LD   hl,altCodes   
04F8   D6 21                  SUB   "!"   
04FA   85                     ADD   A,L   
04FB   6F                     LD   L,A   
04FC                ALT2:        
04FC   7E                     LD   A,(hl)   ;       get low jump address
04FD   21 00 06               LD   hl,page6   
0500   6F                     LD   L,A   
0501   E9                     JP   (hl)   ;       Jump to routine
0502                ARRINDEX:      
0502   E1                     POP   hl   ; hl = index
0503   D1                     POP   de   ; de = array
0504   29                     ADD   hl,hl   ; if data width = 2 then double
0505   19                     ADD   hl,de   ; add addr
0506   E5                     PUSH   hl   
0507   FD E9                  JP   (iy)   
0509                HEX:         
0509   21 00 00               LD   hl,0   ; Clear hl to accept the number
050C                HEX1:        
050C   03                     INC   BC   
050D   0A                     LD   A,(BC)   ; Get the character which is a numeral
050E   CB 77                  BIT   6,A   ; is it uppercase alpha?
0510   CA 15 05               JP   Z,hex2   ; no a decimal
0513   D6 07                  SUB   7   ; sub 7  to make $A - $F
0515                HEX2:        
0515   D6 30                  SUB   $30   ; Form decimal digit
0517   DA D0 06               JP   C,num2   
051A   FE 10                  CP   $0F+1   
051C   D2 D0 06               JP   NC,num2   
051F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0520   29                     ADD   hl,hl   ; 4X
0521   29                     ADD   hl,hl   ; 8X
0522   29                     ADD   hl,hl   ; 16X
0523   85                     ADD   A,L   ; add into bottom of hl
0524   6F                     LD   L,A   ; 
0525   C3 0C 05               JP   hex1   
0528                MUL:         ;=19
0528   D1                     POP   de   ; get first value
0529   E1                     POP   hl   
052A   C5                     PUSH   BC   ; Preserve the IP
052B   44                     LD   B,H   ; BC = 2nd value
052C   4D                     LD   C,L   
052D   21 00 00               LD   hl,0   
0530   3E 10                  LD   A,16   
0532                MUL2:        
0532   29                     ADD   hl,hl   
0533   CB 13                  RL   E   
0535   CB 12                  RL   D   
0537   30 04                  JR   NC,$+6   
0539   09                     ADD   hl,BC   
053A   30 01                  JR   NC,$+3   
053C   13                     INC   de   
053D   3D                     DEC   A   
053E   20 F2                  JR   NZ,mul2   
0540   C1                     POP   BC   ; Restore the IP
0541   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0542   FD E9                  JP   (IY)   
0544                DIV:         
0544   60 69                  LD   hl,bc   ; hl = IP
0546   C1                     POP   bc   ; bc = denominator
0547   E3                     EX   (sp),hl   ; save IP, hl = numerator
0548   7C                     LD   a,h   
0549   A8                     XOR   b   
054A   F5                     PUSH   af   
054B   A8                     XOR   b   
054C   F2 55 05               JP   p,absBC   
054F                             ;absHL
054F   AF                     XOR   a   
0550   95                     SUB   l   
0551   6F                     LD   l,a   
0552   9F                     SBC   a,a   
0553   94                     SUB   h   
0554   67                     LD   h,a   
0555                ABSBC:       
0555   A8                     XOR   b   
0556   F2 5F 05               JP   p,$+9   
0559   AF                     XOR   a   
055A   91                     SUB   c   
055B   4F                     LD   c,a   
055C   9F                     SBC   a,a   
055D   90                     SUB   b   
055E   47                     LD   b,a   
055F   29                     ADD   hl,hl   
0560   3E 0F                  LD   a,15   
0562   11 00 00               LD   de,0   
0565   EB                     EX   de,hl   
0566   18 04                  JR   jumpin   
0568                LOOP1:       
0568   09                     ADD   hl,bc   ;--
0569                LOOP2:       
0569   3D                     DEC   a   ;4
056A   28 0E                  JR   z,EndSDiv   ;12|7
056C                JUMPIN:      
056C   CB 23                  SLA   e   ;8
056E   CB 12                  RL   d   ;8
0570   ED 6A                  ADC   hl,hl   ;15
0572   ED 42                  SBC   hl,bc   ;15
0574   38 F2                  JR   c,Loop1   ;23-2b
0576   1C                     INC   e   ;--
0577   C3 69 05               JP   Loop2   ;--
057A                ENDSDIV:      
057A   F1                     POP   af   
057B   F2 84 05               JP   p,div10   
057E   AF                     XOR   a   
057F   93                     SUB   e   
0580   5F                     LD   e,a   
0581   9F                     SBC   a,a   
0582   92                     SUB   d   
0583   57                     LD   d,a   
0584                DIV10:       
0584   C1                     POP   bc   
0585   D5                     PUSH   de   ; quotient
0586   E5                     PUSH   hl   ; remainder
0587   FD E9                  JP   (iy)   
0589                             ;=57
0589                BEGIN:       
0589                LOOPSTART:      
0589   ED 43 36 0C            LD   (vTemp1),bc   ; save start
058D   1E 01                  LD   e,1   ; skip to loop end, nesting = 1
058F                LOOPSTART1:      
058F   03                     INC   bc   
0590   0A                     LD   a,(bc)   
0591   CD 95 03               CALL   nesting   ; affects zero flag
0594   20 F9                  JR   nz,loopStart1   
0596   D1                     POP   de   ; de = limit
0597   7B                     LD   a,e   ; is it zero?
0598   B2                     OR   d   
0599   20 07                  JR   nz,loopStart2   
059B   1B                     DEC   de   ; de = TRUE
059C   ED 53 8C 0C            LD   (vElse),de   
05A0   18 1F                  JR   loopStart4   ; yes continue after skip
05A2                LOOPSTART2:      
05A2   3E 02                  LD   a,2   ; is it TRUE
05A4   83                     ADD   a,e   
05A5   82                     ADD   a,d   
05A6   20 03                  JR   nz,loopStart3   
05A8   11 01 00               LD   de,1   ; yes make it 1
05AB                LOOPSTART3:      
05AB   60 69                  LD   hl,bc   
05AD   CD E1 03               CALL   rpush   ; rpush loop end
05B0   0B                     DEC   bc   ; IP points to ")"
05B1   2A 36 0C               LD   hl,(vTemp1)   ; restore start
05B4   CD E1 03               CALL   rpush   ; rpush start
05B7   EB                     EX   de,hl   ; hl = limit
05B8   CD E1 03               CALL   rpush   ; rpush limit
05BB   21 FF FF               LD   hl,-1   ; hl = count = -1
05BE   CD E1 03               CALL   rpush   ; rpush count
05C1                LOOPSTART4:      
05C1   FD E9                  JP   (iy)   
05C3                AGAIN:       
05C3                LOOPEND:      
05C3   DD 5E 02               LD   e,(ix+2)   ; de = limit
05C6   DD 56 03               LD   d,(ix+3)   
05C9   7B                     LD   a,e   ; a = lsb(limit)
05CA   B2                     OR   d   ; if limit 0 exit loop
05CB   28 2B                  JR   z,loopEnd4   
05CD   13                     INC   de   ; is limit -2
05CE   13                     INC   de   
05CF   7B                     LD   a,e   ; a = lsb(limit)
05D0   B2                     OR   d   ; if limit 0 exit loop
05D1   28 09                  JR   z,loopEnd2   ; yes, loop again
05D3   1B                     DEC   de   
05D4   1B                     DEC   de   
05D5   1B                     DEC   de   
05D6   DD 73 02               LD   (ix+2),e   
05D9   DD 72 03               LD   (ix+3),d   
05DC                LOOPEND2:      
05DC   DD 5E 00               LD   e,(ix+0)   ; inc counter
05DF   DD 56 01               LD   d,(ix+1)   
05E2   13                     INC   de   
05E3   DD 73 00               LD   (ix+0),e   
05E6   DD 72 01               LD   (ix+1),d   
05E9                LOOPEND3:      
05E9   11 00 00               LD   de,FALSE   ; if clause ran then vElse = FALSE
05EC   ED 53 8C 0C            LD   (vElse),de   
05F0   DD 4E 04               LD   c,(ix+4)   ; IP = start
05F3   DD 46 05               LD   b,(ix+5)   
05F6   FD E9                  JP   (iy)   
05F8                LOOPEND4:      
05F8   11 08 00               LD   de,2*4   ; rpop frame
05FB   DD 19                  ADD   ix,de   
05FD   FD E9                  JP   (iy)   
05FF                             ; **************************************************************************
05FF                             ; Page 6 Alt primitives
05FF                             ; **************************************************************************
05FF                          ALIGN   $100   
0600                PAGE6:       
0600                ALTVAR_:      
0600   0A                     LD   A,(BC)   
0601   FE 69                  CP   "i"   
0603   2E 00                  LD   l,0   
0605   CA CD 07               JP   z,loopVar   
0608   FE 6A                  CP   "j"   
060A   2E 08                  LD   l,8   
060C   CA CD 07               JP   z,loopVar   
060F   D6 1F                  SUB   "a" - ((altVars - mintVars)/2)   
0611   87                     ADD   A,A   
0612   26 0C                  LD   H,msb(mintVars)   
0614   6F                     LD   L,A   
0615   E5                     PUSH   hl   
0616                ANOP_:       
0616   FD E9                  JP   (IY)   
0618                ANONDEF_:      ;= 7
0618   03                     INC   BC   
0619   ED 5B 92 0C            LD   de,(vHeapPtr)   ; start of defintion
061D   D5                     PUSH   de   
061E   C3 1E 07               JP   def1   
0621                ARRSIZE_:      
0621                ARRSIZE:      
0621   E1                     POP   hl   
0622   2B                     DEC   hl   ; msb size
0623   56                     LD   d,(hl)   
0624   2B                     DEC   hl   ; lsb size
0625   5E                     LD   e,(hl)   
0626   D5                     PUSH   de   
0627   FD E9                  JP   (iy)   
0629                BREAK_:      
0629                WHILE_:      
0629                WHILE:       
0629   E1                     POP   hl   
062A   7D                     LD   a,l   
062B   B4                     OR   h   
062C   20 09                  JR   nz,while2   
062E   DD 4E 06               LD   c,(ix+6)   ; IP = )
0631   DD 46 07               LD   b,(ix+7)   
0634   C3 F8 05               JP   loopEnd4   
0637                WHILE2:      
0637   FD E9                  JP   (iy)   
0639                CARRDEF_:      ; define a byte array
0639   3E 01                  LD   A,TRUE   
063B   C3 79 07               JP   arrDef1   
063E                CFETCH_:      
063E   E1                     POP   hl   
063F   16 00                  LD   D,0   
0641   5E                     LD   E,(hl)   
0642   D5                     PUSH   de   
0643   FD E9                  JP   (IY)   
0645                COMMENT_:      
0645   03                     INC   BC   ; point to next char
0646   0A                     LD   A,(BC)   
0647   FE 0D                  CP   "\r"   ; terminate at cr
0649   20 FA                  JR   NZ,comment_   
064B   0B                     DEC   BC   
064C   FD E9                  JP   (IY)   
064E                CSTORE_:      
064E   E1                     POP   hl   
064F   D1                     POP   de   
0650   73                     LD   (hl),E   
0651   FD E9                  JP   (IY)   
0653                DEPTH_:      
0653                DEPTH:       
0653   21 00 00               LD   hl,0   
0656   39                     ADD   hl,SP   
0657   EB                     EX   de,hl   
0658   21 00 0A               LD   hl,DSTACK   
065B   B7                     OR   A   
065C   ED 52                  SBC   hl,de   
065E   C3 74 04               JP   shr1   
0661                EMIT_:       
0661   E1                     POP   hl   
0662   7D                     LD   A,L   
0663   CD 85 00               CALL   putchar   
0666   FD E9                  JP   (IY)   
0668                EXEC_:       
0668   CD 6D 06               CALL   exec1   
066B   FD E9                  JP   (IY)   
066D                EXEC1:       
066D   E1                     POP   hl   
066E   E3                     EX   (SP),hl   
066F   E9                     JP   (hl)   
0670                EDITDEF_:      
0670   CD DE 06               CALL   editDef   
0673   FD E9                  JP   (IY)   
0675                PROMPT_:      
0675   CD C1 03               CALL   prompt   
0678   FD E9                  JP   (IY)   
067A                GO_:         ;\^
067A   D1                     POP   de   
067B                GO1:         
067B   7A                     LD   A,D   ; skip if destination address is null
067C   B3                     OR   E   
067D   28 0E                  JR   Z,go3   
067F   60 69                  LD   hl,BC   
0681   03                     INC   BC   ; read next char from source
0682   0A                     LD   A,(BC)   ; if ; to tail call optimise
0683   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
0685   28 03                  JR   Z,go2   
0687   CD E1 03               CALL   rpush   ; save Instruction Pointer
068A                GO2:         
068A   42 4B                  LD   BC,de   
068C   0B                     DEC   BC   
068D                GO3:         
068D   FD E9                  JP   (IY)   
068F                INPORT_:      ; \<
068F   E1                     POP   hl   
0690   79                     LD   A,C   
0691   4D                     LD   C,L   
0692   ED 68                  IN   L,(C)   
0694   26 00                  LD   H,0   
0696   4F                     LD   C,A   
0697   E5                     PUSH   hl   
0698   FD E9                  JP   (IY)   
069A                NEWLN_:      
069A   CD CA 03               CALL   crlf   
069D   FD E9                  JP   (IY)   
069F                OUTPORT_:      
069F   E1                     POP   hl   
06A0   59                     LD   E,C   
06A1   4D                     LD   C,L   
06A2   E1                     POP   hl   
06A3   ED 69                  OUT   (C),L   
06A5   4B                     LD   C,E   
06A6   FD E9                  JP   (IY)   
06A8                PRINTSTK_:      
06A8                PRINTSTK:      ;=40
06A8   CD E1 07               CALL   ENTER   
06AB   00                     .CSTR   ""   
06AC   FD E9                  JP   (IY)   
06AE                             ;*******************************************************************
06AE                             ; Page 5 primitive routines continued
06AE                             ;*******************************************************************
06AE                             ; ********************************************************************************
06AE                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in hl
06AE                             ; Read the first character.
06AE                             ;			
06AE                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
06AE                             ; and then added into the L register. (hl forms a 16-bit accumulator)
06AE                             ; Fetch the next character, if it is a number, multiply contents of hl by 10
06AE                             ; and then add in the next digit. Repeat this until a non-number character is
06AE                             ; detected. add in the final digit so that hl contains the converted number.
06AE                             ; push hl onto the stack and proceed to the dispatch routine.
06AE                             ; ********************************************************************************
06AE                NUM:         
06AE   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06B1   0A                     LD   a,(bc)   ; Get numeral or -
06B2   FE 2D                  CP   "-"   
06B4   20 01                  JR   nz,num0   
06B6   03                     INC   bc   ; move to next char, no flags affected
06B7                NUM0:        
06B7   08                     EX   af,af'   ; save zero flag = 0 for later
06B8                NUM1:        
06B8   0A                     LD   a,(bc)   ; read digit
06B9   D6 30                  SUB   "0"   ; less than 0?
06BB   38 13                  JR   c,num2   ; not a digit, exit loop
06BD   FE 0A                  CP   10   ; greater that 9?
06BF   30 0F                  JR   nc,num2   ; not a digit, exit loop
06C1   03                     INC   bc   ; inc IP
06C2   54 5D                  LD   de,hl   ; multiply hl * 10
06C4   29                     ADD   hl,hl   
06C5   29                     ADD   hl,hl   
06C6   19                     ADD   hl,de   
06C7   29                     ADD   hl,hl   
06C8   85                     ADD   a,l   ; add digit in a to hl
06C9   6F                     LD   l,a   
06CA   3E 00                  LD   a,0   
06CC   8C                     ADC   a,h   
06CD   67                     LD   h,a   
06CE   18 E8                  JR   num1   
06D0                NUM2:        
06D0   0B                     DEC   bc   
06D1   08                     EX   af,af'   ; restore zero flag
06D2   20 07                  JR   nz,num3   
06D4   EB                     EX   de,hl   ; negate the value of hl
06D5   21 00 00               LD   hl,0   
06D8   B7                     OR   a   ; jump to sub2
06D9   ED 52                  SBC   hl,de   
06DB                NUM3:        
06DB   E5                     PUSH   hl   ; Put the number on the stack
06DC   FD E9                  JP   (iy)   ; and process the next character
06DE                             ;*******************************************************************
06DE                             ; Subroutines
06DE                             ;*******************************************************************
06DE                EDITDEF:      ;=50 lookup up def based on number
06DE   E1                     POP   hl   ; pop ret address
06DF   E3                     EX   (SP),hl   ; swap with TOS
06E0   7D                     LD   A,L   
06E1   08                     EX   AF,AF'   
06E2   7D                     LD   A,L   
06E3   CD 58 03               CALL   lookupRef   
06E6   5E                     LD   E,(hl)   
06E7   23                     INC   hl   
06E8   56                     LD   D,(hl)   
06E9   7A                     LD   A,D   
06EA   B3                     OR   E   
06EB   21 00 08               LD   hl,TIB   
06EE   28 14                  JR   Z,editDef3   
06F0   3E 3A                  LD   A,":"   
06F2   CD F7 03               CALL   writeChar   
06F5   08                     EX   AF,AF'   
06F6   CD F7 03               CALL   writeChar   
06F9   18 01                  JR   editDef2   
06FB                EDITDEF1:      
06FB   13                     INC   de   
06FC                EDITDEF2:      
06FC   1A                     LD   A,(de)   
06FD   CD F7 03               CALL   writeChar   
0700   FE 3B                  CP   ";"   
0702   20 F7                  JR   NZ,editDef1   
0704                EDITDEF3:      
0704   11 00 08               LD   de,TIB   
0707   B7                     OR   A   
0708   ED 52                  SBC   hl,de   
070A   22 98 0C               LD   (vTIBPtr),hl   
070D   C9                     RET      
070E                             ; **************************************************************************
070E                             ; def is used to create a colon definition
070E                             ; When a colon is detected, the next character (usually uppercase alpha)
070E                             ; is looked up in the vector table to get its associated code field address
070E                             ; This CFA is updated to point to the character after uppercase alpha
070E                             ; The remainder of the characters are then skipped until after a semicolon
070E                             ; is found.
070E                             ; ***************************************************************************
070E                DEF:         ; Create a colon definition
070E   03                     INC   BC   
070F   0A                     LD   A,(BC)   ; Get the next character
0710   32 B6 0C               LD   (vLastDef),A   
0713   CD 58 03               CALL   lookupRef   
0716   ED 5B 92 0C            LD   de,(vHeapPtr)   ; start of defintion
071A   73                     LD   (hl),E   ; Save low byte of address in CFA
071B   23                     INC   hl   
071C   72                     LD   (hl),D   ; Save high byte of address in CFA+1
071D   03                     INC   BC   
071E                DEF1:        ; Skip to end of definition
071E   0A                     LD   A,(BC)   ; Get the next character
071F   03                     INC   BC   ; Point to next character
0720   12                     LD   (de),A   
0721   13                     INC   de   
0722   FE 3B                  CP   ";"   ; Is it a semicolon
0724   28 02                  JR   Z,def2   ; end the definition
0726   18 F6                  JR   def1   ; get the next element
0728                DEF2:        
0728   0B                     DEC   BC   
0729                DEF3:        
0729   ED 53 92 0C            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
072D   FD E9                  JP   (IY)   
072F                             ; hl = value
072F                PRINTDEC:      
072F   CB 7C                  BIT   7,h   
0731   28 0B                  JR   z,printDec2   
0733   3E 2D                  LD   a,"-"   
0735   CD 85 00               CALL   putchar   
0738   AF                     XOR   a   
0739   95                     SUB   l   
073A   6F                     LD   l,a   
073B   9F                     SBC   a,a   
073C   94                     SUB   h   
073D   67                     LD   h,a   
073E                PRINTDEC2:      
073E   C5                     PUSH   bc   
073F   0E 00                  LD   c,0   ; leading zeros flag = false
0741   11 F0 D8               LD   de,-10000   
0744   CD 60 07               CALL   printDec4   
0747   11 18 FC               LD   de,-1000   
074A   CD 60 07               CALL   printDec4   
074D   11 9C FF               LD   de,-100   
0750   CD 60 07               CALL   printDec4   
0753   1E F6                  LD   e,-10   
0755   CD 60 07               CALL   printDec4   
0758   0C                     INC   c   ; flag = true for at least digit
0759   1E FF                  LD   e,-1   
075B   CD 60 07               CALL   printDec4   
075E   C1                     POP   bc   
075F   C9                     RET      
0760                PRINTDEC4:      
0760   06 2F                  LD   b,"0"-1   
0762                PRINTDEC5:      
0762   04                     INC   b   
0763   19                     ADD   hl,de   
0764   38 FC                  JR   c,printDec5   
0766   ED 52                  SBC   hl,de   
0768   3E 30                  LD   a,"0"   
076A   B8                     CP   b   
076B   20 05                  JR   nz,printDec6   
076D   AF                     XOR   a   
076E   B1                     OR   c   
076F   C8                     RET   z   
0770   18 01                  JR   printDec7   
0772                PRINTDEC6:      
0772   0C                     INC   c   
0773                PRINTDEC7:      
0773   78                     LD   a,b   
0774   C3 85 00               JP   putchar   
0777                ARRDEF:      
0777   3E 00                  LD   A,FALSE   
0779                ARRDEF1:      
0779   32 32 0C               LD   (vByteMode),A   
077C   21 00 00               LD   hl,0   
077F   39                     ADD   hl,sp   ; save
0780   CD E1 03               CALL   rpush   
0783   FD E9                  JP   (iy)   
0785                ARREND:      
0785   ED 43 36 0C            LD   (vTemp1),bc   ; save IP
0789   CD EC 03               CALL   rpop   
078C   22 38 0C               LD   (vTemp2),hl   ; save old SP
078F   54 5D                  LD   de,hl   ; de = hl = old SP
0791   B7                     OR   a   
0792   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0794   CB 3C                  SRL   h   ; num items = num bytes / 2
0796   CB 1D                  RR   l   
0798   44 4D                  LD   bc,hl   ; bc = count
079A   2A 92 0C               LD   hl,(vHeapPtr)   ; hl = array[-4]
079D   71                     LD   (hl),c   ; write num items in length word
079E   23                     INC   hl   
079F   70                     LD   (hl),b   
07A0   23                     INC   hl   ; hl = array[0], bc = count
07A1                             ; de = old SP, hl = array[0], bc = count
07A1   18 11                  JR   arrayEnd2   
07A3                ARRAYEND1:      
07A3   0B                     DEC   bc   ; dec items count
07A4   1B                     DEC   de   
07A5   1B                     DEC   de   
07A6   1A                     LD   a,(de)   ; a = lsb of stack item
07A7   77                     LD   (hl),a   ; write lsb of array item
07A8   23                     INC   hl   ; move to msb of array item
07A9   3A 32 0C               LD   a,(vByteMode)   ; vByteMode=1?
07AC   3D                     DEC   a   
07AD   28 05                  JR   z,arrayEnd2   
07AF   13                     INC   de   
07B0   1A                     LD   a,(de)   ; a = msb of stack item
07B1   1B                     DEC   de   
07B2   77                     LD   (hl),a   ; write msb of array item
07B3   23                     INC   hl   ; move to next word in array
07B4                ARRAYEND2:      
07B4   79                     LD   a,c   ; if not zero loop
07B5   B0                     OR   b   
07B6   20 EB                  JR   nz,arrayEnd1   
07B8   EB                     EX   de,hl   ; de = end of array
07B9   2A 38 0C               LD   hl,(vTemp2)   
07BC   F9                     LD   sp,hl   ; SP = old SP
07BD   2A 92 0C               LD   hl,(vHeapPtr)   ; de = array[-2]
07C0   23                     INC   hl   
07C1   23                     INC   hl   
07C2   E5                     PUSH   hl   ; return array[0]
07C3   ED 53 92 0C            LD   (vHeapPtr),de   ; move heap* to end of array
07C7   ED 4B 36 0C            LD   bc,(vTemp1)   ; restore IP
07CB   FD E9                  JP   (iy)   
07CD                LOOPVAR:      
07CD   26 00                  LD   h,0   
07CF   DD 54                  LD   d,ixh   
07D1   DD 5D                  LD   e,ixl   
07D3   19                     ADD   hl,de   
07D4   E5                     PUSH   hl   
07D5   FD E9                  JP   (iy)   
07D7                CARRY:       ;=10
07D7   21 00 00               LD   hl,0   
07DA   CB 15                  RL   l   
07DC   22 88 0C               LD   (vCarry),hl   
07DF   FD E9                  JP   (iy)   
07E1                ENTER:       ;=9
07E1   60 69                  LD   hl,BC   
07E3   CD E1 03               CALL   rpush   ; save Instruction Pointer
07E6   C1                     POP   BC   
07E7   0B                     DEC   BC   
07E8   FD E9                  JP   (IY)   
07EA                DSIZE:    EQU   $80   
07EA                RSIZE:    EQU   $80   
07EA                LSIZE:    EQU   $80   
07EA                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
07EA                VARS_SIZE:   EQU   26*2*2   ; A..Z, a..z words
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                          DS   LSIZE   
0A80                LSTACK:      
0A80                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80-32-1-1   
0B5E                ALTCODES:      
0B5E                          DS   $80-32-1-5   
0BB8                          ALIGN   $100   
0C00                MINTVARS:      
0C00                          DS   $30   
0C30                VLOOPSP:   DS   2   ; 
0C32                VBYTEMODE:   DS   2   ; 
0C34                TBPTR:    DS   2   ; reserved for tests
0C36                VTEMP1:   DS   2   ; 
0C38                VTEMP2:   DS   2   ; 
0C3A                RST08:    DS   2   
0C3C                RST10:    DS   2   
0C3E                RST18:    DS   2   
0C40                RST20:    DS   2   
0C42                RST28:    DS   2   
0C44                RST30:    DS   2   ; 
0C46                BAUD:     DS   2   ; 
0C48                INTVEC:   DS   2   ; 
0C4A                NMIVEC:   DS   2   ; 
0C4C                GETCVEC:   DS   2   ; 
0C4E                PUTCVEC:   DS   2   ; 
0C50                          DS   26*2   
0C84                ALTVARS:      
0C84                VS0:      DS   2   ; a
0C86                VBASE16:   DS   2   ; b
0C88                VCARRY:   DS   2   ; c
0C8A                          DS   2   ; d
0C8C                VELSE:    DS   2   ; e
0C8E                VFALSE:   DS   2   ; f
0C90                          DS   2   ; g
0C92                VHEAPPTR:   DS   2   ; h
0C94                          DS   2   ; i
0C96                          DS   2   ; j
0C98                VTIBPTR:   DS   2   ; k
0C9A                          DS   2   ; l
0C9C                          DS   2   ; m
0C9E                          DS   2   ; n
0CA0                          DS   2   ; o
0CA2                          DS   2   ; p
0CA4                          DS   2   ; q
0CA6                          DS   2   ; r
0CA8                          DS   2   ; s
0CAA                VTRUE:    DS   2   ; t
0CAC                VUNLIMITED:   DS   2   ; u
0CAE                          DS   2   ; v
0CB0                          DS   2   ; w
0CB2                          DS   2   ; x
0CB4                          DS   2   ; y
0CB6                VLASTDEF:   DS   2   ; z
0CB8                             ; .align $40
0CB8                VARS:     DS   VARS_SIZE   
0D20                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 41 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 8 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 285 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               0001 DEFINED AT LINE 12 IN MAIN.asm
                    > USED AT LINE 1050 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 13 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
EMPTY:              0000 DEFINED AT LINE 14 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 258 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 47 IN MAIN.asm
REEDIT_:            0180 DEFINED AT LINE 49 IN MAIN.asm
EDIT_:              0187 DEFINED AT LINE 52 IN MAIN.asm
LIST_:              0191 DEFINED AT LINE 55 IN MAIN.asm
PRINTSTACK_:        01AC DEFINED AT LINE 58 IN MAIN.asm
IOPCODES:           01CA DEFINED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
IALTCODES:          01F4 DEFINED AT LINE 108 IN MAIN.asm
BACKSPACE:          0229 DEFINED AT LINE 202 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
START:              0237 DEFINED AT LINE 211 IN MAIN.asm
                    > USED AT LINE 6
INTERPRET:          024A DEFINED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
INTERPRET2:         0254 DEFINED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
INTERPRET3:         025C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
INTERPRET4:         0262 DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
WAITCHAR:           0267 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
MACRO:              0296 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
WAITCHAR1:          02A7 DEFINED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
WAITCHAR3:          02B5 DEFINED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
WAITCHAR4:          02CB DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
NEXT:               02D3 DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 339 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
EXIT:               02E7 DEFINED AT LINE 346 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
ETX:                02F1 DEFINED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
ETX1:               02FA DEFINED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
INIT:               02FD DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
INIT1:              0310 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
INITOPS:            0334 DEFINED AT LINE 388 IN MAIN.asm
INITOPS1:           033D DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
INITOPS2:           034D DEFINED AT LINE 405 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
INITOPS2A:          0352 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LOOKUPREF:          0358 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
LOOKUPREF0:         035A DEFINED AT LINE 418 IN MAIN.asm
LOOKUPREF1:         035E DEFINED AT LINE 421 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
LOOKUPREF2:         0364 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
LOOKUPREF3:         0368 DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 424 IN MAIN.asm
PRINTHEX:           0376 DEFINED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
PRINTHEX2:          0381 DEFINED AT LINE 450 IN MAIN.asm
                    > USED AT LINE 445 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
PRINTHEX3:          038A DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
NESTING:            0395 DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
NESTING1A:          03A0 DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
NESTING1:           03A3 DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
NESTING2:           03B2 DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
NESTING3:           03B4 DEFINED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
NESTING4:           03BF DEFINED AT LINE 505 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 502 IN MAIN.asm
PROMPT:             03C1 DEFINED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
CRLF:               03CA DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
PRINTSTR:           03D1 DEFINED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
PUTSTR0:            03D8 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
PUTSTR:             03DC DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
RPUSH:              03E1 DEFINED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
RPOP:               03EC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
RPOP2:              03F6 DEFINED AT LINE 547 IN MAIN.asm
WRITECHAR:          03F7 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
PAGE4:              0400 DEFINED AT LINE 560 IN MAIN.asm
AND_:               0400 DEFINED AT LINE 562 IN MAIN.asm
AND1:               0407 DEFINED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
OR_:                040B DEFINED AT LINE 576 IN MAIN.asm
XOR_:               0414 DEFINED AT LINE 586 IN MAIN.asm
XOR1:               0415 DEFINED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
INV_:               041D DEFINED AT LINE 597 IN MAIN.asm
ADD_:               0422 DEFINED AT LINE 601 IN MAIN.asm
AGAIN_:             0429 DEFINED AT LINE 608 IN MAIN.asm
CALL_:              042C DEFINED AT LINE 610 IN MAIN.asm
DOT_:               0436 DEFINED AT LINE 618 IN MAIN.asm
DOT2:               043A DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
HDOT_:              0441 DEFINED AT LINE 626 IN MAIN.asm
DROP_:              0447 DEFINED AT LINE 631 IN MAIN.asm
DUP_:               044A DEFINED AT LINE 635 IN MAIN.asm
FETCH_:             044F DEFINED AT LINE 640 IN MAIN.asm
FETCH1:             0450 DEFINED AT LINE 642 IN MAIN.asm
NOP_:               0456 DEFINED AT LINE 649 IN MAIN.asm
OVER_:              0459 DEFINED AT LINE 653 IN MAIN.asm
RET_:               0460 DEFINED AT LINE 661 IN MAIN.asm
ROT_:               0467 DEFINED AT LINE 666 IN MAIN.asm
SHL_:               046E DEFINED AT LINE 675 IN MAIN.asm
SHR_:               0473 DEFINED AT LINE 682 IN MAIN.asm
SHR1:               0474 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
STORE_:             047B DEFINED AT LINE 690 IN MAIN.asm
SWAP_:              0482 DEFINED AT LINE 699 IN MAIN.asm
SUB_:               0487 DEFINED AT LINE 705 IN MAIN.asm
SUB1:               0493 DEFINED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
SUB2:               0495 DEFINED AT LINE 716 IN MAIN.asm
EQ_:                049C DEFINED AT LINE 722 IN MAIN.asm
GT_:                04A8 DEFINED AT LINE 731 IN MAIN.asm
LT_:                04AC DEFINED AT LINE 736 IN MAIN.asm
CMP_:               04AE DEFINED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
EQUAL:              04B9 DEFINED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
LESS:               04BA DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
VAR_:               04BD DEFINED AT LINE 752 IN MAIN.asm
STR_:               04C4 DEFINED AT LINE 758 IN MAIN.asm
STR:                04C4 DEFINED AT LINE 759 IN MAIN.asm
STR1:               04C5 DEFINED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
STR2:               04D0 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
KEY_:               04D3 DEFINED AT LINE 773 IN MAIN.asm
NUM_:               04DC DEFINED AT LINE 780 IN MAIN.asm
BEGIN_:             04DF DEFINED AT LINE 782 IN MAIN.asm
ARRDEF_:            04E2 DEFINED AT LINE 784 IN MAIN.asm
ARREND_:            04E5 DEFINED AT LINE 786 IN MAIN.asm
DEF_:               04E8 DEFINED AT LINE 788 IN MAIN.asm
ARRINDEX_:          04EB DEFINED AT LINE 790 IN MAIN.asm
HEX_:               04ED DEFINED AT LINE 792 IN MAIN.asm
MUL_:               04EF DEFINED AT LINE 794 IN MAIN.asm
DIV_:               04F1 DEFINED AT LINE 796 IN MAIN.asm
ALT_:               04F3 DEFINED AT LINE 798 IN MAIN.asm
ALT:                04F3 DEFINED AT LINE 804 IN MAIN.asm
ALT2:               04FC DEFINED AT LINE 811 IN MAIN.asm
ARRINDEX:           0502 DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
HEX:                0509 DEFINED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
HEX1:               050C DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
HEX2:               0515 DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
MUL:                0528 DEFINED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
MUL2:               0532 DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
DIV:                0544 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
ABSBC:              0555 DEFINED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
LOOP1:              0568 DEFINED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
LOOP2:              0569 DEFINED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
JUMPIN:             056C DEFINED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
ENDSDIV:            057A DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
DIV10:              0584 DEFINED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
BEGIN:              0589 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
LOOPSTART:          0589 DEFINED AT LINE 929 IN MAIN.asm
LOOPSTART1:         058F DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
LOOPSTART2:         05A2 DEFINED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
LOOPSTART3:         05AB DEFINED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
LOOPSTART4:         05C1 DEFINED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
AGAIN:              05C3 DEFINED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
LOOPEND:            05C3 DEFINED AT LINE 964 IN MAIN.asm
LOOPEND2:           05DC DEFINED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
LOOPEND3:           05E9 DEFINED AT LINE 986 IN MAIN.asm
LOOPEND4:           05F8 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
PAGE6:              0600 DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
ALTVAR_:            0600 DEFINED AT LINE 1004 IN MAIN.asm
ANOP_:              0616 DEFINED AT LINE 1017 IN MAIN.asm
ANONDEF_:           0618 DEFINED AT LINE 1020 IN MAIN.asm
ARRSIZE_:           0621 DEFINED AT LINE 1026 IN MAIN.asm
ARRSIZE:            0621 DEFINED AT LINE 1027 IN MAIN.asm
BREAK_:             0629 DEFINED AT LINE 1036 IN MAIN.asm
WHILE_:             0629 DEFINED AT LINE 1037 IN MAIN.asm
WHILE:              0629 DEFINED AT LINE 1038 IN MAIN.asm
WHILE2:             0637 DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
CARRDEF_:           0639 DEFINED AT LINE 1049 IN MAIN.asm
CFETCH_:            063E DEFINED AT LINE 1053 IN MAIN.asm
COMMENT_:           0645 DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
CSTORE_:            064E DEFINED AT LINE 1068 IN MAIN.asm
DEPTH_:             0653 DEFINED AT LINE 1074 IN MAIN.asm
DEPTH:              0653 DEFINED AT LINE 1075 IN MAIN.asm
EMIT_:              0661 DEFINED AT LINE 1084 IN MAIN.asm
EXEC_:              0668 DEFINED AT LINE 1090 IN MAIN.asm
EXEC1:              066D DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
EDITDEF_:           0670 DEFINED AT LINE 1098 IN MAIN.asm
PROMPT_:            0675 DEFINED AT LINE 1102 IN MAIN.asm
GO_:                067A DEFINED AT LINE 1107 IN MAIN.asm
GO1:                067B DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
GO2:                068A DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
GO3:                068D DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
INPORT_:            068F DEFINED AT LINE 1125 IN MAIN.asm
NEWLN_:             069A DEFINED AT LINE 1135 IN MAIN.asm
OUTPORT_:           069F DEFINED AT LINE 1139 IN MAIN.asm
PRINTSTK_:          06A8 DEFINED AT LINE 1148 IN MAIN.asm
PRINTSTK:           06A8 DEFINED AT LINE 1149 IN MAIN.asm
NUM:                06AE DEFINED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
NUM0:               06B7 DEFINED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
NUM1:               06B8 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
NUM2:               06D0 DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
NUM3:               06DB DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
EDITDEF:            06DE DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
EDITDEF1:           06FB DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
EDITDEF2:           06FC DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
EDITDEF3:           0704 DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
DEF:                070E DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
DEF1:               071E DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
DEF2:               0728 DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
DEF3:               0729 DEFINED AT LINE 1274 IN MAIN.asm
PRINTDEC:           072F DEFINED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
PRINTDEC2:          073E DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
PRINTDEC4:          0760 DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1303 IN MAIN.asm
PRINTDEC5:          0762 DEFINED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
PRINTDEC6:          0772 DEFINED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
PRINTDEC7:          0773 DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
ARRDEF:             0777 DEFINED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
ARRDEF1:            0779 DEFINED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
ARREND:             0785 DEFINED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
ARRAYEND1:          07A3 DEFINED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
ARRAYEND2:          07B4 DEFINED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
LOOPVAR:            07CD DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
CARRY:              07D7 DEFINED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
ENTER:              07E1 DEFINED AT LINE 1396 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
DSIZE:              0080 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 12 IN ram.asm
LSIZE:              0080 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
VARS_SIZE:          0068 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 79 IN ram.asm
TIB:                0800 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 227 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
RSTACK:             0980 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 365 IN MAIN.asm
DSTACK:             0A00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 212 IN MAIN.asm
                    > USED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
STACK:              0A00 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
LSTACK:             0A80 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 363 IN MAIN.asm
OPCODES:            0B00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 390 IN MAIN.asm
ALTCODES:           0B5E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 807 IN MAIN.asm
MINTVARS:           0C00 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 1012 IN MAIN.asm
VLOOPSP:            0C30 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 364 IN MAIN.asm
VBYTEMODE:          0C32 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
TBPTR:              0C34 DEFINED AT LINE 32 IN ram.asm
VTEMP1:             0C36 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
VTEMP2:             0C38 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1372 IN MAIN.asm
RST08:              0C3A DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0C3C DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0C3E DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0C40 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0C42 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0C44 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0C46 DEFINED AT LINE 42 IN ram.asm
INTVEC:             0C48 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0C4A DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0C4C DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0C4E DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            0C84 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 1012 IN MAIN.asm
VS0:                0C84 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 375 IN MAIN.asm
VBASE16:            0C86 DEFINED AT LINE 52 IN ram.asm
VCARRY:             0C88 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 1393 IN MAIN.asm
VELSE:              0C8C DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
VFALSE:             0C8E DEFINED AT LINE 56 IN ram.asm
VHEAPPTR:           0C92 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 379 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
VTIBPTR:            0C98 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
VTRUE:              0CAA DEFINED AT LINE 70 IN ram.asm
VUNLIMITED:         0CAC DEFINED AT LINE 71 IN ram.asm
VLASTDEF:           0CB6 DEFINED AT LINE 76 IN ram.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
VARS:               0CB8 DEFINED AT LINE 79 IN ram.asm
                    > USED AT LINE 381 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
HEAP:               0D20 DEFINED AT LINE 81 IN ram.asm
                    > USED AT LINE 378 IN MAIN.asm
