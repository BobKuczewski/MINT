0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 1B               LD   (RST08),HL   
0094   22 6C 1B               LD   (RST10),HL   
0097   22 6E 1B               LD   (RST18),HL   
009A   22 70 1B               LD   (RST20),HL   
009D   22 72 1B               LD   (RST28),HL   
00A0   22 74 1B               LD   (RST30),HL   
00A3   22 78 1B               LD   (INTVEC),HL   
00A6   22 7A 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 9B 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   
00C6                NSNUM:    EQU   5   ; namespaces
00C6                NSSIZE:   EQU   $80   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   80 18                  DW   dStack   ; a vS0
0182   00 00                  DW   FALSE   ; b vBase16
0184   00 00                  DW   0   ; c vTIBPtr
0186   80 1B                  DW   NS0   ; d vNS
0188   41 00                  DW   65   ; e vLastDef "A"
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1E                  DW   HEAP   ; h vHeapPtr
0190                ETX:         ;=12
0190   21 80 E7               LD   HL,-DSTACK   
0193   39                     ADD   HL,SP   
0194   30 03                  JR   NC,etx1   
0196   31 80 18               LD   SP,DSTACK   
0199                ETX1:        
0199   18 15                  JR   interpret   
019B                START:       
019B   31 80 18               LD   SP,DSTACK   
019E   CD 3D 02               CALL   init   
01A1   CD C2 02               CALL   printStr   
01A4   4D 49 4E 54 20 56 31 2E 30 0D 0A 00 .CSTR   "MINT V1.0\r\n"   
01B0                INTERPRET:      
01B0   CD 12 03               CALL   prompt   
01B3   01 00 00               LD   BC,0   ; load BC with offset into TIB
01B6   ED 43 04 1B            LD   (vTIBPtr),BC   
01BA                INTERPRET2:      ; calc nesting (a macro might have changed it)
01BA   1E 00                  LD   E,0   ; initilize nesting value
01BC   C5                     PUSH   BC   ; save offset into TIB,
01BD                             ; BC is also the count of chars in TIB
01BD   21 00 1A               LD   HL,TIB   ; HL is start of TIB
01C0   18 06                  JR   interpret4   
01C2                INTERPRET3:      
01C2   7E                     LD   A,(HL)   ; A = char in TIB
01C3   23                     INC   HL   ; inc pointer into TIB
01C4   0B                     DEC   BC   ; dec count of chars in TIB
01C5   CD E6 02               CALL   nesting   ; update nesting value
01C8                INTERPRET4:      
01C8   79                     LD   A,C   ; is count zero?
01C9   B0                     OR   B   
01CA   20 F6                  JR   NZ,interpret3   ; if not loop
01CC   C1                     POP   BC   ; restore offset into TIB
01CD                             ; *******************************************************************
01CD                             ; Wait for a character from the serial input (keyboard)
01CD                             ; and store it in the text buffer. Keep accepting characters,
01CD                             ; increasing the instruction pointer BC - until a newline received.
01CD                             ; *******************************************************************
01CD                WAITCHAR:      
01CD   CD 81 00               CALL   getchar   ; loop around waiting for character
01D0   FE 20                  CP   $20   
01D2   30 21                  JR   NC,waitchar1   
01D4   FE 00                  CP   $0   ; is it end of string?
01D6   28 41                  JR   Z,waitchar4   
01D8   FE 0D                  CP   "\r"   ; carriage return?
01DA   28 27                  JR   Z,waitchar3   
01DC                             ; LD D,0
01DC                MACRO:       ;=25
01DC   ED 43 04 1B            LD   (vTIBPtr),BC   
01E0   21 80 19               LD   HL,ctrlCodes   
01E3   85                     ADD   A,L   
01E4   6F                     LD   L,A   
01E5   5E                     LD   E,(HL)   
01E6   16 03                  LD   D,msb(macros)   
01E8   D5                     PUSH   DE   
01E9   CD 81 02               CALL   ENTER   
01EC   5C 47 00               .CSTR   "\\G"   
01EF   ED 4B 04 1B            LD   BC,(vTIBPtr)   
01F3   18 C5                  JR   interpret2   
01F5                WAITCHAR1:      
01F5   21 00 1A               LD   HL,TIB   
01F8   09                     ADD   HL,BC   
01F9   77                     LD   (HL),A   ; store the character in textbuf
01FA   03                     INC   BC   
01FB   CD 85 00               CALL   putchar   ; echo character to screen
01FE   CD E6 02               CALL   nesting   
0201   18 CA                  JR   waitchar   ; wait for next character
0203                WAITCHAR3:      
0203   21 00 1A               LD   HL,TIB   
0206   09                     ADD   HL,BC   
0207   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0209   23                     INC   HL   
020A   36 0A                  LD   (HL),"\n"   
020C   23                     INC   HL   ; ????
020D   03                     INC   BC   
020E   03                     INC   BC   
020F   CD 1B 03               CALL   crlf   ; echo character to screen
0212   7B                     LD   A,E   ; if zero nesting append and ETX after \r
0213   B7                     OR   A   
0214   20 B7                  JR   NZ,waitchar   
0216   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0218   03                     INC   BC   
0219                WAITCHAR4:      
0219   ED 43 04 1B            LD   (vTIBPtr),BC   
021D   01 00 1A               LD   BC,TIB   ; Instructions stored on heap at address HERE
0220   0B                     DEC   BC   
0221                             ; ********************************************************************************
0221                             ; 
0221                             ; Dispatch Routine.
0221                             ; 
0221                             ; Get the next character and form a 1 byte jump address
0221                             ; 
0221                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
0221                             ; jump to the selected function.
0221                             ; 
0221                             ; Individual handler routines will deal with each category:
0221                             ; 
0221                             ; 1. Detect characters A-Z and jump to the User Command handler routine
0221                             ; 
0221                             ; 2. Detect characters a-z and jump to the variable handler routine
0221                             ; 
0221                             ; 3. All other characters are punctuation and cause a jump to the associated
0221                             ; primitive code.
0221                             ; 
0221                             ; Instruction Pointer IP BC is incremented
0221                             ; 
0221                             ; *********************************************************************************
0221                NEXT:        ;=9
0221   03                     INC   BC   ;       Increment the IP
0222   0A                     LD   A,(BC)   ;       Get the next character and dispatch
0223   6F                     LD   L,A   ;       Index into table
0224   26 19                  LD   H,msb(opcodes)   ;       Start address of jump table
0226   6E                     LD   L,(HL)   ;       get low jump address
0227   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
0229   E9                     JP   (HL)   ;       Jump to routine
022A                             ; ARRAY compilation routine
022A                COMPNEXT:      ;=20
022A   D1                     POP   DE   ; DE = return address
022B   2A 0E 1B               LD   HL,(vHeapPtr)   ; load heap ptr
022E   73                     LD   (HL),E   ; store lsb
022F   3A 36 1B               LD   A,(vByteMode)   
0232   23                     INC   HL   
0233   B7                     OR   A   
0234   20 02                  JR   NZ,compNext1   
0236   72                     LD   (HL),D   
0237   23                     INC   HL   
0238                COMPNEXT1:      
0238   22 0E 1B               LD   (vHeapPtr),HL   ; save heap ptr
023B   18 E4                  JR   NEXT   
023D                INIT:        
023D   DD 21 00 19            LD   IX,RSTACK   
0241   FD 21 21 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
0245   21 80 01               LD   HL,iSysVars   
0248   11 00 1B               LD   DE,sysVars   
024B   01 10 00               LD   BC,8 * 2   
024E   ED B0                  LDIR      
0250   21 80 1B               LD   HL,NS0   ; init namespaces to 0
0253   54 5D                  LD   DE,HL   
0255   13                     INC   DE   
0256   36 00                  LD   (HL),0   
0258   01 80 02               LD   BC,NSNUM*NSSIZE   
025B   ED B0                  LDIR      
025D                INITOPS:      
025D   21 7E 03               LD   HL,iOpcodes   
0260   11 00 19               LD   DE,opcodes   
0263   01 00 01               LD   BC,256   
0266                INITOPS1:      
0266   7E                     LD   A,(HL)   
0267   23                     INC   HL   
0268   CB 27                  SLA   A   
026A   C8                     RET   Z   
026B   38 09                  JR   C,initOps2   
026D   CB 3F                  SRL   A   
026F   4F                     LD   C,A   
0270   06 00                  LD   B,0   
0272   ED B0                  LDIR      
0274   18 F0                  JR   initOps1   
0276                INITOPS2:      
0276   CB 3F                  SRL   A   
0278   47                     LD   B,A   
0279   7E                     LD   A,(HL)   
027A   23                     INC   HL   
027B                INITOPS2A:      
027B   12                     LD   (DE),A   
027C   13                     INC   DE   
027D   10 FC                  DJNZ   initOps2a   
027F   18 E5                  JR   initOps1   
0281                ENTER:       ;=9
0281   60 69                  LD   HL,BC   
0283   CD D0 02               CALL   rpush   ; save Instruction Pointer
0286   C1                     POP   BC   
0287   0B                     DEC   BC   
0288   FD E9                  JP   (IY)   
028A                NSLOOKUP:      
028A   D6 41                  SUB   "A"   
028C   1E 00                  LD   E,0   
028E   18 04                  JR   NSLookup3   
0290                NSLOOKUP2:      
0290   D6 61                  SUB   "a"   
0292   1E 34                  LD   E,26*2   
0294                NSLOOKUP3:      
0294   87                     ADD   A,A   
0295   83                     ADD   A,E   
0296   5F                     LD   E,A   
0297   16 00                  LD   D,0   
0299   2A 06 1B               LD   HL,(vNS)   
029C   19                     ADD   HL,DE   
029D   C9                     RET      
029E                PRINTDEC:      ;=36
029E   11 F0 D8               LD   DE,-10000   
02A1   CD B7 02               CALL   printdec1   
02A4   11 18 FC               LD   DE,-1000   
02A7   CD B7 02               CALL   printdec1   
02AA   11 9C FF               LD   DE,-100   
02AD   CD B7 02               CALL   printdec1   
02B0   1E F6                  LD   E,-10   
02B2   CD B7 02               CALL   printdec1   
02B5   1E FF                  LD   E,-1   
02B7                PRINTDEC1:      
02B7   3E 2F                  LD   A,"0"-1   
02B9                PRINTDEC2:      
02B9   3C                     INC   A   
02BA   19                     ADD   HL,DE   
02BB   38 FC                  JR   C,printdec2   
02BD   ED 52                  SBC   HL,DE   
02BF   C3 85 00               JP   putchar   
02C2                PRINTSTR:      ;=14
02C2   E3                     EX   (SP),HL   
02C3   18 04                  JR   printStr2   
02C5                PRINTSTR1:      
02C5   CD 85 00               CALL   putchar   
02C8   23                     INC   HL   
02C9                PRINTSTR2:      
02C9   7E                     LD   A,(HL)   
02CA   B7                     OR   A   
02CB   20 F8                  JR   NZ,printStr1   
02CD   23                     INC   HL   
02CE   E3                     EX   (SP),HL   
02CF   C9                     RET      
02D0                RPUSH:       ;=11
02D0   DD 2B                  DEC   IX   
02D2   DD 74 00               LD   (IX+0),H   
02D5   DD 2B                  DEC   IX   
02D7   DD 75 00               LD   (IX+0),L   
02DA   C9                     RET      
02DB                RPOP:        ;=11
02DB   DD 6E 00               LD   L,(IX+0)   
02DE   DD 23                  INC   IX   
02E0   DD 66 00               LD   H,(IX+0)   
02E3   DD 23                  INC   IX   
02E5                RPOP2:       
02E5   C9                     RET      
02E6                             ; **************************************************************************
02E6                             ; calculate nesting value
02E6                             ; A is char to be tested,
02E6                             ; E is the nesting value (initially 0)
02E6                             ; E is increased by ( and [
02E6                             ; E is decreased by ) and ]
02E6                             ; E has its bit 7 toggled by `
02E6                             ; limited to 127 levels
02E6                             ; **************************************************************************
02E6                NESTING:      ;=44
02E6   FE 60                  CP   "`"   
02E8   20 0A                  JR   NZ,nesting1   
02EA   CB 7B                  BIT   7,E   
02EC   28 03                  JR   Z,nesting1a   
02EE   CB BB                  RES   7,E   
02F0   C9                     RET      
02F1                NESTING1A:      
02F1   CB FB                  SET   7,E   
02F3   C9                     RET      
02F4                NESTING1:      
02F4   CB 7B                  BIT   7,E   
02F6   C0                     RET   NZ   
02F7   FE 3A                  CP   ":"   
02F9   28 08                  JR   Z,nesting2   
02FB   FE 5B                  CP   "["   
02FD   28 04                  JR   Z,nesting2   
02FF   FE 28                  CP   "("   
0301   20 02                  JR   NZ,nesting3   
0303                NESTING2:      
0303   1C                     INC   E   
0304   C9                     RET      
0305                NESTING3:      
0305   FE 3B                  CP   ";"   
0307   28 07                  JR   Z,nesting4   
0309   FE 5D                  CP   "]"   
030B   28 03                  JR   Z,nesting4   
030D   FE 29                  CP   ")"   
030F   C0                     RET   NZ   
0310                NESTING4:      
0310   1D                     DEC   E   
0311   C9                     RET      
0312                PROMPT:      ;=9
0312   CD C2 02               CALL   printStr   
0315   0D 0A 3E 20 00         .CSTR   "\r\n> "   
031A   C9                     RET      
031B                CRLF:        ;=7
031B   CD C2 02               CALL   printStr   
031E   0D 0A 00               .CSTR   "\r\n"   
0321   C9                     RET      
0322                             ; **************************************************************************
0322                             ; Macros must be written in Mint and end with ;
0322                             ; this code must not span pages
0322                             ; **************************************************************************
0322                MACROS:      
0322                BACKSP_:      
0322   5C 63 40 30 3D 30 3D 28 5C 63 40 31 2D 5C 63 21 60 08 20 08 60 29 3B DB   "\\c@0=0=(\\c@1-\\c!`\b \b`);"   
0339                REEDIT_:      
0339   5C 65 5C 40 5C 5A 3B   DB   "\\e\\@\\Z;"   
0340                EDIT_:       
0340   60 3F 60 5C 4B 5C 3E 5C 5A 3B 00 .CSTR   "`?`\\K\\>\\Z;"   
034B                LIST_:       
034B   5C 4E 32 36 28 5C 69 40 5C 5E 41 2B 5C 5A 5C 63 40 30 3E 28 5C 4E 29 29 5C 3E 3B 00 .CSTR   "\\N26(\\i@\\^A+\\Z\\c@0>(\\N))\\>;"   
0367                PRINTSTACK_:      
0367   60 3D 3E 20 60 5C 50 5C 4E 5C 3E 3B 00 .CSTR   "`=> `\\P\\N\\>;"   
0374                TOGGLEBASE_:      
0374   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
037E                .macro LITDAT,len
037E                             ; 
037E                 DB len
037E                .endm
037E                 
037E                .macro REPDAT,len,data
037E                             ; 
037E                 DB (len | $80)
037E                 DB data
037E                .endm
037E                 
037E                .macro ENDDAT,
037E                             ; 
037E                 DB 0
037E                .endm
037E                 
037E                IOPCODES:      
037E                          ;*Macro unroll:  LITDAT 4
037E   04                     DB   4   
037F   60                     DB   lsb(exit_)   ;   NUL
0380   71                     DB   lsb(nop_)   ;   SOH
0381   71                     DB   lsb(nop_)   ;   STX
0382   5D                     DB   lsb(etx_)   ;   ETX
0383                          ;*Macro unroll:  REPDAT 29, lsb(nop_)
0383   9D                     DB   (29 | $80)   
0384   71                     DB   lsb(nop_)   
0385                          ;*Macro unroll:  LITDAT 15
0385   0F                     DB   15   
0386   8F                     DB   lsb(store_)   ;   !
0387   58                     DB   lsb(dup_)   ;   "
0388   E0                     DB   lsb(hex_)   ;    #
0389   96                     DB   lsb(swap_)   ;    $
038A   74                     DB   lsb(over_)   ;    %
038B   00                     DB   lsb(and_)   ;    &
038C   55                     DB   lsb(drop_)   ;    '
038D   E6                     DB   lsb(begin_)   ;    (
038E   D1                     DB   lsb(again_)   ;    )
038F   DD                     DB   lsb(mul_)   ;    *
0390   22                     DB   lsb(add_)   ;    +
0391   4F                     DB   lsb(hdot_)   ;    ,
0392   9B                     DB   lsb(sub_)   ;    -
0393   44                     DB   lsb(dot_)   ;    .
0394   EA                     DB   lsb(div_)   ;    /
0395                          ;*Macro unroll:  REPDAT 10, lsb(num_)
0395   8A                     DB   (10 | $80)   
0396   E8                     DB   lsb(num_)   
0397                          ;*Macro unroll:  LITDAT 7
0397   07                     DB   7   
0398   E3                     DB   lsb(def_)   ;    :
0399   7B                     DB   lsb(ret_)   ;    ;
039A   B9                     DB   lsb(lt_)   ;    <
039B   A9                     DB   lsb(eq_)   ;    =
039C   B5                     DB   lsb(gt_)   ;    >
039D   DA                     DB   lsb(getRef_)   ;    ?
039E   6A                     DB   lsb(fetch_)   ;    @
039F                          ;*Macro unroll:  REPDAT 26, lsb(call_)
039F   9A                     DB   (26 | $80)   
03A0   3A                     DB   lsb(call_)   
03A1                          ;*Macro unroll:  LITDAT 6
03A1   06                     DB   6   
03A2   28                     DB   lsb(arrDef_)   ;    [
03A3   D4                     DB   lsb(alt_)   ;    \
03A4   D7                     DB   lsb(arrEnd_)   ;    ]
03A5   14                     DB   lsb(xor_)   ;    ^
03A6   A3                     DB   lsb(neg_)   ;    _
03A7   EC                     DB   lsb(str_)   ;    `
03A8                          ;*Macro unroll:  REPDAT 26, lsb(var_)
03A8   9A                     DB   (26 | $80)   
03A9   CA                     DB   lsb(var_)   
03AA                          ;*Macro unroll:  LITDAT 5
03AA   05                     DB   5   
03AB   82                     DB   lsb(shl_)   ;    {
03AC   0B                     DB   lsb(or_)   ;    |
03AD   87                     DB   lsb(shr_)   ;    }
03AE   1D                     DB   lsb(inv_)   ;    ~
03AF   71                     DB   lsb(nop_)   ;    backspace
03B0                          ;*Macro unroll:  LITDAT 17
03B0   11                     DB   17   
03B1   00                     DB   lsb(EMPTY)   ; NUL ^@
03B2   00                     DB   lsb(EMPTY)   ; SOH ^A  1
03B3   74                     DB   lsb(toggleBase_)   ; STX ^B  2
03B4   00                     DB   lsb(EMPTY)   ; ETX ^C  3
03B5   00                     DB   lsb(EMPTY)   ; EOT ^D  4
03B6   40                     DB   lsb(edit_)   ; ENQ ^E  5
03B7   00                     DB   lsb(EMPTY)   ; ACK ^F  6
03B8   00                     DB   lsb(EMPTY)   ; BEL ^G  7
03B9   22                     DB   lsb(backsp_)   ; BS  ^H  8
03BA   00                     DB   lsb(EMPTY)   ; TAB ^I  9
03BB   39                     DB   lsb(reedit_)   ; LF  ^J 10
03BC   00                     DB   lsb(EMPTY)   ; VT  ^K 11
03BD   4B                     DB   lsb(list_)   ; FF  ^L 12
03BE   00                     DB   lsb(EMPTY)   ; CR  ^M 13
03BF   00                     DB   lsb(EMPTY)   ; SO  ^N 14
03C0   00                     DB   lsb(EMPTY)   ; SI  ^O 15
03C1   67                     DB   lsb(printStack_)   ; DLE ^P 16
03C2                          ;*Macro unroll:  REPDAT 15, lsb(EMPTY)
03C2   8F                     DB   (15 | $80)   
03C3   00                     DB   lsb(EMPTY)   
03C4                          ;*Macro unroll:  LITDAT 2
03C4   02                     DB   2   
03C5   0A                     DB   lsb(aNop_)   ; SP  ^`
03C6   1A                     DB   lsb(cStore_)   ;    !
03C7                          ;*Macro unroll:  REPDAT 6, lsb(aNop_)
03C7   86                     DB   (6 | $80)   
03C8   0A                     DB   lsb(aNop_)   
03C9                          ;*Macro unroll:  LITDAT 1
03C9   01                     DB   1   
03CA   34                     DB   lsb(ifte_)   ;    (  ( b -- )
03CB                          ;*Macro unroll:  REPDAT 7, lsb(aNop_)
03CB   87                     DB   (7 | $80)   
03CC   0A                     DB   lsb(aNop_)   
03CD                          ;*Macro unroll:  REPDAT 5, lsb(NSCall_)
03CD   85                     DB   (5 | $80)   
03CE   5D                     DB   lsb(NSCall_)   
03CF                          ;*Macro unroll:  REPDAT 9, lsb(aNop_)
03CF   89                     DB   (9 | $80)   
03D0   0A                     DB   lsb(aNop_)   
03D1                          ;*Macro unroll:  LITDAT 21
03D1   15                     DB   21   
03D2   8A                     DB   lsb(prompt_)   ;    >
03D3   0A                     DB   lsb(aNop_)   ;    ?
03D4   05                     DB   lsb(cFetch_)   ;    @
03D5   0A                     DB   lsb(aNop_)   ;    A
03D6   C6                     DB   lsb(break_)   ;    B
03D7   71                     DB   lsb(nop_)   ;    C
03D8   1F                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03D9   2D                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03DA   0A                     DB   lsb(aNop_)   ;    F
03DB   4E                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03DC   0A                     DB   lsb(aNop_)   ;    H
03DD   9D                     DB   lsb(inPort_)   ;    I  ( port -- val )
03DE   0A                     DB   lsb(aNop_)   ;    J
03DF   A8                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03E0   0A                     DB   lsb(aNop_)   ;    L
03E1   0A                     DB   lsb(aNop_)   ;    M
03E2   B1                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03E3   B6                     DB   lsb(outPort_)   ;    O  ( val port -- )
03E4   F6                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03E5   0A                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
03E6   BF                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03E7                          ;*Macro unroll:  REPDAT 5, lsb(aNop_)
03E7   85                     DB   (5 | $80)   
03E8   0A                     DB   lsb(aNop_)   
03E9                          ;*Macro unroll:  LITDAT 9
03E9   09                     DB   9   
03EA   46                     DB   lsb(exec_)   ;    X
03EB   0A                     DB   lsb(aNop_)   ;    Y
03EC   F4                     DB   lsb(editDef_)   ;    Z
03ED   00                     DB   lsb(cArrDef_)   ;    [
03EE   11                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03EF   0A                     DB   lsb(aNop_)   ;    ]
03F0   0C                     DB   lsb(charCode_)   ;    ^
03F1   0A                     DB   lsb(aNop_)   ;    _
03F2   0A                     DB   lsb(aNop_)   ;    `
03F3                          ;*Macro unroll:  REPDAT 8, lsb(sysVar_)
03F3   88                     DB   (8 | $80)   
03F4   8F                     DB   lsb(sysVar_)   
03F5                          ;*Macro unroll:  LITDAT 1
03F5   01                     DB   1   
03F6   99                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03F7                          ;*Macro unroll:  REPDAT 17, lsb(sysVar_)
03F7   91                     DB   (17 | $80)   
03F8   8F                     DB   lsb(sysVar_)   
03F9                          ;*Macro unroll:  LITDAT 5
03F9   05                     DB   5   
03FA   D5                     DB   lsb(NSEnter_)   ;    {
03FB   0A                     DB   lsb(aNop_)   ;    |
03FC   82                     DB   lsb(NSExit_)   ;    }
03FD   0A                     DB   lsb(aNop_)   ;    ~
03FE   0A                     DB   lsb(aNop_)   ;    BS		
03FF                          ;*Macro unroll:  ENDDAT
03FF   00                     DB   0   
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                AND_:        
0400   D1                     POP   DE   ;     Bitwise AND the top 2 elements of the stack
0401   E1                     POP   HL   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   HL   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                OR_:         
040B   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
040C   E1                     POP   HL   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                XOR_:        
0414   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0415                XOR1:        
0415   E1                     POP   HL   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                INV_:        ; Bitwise INVert the top member of the stack
041D   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0420   18 F3                  JR   xor1   
0422                ADD_:        ; Add the top 2 members of the stack
0422   D1                     POP   DE   
0423   E1                     POP   HL   
0424   19                     ADD   HL,DE   
0425   E5                     PUSH   HL   
0426   FD E9                  JP   (IY)   
0428                ARRDEF_:      
0428                ARRDEF:      ;=18
0428   3E 00                  LD   A,FALSE   
042A                ARRDEF1:      
042A   FD 21 2A 02            LD   IY,compNEXT   
042E   32 36 1B               LD   (vByteMode),A   
0431   2A 0E 1B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0434   CD D0 02               CALL   rpush   ; save start of array \[  \]
0437   C3 21 02               JP   NEXT   ; hardwired to NEXT
043A                CALL_:       
043A   0A                     LD   A,(BC)   
043B   CD 8A 02               CALL   NSLookup   
043E   5E                     LD   E,(HL)   
043F   23                     INC   HL   
0440   56                     LD   D,(HL)   
0441   C3 4F 06               JP   go1   
0444                DOT_:        
0444   E1                     POP   HL   
0445   CD 9E 02               CALL   printdec   
0448                DOT2:        
0448   3E 20                  LD   A," "   
044A   CD 85 00               CALL   putChar   
044D   FD E9                  JP   (IY)   
044F                HDOT_:       ; print hexadecimal
044F   E1                     POP   HL   
0450   CD 7A 07               CALL   printhex   
0453   18 F3                  JR   dot2   
0455                DROP_:       ; Discard the top member of the stack
0455   E1                     POP   HL   
0456   FD E9                  JP   (IY)   
0458                DUP_:        
0458   E1                     POP   HL   ; Duplicate the top member of the stack
0459   E5                     PUSH   HL   
045A   E5                     PUSH   HL   
045B   FD E9                  JP   (IY)   
045D                ETX_:        
045D   C3 90 01               JP   ETX   
0460                EXIT_:       
0460   03                     INC   BC   
0461   50 59                  LD   DE,BC   
0463   CD DB 02               CALL   rpop   ; Restore Instruction pointer
0466   44 4D                  LD   BC,HL   
0468   EB                     EX   DE,HL   
0469   E9                     JP   (HL)   
046A                FETCH_:      ; Fetch the value from the address placed on the top of the stack
046A   E1                     POP   HL   
046B                FETCH1:      
046B   5E                     LD   E,(HL)   
046C   23                     INC   HL   
046D   56                     LD   D,(HL)   
046E   D5                     PUSH   DE   
046F   FD E9                  JP   (IY)   
0471                NOP_:        
0471   C3 21 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0474                OVER_:       
0474   E1                     POP   HL   ; Duplicate 2nd element of the stack
0475   D1                     POP   DE   
0476   D5                     PUSH   DE   
0477   E5                     PUSH   HL   
0478   D5                     PUSH   DE   ; And push it to top of stack
0479   FD E9                  JP   (IY)   
047B                RET_:        
047B   CD DB 02               CALL   rpop   ; Restore Instruction pointer
047E   44 4D                  LD   BC,HL   
0480   FD E9                  JP   (IY)   
0482                             ;  Left shift { is multiply by 2		
0482                SHL_:        
0482   E1                     POP   HL   ; Duplicate the top member of the stack
0483   29                     ADD   HL,HL   
0484   E5                     PUSH   HL   ; shift left fallthrough into add_
0485   FD E9                  JP   (IY)   ; 
0487                             ;  Right shift } is a divide by 2		
0487                SHR_:        
0487   E1                     POP   HL   ; Get the top member of the stack
0488                SHR1:        
0488   CB 3C                  SRL   H   
048A   CB 1D                  RR   L   
048C   E5                     PUSH   HL   
048D   FD E9                  JP   (IY)   ; 
048F                STORE_:      ; Store the value at the address placed on the top of the stack
048F   E1                     POP   HL   
0490   D1                     POP   DE   
0491   73                     LD   (HL),E   
0492   23                     INC   HL   
0493   72                     LD   (HL),D   
0494   FD E9                  JP   (IY)   
0496                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
0496                SWAP_:       
0496   E1                     POP   HL   
0497   E3                     EX   (SP),HL   
0498   E5                     PUSH   HL   
0499   FD E9                  JP   (IY)   
049B                SUB_:        ; Subtract the value 2nd on stack from top of stack
049B   D1                     POP   DE   ; 
049C   E1                     POP   HL   ;      Entry point for INVert
049D                SUB2:        
049D   A7                     AND   A   ;      Entry point for NEGate
049E   ED 52                  SBC   HL,DE   ; 15t
04A0   E5                     PUSH   HL   ; 
04A1   FD E9                  JP   (IY)   ; 
04A3                             ; 5
04A3                NEG_:        
04A3   21 00 00               LD   HL,0   ; NEGate the value on top of stack (2's complement)
04A6   D1                     POP   DE   ; 
04A7   18 F4                  JR   sub2   ; use the SUBtract routine
04A9                EQ_:         
04A9   E1                     POP   HL   
04AA   D1                     POP   DE   
04AB   A7                     AND   A   ; reset the carry flag
04AC   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04AE   28 16                  JR   Z,equal   
04B0   21 00 00               LD   HL,0   
04B3   18 12                  JR   less   ; HL = 1
04B5                GT_:         
04B5   D1                     POP   DE   
04B6   E1                     POP   HL   
04B7   18 02                  JR   cmp_   
04B9                LT_:         
04B9   E1                     POP   HL   
04BA   D1                     POP   DE   
04BB                CMP_:        
04BB   A7                     AND   A   ; reset the carry flag
04BC   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04BE   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04C0   21 00 00               LD   HL,0   
04C3   FA C7 04               JP   M,less   
04C6                EQUAL:       
04C6   2C                     INC   L   ; HL = 1
04C7                LESS:        
04C7   E5                     PUSH   HL   
04C8   FD E9                  JP   (IY)   
04CA                VAR_:        
04CA   0A                     LD   A,(BC)   
04CB   CD 90 02               CALL   NSLookup2   
04CE   E5                     PUSH   HL   
04CF   FD E9                  JP   (IY)   
04D1   C3 C7 05     AGAIN_:   JP   again   
04D4   C3 53 07     ALT_:     JP   alt   
04D7   C3 8A 05     ARREND_:   JP   arrEnd   
04DA   C3 4B 07     GETREF_:   JP   getRef   
04DD   C3 5E 07     MUL_:     JP   mul   
04E0   C3 6D 05     HEX_:     JP   hex   
04E3   C3 A6 05     DEF_:     JP   def   
04E6   18 13        BEGIN_:   JR   begin   
04E8   18 3F        NUM_:     JR   num   
04EA   18 5F        DIV_:     JR   div   
04EC                STR_:        
04EC                STR:         
04EC   03                     INC   BC   
04ED                STR1:        
04ED   0A                     LD   A,(BC)   
04EE   03                     INC   BC   
04EF   FE 60                  CP   "`"   ; ` is the string terminator
04F1   28 05                  JR   Z,str2   
04F3   CD 85 00               CALL   putchar   
04F6   18 F5                  JR   str1   
04F8                STR2:        
04F8   0B                     DEC   BC   
04F9   FD E9                  JP   (IY)   
04FB                             ;*******************************************************************
04FB                             ; Page 5 primitive routines
04FB                             ;*******************************************************************
04FB                             ;falls through
04FB                             ; *************************************
04FB                             ; Loop Handling Code
04FB                             ; *************************************
04FB                             ;=23
04FB                BEGIN:       ; Left parentesis begins a loop
04FB   E1                     POP   HL   
04FC   7D                     LD   A,L   ; zero?
04FD   B4                     OR   H   
04FE   28 1C                  JR   Z,begin1   
0500   2B                     DEC   HL   
0501   11 FA FF               LD   DE,-6   
0504   DD 19                  ADD   IX,DE   
0506   DD 36 00 00            LD   (IX+0),0   ; loop var
050A   DD 36 01 00            LD   (IX+1),0   
050E   DD 75 02               LD   (IX+2),L   ; loop limit
0511   DD 74 03               LD   (IX+3),H   
0514   DD 71 04               LD   (IX+4),C   ; loop address
0517   DD 70 05               LD   (IX+5),B   
051A   FD E9                  JP   (IY)   
051C                BEGIN1:      
051C   1E 01                  LD   E,1   
051E                BEGIN2:      
051E   03                     INC   BC   
051F   0A                     LD   A,(BC)   
0520   CD E6 02               CALL   nesting   
0523   AF                     XOR   A   
0524   B3                     OR   E   
0525   20 F7                  JR   NZ,begin2   
0527                BEGIN3:      
0527   FD E9                  JP   (IY)   
0529                             ; ********************************************************************************
0529                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
0529                             ; Read the first character.
0529                             ;			
0529                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
0529                             ; and then added into the L register. (HL forms a 16-bit accumulator)
0529                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
0529                             ; and then add in the next digit. Repeat this until a non-number character is
0529                             ; detected. Add in the final digit so that HL contains the converted number.
0529                             ; Push HL onto the stack and proceed to the dispatch routine.
0529                             ; ********************************************************************************
0529                NUM:         ;=23
0529   21 00 00               LD   HL,$0000   ;     Clear HL to accept the number
052C   0A                     LD   A,(BC)   ;     Get the character which is a numeral
052D                NUM1:        ; corrected KB 24/11/21
052D   D6 30                  SUB   $30   ;       Form decimal digit
052F   85                     ADD   A,L   ;       Add into bottom of HL
0530   6F                     LD   L,A   ; 
0531   3E 00                  LD   A,00   ;       Clear A
0533   8C                     ADC   A,H   ; Add with carry H-reg
0534   67                     LD   H,A   ; Put result in H-reg
0535   03                     INC   BC   ;       Increment IP
0536   0A                     LD   A,(BC)   ;       and get the next character
0537   FE 30                  CP   $30   ;       Less than $30
0539   38 0C                  JR   C,num2   ;       Not a number / end of number
053B   FE 3A                  CP   $3A   ;       Greater or equal to $3A
053D   30 08                  JR   NC,num2   ;       Not a number / end of number
053F                             ; Multiply digit(s) in HL by 10
053F   29                     ADD   HL,HL   ;        2X
0540   5D                     LD   E,L   ;        LD DE,HL
0541   54                     LD   D,H   ; 
0542   29                     ADD   HL,HL   ;        4X
0543   29                     ADD   HL,HL   ;        8X
0544   19                     ADD   HL,DE   ;        2X  + 8X  = 10X
0545                             ; 52t cycles
0545   18 E6                  JR   num1   
0547                NUM2:        
0547   0B                     DEC   BC   
0548   E5                     PUSH   HL   ;       Put the number on the stack
0549   FD E9                  JP   (IY)   ; and process the next character
054B                             ; ********************************************************************
054B                             ; 16-bit division subroutine.
054B                             ; 
054B                             ; BC: divisor, DE: dividend, HL: remainder
054B                             ; *********************************************************************
054B                             ; This divides DE by BC, storing the result in DE, remainder in HL
054B                             ; *********************************************************************
054B                             ; 1382 cycles
054B                             ; 35 bytes (reduced from 48)
054B                             ; 
054B                DIV:         ;=24
054B   D1                     POP   DE   ; get first value
054C   E1                     POP   HL   ; get 2nd value
054D   C5                     PUSH   BC   ; Preserve the IP
054E   44                     LD   B,H   ; BC = 2nd value
054F   4D                     LD   C,L   
0550                             ; 
0550   21 00 00               LD   HL,0   ; Zero the remainder
0553   3E 10                  LD   A,16   ; Loop counter
0555                DIV1:        ;shift the bits from BC (numerator) into HL (accumulator)
0555   CB 21                  SLA   C   
0557   CB 10                  RL   B   
0559   ED 6A                  ADC   HL,HL   
055B   ED 52                  SBC   HL,DE   ;Check if remainder >= denominator (HL>=DE)
055D   38 03                  JR   C,div2   
055F   0C                     INC   C   
0560   18 01                  JR   div3   
0562                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
0562   19                     ADD   hl,de   
0563                DIV3:        
0563   3D                     DEC   A   
0564   20 EF                  JR   NZ,div1   
0566   50                     LD   D,B   ; Result from BC to DE
0567   59                     LD   E,C   
0568                DIV4:        
0568   C1                     POP   BC   ; Restore the IP
0569   D5                     PUSH   DE   ; Push Result
056A   E5                     PUSH   HL   ; Push remainder
056B   FD E9                  JP   (IY)   
056D                HEX:         ;=26
056D   21 00 00               LD   HL,0   ;     Clear HL to accept the number
0570                HEX1:        
0570   03                     INC   BC   
0571   0A                     LD   A,(BC)   ;     Get the character which is a numeral
0572   CB 77                  BIT   6,A   ;       is it uppercase alpha?
0574   28 02                  JR   Z,hex2   ; no a decimal
0576   D6 07                  SUB   7   ; sub 7  to make $A - $F
0578                HEX2:        
0578   D6 30                  SUB   $30   ;       Form decimal digit
057A   DA 47 05               JP   C,num2   
057D   FE 10                  CP   $0F+1   
057F   D2 47 05               JP   NC,num2   
0582   29                     ADD   HL,HL   ;        2X ; Multiply digit(s) in HL by 16
0583   29                     ADD   HL,HL   ;        4X
0584   29                     ADD   HL,HL   ;        8X
0585   29                     ADD   HL,HL   ;       16X
0586   85                     ADD   A,L   ;       Add into bottom of HL
0587   6F                     LD   L,A   ; 
0588   18 E6                  JR   hex1   
058A                ARREND:      ;=27
058A   CD DB 02               CALL   rpop   ; DE = start of array
058D   E5                     PUSH   HL   
058E   EB                     EX   DE,HL   
058F   2A 0E 1B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0592   B7                     OR   A   
0593   ED 52                  SBC   HL,DE   ; bytes on heap
0595   3A 36 1B               LD   A,(vByteMode)   
0598   B7                     OR   A   
0599   20 04                  JR   NZ,arrEnd2   
059B   CB 3C                  SRL   H   ; BC = m words
059D   CB 1D                  RR   L   
059F                ARREND2:      
059F   E5                     PUSH   HL   
05A0   FD 21 21 02            LD   IY,NEXT   
05A4   FD E9                  JP   (IY)   ; hardwired to NEXT
05A6                             ; **************************************************************************
05A6                             ; def is used to create a colon definition
05A6                             ; When a colon is detected, the next character (usually uppercase alpha)
05A6                             ; is looked up in the vector table to get its associated code field address
05A6                             ; This CFA is updated to point to the character after uppercase alpha
05A6                             ; The remainder of the characters are then skipped until after a semicolon
05A6                             ; is found.
05A6                             ; ***************************************************************************
05A6                             ;=31
05A6                DEF:         ; Create a colon definition
05A6   03                     INC   BC   
05A7   0A                     LD   A,(BC)   ; Get the next character
05A8   32 08 1B               LD   (vLastDef),A   
05AB   03                     INC   BC   
05AC   CD 8A 02               CALL   NSLookup   
05AF   ED 5B 0E 1B            LD   DE,(vHeapPtr)   ; start of defintion
05B3   73                     LD   (HL),E   ; Save low byte of address in CFA
05B4   23                     INC   HL   
05B5   72                     LD   (HL),D   ; Save high byte of address in CFA+1
05B6                DEF1:        ; Skip to end of definition
05B6   0A                     LD   A,(BC)   ; Get the next character
05B7   03                     INC   BC   ; Point to next character
05B8   12                     LD   (DE),A   
05B9   13                     INC   DE   
05BA   FE 3B                  CP   ";"   ; Is it a semicolon
05BC   28 02                  JR   Z,def2   ; end the definition
05BE   18 F6                  JR   def1   ; get the next element
05C0                DEF2:        
05C0   0B                     DEC   BC   
05C1                DEF3:        
05C1   ED 53 0E 1B            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
05C5   FD E9                  JP   (IY)   
05C7                AGAIN:       ;=51
05C7   DD 5E 00               LD   E,(IX+0)   ; peek loop var
05CA   DD 56 01               LD   D,(IX+1)   
05CD   7A                     LD   A,D   ; check if IFTEMode
05CE   A3                     AND   E   
05CF   3C                     INC   A   
05D0   20 07                  JR   NZ,again1   
05D2   13                     INC   DE   
05D3   D5                     PUSH   DE   ; push FALSE condition
05D4   11 02 00               LD   DE,2   
05D7   18 1D                  JR   again3   ; drop IFTEMode
05D9                AGAIN1:      
05D9   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
05DC   DD 66 03               LD   H,(IX+3)   
05DF   B7                     OR   A   
05E0   ED 52                  SBC   HL,DE   
05E2   28 0F                  JR   Z,again2   
05E4   13                     INC   DE   
05E5   DD 73 00               LD   (IX+0),E   ; poke loop var
05E8   DD 72 01               LD   (IX+1),D   
05EB   DD 4E 04               LD   C,(IX+4)   ; peek loop address
05EE   DD 46 05               LD   B,(IX+5)   
05F1   FD E9                  JP   (IY)   
05F3                AGAIN2:      
05F3   11 06 00               LD   DE,6   ; drop loop frame
05F6                AGAIN3:      
05F6   DD 19                  ADD   IX,DE   
05F8   FD E9                  JP   (IY)   
05FA                             ; **************************************************************************
05FA                             ; Page 6 Alt primitives
05FA                             ; **************************************************************************
05FA                          ALIGN   $100   
0600                PAGE6:       
0600                CARRDEF_:      ; define a byte array
0600   3E 01                  LD   A,TRUE   
0602   C3 2A 04               JP   arrDef1   
0605                CFETCH_:      
0605   E1                     POP   HL   
0606   16 00                  LD   D,0   
0608   5E                     LD   E,(HL)   
0609   D5                     PUSH   DE   
060A                ANOP_:       
060A   FD E9                  JP   (IY)   
060C                CHARCODE_:      
060C   03                     INC   BC   
060D   0A                     LD   A,(BC)   
060E   C3 AB 06               JP   key1   
0611                COMMENT_:      
0611   03                     INC   BC   ; point to next char
0612   0A                     LD   A,(BC)   
0613   FE 0D                  CP   "\r"   ; terminate at cr
0615   20 FA                  JR   NZ,comment_   
0617   0B                     DEC   BC   
0618   FD E9                  JP   (IY)   
061A                CSTORE_:      
061A   E1                     POP   HL   
061B   D1                     POP   DE   
061C   73                     LD   (HL),E   
061D   FD E9                  JP   (IY)   
061F                DEPTH_:      
061F   21 00 00               LD   HL,0   
0622   39                     ADD   HL,SP   
0623   EB                     EX   DE,HL   
0624   21 80 18               LD   HL,DSTACK   
0627   B7                     OR   A   
0628   ED 52                  SBC   HL,DE   
062A   C3 88 04               JP   shr1   
062D                EMIT_:       
062D   E1                     POP   HL   
062E   7D                     LD   A,L   
062F   CD 85 00               CALL   putchar   
0632   FD E9                  JP   (IY)   
0634                IFTE_:       
0634   D1                     POP   DE   
0635   7B                     LD   A,E   
0636   B2                     OR   D   
0637   20 05                  JR   NZ,ifte1   
0639   13                     INC   DE   
063A   D5                     PUSH   DE   ; push TRUE on stack for else clause
063B   C3 1C 05               JP   begin1   ; skip to closing ) works with \) too
063E                IFTE1:       
063E   21 FF FF               LD   HL,-1   ; push -1 on return stack to indicate IFTEMode
0641   CD D0 02               CALL   rpush   
0644   FD E9                  JP   (IY)   
0646                EXEC_:       
0646   CD 4B 06               CALL   exec1   
0649   FD E9                  JP   (IY)   
064B                EXEC1:       
064B   E1                     POP   HL   
064C   E3                     EX   (SP),HL   
064D   E9                     JP   (HL)   
064E                GO_:         
064E   D1                     POP   DE   
064F                GO1:         
064F   7A                     LD   A,D   
0650   B3                     OR   E   
0651   28 08                  JR   Z,go2   
0653   60 69                  LD   HL,BC   
0655   CD D0 02               CALL   rpush   ; save Instruction Pointer
0658   42 4B                  LD   BC,DE   
065A   0B                     DEC   BC   
065B                GO2:         
065B   FD E9                  JP   (IY)   
065D                NSCALL_:      ;=25
065D   FD 21 E5 02            LD   IY,rpop2   ; rewire NEXT to simply return
0661   CD D6 06               CALL   NSEnter1   ; enter namespace return here on NEXT
0664   0A                     LD   A,(BC)   
0665   FE 61                  CP   "a"   
0667   30 11                  JR   NC,NSCall2   
0669   CD 8A 02               CALL   NSLookup   
066C   E5                     PUSH   HL   
066D   FD 21 21 02            LD   IY,NEXT   ; restore NEXT
0671   CD 81 02               CALL   enter   ; enter MINT interpreter with TOS=command
0674   40 5C 47 00            .CSTR   "@\\G"   ; execute and restore namespace
0678   18 08                  JR   NSExit_   
067A                NSCALL2:      ;=25
067A   CD 90 02               CALL   NSLookup2   
067D   E5                     PUSH   HL   
067E   FD 21 21 02            LD   IY,NEXT   ; restore NEXT
0682                NSEXIT_:      
0682   CD DB 02               CALL   rpop   
0685   22 06 1B               LD   (vNS),HL   
0688   FD E9                  JP   (IY)   
068A                PROMPT_:      
068A   CD 12 03               CALL   prompt   
068D   FD E9                  JP   (IY)   
068F                SYSVAR_:      
068F   0A                     LD   A,(BC)   
0690   D6 61                  SUB   "a" - ((sysVars - mintVars)/2)   
0692   87                     ADD   A,A   
0693   26 1B                  LD   H,msb(mintVars)   
0695   6F                     LD   L,A   
0696   E5                     PUSH   HL   
0697   FD E9                  JP   (IY)   
0699                I_:          
0699   DD E5                  PUSH   IX   
069B   FD E9                  JP   (IY)   
069D                INPORT_:      
069D   E1                     POP   HL   
069E   79                     LD   A,C   
069F   4D                     LD   C,L   
06A0   ED 68                  IN   L,(C)   
06A2   26 00                  LD   H,0   
06A4   4F                     LD   C,A   
06A5   E5                     PUSH   HL   
06A6   FD E9                  JP   (IY)   
06A8                KEY_:        
06A8   CD 81 00               CALL   getchar   
06AB                KEY1:        
06AB   26 00                  LD   H,0   
06AD   6F                     LD   L,A   
06AE   E5                     PUSH   HL   
06AF   FD E9                  JP   (IY)   
06B1                NEWLN_:      
06B1   CD 1B 03               CALL   crlf   
06B4   FD E9                  JP   (IY)   
06B6                OUTPORT_:      
06B6   E1                     POP   HL   
06B7   59                     LD   E,C   
06B8   4D                     LD   C,L   
06B9   E1                     POP   HL   
06BA   ED 69                  OUT   (C),L   
06BC   4B                     LD   C,E   
06BD   FD E9                  JP   (IY)   
06BF                ROT_:        ; a b c -- b c a
06BF   D1                     POP   DE   ; a b                   de = c
06C0   E1                     POP   HL   ; a                     hl = b
06C1   E3                     EX   (SP),HL   ; b                     hl = a
06C2   D5                     PUSH   DE   ; b c
06C3   E5                     PUSH   HL   ; b c a
06C4   FD E9                  JP   (IY)   
06C6                BREAK_:      
06C6   E1                     POP   HL   
06C7   7D                     LD   A,L   ; zero?
06C8   B4                     OR   H   
06C9   20 02                  JR   NZ,break1   
06CB   FD E9                  JP   (IY)   
06CD                BREAK1:      
06CD   11 06 00               LD   DE,6   ; drop loop frame
06D0   DD 19                  ADD   IX,DE   
06D2   C3 1C 05               JP   begin1   ; skip to end of loop
06D5                NSENTER_:      
06D5   03                     INC   BC   
06D6                NSENTER1:      
06D6   0A                     LD   A,(BC)   ; read NS ASCII code
06D7   D6 30                  SUB   "0"   ; convert to number
06D9   03                     INC   BC   
06DA   57                     LD   D,A   ; multiply by 64
06DB   1E 00                  LD   E,0   
06DD   CB 3A                  SRL   D   
06DF   CB 1B                  RR   E   
06E1   CB 3A                  SRL   D   
06E3   CB 1B                  RR   E   
06E5   2A 06 1B               LD   HL,(vNS)   ; 
06E8   CD D0 02               CALL   rpush   
06EB   21 80 1B               LD   HL,NS0   
06EE   19                     ADD   HL,DE   
06EF   22 06 1B               LD   (vNS),HL   
06F2   FD E9                  JP   (IY)   
06F4                EDITDEF_:      
06F4   18 20                  JR   editDef   
06F6                PRINTSTK_:      
06F6                PRINTSTK:      ;=40
06F6                             ; MINT: \a@2- \D1- ("@ \b@ \(,)(.) 2-) '
06F6   CD 81 02               CALL   ENTER   
06F9   5C 61 40 32 2D 5C 44 31 2D 28 22 40 5C 62 40 5C 28 2C 29 28 2E 29 32 2D 29 27 00 .CSTR   "\\a@2-\\D1-(",$22,"@\\b@\\(,)(.)2-)'"   
0714   FD E9                  JP   (IY)   
0716                             ; **************************************************************************
0716                             ; Page 6 primitive routines
0716                             ; **************************************************************************
0716                             ; falls through
0716                             ; **************************************************************************
0716                             ; copy definition to text input buffer
0716                             ; update TIBPtr
0716                             ; **************************************************************************
0716                EDITDEF:      ;=50 lookup up def based on number
0716   D1                     POP   DE   
0717   7B                     LD   A,E   
0718   08                     EX   AF,AF'   
0719   7B                     LD   A,E   
071A   CD 8A 02               CALL   NSLookup   
071D   5E                     LD   E,(HL)   
071E   23                     INC   HL   
071F   56                     LD   D,(HL)   
0720   7A                     LD   A,D   
0721   B3                     OR   E   
0722   21 00 1A               LD   HL,TIB   
0725   28 14                  JR   Z,editDef3   
0727   3E 3A                  LD   A,":"   
0729   CD 46 07               CALL   writeChar   
072C   08                     EX   AF,AF'   
072D   CD 46 07               CALL   writeChar   
0730   18 01                  JR   editDef2   
0732                EDITDEF1:      
0732   13                     INC   DE   
0733                EDITDEF2:      
0733   1A                     LD   A,(DE)   
0734   CD 46 07               CALL   writeChar   
0737   FE 3B                  CP   ";"   
0739   20 F7                  JR   NZ,editDef1   
073B                EDITDEF3:      
073B   11 00 1A               LD   DE,TIB   
073E   B7                     OR   A   
073F   ED 52                  SBC   HL,DE   
0741   22 04 1B               LD   (vTIBPtr),HL   
0744   FD E9                  JP   (IY)   
0746                WRITECHAR:      ;=5
0746   77                     LD   (HL),A   
0747   23                     INC   HL   
0748   C3 85 00               JP   putchar   
074B                             ;*******************************************************************
074B                             ; Page 5 primitive routines continued
074B                             ;*******************************************************************
074B                GETREF:      ;=8
074B   03                     INC   BC   
074C   0A                     LD   A,(BC)   
074D   CD 8A 02               CALL   NSLookup   
0750   C3 6B 04               JP   fetch1   
0753                ALT:         ;=11
0753   03                     INC   BC   
0754   0A                     LD   A,(BC)   
0755   21 80 19               LD   HL,altCodes   
0758   85                     ADD   A,L   
0759   6F                     LD   L,A   
075A   6E                     LD   L,(HL)   ;       get low jump address
075B   26 06                  LD   H,msb(page6)   ; Load H with the 5th page address
075D   E9                     JP   (HL)   ;       Jump to routine
075E                             ; ********************************************************************
075E                             ; 16-bit multiply
075E                MUL:         ;=19
075E   D1                     POP   DE   ; get first value
075F   E1                     POP   HL   
0760   C5                     PUSH   BC   ; Preserve the IP
0761   44                     LD   B,H   ; BC = 2nd value
0762   4D                     LD   C,L   
0763   21 00 00               LD   HL,0   
0766   3E 10                  LD   A,16   
0768                MUL2:        
0768   29                     ADD   HL,HL   
0769   CB 13                  RL   E   
076B   CB 12                  RL   D   
076D   30 04                  JR   NC,$+6   
076F   09                     ADD   HL,BC   
0770   30 01                  JR   NC,$+3   
0772   13                     INC   DE   
0773   3D                     DEC   A   
0774   20 F2                  JR   NZ,mul2   
0776   C1                     POP   BC   ; Restore the IP
0777   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
0778   FD E9                  JP   (IY)   
077A                             ;*******************************************************************
077A                             ; Subroutines
077A                             ;*******************************************************************
077A                PRINTHEX:      ;=11
077A                             ; Display HL as a 16-bit number in hex.
077A   C5                     PUSH   BC   ; preserve the IP
077B   7C                     LD   A,H   
077C   CD 85 07               CALL   printhex2   
077F   7D                     LD   A,L   
0780   CD 85 07               CALL   printhex2   
0783   C1                     POP   BC   
0784   C9                     RET      
0785                PRINTHEX2:      ;=20
0785   4F                     LD   C,A   
0786   1F                     RRA      
0787   1F                     RRA      
0788   1F                     RRA      
0789   1F                     RRA      
078A   CD 8E 07               CALL   printhex3   
078D   79                     LD   A,C   
078E                PRINTHEX3:      
078E   E6 0F                  AND   0x0F   
0790   C6 90                  ADD   A,0x90   
0792   27                     DAA      
0793   CE 40                  ADC   A,0x40   
0795   27                     DAA      
0796   C3 85 00               JP   putchar   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                DSTACK:      
1880                          DS   RSIZE   
1900                RSTACK:      
1900                          ALIGN   $100   
1900                OPCODES:      
1900                          DS   $80   
1980                CTRLCODES:      
1980                ALTCODES:      
1980                          DS   $80   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                SYSVARS:      
1B00                VS0:      DS   2   ; a
1B02                VBASE16:   DS   2   ; b
1B04                VTIBPTR:   DS   2   ; c
1B06                VNS:      DS   2   ; d
1B08                VLASTDEF:   DS   2   ; e
1B0A                          DS   2   ; f
1B0C                          DS   2   ; g
1B0E                VHEAPPTR:   DS   2   ; h
1B10                          DS   2   ; i
1B12                          DS   2   ; j
1B14                          DS   2   ; k
1B16                          DS   2   ; l
1B18                          DS   2   ; m
1B1A                          DS   2   ; n
1B1C                          DS   2   ; o
1B1E                          DS   2   ; p
1B20                          DS   2   ; q
1B22                          DS   2   ; r
1B24                          DS   2   ; s
1B26                          DS   2   ; t
1B28                          DS   2   ; u
1B2A                          DS   2   ; v
1B2C                          DS   2   ; w
1B2E                          DS   2   ; x
1B30                          DS   2   ; y
1B32                          DS   2   ; z
1B34                          DS   2   ; 
1B36                VBYTEMODE:   DS   2   ; 
1B38                          DS   $30   
1B68                TBPTR:    DS   2   ; reserved for tests
1B6A                RST08:    DS   2   
1B6C                RST10:    DS   2   
1B6E                RST18:    DS   2   
1B70                RST20:    DS   2   
1B72                RST28:    DS   2   
1B74                RST30:    DS   2   ; 
1B76                BAUD:     DS   2   ; 
1B78                INTVEC:   DS   2   ; 
1B7A                NMIVEC:   DS   2   ; 
1B7C                GETCVEC:   DS   2   ; 
1B7E                PUTCVEC:   DS   2   ; 
1B80                             ; ****************************************************************
1B80                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1B80                             ; ****************************************************************
1B80                          ALIGN   $40   
1B68                          .ORG   $-($80-26*2*2)   
1B68                          DS   ($80-26*2*2)   ; 12 bytes free vars for NS 0
1B80                NS0:      DS   NSSIZE * NSNUM   
1E00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 27 IN MINT.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 87 IN MINT.asm
                    > USED AT LINE 1139 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 113 IN MINT.asm
                    > USED AT LINE 267 IN MINT.asm
                    > USED AT LINE 274 IN MINT.asm
                    > USED AT LINE 595 IN MINT.asm
                    > USED AT LINE 761 IN MINT.asm
                    > USED AT LINE 1053 IN MINT.asm
                    > USED AT LINE 1250 IN MINT.asm
                    > USED AT LINE 1324 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 17 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 1011 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 34 IN MINT.asm
                    > USED AT LINE 574 IN MINT.asm
EMPTY:              0000 DEFINED AT LINE 18 IN MINT.asm
NSNUM:              0005 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 196 IN MINT.asm
                    > USED AT LINE 73 IN ram.asm
NSSIZE:             0080 DEFINED AT LINE 21 IN MINT.asm
                    > USED AT LINE 196 IN MINT.asm
                    > USED AT LINE 73 IN ram.asm
ISYSVARS:           0180 DEFINED AT LINE 32 IN MINT.asm
                    > USED AT LINE 187 IN MINT.asm
ETX:                0190 DEFINED AT LINE 42 IN MINT.asm
                    > USED AT LINE 613 IN MINT.asm
ETX1:               0199 DEFINED AT LINE 47 IN MINT.asm
                    > USED AT LINE 45 IN MINT.asm
START:              019B DEFINED AT LINE 50 IN MINT.asm
                    > USED AT LINE 6
INTERPRET:          01B0 DEFINED AT LINE 56 IN MINT.asm
                    > USED AT LINE 48 IN MINT.asm
INTERPRET2:         01BA DEFINED AT LINE 62 IN MINT.asm
                    > USED AT LINE 106 IN MINT.asm
INTERPRET3:         01C2 DEFINED AT LINE 69 IN MINT.asm
                    > USED AT LINE 78 IN MINT.asm
INTERPRET4:         01C8 DEFINED AT LINE 75 IN MINT.asm
                    > USED AT LINE 67 IN MINT.asm
WAITCHAR:           01CD DEFINED AT LINE 86 IN MINT.asm
                    > USED AT LINE 115 IN MINT.asm
                    > USED AT LINE 129 IN MINT.asm
MACRO:              01DC DEFINED AT LINE 95 IN MINT.asm
WAITCHAR1:          01F5 DEFINED AT LINE 108 IN MINT.asm
                    > USED AT LINE 89 IN MINT.asm
WAITCHAR3:          0203 DEFINED AT LINE 117 IN MINT.asm
                    > USED AT LINE 93 IN MINT.asm
WAITCHAR4:          0219 DEFINED AT LINE 133 IN MINT.asm
                    > USED AT LINE 91 IN MINT.asm
NEXT:               0221 DEFINED AT LINE 160 IN MINT.asm
                    > USED AT LINE 182 IN MINT.asm
                    > USED AT LINE 186 IN MINT.asm
                    > USED AT LINE 580 IN MINT.asm
                    > USED AT LINE 634 IN MINT.asm
                    > USED AT LINE 934 IN MINT.asm
                    > USED AT LINE 1098 IN MINT.asm
                    > USED AT LINE 1105 IN MINT.asm
COMPNEXT:           022A DEFINED AT LINE 170 IN MINT.asm
                    > USED AT LINE 576 IN MINT.asm
COMPNEXT1:          0238 DEFINED AT LINE 180 IN MINT.asm
                    > USED AT LINE 177 IN MINT.asm
INIT:               023D DEFINED AT LINE 184 IN MINT.asm
                    > USED AT LINE 52 IN MINT.asm
INITOPS:            025D DEFINED AT LINE 199 IN MINT.asm
INITOPS1:           0266 DEFINED AT LINE 204 IN MINT.asm
                    > USED AT LINE 214 IN MINT.asm
                    > USED AT LINE 225 IN MINT.asm
INITOPS2:           0276 DEFINED AT LINE 216 IN MINT.asm
                    > USED AT LINE 209 IN MINT.asm
INITOPS2A:          027B DEFINED AT LINE 221 IN MINT.asm
                    > USED AT LINE 224 IN MINT.asm
ENTER:              0281 DEFINED AT LINE 227 IN MINT.asm
                    > USED AT LINE 103 IN MINT.asm
                    > USED AT LINE 1099 IN MINT.asm
                    > USED AT LINE 1203 IN MINT.asm
NSLOOKUP:           028A DEFINED AT LINE 234 IN MINT.asm
                    > USED AT LINE 584 IN MINT.asm
                    > USED AT LINE 952 IN MINT.asm
                    > USED AT LINE 1096 IN MINT.asm
                    > USED AT LINE 1221 IN MINT.asm
                    > USED AT LINE 1259 IN MINT.asm
NSLOOKUP2:          0290 DEFINED AT LINE 238 IN MINT.asm
                    > USED AT LINE 728 IN MINT.asm
                    > USED AT LINE 1103 IN MINT.asm
NSLOOKUP3:          0294 DEFINED AT LINE 241 IN MINT.asm
                    > USED AT LINE 237 IN MINT.asm
PRINTDEC:           029E DEFINED AT LINE 250 IN MINT.asm
                    > USED AT LINE 592 IN MINT.asm
PRINTDEC1:          02B7 DEFINED AT LINE 260 IN MINT.asm
                    > USED AT LINE 252 IN MINT.asm
                    > USED AT LINE 254 IN MINT.asm
                    > USED AT LINE 256 IN MINT.asm
                    > USED AT LINE 258 IN MINT.asm
PRINTDEC2:          02B9 DEFINED AT LINE 262 IN MINT.asm
                    > USED AT LINE 265 IN MINT.asm
PRINTSTR:           02C2 DEFINED AT LINE 269 IN MINT.asm
                    > USED AT LINE 53 IN MINT.asm
                    > USED AT LINE 344 IN MINT.asm
                    > USED AT LINE 349 IN MINT.asm
PRINTSTR1:          02C5 DEFINED AT LINE 273 IN MINT.asm
                    > USED AT LINE 280 IN MINT.asm
PRINTSTR2:          02C9 DEFINED AT LINE 277 IN MINT.asm
                    > USED AT LINE 271 IN MINT.asm
RPUSH:              02D0 DEFINED AT LINE 285 IN MINT.asm
                    > USED AT LINE 229 IN MINT.asm
                    > USED AT LINE 579 IN MINT.asm
                    > USED AT LINE 1066 IN MINT.asm
                    > USED AT LINE 1084 IN MINT.asm
                    > USED AT LINE 1191 IN MINT.asm
RPOP:               02DB DEFINED AT LINE 292 IN MINT.asm
                    > USED AT LINE 618 IN MINT.asm
                    > USED AT LINE 646 IN MINT.asm
                    > USED AT LINE 921 IN MINT.asm
                    > USED AT LINE 1107 IN MINT.asm
RPOP2:              02E5 DEFINED AT LINE 297 IN MINT.asm
                    > USED AT LINE 1091 IN MINT.asm
NESTING:            02E6 DEFINED AT LINE 310 IN MINT.asm
                    > USED AT LINE 73 IN MINT.asm
                    > USED AT LINE 114 IN MINT.asm
                    > USED AT LINE 798 IN MINT.asm
NESTING1A:          02F1 DEFINED AT LINE 317 IN MINT.asm
                    > USED AT LINE 314 IN MINT.asm
NESTING1:           02F4 DEFINED AT LINE 320 IN MINT.asm
                    > USED AT LINE 312 IN MINT.asm
NESTING2:           0303 DEFINED AT LINE 329 IN MINT.asm
                    > USED AT LINE 324 IN MINT.asm
                    > USED AT LINE 326 IN MINT.asm
NESTING3:           0305 DEFINED AT LINE 332 IN MINT.asm
                    > USED AT LINE 328 IN MINT.asm
NESTING4:           0310 DEFINED AT LINE 339 IN MINT.asm
                    > USED AT LINE 334 IN MINT.asm
                    > USED AT LINE 336 IN MINT.asm
PROMPT:             0312 DEFINED AT LINE 343 IN MINT.asm
                    > USED AT LINE 57 IN MINT.asm
                    > USED AT LINE 1112 IN MINT.asm
CRLF:               031B DEFINED AT LINE 348 IN MINT.asm
                    > USED AT LINE 126 IN MINT.asm
                    > USED AT LINE 1147 IN MINT.asm
MACROS:             0322 DEFINED AT LINE 357 IN MINT.asm
BACKSP_:            0322 DEFINED AT LINE 1 IN MINT.asm
REEDIT_:            0339 DEFINED AT LINE 4 IN MINT.asm
EDIT_:              0340 DEFINED AT LINE 7 IN MINT.asm
LIST_:              034B DEFINED AT LINE 10 IN MINT.asm
PRINTSTACK_:        0367 DEFINED AT LINE 13 IN MINT.asm
TOGGLEBASE_:        0374 DEFINED AT LINE 16 IN MINT.asm
IOPCODES:           037E DEFINED AT LINE 375 IN MINT.asm
                    > USED AT LINE 200 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 523 IN MINT.asm
AND_:               0400 DEFINED AT LINE 525 IN MINT.asm
AND1:               0407 DEFINED AT LINE 533 IN MINT.asm
                    > USED AT LINE 547 IN MINT.asm
                    > USED AT LINE 558 IN MINT.asm
OR_:                040B DEFINED AT LINE 539 IN MINT.asm
XOR_:               0414 DEFINED AT LINE 549 IN MINT.asm
XOR1:               0415 DEFINED AT LINE 551 IN MINT.asm
                    > USED AT LINE 562 IN MINT.asm
INV_:               041D DEFINED AT LINE 560 IN MINT.asm
ADD_:               0422 DEFINED AT LINE 564 IN MINT.asm
ARRDEF_:            0428 DEFINED AT LINE 572 IN MINT.asm
ARRDEF:             0428 DEFINED AT LINE 573 IN MINT.asm
ARRDEF1:            042A DEFINED AT LINE 575 IN MINT.asm
                    > USED AT LINE 1012 IN MINT.asm
CALL_:              043A DEFINED AT LINE 582 IN MINT.asm
DOT_:               0444 DEFINED AT LINE 590 IN MINT.asm
DOT2:               0448 DEFINED AT LINE 593 IN MINT.asm
                    > USED AT LINE 601 IN MINT.asm
HDOT_:              044F DEFINED AT LINE 598 IN MINT.asm
DROP_:              0455 DEFINED AT LINE 603 IN MINT.asm
DUP_:               0458 DEFINED AT LINE 607 IN MINT.asm
ETX_:               045D DEFINED AT LINE 612 IN MINT.asm
EXIT_:              0460 DEFINED AT LINE 615 IN MINT.asm
FETCH_:             046A DEFINED AT LINE 623 IN MINT.asm
FETCH1:             046B DEFINED AT LINE 625 IN MINT.asm
                    > USED AT LINE 1260 IN MINT.asm
NOP_:               0471 DEFINED AT LINE 633 IN MINT.asm
OVER_:              0474 DEFINED AT LINE 637 IN MINT.asm
RET_:               047B DEFINED AT LINE 645 IN MINT.asm
SHL_:               0482 DEFINED AT LINE 651 IN MINT.asm
SHR_:               0487 DEFINED AT LINE 658 IN MINT.asm
SHR1:               0488 DEFINED AT LINE 660 IN MINT.asm
                    > USED AT LINE 1048 IN MINT.asm
STORE_:             048F DEFINED AT LINE 666 IN MINT.asm
SWAP_:              0496 DEFINED AT LINE 675 IN MINT.asm
SUB_:               049B DEFINED AT LINE 681 IN MINT.asm
SUB2:               049D DEFINED AT LINE 685 IN MINT.asm
                    > USED AT LINE 694 IN MINT.asm
NEG_:               04A3 DEFINED AT LINE 691 IN MINT.asm
EQ_:                04A9 DEFINED AT LINE 696 IN MINT.asm
GT_:                04B5 DEFINED AT LINE 705 IN MINT.asm
LT_:                04B9 DEFINED AT LINE 710 IN MINT.asm
CMP_:               04BB DEFINED AT LINE 714 IN MINT.asm
                    > USED AT LINE 708 IN MINT.asm
EQUAL:              04C6 DEFINED AT LINE 720 IN MINT.asm
                    > USED AT LINE 701 IN MINT.asm
LESS:               04C7 DEFINED AT LINE 722 IN MINT.asm
                    > USED AT LINE 703 IN MINT.asm
                    > USED AT LINE 717 IN MINT.asm
                    > USED AT LINE 719 IN MINT.asm
VAR_:               04CA DEFINED AT LINE 726 IN MINT.asm
AGAIN_:             04D1 DEFINED AT LINE 732 IN MINT.asm
ALT_:               04D4 DEFINED AT LINE 734 IN MINT.asm
ARREND_:            04D7 DEFINED AT LINE 736 IN MINT.asm
GETREF_:            04DA DEFINED AT LINE 738 IN MINT.asm
MUL_:               04DD DEFINED AT LINE 740 IN MINT.asm
HEX_:               04E0 DEFINED AT LINE 742 IN MINT.asm
DEF_:               04E3 DEFINED AT LINE 744 IN MINT.asm
BEGIN_:             04E6 DEFINED AT LINE 746 IN MINT.asm
NUM_:               04E8 DEFINED AT LINE 748 IN MINT.asm
DIV_:               04EA DEFINED AT LINE 750 IN MINT.asm
STR_:               04EC DEFINED AT LINE 752 IN MINT.asm
STR:                04EC DEFINED AT LINE 753 IN MINT.asm
STR1:               04ED DEFINED AT LINE 756 IN MINT.asm
                    > USED AT LINE 762 IN MINT.asm
STR2:               04F8 DEFINED AT LINE 764 IN MINT.asm
                    > USED AT LINE 760 IN MINT.asm
BEGIN:              04FB DEFINED AT LINE 776 IN MINT.asm
                    > USED AT LINE 746 IN MINT.asm
BEGIN1:             051C DEFINED AT LINE 793 IN MINT.asm
                    > USED AT LINE 780 IN MINT.asm
                    > USED AT LINE 1063 IN MINT.asm
                    > USED AT LINE 1176 IN MINT.asm
BEGIN2:             051E DEFINED AT LINE 795 IN MINT.asm
                    > USED AT LINE 801 IN MINT.asm
BEGIN3:             0527 DEFINED AT LINE 802 IN MINT.asm
NUM:                0529 DEFINED AT LINE 817 IN MINT.asm
                    > USED AT LINE 748 IN MINT.asm
NUM1:               052D DEFINED AT LINE 821 IN MINT.asm
                    > USED AT LINE 845 IN MINT.asm
NUM2:               0547 DEFINED AT LINE 847 IN MINT.asm
                    > USED AT LINE 833 IN MINT.asm
                    > USED AT LINE 835 IN MINT.asm
                    > USED AT LINE 909 IN MINT.asm
                    > USED AT LINE 911 IN MINT.asm
DIV:                054B DEFINED AT LINE 865 IN MINT.asm
                    > USED AT LINE 750 IN MINT.asm
DIV1:               0555 DEFINED AT LINE 875 IN MINT.asm
                    > USED AT LINE 888 IN MINT.asm
DIV2:               0562 DEFINED AT LINE 884 IN MINT.asm
                    > USED AT LINE 881 IN MINT.asm
DIV3:               0563 DEFINED AT LINE 886 IN MINT.asm
                    > USED AT LINE 883 IN MINT.asm
DIV4:               0568 DEFINED AT LINE 891 IN MINT.asm
HEX:                056D DEFINED AT LINE 899 IN MINT.asm
                    > USED AT LINE 742 IN MINT.asm
HEX1:               0570 DEFINED AT LINE 901 IN MINT.asm
                    > USED AT LINE 918 IN MINT.asm
HEX2:               0578 DEFINED AT LINE 907 IN MINT.asm
                    > USED AT LINE 905 IN MINT.asm
ARREND:             058A DEFINED AT LINE 920 IN MINT.asm
                    > USED AT LINE 736 IN MINT.asm
ARREND2:            059F DEFINED AT LINE 932 IN MINT.asm
                    > USED AT LINE 929 IN MINT.asm
DEF:                05A6 DEFINED AT LINE 947 IN MINT.asm
                    > USED AT LINE 744 IN MINT.asm
DEF1:               05B6 DEFINED AT LINE 957 IN MINT.asm
                    > USED AT LINE 964 IN MINT.asm
DEF2:               05C0 DEFINED AT LINE 966 IN MINT.asm
                    > USED AT LINE 963 IN MINT.asm
DEF3:               05C1 DEFINED AT LINE 968 IN MINT.asm
AGAIN:              05C7 DEFINED AT LINE 972 IN MINT.asm
                    > USED AT LINE 732 IN MINT.asm
AGAIN1:             05D9 DEFINED AT LINE 985 IN MINT.asm
                    > USED AT LINE 979 IN MINT.asm
AGAIN2:             05F3 DEFINED AT LINE 997 IN MINT.asm
                    > USED AT LINE 990 IN MINT.asm
AGAIN3:             05F6 DEFINED AT LINE 999 IN MINT.asm
                    > USED AT LINE 983 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 1008 IN MINT.asm
CARRDEF_:           0600 DEFINED AT LINE 1010 IN MINT.asm
CFETCH_:            0605 DEFINED AT LINE 1014 IN MINT.asm
ANOP_:              060A DEFINED AT LINE 1019 IN MINT.asm
CHARCODE_:          060C DEFINED AT LINE 1022 IN MINT.asm
COMMENT_:           0611 DEFINED AT LINE 1027 IN MINT.asm
                    > USED AT LINE 1031 IN MINT.asm
CSTORE_:            061A DEFINED AT LINE 1035 IN MINT.asm
DEPTH_:             061F DEFINED AT LINE 1041 IN MINT.asm
EMIT_:              062D DEFINED AT LINE 1050 IN MINT.asm
IFTE_:              0634 DEFINED AT LINE 1056 IN MINT.asm
IFTE1:              063E DEFINED AT LINE 1064 IN MINT.asm
                    > USED AT LINE 1060 IN MINT.asm
EXEC_:              0646 DEFINED AT LINE 1069 IN MINT.asm
EXEC1:              064B DEFINED AT LINE 1072 IN MINT.asm
                    > USED AT LINE 1070 IN MINT.asm
GO_:                064E DEFINED AT LINE 1077 IN MINT.asm
GO1:                064F DEFINED AT LINE 1079 IN MINT.asm
                    > USED AT LINE 588 IN MINT.asm
GO2:                065B DEFINED AT LINE 1087 IN MINT.asm
                    > USED AT LINE 1082 IN MINT.asm
NSCALL_:            065D DEFINED AT LINE 1090 IN MINT.asm
NSCALL2:            067A DEFINED AT LINE 1102 IN MINT.asm
                    > USED AT LINE 1095 IN MINT.asm
NSEXIT_:            0682 DEFINED AT LINE 1106 IN MINT.asm
                    > USED AT LINE 1101 IN MINT.asm
PROMPT_:            068A DEFINED AT LINE 1111 IN MINT.asm
SYSVAR_:            068F DEFINED AT LINE 1115 IN MINT.asm
I_:                 0699 DEFINED AT LINE 1124 IN MINT.asm
INPORT_:            069D DEFINED AT LINE 1128 IN MINT.asm
KEY_:               06A8 DEFINED AT LINE 1138 IN MINT.asm
KEY1:               06AB DEFINED AT LINE 1140 IN MINT.asm
                    > USED AT LINE 1025 IN MINT.asm
NEWLN_:             06B1 DEFINED AT LINE 1146 IN MINT.asm
OUTPORT_:           06B6 DEFINED AT LINE 1150 IN MINT.asm
ROT_:               06BF DEFINED AT LINE 1159 IN MINT.asm
BREAK_:             06C6 DEFINED AT LINE 1167 IN MINT.asm
BREAK1:             06CD DEFINED AT LINE 1173 IN MINT.asm
                    > USED AT LINE 1171 IN MINT.asm
NSENTER_:           06D5 DEFINED AT LINE 1178 IN MINT.asm
NSENTER1:           06D6 DEFINED AT LINE 1180 IN MINT.asm
                    > USED AT LINE 1092 IN MINT.asm
EDITDEF_:           06F4 DEFINED AT LINE 1197 IN MINT.asm
PRINTSTK_:          06F6 DEFINED AT LINE 1200 IN MINT.asm
PRINTSTK:           06F6 DEFINED AT LINE 1201 IN MINT.asm
EDITDEF:            0716 DEFINED AT LINE 1216 IN MINT.asm
                    > USED AT LINE 1198 IN MINT.asm
EDITDEF1:           0732 DEFINED AT LINE 1234 IN MINT.asm
                    > USED AT LINE 1240 IN MINT.asm
EDITDEF2:           0733 DEFINED AT LINE 1236 IN MINT.asm
                    > USED AT LINE 1233 IN MINT.asm
EDITDEF3:           073B DEFINED AT LINE 1241 IN MINT.asm
                    > USED AT LINE 1228 IN MINT.asm
WRITECHAR:          0746 DEFINED AT LINE 1247 IN MINT.asm
                    > USED AT LINE 1230 IN MINT.asm
                    > USED AT LINE 1232 IN MINT.asm
                    > USED AT LINE 1238 IN MINT.asm
GETREF:             074B DEFINED AT LINE 1256 IN MINT.asm
                    > USED AT LINE 738 IN MINT.asm
ALT:                0753 DEFINED AT LINE 1262 IN MINT.asm
                    > USED AT LINE 734 IN MINT.asm
MUL:                075E DEFINED AT LINE 1274 IN MINT.asm
                    > USED AT LINE 740 IN MINT.asm
MUL2:               0768 DEFINED AT LINE 1283 IN MINT.asm
                    > USED AT LINE 1292 IN MINT.asm
PRINTHEX:           077A DEFINED AT LINE 1301 IN MINT.asm
                    > USED AT LINE 600 IN MINT.asm
PRINTHEX2:          0785 DEFINED AT LINE 1310 IN MINT.asm
                    > USED AT LINE 1305 IN MINT.asm
                    > USED AT LINE 1307 IN MINT.asm
PRINTHEX3:          078E DEFINED AT LINE 1318 IN MINT.asm
                    > USED AT LINE 1316 IN MINT.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             1880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 33 IN MINT.asm
                    > USED AT LINE 43 IN MINT.asm
                    > USED AT LINE 46 IN MINT.asm
                    > USED AT LINE 51 IN MINT.asm
                    > USED AT LINE 1045 IN MINT.asm
RSTACK:             1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 185 IN MINT.asm
OPCODES:            1900 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 201 IN MINT.asm
CTRLCODES:          1980 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 97 IN MINT.asm
ALTCODES:           1980 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 1265 IN MINT.asm
TIB:                1A00 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 66 IN MINT.asm
                    > USED AT LINE 109 IN MINT.asm
                    > USED AT LINE 118 IN MINT.asm
                    > USED AT LINE 135 IN MINT.asm
                    > USED AT LINE 1227 IN MINT.asm
                    > USED AT LINE 1242 IN MINT.asm
MINTVARS:           1B00 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1117 IN MINT.asm
SYSVARS:            1B00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 188 IN MINT.asm
                    > USED AT LINE 1117 IN MINT.asm
VS0:                1B00 DEFINED AT LINE 23 IN ram.asm
VBASE16:            1B02 DEFINED AT LINE 24 IN ram.asm
VTIBPTR:            1B04 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 60 IN MINT.asm
                    > USED AT LINE 96 IN MINT.asm
                    > USED AT LINE 105 IN MINT.asm
                    > USED AT LINE 134 IN MINT.asm
                    > USED AT LINE 1245 IN MINT.asm
VNS:                1B06 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 246 IN MINT.asm
                    > USED AT LINE 1108 IN MINT.asm
                    > USED AT LINE 1190 IN MINT.asm
                    > USED AT LINE 1194 IN MINT.asm
VLASTDEF:           1B08 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 950 IN MINT.asm
VHEAPPTR:           1B0E DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 172 IN MINT.asm
                    > USED AT LINE 181 IN MINT.asm
                    > USED AT LINE 578 IN MINT.asm
                    > USED AT LINE 924 IN MINT.asm
                    > USED AT LINE 953 IN MINT.asm
                    > USED AT LINE 969 IN MINT.asm
VBYTEMODE:          1B36 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 174 IN MINT.asm
                    > USED AT LINE 577 IN MINT.asm
                    > USED AT LINE 927 IN MINT.asm
TBPTR:              1B68 DEFINED AT LINE 53 IN ram.asm
RST08:              1B6A DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B6C DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B6E DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B70 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B72 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B74 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B76 DEFINED AT LINE 61 IN ram.asm
INTVEC:             1B78 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B7A DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B7C DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B7E DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NS0:                1B80 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 36 IN MINT.asm
                    > USED AT LINE 192 IN MINT.asm
                    > USED AT LINE 1192 IN MINT.asm
HEAP:               1E00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 40 IN MINT.asm
