0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 1B               LD   (RST08),HL   
0094   22 6C 1B               LD   (RST10),HL   
0097   22 6E 1B               LD   (RST18),HL   
009A   22 70 1B               LD   (RST20),HL   
009D   22 72 1B               LD   (RST28),HL   
00A0   22 74 1B               LD   (RST30),HL   
00A3   22 78 1B               LD   (INTVEC),HL   
00A6   22 7A 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 9B 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   
00C6                NSNUM:    EQU   5   ; namespaces
00C6                NSSIZE:   EQU   $80   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   80 18                  DW   dStack   ; a vS0
0182   00 00                  DW   FALSE   ; b vBase16
0184   00 00                  DW   0   ; c vTIBPtr
0186   80 1B                  DW   NS0   ; d vNS
0188   41 00                  DW   65   ; e vLastDef "A"
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1E                  DW   HEAP   ; h vHeapPtr
0190                ETX:         ;=12
0190   21 80 E7               LD   HL,-DSTACK   
0193   39                     ADD   HL,SP   
0194   30 03                  JR   NC,etx1   
0196   31 80 18               LD   SP,DSTACK   
0199                ETX1:        
0199   18 15                  JR   interpret   
019B                START:       
019B   31 80 18               LD   SP,DSTACK   
019E   CD 3D 02               CALL   initialize   
01A1   CD 97 09               CALL   printStr   
01A4   4D 49 4E 54 20 56 31 2E 30 0D 0A 00 .CSTR   "MINT V1.0\r\n"   
01B0                INTERPRET:      
01B0   CD 8D 02               CALL   prompt   
01B3   01 00 00               LD   BC,0   ; load BC with offset into TIB
01B6   ED 43 04 1B            LD   (vTIBPtr),BC   
01BA                INTERPRET2:      ; calc nesting (a macro might have changed it)
01BA   1E 00                  LD   E,0   ; initilize nesting value
01BC   C5                     PUSH   BC   ; save offset into TIB,
01BD                             ; BC is also the count of chars in TIB
01BD   21 00 1A               LD   HL,TIB   ; HL is start of TIB
01C0   18 06                  JR   interpret4   
01C2                INTERPRET3:      
01C2   7E                     LD   A,(HL)   ; A = char in TIB
01C3   23                     INC   HL   ; inc pointer into TIB
01C4   0B                     DEC   BC   ; dec count of chars in TIB
01C5   CD 61 02               CALL   nesting   ; update nesting value
01C8                INTERPRET4:      
01C8   79                     LD   A,C   ; is count zero?
01C9   B0                     OR   B   
01CA   20 F6                  JR   NZ,interpret3   ; if not loop
01CC   C1                     POP   BC   ; restore offset into TIB
01CD                             ; *******************************************************************
01CD                             ; Wait for a character from the serial input (keyboard)
01CD                             ; and store it in the text buffer. Keep accepting characters,
01CD                             ; increasing the instruction pointer BC - until a newline received.
01CD                             ; *******************************************************************
01CD                WAITCHAR:      
01CD   CD 81 00               CALL   getchar   ; loop around waiting for character
01D0   FE 20                  CP   $20   
01D2   30 21                  JR   NC,waitchar1   
01D4   FE 00                  CP   $0   ; is it end of string?
01D6   28 41                  JR   Z,waitchar4   
01D8   FE 0D                  CP   "\r"   ; carriage return?
01DA   28 27                  JR   Z,waitchar3   
01DC                             ; LD D,0
01DC                MACRO:       ;=25
01DC   ED 43 04 1B            LD   (vTIBPtr),BC   
01E0   21 80 19               LD   HL,ctrlCodes   
01E3   85                     ADD   A,L   
01E4   6F                     LD   L,A   
01E5   5E                     LD   E,(HL)   
01E6   16 02                  LD   D,msb(macros)   
01E8   D5                     PUSH   DE   
01E9   CD 7A 09               CALL   ENTER   
01EC   5C 47 00               .CSTR   "\\G"   
01EF   ED 4B 04 1B            LD   BC,(vTIBPtr)   
01F3   18 C5                  JR   interpret2   
01F5                WAITCHAR1:      
01F5   21 00 1A               LD   HL,TIB   
01F8   09                     ADD   HL,BC   
01F9   77                     LD   (HL),A   ; store the character in textbuf
01FA   03                     INC   BC   
01FB   CD 85 00               CALL   putchar   ; echo character to screen
01FE   CD 61 02               CALL   nesting   
0201   18 CA                  JR   waitchar   ; wait for next character
0203                WAITCHAR3:      
0203   21 00 1A               LD   HL,TIB   
0206   09                     ADD   HL,BC   
0207   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0209   23                     INC   HL   
020A   36 0A                  LD   (HL),"\n"   
020C   23                     INC   HL   ; ????
020D   03                     INC   BC   
020E   03                     INC   BC   
020F   CD 96 02               CALL   crlf   ; echo character to screen
0212   7B                     LD   A,E   ; if zero nesting append and ETX after \r
0213   B7                     OR   A   
0214   20 B7                  JR   NZ,waitchar   
0216   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0218   03                     INC   BC   
0219                WAITCHAR4:      
0219   ED 43 04 1B            LD   (vTIBPtr),BC   
021D   01 00 1A               LD   BC,TIB   ; Instructions stored on heap at address HERE
0220   0B                     DEC   BC   
0221                             ; ********************************************************************************
0221                             ; 
0221                             ; Dispatch Routine.
0221                             ; 
0221                             ; Get the next character and form a 1 byte jump address
0221                             ; 
0221                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
0221                             ; jump to the selected function.
0221                             ; 
0221                             ; Individual handler routines will deal with each category:
0221                             ; 
0221                             ; 1. Detect characters A-Z and jump to the User Command handler routine
0221                             ; 
0221                             ; 2. Detect characters a-z and jump to the variable handler routine
0221                             ; 
0221                             ; 3. All other characters are punctuation and cause a jump to the associated
0221                             ; primitive code.
0221                             ; 
0221                             ; Instruction Pointer IP BC is incremented
0221                             ; 
0221                             ; *********************************************************************************
0221                NEXT:        ;=9
0221   03                     INC   BC   ;       Increment the IP
0222   0A                     LD   A,(BC)   ;       Get the next character and dispatch
0223   6F                     LD   L,A   ;       Index into table
0224   26 19                  LD   H,msb(opcodes)   ;       Start address of jump table
0226   6E                     LD   L,(HL)   ;       get low jump address
0227   26 06                  LD   H,msb(page4)   ;       Load H with the 1st page address
0229   E9                     JP   (HL)   ;       Jump to routine
022A                             ; ARRAY compilation routine
022A                COMPNEXT:      ;=20
022A   D1                     POP   DE   ; DE = return address
022B   2A 0E 1B               LD   HL,(vHeapPtr)   ; load heap ptr
022E   73                     LD   (HL),E   ; store lsb
022F   3A 36 1B               LD   A,(vByteMode)   
0232   23                     INC   HL   
0233   B7                     OR   A   
0234   20 02                  JR   NZ,compNext1   
0236   72                     LD   (HL),D   
0237   23                     INC   HL   
0238                COMPNEXT1:      
0238   22 0E 1B               LD   (vHeapPtr),HL   ; save heap ptr
023B   18 E4                  JR   NEXT   
023D                INITIALIZE:      
023D   DD 21 00 19            LD   IX,RSTACK   
0241   FD 21 21 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
0245   21 80 01               LD   HL,iSysVars   
0248   11 00 1B               LD   DE,sysVars   
024B   01 10 00               LD   BC,8 * 2   
024E   ED B0                  LDIR      
0250   21 80 1B               LD   HL,NS0   ; init namespaces to 0
0253   54 5D                  LD   DE,HL   
0255   13                     INC   DE   
0256   36 00                  LD   (HL),0   
0258   01 80 02               LD   BC,NSNUM*NSSIZE   
025B   ED B0                  LDIR      
025D   CD FE 09               CALL   initOpcodes   
0260   C9                     RET      
0261                             ; **************************************************************************
0261                             ; calculate nesting value
0261                             ; A is char to be tested,
0261                             ; E is the nesting value (initially 0)
0261                             ; E is increased by ( and [
0261                             ; E is decreased by ) and ]
0261                             ; E has its bit 7 toggled by `
0261                             ; limited to 127 levels
0261                             ; **************************************************************************
0261                NESTING:      ;=44
0261   FE 60                  CP   "`"   
0263   20 0A                  JR   NZ,nesting1   
0265   CB 7B                  BIT   7,E   
0267   28 03                  JR   Z,nesting1a   
0269   CB BB                  RES   7,E   
026B   C9                     RET      
026C                NESTING1A:      
026C   CB FB                  SET   7,E   
026E   C9                     RET      
026F                NESTING1:      
026F   CB 7B                  BIT   7,E   
0271   C0                     RET   NZ   
0272   FE 3A                  CP   ":"   
0274   28 08                  JR   Z,nesting2   
0276   FE 5B                  CP   "["   
0278   28 04                  JR   Z,nesting2   
027A   FE 28                  CP   "("   
027C   20 02                  JR   NZ,nesting3   
027E                NESTING2:      
027E   1C                     INC   E   
027F   C9                     RET      
0280                NESTING3:      
0280   FE 3B                  CP   ";"   
0282   28 07                  JR   Z,nesting4   
0284   FE 5D                  CP   "]"   
0286   28 03                  JR   Z,nesting4   
0288   FE 29                  CP   ")"   
028A   C0                     RET   NZ   
028B                NESTING4:      
028B   1D                     DEC   E   
028C   C9                     RET      
028D                PROMPT:      ;=9
028D   CD 97 09               CALL   printStr   
0290   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0295   C9                     RET      
0296                CRLF:        ;=7
0296   CD 97 09               CALL   printStr   
0299   0D 0A 00               .CSTR   "\r\n"   
029C   C9                     RET      
029D                             ; **************************************************************************
029D                             ; Macros must be written in Mint and end with ;
029D                             ; this code must not span pages
029D                             ; **************************************************************************
029D                MACROS:      
029D                BACKSP_:      
029D   5C 63 40 30 3D 30 3D 28 5C 63 40 31 2D 5C 63 21 60 08 20 08 60 29 3B DB   "\\c@0=0=(\\c@1-\\c!`\b \b`);"   
02B4                REEDIT_:      
02B4   5C 65 5C 40 5C 5A 3B   DB   "\\e\\@\\Z;"   
02BB                EDIT_:       
02BB   60 3F 60 5C 4B 5C 3E 5C 5A 3B 00 .CSTR   "`?`\\K\\>\\Z;"   
02C6                LIST_:       
02C6   5C 4E 32 36 28 5C 69 40 5C 5E 41 2B 5C 5A 5C 63 40 30 3E 28 5C 4E 29 29 5C 3E 3B 00 .CSTR   "\\N26(\\i@\\^A+\\Z\\c@0>(\\N))\\>;"   
02E2                PRINTSTACK_:      
02E2   60 3D 3E 20 60 5C 50 5C 4E 5C 3E 3B 00 .CSTR   "`=> `\\P\\N\\>;"   
02EF                TOGGLEBASE_:      
02EF   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
02F9                             ; **************************************************************************
02F9                             ; Page 2  Jump Tables
02F9                             ; **************************************************************************
02F9                          ALIGN   $100   
0300                IOPCODES:      
0300                             ; ***********************************************************************
0300                             ; Initial values for user mintVars		
0300                             ; ***********************************************************************		
0300   60                     DB   lsb(exit_)   ;   NUL
0301   71                     DB   lsb(nop_)   ;   SOH
0302   71                     DB   lsb(nop_)   ;   STX
0303   5D                     DB   lsb(etx_)   ;   ETX
0304   71                     DB   lsb(nop_)   ;   EOT
0305   71                     DB   lsb(nop_)   ;   ENQ
0306   71                     DB   lsb(nop_)   ;   ACK
0307   71                     DB   lsb(nop_)   ;   BEL
0308   71                     DB   lsb(nop_)   ;   BS
0309   71                     DB   lsb(nop_)   ;   TAB
030A   71                     DB   lsb(nop_)   ;   LF
030B   71                     DB   lsb(nop_)   ;   VT
030C   71                     DB   lsb(nop_)   ;   FF
030D   71                     DB   lsb(nop_)   ;   CR
030E   71                     DB   lsb(nop_)   ;   SO
030F   71                     DB   lsb(nop_)   ;   SI
0310   71                     DB   lsb(nop_)   ;   DLE
0311   71                     DB   lsb(nop_)   ;   DC1
0312   71                     DB   lsb(nop_)   ;   DC2
0313   71                     DB   lsb(nop_)   ;   DC3
0314   71                     DB   lsb(nop_)   ;   DC4
0315   71                     DB   lsb(nop_)   ;   NAK
0316   71                     DB   lsb(nop_)   ;   SYN
0317   71                     DB   lsb(nop_)   ;   ETB
0318   71                     DB   lsb(nop_)   ;   CAN
0319   71                     DB   lsb(nop_)   ;   EM
031A   71                     DB   lsb(nop_)   ;   SUB
031B   71                     DB   lsb(nop_)   ;   ESC
031C   71                     DB   lsb(nop_)   ;   FS
031D   71                     DB   lsb(nop_)   ;   GS
031E   71                     DB   lsb(nop_)   ;   RS
031F   71                     DB   lsb(nop_)   ;   US
0320   71                     DB   lsb(nop_)   ;   SP
0321   8F                     DB   lsb(store_)   ;   !
0322   58                     DB   lsb(dup_)   ;   "
0323   E0                     DB   lsb(hex_)   ;    #
0324   96                     DB   lsb(swap_)   ;    $
0325   74                     DB   lsb(over_)   ;    %
0326   00                     DB   lsb(and_)   ;    &
0327   55                     DB   lsb(drop_)   ;    '
0328   E6                     DB   lsb(begin_)   ;    (
0329   D1                     DB   lsb(again_)   ;    )
032A   DD                     DB   lsb(mul_)   ;    *
032B   22                     DB   lsb(add_)   ;    +
032C   4F                     DB   lsb(hdot_)   ;    ,
032D   9B                     DB   lsb(sub_)   ;    -
032E   44                     DB   lsb(dot_)   ;    .
032F   EA                     DB   lsb(div_)   ;    /
0330   E8                     DB   lsb(num_)   ;    0
0331   E8                     DB   lsb(num_)   ;    1
0332   E8                     DB   lsb(num_)   ;    2
0333   E8                     DB   lsb(num_)   ;    3
0334   E8                     DB   lsb(num_)   ;    4
0335   E8                     DB   lsb(num_)   ;    5
0336   E8                     DB   lsb(num_)   ;    6
0337   E8                     DB   lsb(num_)   ;    7
0338   E8                     DB   lsb(num_)   ;    8
0339   E8                     DB   lsb(num_)   ;    9
033A   E3                     DB   lsb(def_)   ;    :
033B   7B                     DB   lsb(ret_)   ;    ;
033C   B9                     DB   lsb(lt_)   ;    <
033D   A9                     DB   lsb(eq_)   ;    =
033E   B5                     DB   lsb(gt_)   ;    >
033F   DA                     DB   lsb(getRef_)   ;    ?
0340   6A                     DB   lsb(fetch_)   ;    @
0341   3A                     DB   lsb(call_)   ;    A
0342   3A                     DB   lsb(call_)   ;    B
0343   3A                     DB   lsb(call_)   ;    C
0344   3A                     DB   lsb(call_)   ;    D
0345   3A                     DB   lsb(call_)   ;    E
0346   3A                     DB   lsb(call_)   ;    F
0347   3A                     DB   lsb(call_)   ;    G
0348   3A                     DB   lsb(call_)   ;    H
0349   3A                     DB   lsb(call_)   ;    I
034A   3A                     DB   lsb(call_)   ;    J
034B   3A                     DB   lsb(call_)   ;    K
034C   3A                     DB   lsb(call_)   ;    L
034D   3A                     DB   lsb(call_)   ;    M
034E   3A                     DB   lsb(call_)   ;    N
034F   3A                     DB   lsb(call_)   ;    O
0350   3A                     DB   lsb(call_)   ;    P
0351   3A                     DB   lsb(call_)   ;    Q
0352   3A                     DB   lsb(call_)   ;    R
0353   3A                     DB   lsb(call_)   ;    S
0354   3A                     DB   lsb(call_)   ;    T
0355   3A                     DB   lsb(call_)   ;    U
0356   3A                     DB   lsb(call_)   ;    V
0357   3A                     DB   lsb(call_)   ;    W
0358   3A                     DB   lsb(call_)   ;    X
0359   3A                     DB   lsb(call_)   ;    Y
035A   3A                     DB   lsb(call_)   ;    Z
035B   28                     DB   lsb(arrDef_)   ;    [
035C   D4                     DB   lsb(alt_)   ;    \
035D   D7                     DB   lsb(arrEnd_)   ;    ]
035E   14                     DB   lsb(xor_)   ;    ^
035F   A3                     DB   lsb(neg_)   ;    _
0360   EC                     DB   lsb(str_)   ;    `
0361   CA                     DB   lsb(var_)   ;    a
0362   CA                     DB   lsb(var_)   ;    b
0363   CA                     DB   lsb(var_)   ;    c
0364   CA                     DB   lsb(var_)   ;    d
0365   CA                     DB   lsb(var_)   ;    e
0366   CA                     DB   lsb(var_)   ;    f
0367   CA                     DB   lsb(var_)   ;    g
0368   CA                     DB   lsb(var_)   ;    h
0369   CA                     DB   lsb(var_)   ;    i
036A   CA                     DB   lsb(var_)   ;    j
036B   CA                     DB   lsb(var_)   ;    k
036C   CA                     DB   lsb(var_)   ;    l
036D   CA                     DB   lsb(var_)   ;    m
036E   CA                     DB   lsb(var_)   ;    n
036F   CA                     DB   lsb(var_)   ;    o
0370   CA                     DB   lsb(var_)   ;    p
0371   CA                     DB   lsb(var_)   ;    q
0372   CA                     DB   lsb(var_)   ;    r
0373   CA                     DB   lsb(var_)   ;    s
0374   CA                     DB   lsb(var_)   ;    t
0375   CA                     DB   lsb(var_)   ;    u
0376   CA                     DB   lsb(var_)   ;    v
0377   CA                     DB   lsb(var_)   ;    w
0378   CA                     DB   lsb(var_)   ;    x
0379   CA                     DB   lsb(var_)   ;    y
037A   CA                     DB   lsb(var_)   ;    z
037B   82                     DB   lsb(shl_)   ;    {
037C   0B                     DB   lsb(or_)   ;    |
037D   87                     DB   lsb(shr_)   ;    }
037E   1D                     DB   lsb(inv_)   ;    ~
037F   71                     DB   lsb(nop_)   ;    backspace
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                ICTRLCODES:      
0380                IALTCODES:      
0380   00                     DB   lsb(EMPTY)   ; NUL ^@
0381   00                     DB   lsb(EMPTY)   ; SOH ^A  1
0382   EF                     DB   lsb(toggleBase_)   ; STX ^B  2
0383   00                     DB   lsb(EMPTY)   ; ETX ^C  3
0384   00                     DB   lsb(EMPTY)   ; EOT ^D  4
0385   BB                     DB   lsb(edit_)   ; ENQ ^E  5
0386   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0387   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0388   9D                     DB   lsb(backsp_)   ; BS  ^H  8
0389   00                     DB   lsb(EMPTY)   ; TAB ^I  9
038A   B4                     DB   lsb(reedit_)   ; LF  ^J 10
038B   00                     DB   lsb(EMPTY)   ; VT  ^K 11
038C   C6                     DB   lsb(list_)   ; FF  ^L 12
038D   00                     DB   lsb(EMPTY)   ; CR  ^M 13
038E   00                     DB   lsb(EMPTY)   ; SO  ^N 14
038F   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0390   E2                     DB   lsb(printStack_)   ; DLE ^P 16
0391   00                     DB   lsb(EMPTY)   ; DC1 ^Q 17
0392   00                     DB   lsb(EMPTY)   ; DC2 ^R 18
0393   00                     DB   lsb(EMPTY)   ; DC3 ^S 19
0394   00                     DB   lsb(EMPTY)   ; DC4 ^T 20
0395   00                     DB   lsb(EMPTY)   ; NAK ^U 21
0396   00                     DB   lsb(EMPTY)   ; SYN ^V 22
0397   00                     DB   lsb(EMPTY)   ; ETB ^W 23
0398   00                     DB   lsb(EMPTY)   ; CAN ^X 24
0399   00                     DB   lsb(EMPTY)   ; EM  ^Y 25
039A   00                     DB   lsb(EMPTY)   ; SUB ^Z 26
039B   00                     DB   lsb(EMPTY)   ; ESC ^[
039C   00                     DB   lsb(EMPTY)   ; FS  ^\
039D   00                     DB   lsb(EMPTY)   ; GS  ^]
039E   00                     DB   lsb(EMPTY)   ; RS  ^^
039F   00                     DB   lsb(EMPTY)   ; US  ^_)
03A0   0A                     DB   lsb(aNop_)   ; SP  ^`
03A1   1A                     DB   lsb(cStore_)   ;    !
03A2   0A                     DB   lsb(aNop_)   ;    "
03A3   0A                     DB   lsb(aNop_)   ;    #
03A4   0A                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   0A                     DB   lsb(aNop_)   ;    %
03A6   0A                     DB   lsb(aNop_)   ;    &
03A7   0A                     DB   lsb(aNop_)   ;    '
03A8   34                     DB   lsb(ifte_)   ;    (  ( b -- )
03A9   0A                     DB   lsb(aNop_)   ;    )
03AA   0A                     DB   lsb(aNop_)   ;    *
03AB   0A                     DB   lsb(aNop_)   ;    +
03AC   0A                     DB   lsb(aNop_)   ;    ,
03AD   0A                     DB   lsb(aNop_)   ;    -
03AE   0A                     DB   lsb(aNop_)   ;    .
03AF   0A                     DB   lsb(aNop_)   ;    /
03B0   5D                     DB   lsb(NSCall_)   ;    0
03B1   5D                     DB   lsb(NSCall_)   ;    1
03B2   5D                     DB   lsb(NSCall_)   ;    2
03B3   5D                     DB   lsb(NSCall_)   ;    3
03B4   5D                     DB   lsb(NSCall_)   ;    4
03B5   0A                     DB   lsb(aNop_)   ;    5
03B6   0A                     DB   lsb(aNop_)   ;    6
03B7   0A                     DB   lsb(aNop_)   ;    7
03B8   0A                     DB   lsb(aNop_)   ;    8
03B9   0A                     DB   lsb(aNop_)   ;    9
03BA   0A                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   0A                     DB   lsb(aNop_)   ;    ;
03BC   0A                     DB   lsb(aNop_)   ;    <
03BD   0A                     DB   lsb(aNop_)   ;    =
03BE   8A                     DB   lsb(prompt_)   ;    >
03BF   0A                     DB   lsb(aNop_)   ;    ?
03C0   05                     DB   lsb(cFetch_)   ;    @
03C1   0A                     DB   lsb(aNop_)   ;    A
03C2   C6                     DB   lsb(break_)   ;    B
03C3   71                     DB   lsb(nop_)   ;    C
03C4   1F                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   2D                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   0A                     DB   lsb(aNop_)   ;    F
03C7   4E                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   0A                     DB   lsb(aNop_)   ;    H
03C9   9D                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   0A                     DB   lsb(aNop_)   ;    J
03CB   A8                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   0A                     DB   lsb(aNop_)   ;    L
03CD   0A                     DB   lsb(aNop_)   ;    M
03CE   B1                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   B6                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   F6                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   0A                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
03D2   BF                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   0A                     DB   lsb(aNop_)   ;    S
03D4   0A                     DB   lsb(aNop_)   ;    T
03D5   0A                     DB   lsb(aNop_)   ;    U
03D6   0A                     DB   lsb(aNop_)   ;    V
03D7   0A                     DB   lsb(aNop_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   46                     DB   lsb(exec_)   ;    X
03D9   0A                     DB   lsb(aNop_)   ;    Y
03DA   F4                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   11                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   0A                     DB   lsb(aNop_)   ;    ]
03DE   0C                     DB   lsb(charCode_)   ;    ^
03DF   0A                     DB   lsb(aNop_)   ;    _
03E0   0A                     DB   lsb(aNop_)   ;    `
03E1   8F                     DB   lsb(sysVar_)   ;    a  ; start of data stack variable
03E2   8F                     DB   lsb(sysVar_)   ;    b  ; base16 variable
03E3   8F                     DB   lsb(sysVar_)   ;    c  ; TIBPtr variable
03E4   8F                     DB   lsb(sysVar_)   ;    d
03E5   8F                     DB   lsb(sysVar_)   ;    e
03E6   8F                     DB   lsb(sysVar_)   ;    f
03E7   8F                     DB   lsb(sysVar_)   ;    g
03E8   8F                     DB   lsb(sysVar_)   ;    h  ; heap ptr variable
03E9   99                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   8F                     DB   lsb(sysVar_)   ;    j  ; returns index variable of outer loop
03EB   8F                     DB   lsb(sysVar_)   ;    k
03EC   8F                     DB   lsb(sysVar_)   ;    l
03ED   8F                     DB   lsb(sysVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   8F                     DB   lsb(sysVar_)   ;    n
03EF   8F                     DB   lsb(sysVar_)   ;    o
03F0   8F                     DB   lsb(sysVar_)   ;    p
03F1   8F                     DB   lsb(sysVar_)   ;    q
03F2   8F                     DB   lsb(sysVar_)   ;    r
03F3   8F                     DB   lsb(sysVar_)   ;    s
03F4   8F                     DB   lsb(sysVar_)   ;    t
03F5   8F                     DB   lsb(sysVar_)   ;    u
03F6   8F                     DB   lsb(sysVar_)   ;    v
03F7   8F                     DB   lsb(sysVar_)   ;    w
03F8   8F                     DB   lsb(sysVar_)   ;    x
03F9   8F                     DB   lsb(sysVar_)   ;    y
03FA   8F                     DB   lsb(sysVar_)   ;    z
03FB   D5                     DB   lsb(NSEnter_)   ;    {
03FC   0A                     DB   lsb(aNop_)   ;    |
03FD   82                     DB   lsb(NSExit_)   ;    }
03FE   0A                     DB   lsb(aNop_)   ;    ~
03FF   0A                     DB   lsb(aNop_)   ;    BS		
0400                .macro LITDAT,len
0400                             ; 
0400                 DB len
0400                .endm
0400                 
0400                .macro REPDAT,len,data
0400                             ; 
0400                 DB (len | $80)
0400                 DB data
0400                .endm
0400                 
0400                .macro ENDDAT,
0400                             ; 
0400                 DB 0
0400                .endm
0400                 
0400                XIOPCODES:      
0400                          ;*Macro unroll:  LITDAT 4
0400   04                     DB   4   
0401   60                     DB   lsb(exit_)   ;   NUL
0402   71                     DB   lsb(nop_)   ;   SOH
0403   71                     DB   lsb(nop_)   ;   STX
0404   5D                     DB   lsb(etx_)   ;   ETX
0405                          ;*Macro unroll:  REPDAT 29, lsb(nop_)
0405   9D                     DB   (29 | $80)   
0406   71                     DB   lsb(nop_)   
0407   71                     DB   lsb(nop_)   ;   EOT
0408   71                     DB   lsb(nop_)   ;   ENQ
0409   71                     DB   lsb(nop_)   ;   ACK
040A   71                     DB   lsb(nop_)   ;   BEL
040B   71                     DB   lsb(nop_)   ;   BS
040C   71                     DB   lsb(nop_)   ;   TAB
040D   71                     DB   lsb(nop_)   ;   LF
040E   71                     DB   lsb(nop_)   ;   VT
040F   71                     DB   lsb(nop_)   ;   FF
0410   71                     DB   lsb(nop_)   ;   CR
0411   71                     DB   lsb(nop_)   ;   SO
0412   71                     DB   lsb(nop_)   ;   SI
0413   71                     DB   lsb(nop_)   ;   DLE
0414   71                     DB   lsb(nop_)   ;   DC1
0415   71                     DB   lsb(nop_)   ;   DC2
0416   71                     DB   lsb(nop_)   ;   DC3
0417   71                     DB   lsb(nop_)   ;   DC4
0418   71                     DB   lsb(nop_)   ;   NAK
0419   71                     DB   lsb(nop_)   ;   SYN
041A   71                     DB   lsb(nop_)   ;   ETB
041B   71                     DB   lsb(nop_)   ;   CAN
041C   71                     DB   lsb(nop_)   ;   EM
041D   71                     DB   lsb(nop_)   ;   SUB
041E   71                     DB   lsb(nop_)   ;   ESC
041F   71                     DB   lsb(nop_)   ;   FS
0420   71                     DB   lsb(nop_)   ;   GS
0421   71                     DB   lsb(nop_)   ;   RS
0422   71                     DB   lsb(nop_)   ;   US
0423   71                     DB   lsb(nop_)   ;   SP
0424                          ;*Macro unroll:  LITDAT 15
0424   0F                     DB   15   
0425   8F                     DB   lsb(store_)   ;   !
0426   58                     DB   lsb(dup_)   ;   "
0427   E0                     DB   lsb(hex_)   ;    #
0428   96                     DB   lsb(swap_)   ;    $
0429   74                     DB   lsb(over_)   ;    %
042A   00                     DB   lsb(and_)   ;    &
042B   55                     DB   lsb(drop_)   ;    '
042C   E6                     DB   lsb(begin_)   ;    (
042D   D1                     DB   lsb(again_)   ;    )
042E   DD                     DB   lsb(mul_)   ;    *
042F   22                     DB   lsb(add_)   ;    +
0430   4F                     DB   lsb(hdot_)   ;    ,
0431   9B                     DB   lsb(sub_)   ;    -
0432   44                     DB   lsb(dot_)   ;    .
0433   EA                     DB   lsb(div_)   ;    /
0434                          ;*Macro unroll:  REPDAT 10, lsb(num_)
0434   8A                     DB   (10 | $80)   
0435   E8                     DB   lsb(num_)   
0436   E8                     DB   lsb(num_)   ;    0
0437   E8                     DB   lsb(num_)   ;    1
0438   E8                     DB   lsb(num_)   ;    2
0439   E8                     DB   lsb(num_)   ;    3
043A   E8                     DB   lsb(num_)   ;    4
043B   E8                     DB   lsb(num_)   ;    5
043C   E8                     DB   lsb(num_)   ;    6
043D   E8                     DB   lsb(num_)   ;    7
043E   E8                     DB   lsb(num_)   ;    8
043F   E8                     DB   lsb(num_)   ;    9
0440                          ;*Macro unroll:  LITDAT 7
0440   07                     DB   7   
0441   E3                     DB   lsb(def_)   ;    :
0442   7B                     DB   lsb(ret_)   ;    ;
0443   B9                     DB   lsb(lt_)   ;    <
0444   A9                     DB   lsb(eq_)   ;    =
0445   B5                     DB   lsb(gt_)   ;    >
0446   DA                     DB   lsb(getRef_)   ;    ?
0447   6A                     DB   lsb(fetch_)   ;    @
0448                          ;*Macro unroll:  REPDAT 26, lsb(call_)
0448   9A                     DB   (26 | $80)   
0449   3A                     DB   lsb(call_)   
044A   3A                     DB   lsb(call_)   ;    A
044B   3A                     DB   lsb(call_)   ;    B
044C   3A                     DB   lsb(call_)   ;    C
044D   3A                     DB   lsb(call_)   ;    D
044E   3A                     DB   lsb(call_)   ;    E
044F   3A                     DB   lsb(call_)   ;    F
0450   3A                     DB   lsb(call_)   ;    G
0451   3A                     DB   lsb(call_)   ;    H
0452   3A                     DB   lsb(call_)   ;    I
0453   3A                     DB   lsb(call_)   ;    J
0454   3A                     DB   lsb(call_)   ;    K
0455   3A                     DB   lsb(call_)   ;    L
0456   3A                     DB   lsb(call_)   ;    M
0457   3A                     DB   lsb(call_)   ;    N
0458   3A                     DB   lsb(call_)   ;    O
0459   3A                     DB   lsb(call_)   ;    P
045A   3A                     DB   lsb(call_)   ;    Q
045B   3A                     DB   lsb(call_)   ;    R
045C   3A                     DB   lsb(call_)   ;    S
045D   3A                     DB   lsb(call_)   ;    T
045E   3A                     DB   lsb(call_)   ;    U
045F   3A                     DB   lsb(call_)   ;    V
0460   3A                     DB   lsb(call_)   ;    W
0461   3A                     DB   lsb(call_)   ;    X
0462   3A                     DB   lsb(call_)   ;    Y
0463   3A                     DB   lsb(call_)   ;    Z
0464                          ;*Macro unroll:  LITDAT 6
0464   06                     DB   6   
0465   28                     DB   lsb(arrDef_)   ;    [
0466   D4                     DB   lsb(alt_)   ;    \
0467   D7                     DB   lsb(arrEnd_)   ;    ]
0468   14                     DB   lsb(xor_)   ;    ^
0469   A3                     DB   lsb(neg_)   ;    _
046A   EC                     DB   lsb(str_)   ;    `
046B                          ;*Macro unroll:  REPDAT 26, lsb(var_)
046B   9A                     DB   (26 | $80)   
046C   CA                     DB   lsb(var_)   
046D   CA                     DB   lsb(var_)   ;    a
046E   CA                     DB   lsb(var_)   ;    b
046F   CA                     DB   lsb(var_)   ;    c
0470   CA                     DB   lsb(var_)   ;    d
0471   CA                     DB   lsb(var_)   ;    e
0472   CA                     DB   lsb(var_)   ;    f
0473   CA                     DB   lsb(var_)   ;    g
0474   CA                     DB   lsb(var_)   ;    h
0475   CA                     DB   lsb(var_)   ;    i
0476   CA                     DB   lsb(var_)   ;    j
0477   CA                     DB   lsb(var_)   ;    k
0478   CA                     DB   lsb(var_)   ;    l
0479   CA                     DB   lsb(var_)   ;    m
047A   CA                     DB   lsb(var_)   ;    n
047B   CA                     DB   lsb(var_)   ;    o
047C   CA                     DB   lsb(var_)   ;    p
047D   CA                     DB   lsb(var_)   ;    q
047E   CA                     DB   lsb(var_)   ;    r
047F   CA                     DB   lsb(var_)   ;    s
0480   CA                     DB   lsb(var_)   ;    t
0481   CA                     DB   lsb(var_)   ;    u
0482   CA                     DB   lsb(var_)   ;    v
0483   CA                     DB   lsb(var_)   ;    w
0484   CA                     DB   lsb(var_)   ;    x
0485   CA                     DB   lsb(var_)   ;    y
0486   CA                     DB   lsb(var_)   ;    z
0487                          ;*Macro unroll:  LITDAT 5
0487   05                     DB   5   
0488   82                     DB   lsb(shl_)   ;    {
0489   0B                     DB   lsb(or_)   ;    |
048A   87                     DB   lsb(shr_)   ;    }
048B   1D                     DB   lsb(inv_)   ;    ~
048C   71                     DB   lsb(nop_)   ;    backspace
048D                          ;*Macro unroll:  LITDAT 17
048D   11                     DB   17   
048E   00                     DB   lsb(EMPTY)   ; NUL ^@
048F   00                     DB   lsb(EMPTY)   ; SOH ^A  1
0490   EF                     DB   lsb(toggleBase_)   ; STX ^B  2
0491   00                     DB   lsb(EMPTY)   ; ETX ^C  3
0492   00                     DB   lsb(EMPTY)   ; EOT ^D  4
0493   BB                     DB   lsb(edit_)   ; ENQ ^E  5
0494   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0495   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0496   9D                     DB   lsb(backsp_)   ; BS  ^H  8
0497   00                     DB   lsb(EMPTY)   ; TAB ^I  9
0498   B4                     DB   lsb(reedit_)   ; LF  ^J 10
0499   00                     DB   lsb(EMPTY)   ; VT  ^K 11
049A   C6                     DB   lsb(list_)   ; FF  ^L 12
049B   00                     DB   lsb(EMPTY)   ; CR  ^M 13
049C   00                     DB   lsb(EMPTY)   ; SO  ^N 14
049D   00                     DB   lsb(EMPTY)   ; SI  ^O 15
049E   E2                     DB   lsb(printStack_)   ; DLE ^P 16
049F                          ;*Macro unroll:  REPDAT 15, lsb(EMPTY)
049F   8F                     DB   (15 | $80)   
04A0   00                     DB   lsb(EMPTY)   
04A1   00                     DB   lsb(EMPTY)   ; DC1 ^Q 17
04A2   00                     DB   lsb(EMPTY)   ; DC2 ^R 18
04A3   00                     DB   lsb(EMPTY)   ; DC3 ^S 19
04A4   00                     DB   lsb(EMPTY)   ; DC4 ^T 20
04A5   00                     DB   lsb(EMPTY)   ; NAK ^U 21
04A6   00                     DB   lsb(EMPTY)   ; SYN ^V 22
04A7   00                     DB   lsb(EMPTY)   ; ETB ^W 23
04A8   00                     DB   lsb(EMPTY)   ; CAN ^X 24
04A9   00                     DB   lsb(EMPTY)   ; EM  ^Y 25
04AA   00                     DB   lsb(EMPTY)   ; SUB ^Z 26
04AB   00                     DB   lsb(EMPTY)   ; ESC ^[
04AC   00                     DB   lsb(EMPTY)   ; FS  ^\
04AD   00                     DB   lsb(EMPTY)   ; GS  ^]
04AE   00                     DB   lsb(EMPTY)   ; RS  ^^
04AF   00                     DB   lsb(EMPTY)   ; US  ^_)
04B0                          ;*Macro unroll:  LITDAT 2
04B0   02                     DB   2   
04B1   0A                     DB   lsb(aNop_)   ; SP  ^`
04B2   1A                     DB   lsb(cStore_)   ;    !
04B3                          ;*Macro unroll:  REPDAT 6, lsb(aNop_)
04B3   86                     DB   (6 | $80)   
04B4   0A                     DB   lsb(aNop_)   
04B5   0A                     DB   lsb(aNop_)   ;    "
04B6   0A                     DB   lsb(aNop_)   ;    #
04B7   0A                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
04B8   0A                     DB   lsb(aNop_)   ;    %
04B9   0A                     DB   lsb(aNop_)   ;    &
04BA   0A                     DB   lsb(aNop_)   ;    '
04BB                          ;*Macro unroll:  LITDAT 1
04BB   01                     DB   1   
04BC   34                     DB   lsb(ifte_)   ;    (  ( b -- )
04BD                          ;*Macro unroll:  REPDAT 7, lsb(aNop_)
04BD   87                     DB   (7 | $80)   
04BE   0A                     DB   lsb(aNop_)   
04BF   0A                     DB   lsb(aNop_)   ;    )
04C0   0A                     DB   lsb(aNop_)   ;    *
04C1   0A                     DB   lsb(aNop_)   ;    +
04C2   0A                     DB   lsb(aNop_)   ;    ,
04C3   0A                     DB   lsb(aNop_)   ;    -
04C4   0A                     DB   lsb(aNop_)   ;    .
04C5   0A                     DB   lsb(aNop_)   ;    /
04C6                          ;*Macro unroll:  REPDAT 5, lsb(NSCall_)
04C6   85                     DB   (5 | $80)   
04C7   5D                     DB   lsb(NSCall_)   
04C8   5D                     DB   lsb(NSCall_)   ;    0
04C9   5D                     DB   lsb(NSCall_)   ;    1
04CA   5D                     DB   lsb(NSCall_)   ;    2
04CB   5D                     DB   lsb(NSCall_)   ;    3
04CC   5D                     DB   lsb(NSCall_)   ;    4
04CD                          ;*Macro unroll:  REPDAT 9, lsb(aNop_)
04CD   89                     DB   (9 | $80)   
04CE   0A                     DB   lsb(aNop_)   
04CF   0A                     DB   lsb(aNop_)   ;    5
04D0   0A                     DB   lsb(aNop_)   ;    6
04D1   0A                     DB   lsb(aNop_)   ;    7
04D2   0A                     DB   lsb(aNop_)   ;    8
04D3   0A                     DB   lsb(aNop_)   ;    9
04D4   0A                     DB   lsb(aNop_)   ;    :  start defining a macro
04D5   0A                     DB   lsb(aNop_)   ;    ;
04D6   0A                     DB   lsb(aNop_)   ;    <
04D7   0A                     DB   lsb(aNop_)   ;    =
04D8                          ;*Macro unroll:  LITDAT 21
04D8   15                     DB   21   
04D9   8A                     DB   lsb(prompt_)   ;    >
04DA   0A                     DB   lsb(aNop_)   ;    ?
04DB   05                     DB   lsb(cFetch_)   ;    @
04DC   0A                     DB   lsb(aNop_)   ;    A
04DD   C6                     DB   lsb(break_)   ;    B
04DE   71                     DB   lsb(nop_)   ;    C
04DF   1F                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
04E0   2D                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
04E1   0A                     DB   lsb(aNop_)   ;    F
04E2   4E                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
04E3   0A                     DB   lsb(aNop_)   ;    H
04E4   9D                     DB   lsb(inPort_)   ;    I  ( port -- val )
04E5   0A                     DB   lsb(aNop_)   ;    J
04E6   A8                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
04E7   0A                     DB   lsb(aNop_)   ;    L
04E8   0A                     DB   lsb(aNop_)   ;    M
04E9   B1                     DB   lsb(newln_)   ;    N   ; prints a newline to output
04EA   B6                     DB   lsb(outPort_)   ;    O  ( val port -- )
04EB   F6                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
04EC   0A                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
04ED   BF                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
04EE                          ;*Macro unroll:  REPDAT 5, lsb(aNop_)
04EE   85                     DB   (5 | $80)   
04EF   0A                     DB   lsb(aNop_)   
04F0   0A                     DB   lsb(aNop_)   ;    S
04F1   0A                     DB   lsb(aNop_)   ;    T
04F2   0A                     DB   lsb(aNop_)   ;    U
04F3   0A                     DB   lsb(aNop_)   ;    V
04F4   0A                     DB   lsb(aNop_)   ;    W   ; ( b -- ) if false, skip to end of loop
04F5                          ;*Macro unroll:  LITDAT 9
04F5   09                     DB   9   
04F6   46                     DB   lsb(exec_)   ;    X
04F7   0A                     DB   lsb(aNop_)   ;    Y
04F8   F4                     DB   lsb(editDef_)   ;    Z
04F9   00                     DB   lsb(cArrDef_)   ;    [
04FA   11                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
04FB   0A                     DB   lsb(aNop_)   ;    ]
04FC   0C                     DB   lsb(charCode_)   ;    ^
04FD   0A                     DB   lsb(aNop_)   ;    _
04FE   0A                     DB   lsb(aNop_)   ;    `
04FF                          ;*Macro unroll:  REPDAT 8, lsb(sysVar_)
04FF   88                     DB   (8 | $80)   
0500   8F                     DB   lsb(sysVar_)   
0501   8F                     DB   lsb(sysVar_)   ;    a  ; start of data stack variable
0502   8F                     DB   lsb(sysVar_)   ;    b  ; base16 variable
0503   8F                     DB   lsb(sysVar_)   ;    c  ; TIBPtr variable
0504   8F                     DB   lsb(sysVar_)   ;    d
0505   8F                     DB   lsb(sysVar_)   ;    e
0506   8F                     DB   lsb(sysVar_)   ;    f
0507   8F                     DB   lsb(sysVar_)   ;    g
0508   8F                     DB   lsb(sysVar_)   ;    h  ; heap ptr variable
0509                          ;*Macro unroll:  LITDAT 1
0509   01                     DB   1   
050A   99                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
050B                          ;*Macro unroll:  REPDAT 17, lsb(sysVar_)
050B   91                     DB   (17 | $80)   
050C   8F                     DB   lsb(sysVar_)   
050D   8F                     DB   lsb(sysVar_)   ;    j  ; returns index variable of outer loop
050E   8F                     DB   lsb(sysVar_)   ;    k
050F   8F                     DB   lsb(sysVar_)   ;    l
0510   8F                     DB   lsb(sysVar_)   ;    m  ( a b -- c ) return the minimum value
0511   8F                     DB   lsb(sysVar_)   ;    n
0512   8F                     DB   lsb(sysVar_)   ;    o
0513   8F                     DB   lsb(sysVar_)   ;    p
0514   8F                     DB   lsb(sysVar_)   ;    q
0515   8F                     DB   lsb(sysVar_)   ;    r
0516   8F                     DB   lsb(sysVar_)   ;    s
0517   8F                     DB   lsb(sysVar_)   ;    t
0518   8F                     DB   lsb(sysVar_)   ;    u
0519   8F                     DB   lsb(sysVar_)   ;    v
051A   8F                     DB   lsb(sysVar_)   ;    w
051B   8F                     DB   lsb(sysVar_)   ;    x
051C   8F                     DB   lsb(sysVar_)   ;    y
051D   8F                     DB   lsb(sysVar_)   ;    z
051E                          ;*Macro unroll:  LITDAT 5
051E   05                     DB   5   
051F   D5                     DB   lsb(NSEnter_)   ;    {
0520   0A                     DB   lsb(aNop_)   ;    |
0521   82                     DB   lsb(NSExit_)   ;    }
0522   0A                     DB   lsb(aNop_)   ;    ~
0523   0A                     DB   lsb(aNop_)   ;    BS		
0524                          ;*Macro unroll:  ENDDAT
0524   00                     DB   0   
0525                             ; **********************************************************************			
0525                             ; Page 4 primitive routines
0525                             ; **********************************************************************
0525                          ALIGN   $100   
0600                PAGE4:       
0600                AND_:        
0600   D1                     POP   DE   ;     Bitwise AND the top 2 elements of the stack
0601   E1                     POP   HL   ; 
0602   7B                     LD   A,E   ; 
0603   A5                     AND   L   ; 
0604   6F                     LD   L,A   ; 
0605   7A                     LD   A,D   ; 
0606   A4                     AND   H   ; 
0607                AND1:        
0607   67                     LD   H,A   ; 
0608   E5                     PUSH   HL   ; 
0609   FD E9                  JP   (IY)   ; 
060B                             ; 
060B                OR_:         
060B   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
060C   E1                     POP   HL   
060D   7B                     LD   A,E   
060E   B5                     OR   L   
060F   6F                     LD   L,A   
0610   7A                     LD   A,D   
0611   B4                     OR   H   
0612   18 F3                  JR   and1   
0614                XOR_:        
0614   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0615                XOR1:        
0615   E1                     POP   HL   
0616   7B                     LD   A,E   
0617   AD                     XOR   L   
0618   6F                     LD   L,A   
0619   7A                     LD   A,D   
061A   AC                     XOR   H   
061B   18 EA                  JR   and1   
061D                INV_:        ; Bitwise INVert the top member of the stack
061D   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0620   18 F3                  JR   xor1   
0622                ADD_:        ; Add the top 2 members of the stack
0622   D1                     POP   DE   
0623   E1                     POP   HL   
0624   19                     ADD   HL,DE   
0625   E5                     PUSH   HL   
0626   FD E9                  JP   (IY)   
0628                ARRDEF_:      
0628                ARRDEF:      ;=18
0628   3E 00                  LD   A,FALSE   
062A                ARRDEF1:      
062A   FD 21 2A 02            LD   IY,compNEXT   
062E   32 36 1B               LD   (vByteMode),A   
0631   2A 0E 1B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0634   CD E8 09               CALL   rpush   ; save start of array \[  \]
0637   C3 21 02               JP   NEXT   ; hardwired to NEXT
063A                CALL_:       
063A   0A                     LD   A,(BC)   
063B   CD 83 09               CALL   NSLookup   
063E   5E                     LD   E,(HL)   
063F   23                     INC   HL   
0640   56                     LD   D,(HL)   
0641   C3 4F 08               JP   go1   
0644                DOT_:        
0644   E1                     POP   HL   
0645   CD A5 09               CALL   printdec   
0648                DOT2:        
0648   3E 20                  LD   A," "   
064A   CD 85 00               CALL   putChar   
064D   FD E9                  JP   (IY)   
064F                HDOT_:       ; print hexadecimal
064F   E1                     POP   HL   
0650   CD C9 09               CALL   printhex   
0653   18 F3                  JR   dot2   
0655                DROP_:       ; Discard the top member of the stack
0655   E1                     POP   HL   
0656   FD E9                  JP   (IY)   
0658                DUP_:        
0658   E1                     POP   HL   ; Duplicate the top member of the stack
0659   E5                     PUSH   HL   
065A   E5                     PUSH   HL   
065B   FD E9                  JP   (IY)   
065D                ETX_:        
065D   C3 90 01               JP   ETX   
0660                EXIT_:       
0660   03                     INC   BC   
0661   50 59                  LD   DE,BC   
0663   CD F3 09               CALL   rpop   ; Restore Instruction pointer
0666   44 4D                  LD   BC,HL   
0668   EB                     EX   DE,HL   
0669   E9                     JP   (HL)   
066A                FETCH_:      ; Fetch the value from the address placed on the top of the stack
066A   E1                     POP   HL   
066B                FETCH1:      
066B   5E                     LD   E,(HL)   
066C   23                     INC   HL   
066D   56                     LD   D,(HL)   
066E   D5                     PUSH   DE   
066F   FD E9                  JP   (IY)   
0671                NOP_:        
0671   C3 21 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0674                OVER_:       
0674   E1                     POP   HL   ; Duplicate 2nd element of the stack
0675   D1                     POP   DE   
0676   D5                     PUSH   DE   
0677   E5                     PUSH   HL   
0678   D5                     PUSH   DE   ; And push it to top of stack
0679   FD E9                  JP   (IY)   
067B                RET_:        
067B   CD F3 09               CALL   rpop   ; Restore Instruction pointer
067E   44 4D                  LD   BC,HL   
0680   FD E9                  JP   (IY)   
0682                             ;  Left shift { is multiply by 2		
0682                SHL_:        
0682   E1                     POP   HL   ; Duplicate the top member of the stack
0683   29                     ADD   HL,HL   
0684   E5                     PUSH   HL   ; shift left fallthrough into add_
0685   FD E9                  JP   (IY)   ; 
0687                             ;  Right shift } is a divide by 2		
0687                SHR_:        
0687   E1                     POP   HL   ; Get the top member of the stack
0688                SHR1:        
0688   CB 3C                  SRL   H   
068A   CB 1D                  RR   L   
068C   E5                     PUSH   HL   
068D   FD E9                  JP   (IY)   ; 
068F                STORE_:      ; Store the value at the address placed on the top of the stack
068F   E1                     POP   HL   
0690   D1                     POP   DE   
0691   73                     LD   (HL),E   
0692   23                     INC   HL   
0693   72                     LD   (HL),D   
0694   FD E9                  JP   (IY)   
0696                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
0696                SWAP_:       
0696   E1                     POP   HL   
0697   E3                     EX   (SP),HL   
0698   E5                     PUSH   HL   
0699   FD E9                  JP   (IY)   
069B                SUB_:        ; Subtract the value 2nd on stack from top of stack
069B   D1                     POP   DE   ; 
069C   E1                     POP   HL   ;      Entry point for INVert
069D                SUB2:        
069D   A7                     AND   A   ;      Entry point for NEGate
069E   ED 52                  SBC   HL,DE   ; 15t
06A0   E5                     PUSH   HL   ; 
06A1   FD E9                  JP   (IY)   ; 
06A3                             ; 5
06A3                NEG_:        
06A3   21 00 00               LD   HL,0   ; NEGate the value on top of stack (2's complement)
06A6   D1                     POP   DE   ; 
06A7   18 F4                  JR   sub2   ; use the SUBtract routine
06A9                EQ_:         
06A9   E1                     POP   HL   
06AA   D1                     POP   DE   
06AB   A7                     AND   A   ; reset the carry flag
06AC   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
06AE   28 16                  JR   Z,equal   
06B0   21 00 00               LD   HL,0   
06B3   18 12                  JR   less   ; HL = 1
06B5                GT_:         
06B5   D1                     POP   DE   
06B6   E1                     POP   HL   
06B7   18 02                  JR   cmp_   
06B9                LT_:         
06B9   E1                     POP   HL   
06BA   D1                     POP   DE   
06BB                CMP_:        
06BB   A7                     AND   A   ; reset the carry flag
06BC   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
06BE   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
06C0   21 00 00               LD   HL,0   
06C3   FA C7 06               JP   M,less   
06C6                EQUAL:       
06C6   2C                     INC   L   ; HL = 1
06C7                LESS:        
06C7   E5                     PUSH   HL   
06C8   FD E9                  JP   (IY)   
06CA                VAR_:        
06CA   0A                     LD   A,(BC)   
06CB   CD 89 09               CALL   NSLookup2   
06CE   E5                     PUSH   HL   
06CF   FD E9                  JP   (IY)   
06D1   C3 C7 07     AGAIN_:   JP   again   
06D4   C3 53 09     ALT_:     JP   alt   
06D7   C3 8A 07     ARREND_:   JP   arrEnd   
06DA   C3 4B 09     GETREF_:   JP   getRef   
06DD   C3 5E 09     MUL_:     JP   mul   
06E0   C3 6D 07     HEX_:     JP   hex   
06E3   C3 A6 07     DEF_:     JP   def   
06E6   18 13        BEGIN_:   JR   begin   
06E8   18 3F        NUM_:     JR   num   
06EA   18 5F        DIV_:     JR   div   
06EC                STR_:        
06EC                STR:         
06EC   03                     INC   BC   
06ED                STR1:        
06ED   0A                     LD   A,(BC)   
06EE   03                     INC   BC   
06EF   FE 60                  CP   "`"   ; ` is the string terminator
06F1   28 05                  JR   Z,str2   
06F3   CD 85 00               CALL   putchar   
06F6   18 F5                  JR   str1   
06F8                STR2:        
06F8   0B                     DEC   BC   
06F9   FD E9                  JP   (IY)   
06FB                             ;*******************************************************************
06FB                             ; Page 5 primitive routines
06FB                             ;*******************************************************************
06FB                             ;falls through
06FB                             ; *************************************
06FB                             ; Loop Handling Code
06FB                             ; *************************************
06FB                             ;=23
06FB                BEGIN:       ; Left parentesis begins a loop
06FB   E1                     POP   HL   
06FC   7D                     LD   A,L   ; zero?
06FD   B4                     OR   H   
06FE   28 1C                  JR   Z,begin1   
0700   2B                     DEC   HL   
0701   11 FA FF               LD   DE,-6   
0704   DD 19                  ADD   IX,DE   
0706   DD 36 00 00            LD   (IX+0),0   ; loop var
070A   DD 36 01 00            LD   (IX+1),0   
070E   DD 75 02               LD   (IX+2),L   ; loop limit
0711   DD 74 03               LD   (IX+3),H   
0714   DD 71 04               LD   (IX+4),C   ; loop address
0717   DD 70 05               LD   (IX+5),B   
071A   FD E9                  JP   (IY)   
071C                BEGIN1:      
071C   1E 01                  LD   E,1   
071E                BEGIN2:      
071E   03                     INC   BC   
071F   0A                     LD   A,(BC)   
0720   CD 61 02               CALL   nesting   
0723   AF                     XOR   A   
0724   B3                     OR   E   
0725   20 F7                  JR   NZ,begin2   
0727                BEGIN3:      
0727   FD E9                  JP   (IY)   
0729                             ; ********************************************************************************
0729                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
0729                             ; Read the first character.
0729                             ;			
0729                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
0729                             ; and then added into the L register. (HL forms a 16-bit accumulator)
0729                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
0729                             ; and then add in the next digit. Repeat this until a non-number character is
0729                             ; detected. Add in the final digit so that HL contains the converted number.
0729                             ; Push HL onto the stack and proceed to the dispatch routine.
0729                             ; ********************************************************************************
0729                NUM:         ;=23
0729   21 00 00               LD   HL,$0000   ;     Clear HL to accept the number
072C   0A                     LD   A,(BC)   ;     Get the character which is a numeral
072D                NUM1:        ; corrected KB 24/11/21
072D   D6 30                  SUB   $30   ;       Form decimal digit
072F   85                     ADD   A,L   ;       Add into bottom of HL
0730   6F                     LD   L,A   ; 
0731   3E 00                  LD   A,00   ;       Clear A
0733   8C                     ADC   A,H   ; Add with carry H-reg
0734   67                     LD   H,A   ; Put result in H-reg
0735   03                     INC   BC   ;       Increment IP
0736   0A                     LD   A,(BC)   ;       and get the next character
0737   FE 30                  CP   $30   ;       Less than $30
0739   38 0C                  JR   C,num2   ;       Not a number / end of number
073B   FE 3A                  CP   $3A   ;       Greater or equal to $3A
073D   30 08                  JR   NC,num2   ;       Not a number / end of number
073F                             ; Multiply digit(s) in HL by 10
073F   29                     ADD   HL,HL   ;        2X
0740   5D                     LD   E,L   ;        LD DE,HL
0741   54                     LD   D,H   ; 
0742   29                     ADD   HL,HL   ;        4X
0743   29                     ADD   HL,HL   ;        8X
0744   19                     ADD   HL,DE   ;        2X  + 8X  = 10X
0745                             ; 52t cycles
0745   18 E6                  JR   num1   
0747                NUM2:        
0747   0B                     DEC   BC   
0748   E5                     PUSH   HL   ;       Put the number on the stack
0749   FD E9                  JP   (IY)   ; and process the next character
074B                             ; ********************************************************************
074B                             ; 16-bit division subroutine.
074B                             ; 
074B                             ; BC: divisor, DE: dividend, HL: remainder
074B                             ; *********************************************************************
074B                             ; This divides DE by BC, storing the result in DE, remainder in HL
074B                             ; *********************************************************************
074B                             ; 1382 cycles
074B                             ; 35 bytes (reduced from 48)
074B                             ; 
074B                DIV:         ;=24
074B   D1                     POP   DE   ; get first value
074C   E1                     POP   HL   ; get 2nd value
074D   C5                     PUSH   BC   ; Preserve the IP
074E   44                     LD   B,H   ; BC = 2nd value
074F   4D                     LD   C,L   
0750                             ; 
0750   21 00 00               LD   HL,0   ; Zero the remainder
0753   3E 10                  LD   A,16   ; Loop counter
0755                DIV1:        ;shift the bits from BC (numerator) into HL (accumulator)
0755   CB 21                  SLA   C   
0757   CB 10                  RL   B   
0759   ED 6A                  ADC   HL,HL   
075B   ED 52                  SBC   HL,DE   ;Check if remainder >= denominator (HL>=DE)
075D   38 03                  JR   C,div2   
075F   0C                     INC   C   
0760   18 01                  JR   div3   
0762                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
0762   19                     ADD   hl,de   
0763                DIV3:        
0763   3D                     DEC   A   
0764   20 EF                  JR   NZ,div1   
0766   50                     LD   D,B   ; Result from BC to DE
0767   59                     LD   E,C   
0768                DIV4:        
0768   C1                     POP   BC   ; Restore the IP
0769   D5                     PUSH   DE   ; Push Result
076A   E5                     PUSH   HL   ; Push remainder
076B   FD E9                  JP   (IY)   
076D                HEX:         ;=26
076D   21 00 00               LD   HL,0   ;     Clear HL to accept the number
0770                HEX1:        
0770   03                     INC   BC   
0771   0A                     LD   A,(BC)   ;     Get the character which is a numeral
0772   CB 77                  BIT   6,A   ;       is it uppercase alpha?
0774   28 02                  JR   Z,hex2   ; no a decimal
0776   D6 07                  SUB   7   ; sub 7  to make $A - $F
0778                HEX2:        
0778   D6 30                  SUB   $30   ;       Form decimal digit
077A   DA 47 07               JP   C,num2   
077D   FE 10                  CP   $0F+1   
077F   D2 47 07               JP   NC,num2   
0782   29                     ADD   HL,HL   ;        2X ; Multiply digit(s) in HL by 16
0783   29                     ADD   HL,HL   ;        4X
0784   29                     ADD   HL,HL   ;        8X
0785   29                     ADD   HL,HL   ;       16X
0786   85                     ADD   A,L   ;       Add into bottom of HL
0787   6F                     LD   L,A   ; 
0788   18 E6                  JR   hex1   
078A                ARREND:      ;=27
078A   CD F3 09               CALL   rpop   ; DE = start of array
078D   E5                     PUSH   HL   
078E   EB                     EX   DE,HL   
078F   2A 0E 1B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0792   B7                     OR   A   
0793   ED 52                  SBC   HL,DE   ; bytes on heap
0795   3A 36 1B               LD   A,(vByteMode)   
0798   B7                     OR   A   
0799   20 04                  JR   NZ,arrEnd2   
079B   CB 3C                  SRL   H   ; BC = m words
079D   CB 1D                  RR   L   
079F                ARREND2:      
079F   E5                     PUSH   HL   
07A0   FD 21 21 02            LD   IY,NEXT   
07A4   FD E9                  JP   (IY)   ; hardwired to NEXT
07A6                             ; **************************************************************************
07A6                             ; def is used to create a colon definition
07A6                             ; When a colon is detected, the next character (usually uppercase alpha)
07A6                             ; is looked up in the vector table to get its associated code field address
07A6                             ; This CFA is updated to point to the character after uppercase alpha
07A6                             ; The remainder of the characters are then skipped until after a semicolon
07A6                             ; is found.
07A6                             ; ***************************************************************************
07A6                             ;=31
07A6                DEF:         ; Create a colon definition
07A6   03                     INC   BC   
07A7   0A                     LD   A,(BC)   ; Get the next character
07A8   32 08 1B               LD   (vLastDef),A   
07AB   03                     INC   BC   
07AC   CD 83 09               CALL   NSLookup   
07AF   ED 5B 0E 1B            LD   DE,(vHeapPtr)   ; start of defintion
07B3   73                     LD   (HL),E   ; Save low byte of address in CFA
07B4   23                     INC   HL   
07B5   72                     LD   (HL),D   ; Save high byte of address in CFA+1
07B6                DEF1:        ; Skip to end of definition
07B6   0A                     LD   A,(BC)   ; Get the next character
07B7   03                     INC   BC   ; Point to next character
07B8   12                     LD   (DE),A   
07B9   13                     INC   DE   
07BA   FE 3B                  CP   ";"   ; Is it a semicolon
07BC   28 02                  JR   Z,def2   ; end the definition
07BE   18 F6                  JR   def1   ; get the next element
07C0                DEF2:        
07C0   0B                     DEC   BC   
07C1                DEF3:        
07C1   ED 53 0E 1B            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
07C5   FD E9                  JP   (IY)   
07C7                AGAIN:       ;=51
07C7   DD 5E 00               LD   E,(IX+0)   ; peek loop var
07CA   DD 56 01               LD   D,(IX+1)   
07CD   7A                     LD   A,D   ; check if IFTEMode
07CE   A3                     AND   E   
07CF   3C                     INC   A   
07D0   20 07                  JR   NZ,again1   
07D2   13                     INC   DE   
07D3   D5                     PUSH   DE   ; push FALSE condition
07D4   11 02 00               LD   DE,2   
07D7   18 1D                  JR   again3   ; drop IFTEMode
07D9                AGAIN1:      
07D9   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
07DC   DD 66 03               LD   H,(IX+3)   
07DF   B7                     OR   A   
07E0   ED 52                  SBC   HL,DE   
07E2   28 0F                  JR   Z,again2   
07E4   13                     INC   DE   
07E5   DD 73 00               LD   (IX+0),E   ; poke loop var
07E8   DD 72 01               LD   (IX+1),D   
07EB   DD 4E 04               LD   C,(IX+4)   ; peek loop address
07EE   DD 46 05               LD   B,(IX+5)   
07F1   FD E9                  JP   (IY)   
07F3                AGAIN2:      
07F3   11 06 00               LD   DE,6   ; drop loop frame
07F6                AGAIN3:      
07F6   DD 19                  ADD   IX,DE   
07F8   FD E9                  JP   (IY)   
07FA                             ; **************************************************************************
07FA                             ; Page 6 Alt primitives
07FA                             ; **************************************************************************
07FA                          ALIGN   $100   
0800                PAGE6:       
0800                CARRDEF_:      ; define a byte array
0800   3E 01                  LD   A,TRUE   
0802   C3 2A 06               JP   arrDef1   
0805                CFETCH_:      
0805   E1                     POP   HL   
0806   16 00                  LD   D,0   
0808   5E                     LD   E,(HL)   
0809   D5                     PUSH   DE   
080A                ANOP_:       
080A   FD E9                  JP   (IY)   
080C                CHARCODE_:      
080C   03                     INC   BC   
080D   0A                     LD   A,(BC)   
080E   C3 AB 08               JP   key1   
0811                COMMENT_:      
0811   03                     INC   BC   ; point to next char
0812   0A                     LD   A,(BC)   
0813   FE 0D                  CP   "\r"   ; terminate at cr
0815   20 FA                  JR   NZ,comment_   
0817   0B                     DEC   BC   
0818   FD E9                  JP   (IY)   
081A                CSTORE_:      
081A   E1                     POP   HL   
081B   D1                     POP   DE   
081C   73                     LD   (HL),E   
081D   FD E9                  JP   (IY)   
081F                DEPTH_:      
081F   21 00 00               LD   HL,0   
0822   39                     ADD   HL,SP   
0823   EB                     EX   DE,HL   
0824   21 80 18               LD   HL,DSTACK   
0827   B7                     OR   A   
0828   ED 52                  SBC   HL,DE   
082A   C3 88 06               JP   shr1   
082D                EMIT_:       
082D   E1                     POP   HL   
082E   7D                     LD   A,L   
082F   CD 85 00               CALL   putchar   
0832   FD E9                  JP   (IY)   
0834                IFTE_:       
0834   D1                     POP   DE   
0835   7B                     LD   A,E   
0836   B2                     OR   D   
0837   20 05                  JR   NZ,ifte1   
0839   13                     INC   DE   
083A   D5                     PUSH   DE   ; push TRUE on stack for else clause
083B   C3 1C 07               JP   begin1   ; skip to closing ) works with \) too
083E                IFTE1:       
083E   21 FF FF               LD   HL,-1   ; push -1 on return stack to indicate IFTEMode
0841   CD E8 09               CALL   rpush   
0844   FD E9                  JP   (IY)   
0846                EXEC_:       
0846   CD 4B 08               CALL   exec1   
0849   FD E9                  JP   (IY)   
084B                EXEC1:       
084B   E1                     POP   HL   
084C   E3                     EX   (SP),HL   
084D   E9                     JP   (HL)   
084E                GO_:         
084E   D1                     POP   DE   
084F                GO1:         
084F   7A                     LD   A,D   
0850   B3                     OR   E   
0851   28 08                  JR   Z,go2   
0853   60 69                  LD   HL,BC   
0855   CD E8 09               CALL   rpush   ; save Instruction Pointer
0858   42 4B                  LD   BC,DE   
085A   0B                     DEC   BC   
085B                GO2:         
085B   FD E9                  JP   (IY)   
085D                NSCALL_:      ;=25
085D   FD 21 FD 09            LD   IY,rpop2   ; rewire NEXT to simply return
0861   CD D6 08               CALL   NSEnter1   ; enter namespace return here on NEXT
0864   0A                     LD   A,(BC)   
0865   FE 61                  CP   "a"   
0867   30 11                  JR   NC,NSCall2   
0869   CD 83 09               CALL   NSLookup   
086C   E5                     PUSH   HL   
086D   FD 21 21 02            LD   IY,NEXT   ; restore NEXT
0871   CD 7A 09               CALL   enter   ; enter MINT interpreter with TOS=command
0874   40 5C 47 00            .CSTR   "@\\G"   ; execute and restore namespace
0878   18 08                  JR   NSExit_   
087A                NSCALL2:      ;=25
087A   CD 89 09               CALL   NSLookup2   
087D   E5                     PUSH   HL   
087E   FD 21 21 02            LD   IY,NEXT   ; restore NEXT
0882                NSEXIT_:      
0882   CD F3 09               CALL   rpop   
0885   22 06 1B               LD   (vNS),HL   
0888   FD E9                  JP   (IY)   
088A                PROMPT_:      
088A   CD 8D 02               CALL   prompt   
088D   FD E9                  JP   (IY)   
088F                SYSVAR_:      
088F   0A                     LD   A,(BC)   
0890   D6 61                  SUB   "a" - ((sysVars - mintVars)/2)   
0892   87                     ADD   A,A   
0893   26 1B                  LD   H,msb(mintVars)   
0895   6F                     LD   L,A   
0896   E5                     PUSH   HL   
0897   FD E9                  JP   (IY)   
0899                I_:          
0899   DD E5                  PUSH   IX   
089B   FD E9                  JP   (IY)   
089D                INPORT_:      
089D   E1                     POP   HL   
089E   79                     LD   A,C   
089F   4D                     LD   C,L   
08A0   ED 68                  IN   L,(C)   
08A2   26 00                  LD   H,0   
08A4   4F                     LD   C,A   
08A5   E5                     PUSH   HL   
08A6   FD E9                  JP   (IY)   
08A8                KEY_:        
08A8   CD 81 00               CALL   getchar   
08AB                KEY1:        
08AB   26 00                  LD   H,0   
08AD   6F                     LD   L,A   
08AE   E5                     PUSH   HL   
08AF   FD E9                  JP   (IY)   
08B1                NEWLN_:      
08B1   CD 96 02               CALL   crlf   
08B4   FD E9                  JP   (IY)   
08B6                OUTPORT_:      
08B6   E1                     POP   HL   
08B7   59                     LD   E,C   
08B8   4D                     LD   C,L   
08B9   E1                     POP   HL   
08BA   ED 69                  OUT   (C),L   
08BC   4B                     LD   C,E   
08BD   FD E9                  JP   (IY)   
08BF                ROT_:        ; a b c -- b c a
08BF   D1                     POP   DE   ; a b                   de = c
08C0   E1                     POP   HL   ; a                     hl = b
08C1   E3                     EX   (SP),HL   ; b                     hl = a
08C2   D5                     PUSH   DE   ; b c
08C3   E5                     PUSH   HL   ; b c a
08C4   FD E9                  JP   (IY)   
08C6                BREAK_:      
08C6   E1                     POP   HL   
08C7   7D                     LD   A,L   ; zero?
08C8   B4                     OR   H   
08C9   20 02                  JR   NZ,break1   
08CB   FD E9                  JP   (IY)   
08CD                BREAK1:      
08CD   11 06 00               LD   DE,6   ; drop loop frame
08D0   DD 19                  ADD   IX,DE   
08D2   C3 1C 07               JP   begin1   ; skip to end of loop
08D5                NSENTER_:      
08D5   03                     INC   BC   
08D6                NSENTER1:      
08D6   0A                     LD   A,(BC)   ; read NS ASCII code
08D7   D6 30                  SUB   "0"   ; convert to number
08D9   03                     INC   BC   
08DA   57                     LD   D,A   ; multiply by 64
08DB   1E 00                  LD   E,0   
08DD   CB 3A                  SRL   D   
08DF   CB 1B                  RR   E   
08E1   CB 3A                  SRL   D   
08E3   CB 1B                  RR   E   
08E5   2A 06 1B               LD   HL,(vNS)   ; 
08E8   CD E8 09               CALL   rpush   
08EB   21 80 1B               LD   HL,NS0   
08EE   19                     ADD   HL,DE   
08EF   22 06 1B               LD   (vNS),HL   
08F2   FD E9                  JP   (IY)   
08F4                EDITDEF_:      
08F4   18 20                  JR   editDef   
08F6                PRINTSTK_:      
08F6                PRINTSTK:      ;=40
08F6                             ; MINT: \a@2- \D1- ("@ \b@ \(,)(.) 2-) '
08F6   CD 7A 09               CALL   ENTER   
08F9   5C 61 40 32 2D 5C 44 31 2D 28 22 40 5C 62 40 5C 28 2C 29 28 2E 29 32 2D 29 27 00 .CSTR   "\\a@2-\\D1-(",$22,"@\\b@\\(,)(.)2-)'"   
0914   FD E9                  JP   (IY)   
0916                             ; **************************************************************************
0916                             ; Page 6 primitive routines
0916                             ; **************************************************************************
0916                             ; falls through
0916                             ; **************************************************************************
0916                             ; copy definition to text input buffer
0916                             ; update TIBPtr
0916                             ; **************************************************************************
0916                EDITDEF:      ;=50 lookup up def based on number
0916   D1                     POP   DE   
0917   7B                     LD   A,E   
0918   08                     EX   AF,AF'   
0919   7B                     LD   A,E   
091A   CD 83 09               CALL   NSLookup   
091D   5E                     LD   E,(HL)   
091E   23                     INC   HL   
091F   56                     LD   D,(HL)   
0920   7A                     LD   A,D   
0921   B3                     OR   E   
0922   21 00 1A               LD   HL,TIB   
0925   28 14                  JR   Z,editDef3   
0927   3E 3A                  LD   A,":"   
0929   CD 46 09               CALL   writeChar   
092C   08                     EX   AF,AF'   
092D   CD 46 09               CALL   writeChar   
0930   18 01                  JR   editDef2   
0932                EDITDEF1:      
0932   13                     INC   DE   
0933                EDITDEF2:      
0933   1A                     LD   A,(DE)   
0934   CD 46 09               CALL   writeChar   
0937   FE 3B                  CP   ";"   
0939   20 F7                  JR   NZ,editDef1   
093B                EDITDEF3:      
093B   11 00 1A               LD   DE,TIB   
093E   B7                     OR   A   
093F   ED 52                  SBC   HL,DE   
0941   22 04 1B               LD   (vTIBPtr),HL   
0944   FD E9                  JP   (IY)   
0946                WRITECHAR:      ;=5
0946   77                     LD   (HL),A   
0947   23                     INC   HL   
0948   C3 85 00               JP   putchar   
094B                             ;*******************************************************************
094B                             ; Page 5 primitive routines continued
094B                             ;*******************************************************************
094B                GETREF:      ;=8
094B   03                     INC   BC   
094C   0A                     LD   A,(BC)   
094D   CD 83 09               CALL   NSLookup   
0950   C3 6B 06               JP   fetch1   
0953                ALT:         ;=11
0953   03                     INC   BC   
0954   0A                     LD   A,(BC)   
0955   21 80 19               LD   HL,altCodes   
0958   85                     ADD   A,L   
0959   6F                     LD   L,A   
095A   6E                     LD   L,(HL)   ;       get low jump address
095B   26 08                  LD   H,msb(page6)   ; Load H with the 5th page address
095D   E9                     JP   (HL)   ;       Jump to routine
095E                             ; ********************************************************************
095E                             ; 16-bit multiply
095E                MUL:         ;=19
095E   D1                     POP   DE   ; get first value
095F   E1                     POP   HL   
0960   C5                     PUSH   BC   ; Preserve the IP
0961   44                     LD   B,H   ; BC = 2nd value
0962   4D                     LD   C,L   
0963   21 00 00               LD   HL,0   
0966   3E 10                  LD   A,16   
0968                MUL2:        
0968   29                     ADD   HL,HL   
0969   CB 13                  RL   E   
096B   CB 12                  RL   D   
096D   30 04                  JR   NC,$+6   
096F   09                     ADD   HL,BC   
0970   30 01                  JR   NC,$+3   
0972   13                     INC   DE   
0973   3D                     DEC   A   
0974   20 F2                  JR   NZ,mul2   
0976   C1                     POP   BC   ; Restore the IP
0977   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
0978   FD E9                  JP   (IY)   
097A                             ;*******************************************************************
097A                             ; Subroutines
097A                             ;*******************************************************************
097A                ENTER:       ;=9
097A   60 69                  LD   HL,BC   
097C   CD E8 09               CALL   rpush   ; save Instruction Pointer
097F   C1                     POP   BC   
0980   0B                     DEC   BC   
0981   FD E9                  JP   (IY)   
0983                NSLOOKUP:      
0983   D6 41                  SUB   "A"   
0985   1E 00                  LD   E,0   
0987   18 04                  JR   NSLookup3   
0989                NSLOOKUP2:      
0989   D6 61                  SUB   "a"   
098B   1E 34                  LD   E,26*2   
098D                NSLOOKUP3:      
098D   87                     ADD   A,A   
098E   83                     ADD   A,E   
098F   5F                     LD   E,A   
0990   16 00                  LD   D,0   
0992   2A 06 1B               LD   HL,(vNS)   
0995   19                     ADD   HL,DE   
0996   C9                     RET      
0997                PRINTSTR:      ;=14
0997   E3                     EX   (SP),HL   
0998   18 04                  JR   printStr2   
099A                PRINTSTR1:      
099A   CD 85 00               CALL   putchar   
099D   23                     INC   HL   
099E                PRINTSTR2:      
099E   7E                     LD   A,(HL)   
099F   B7                     OR   A   
09A0   20 F8                  JR   NZ,printStr1   
09A2   23                     INC   HL   
09A3   E3                     EX   (SP),HL   
09A4   C9                     RET      
09A5                PRINTDEC:      ;=36
09A5   11 F0 D8               LD   DE,-10000   
09A8   CD BE 09               CALL   printdec1   
09AB   11 18 FC               LD   DE,-1000   
09AE   CD BE 09               CALL   printdec1   
09B1   11 9C FF               LD   DE,-100   
09B4   CD BE 09               CALL   printdec1   
09B7   1E F6                  LD   E,-10   
09B9   CD BE 09               CALL   printdec1   
09BC   1E FF                  LD   E,-1   
09BE                PRINTDEC1:      
09BE   3E 2F                  LD   A,"0"-1   
09C0                PRINTDEC2:      
09C0   3C                     INC   A   
09C1   19                     ADD   HL,DE   
09C2   38 FC                  JR   C,printdec2   
09C4   ED 52                  SBC   HL,DE   
09C6   C3 85 00               JP   putchar   
09C9                PRINTHEX:      ;=11
09C9                             ; Display HL as a 16-bit number in hex.
09C9   C5                     PUSH   BC   ; preserve the IP
09CA   7C                     LD   A,H   
09CB   CD D4 09               CALL   printhex2   
09CE   7D                     LD   A,L   
09CF   CD D4 09               CALL   printhex2   
09D2   C1                     POP   BC   
09D3   C9                     RET      
09D4                PRINTHEX2:      ;=20
09D4   4F                     LD   C,A   
09D5   1F                     RRA      
09D6   1F                     RRA      
09D7   1F                     RRA      
09D8   1F                     RRA      
09D9   CD DD 09               CALL   printhex3   
09DC   79                     LD   A,C   
09DD                PRINTHEX3:      
09DD   E6 0F                  AND   0x0F   
09DF   C6 90                  ADD   A,0x90   
09E1   27                     DAA      
09E2   CE 40                  ADC   A,0x40   
09E4   27                     DAA      
09E5   C3 85 00               JP   putchar   
09E8                RPUSH:       ;=11
09E8   DD 2B                  DEC   IX   
09EA   DD 74 00               LD   (IX+0),H   
09ED   DD 2B                  DEC   IX   
09EF   DD 75 00               LD   (IX+0),L   
09F2   C9                     RET      
09F3                RPOP:        ;=11
09F3   DD 6E 00               LD   L,(IX+0)   
09F6   DD 23                  INC   IX   
09F8   DD 66 00               LD   H,(IX+0)   
09FB   DD 23                  INC   IX   
09FD                RPOP2:       
09FD   C9                     RET      
09FE                INITOPCODES:      
09FE   21 00 03               LD   HL,iOpcodes   
0A01   11 00 19               LD   DE,opcodes   
0A04   01 00 01               LD   BC,256   
0A07                INITOPCODES1:      
0A07   7E                     LD   A,(HL)   
0A08   12                     LD   (DE),A   
0A09   23                     INC   HL   
0A0A   13                     INC   DE   
0A0B   0B                     DEC   BC   
0A0C   78                     LD   A,B   
0A0D   B1                     OR   C   
0A0E   20 F7                  JR   NZ,initOpcodes1   
0A10   C9                     RET      
0A11                INITOPS:      
0A11   21 00 04               LD   HL,xiOpcodes   
0A14   11 00 19               LD   DE,opcodes   
0A17   01 00 01               LD   BC,256   
0A1A                INITOPS1:      
0A1A   7E                     LD   A,(HL)   
0A1B   23                     INC   HL   
0A1C   CB 27                  SLA   A   
0A1E   C8                     RET   Z   
0A1F   38 09                  JR   C,initOps2   
0A21   CB 3F                  SRL   A   
0A23   4F                     LD   C,A   
0A24   06 00                  LD   B,0   
0A26   ED B0                  LDIR      
0A28   18 F0                  JR   initOps1   
0A2A                INITOPS2:      
0A2A   CB 3F                  SRL   A   
0A2C   47                     LD   B,A   
0A2D   7E                     LD   A,(HL)   
0A2E   23                     INC   HL   
0A2F                INITOPS2A:      
0A2F   12                     LD   (DE),A   
0A30   13                     INC   DE   
0A31   10 FC                  DJNZ   initOps2a   
0A33   18 E5                  JR   initOps1   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                DSTACK:      
1880                          DS   RSIZE   
1900                RSTACK:      
1900                          ALIGN   $100   
1900                OPCODES:      
1900                          DS   $80   
1980                CTRLCODES:      
1980                ALTCODES:      
1980                          DS   $80   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                SYSVARS:      
1B00                VS0:      DS   2   ; a
1B02                VBASE16:   DS   2   ; b
1B04                VTIBPTR:   DS   2   ; c
1B06                VNS:      DS   2   ; d
1B08                VLASTDEF:   DS   2   ; e
1B0A                          DS   2   ; f
1B0C                          DS   2   ; g
1B0E                VHEAPPTR:   DS   2   ; h
1B10                          DS   2   ; i
1B12                          DS   2   ; j
1B14                          DS   2   ; k
1B16                          DS   2   ; l
1B18                          DS   2   ; m
1B1A                          DS   2   ; n
1B1C                          DS   2   ; o
1B1E                          DS   2   ; p
1B20                          DS   2   ; q
1B22                          DS   2   ; r
1B24                          DS   2   ; s
1B26                          DS   2   ; t
1B28                          DS   2   ; u
1B2A                          DS   2   ; v
1B2C                          DS   2   ; w
1B2E                          DS   2   ; x
1B30                          DS   2   ; y
1B32                          DS   2   ; z
1B34                          DS   2   ; 
1B36                VBYTEMODE:   DS   2   ; 
1B38                          DS   $30   
1B68                TBPTR:    DS   2   ; reserved for tests
1B6A                RST08:    DS   2   
1B6C                RST10:    DS   2   
1B6E                RST18:    DS   2   
1B70                RST20:    DS   2   
1B72                RST28:    DS   2   
1B74                RST30:    DS   2   ; 
1B76                BAUD:     DS   2   ; 
1B78                INTVEC:   DS   2   ; 
1B7A                NMIVEC:   DS   2   ; 
1B7C                GETCVEC:   DS   2   ; 
1B7E                PUTCVEC:   DS   2   ; 
1B80                             ; ****************************************************************
1B80                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1B80                             ; ****************************************************************
1B80                          ALIGN   $40   
1B68                          .ORG   $-($80-26*2*2)   
1B68                          DS   ($80-26*2*2)   ; 12 bytes free vars for NS 0
1B80                NS0:      DS   NSSIZE * NSNUM   
1E00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 27 IN MINT.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 87 IN MINT.asm
                    > USED AT LINE 1479 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 113 IN MINT.asm
                    > USED AT LINE 935 IN MINT.asm
                    > USED AT LINE 1101 IN MINT.asm
                    > USED AT LINE 1393 IN MINT.asm
                    > USED AT LINE 1590 IN MINT.asm
                    > USED AT LINE 1669 IN MINT.asm
                    > USED AT LINE 1697 IN MINT.asm
                    > USED AT LINE 1723 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 17 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 1351 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 34 IN MINT.asm
                    > USED AT LINE 914 IN MINT.asm
EMPTY:              0000 DEFINED AT LINE 18 IN MINT.asm
NSNUM:              0005 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 196 IN MINT.asm
                    > USED AT LINE 73 IN ram.asm
NSSIZE:             0080 DEFINED AT LINE 21 IN MINT.asm
                    > USED AT LINE 196 IN MINT.asm
                    > USED AT LINE 73 IN ram.asm
ISYSVARS:           0180 DEFINED AT LINE 32 IN MINT.asm
                    > USED AT LINE 187 IN MINT.asm
ETX:                0190 DEFINED AT LINE 42 IN MINT.asm
                    > USED AT LINE 953 IN MINT.asm
ETX1:               0199 DEFINED AT LINE 47 IN MINT.asm
                    > USED AT LINE 45 IN MINT.asm
START:              019B DEFINED AT LINE 50 IN MINT.asm
                    > USED AT LINE 6
INTERPRET:          01B0 DEFINED AT LINE 56 IN MINT.asm
                    > USED AT LINE 48 IN MINT.asm
INTERPRET2:         01BA DEFINED AT LINE 62 IN MINT.asm
                    > USED AT LINE 106 IN MINT.asm
INTERPRET3:         01C2 DEFINED AT LINE 69 IN MINT.asm
                    > USED AT LINE 78 IN MINT.asm
INTERPRET4:         01C8 DEFINED AT LINE 75 IN MINT.asm
                    > USED AT LINE 67 IN MINT.asm
WAITCHAR:           01CD DEFINED AT LINE 86 IN MINT.asm
                    > USED AT LINE 115 IN MINT.asm
                    > USED AT LINE 129 IN MINT.asm
MACRO:              01DC DEFINED AT LINE 95 IN MINT.asm
WAITCHAR1:          01F5 DEFINED AT LINE 108 IN MINT.asm
                    > USED AT LINE 89 IN MINT.asm
WAITCHAR3:          0203 DEFINED AT LINE 117 IN MINT.asm
                    > USED AT LINE 93 IN MINT.asm
WAITCHAR4:          0219 DEFINED AT LINE 133 IN MINT.asm
                    > USED AT LINE 91 IN MINT.asm
NEXT:               0221 DEFINED AT LINE 160 IN MINT.asm
                    > USED AT LINE 182 IN MINT.asm
                    > USED AT LINE 186 IN MINT.asm
                    > USED AT LINE 920 IN MINT.asm
                    > USED AT LINE 974 IN MINT.asm
                    > USED AT LINE 1274 IN MINT.asm
                    > USED AT LINE 1438 IN MINT.asm
                    > USED AT LINE 1445 IN MINT.asm
COMPNEXT:           022A DEFINED AT LINE 170 IN MINT.asm
                    > USED AT LINE 916 IN MINT.asm
COMPNEXT1:          0238 DEFINED AT LINE 180 IN MINT.asm
                    > USED AT LINE 177 IN MINT.asm
INITIALIZE:         023D DEFINED AT LINE 184 IN MINT.asm
                    > USED AT LINE 52 IN MINT.asm
NESTING:            0261 DEFINED AT LINE 213 IN MINT.asm
                    > USED AT LINE 73 IN MINT.asm
                    > USED AT LINE 114 IN MINT.asm
                    > USED AT LINE 1138 IN MINT.asm
NESTING1A:          026C DEFINED AT LINE 220 IN MINT.asm
                    > USED AT LINE 217 IN MINT.asm
NESTING1:           026F DEFINED AT LINE 223 IN MINT.asm
                    > USED AT LINE 215 IN MINT.asm
NESTING2:           027E DEFINED AT LINE 232 IN MINT.asm
                    > USED AT LINE 227 IN MINT.asm
                    > USED AT LINE 229 IN MINT.asm
NESTING3:           0280 DEFINED AT LINE 235 IN MINT.asm
                    > USED AT LINE 231 IN MINT.asm
NESTING4:           028B DEFINED AT LINE 242 IN MINT.asm
                    > USED AT LINE 237 IN MINT.asm
                    > USED AT LINE 239 IN MINT.asm
PROMPT:             028D DEFINED AT LINE 246 IN MINT.asm
                    > USED AT LINE 57 IN MINT.asm
                    > USED AT LINE 1452 IN MINT.asm
CRLF:               0296 DEFINED AT LINE 251 IN MINT.asm
                    > USED AT LINE 126 IN MINT.asm
                    > USED AT LINE 1487 IN MINT.asm
MACROS:             029D DEFINED AT LINE 260 IN MINT.asm
BACKSP_:            029D DEFINED AT LINE 1 IN MINT.asm
REEDIT_:            02B4 DEFINED AT LINE 4 IN MINT.asm
EDIT_:              02BB DEFINED AT LINE 7 IN MINT.asm
LIST_:              02C6 DEFINED AT LINE 10 IN MINT.asm
PRINTSTACK_:        02E2 DEFINED AT LINE 13 IN MINT.asm
TOGGLEBASE_:        02EF DEFINED AT LINE 16 IN MINT.asm
IOPCODES:           0300 DEFINED AT LINE 269 IN MINT.asm
                    > USED AT LINE 1741 IN MINT.asm
ICTRLCODES:         0380 DEFINED AT LINE 406 IN MINT.asm
IALTCODES:          0380 DEFINED AT LINE 407 IN MINT.asm
XIOPCODES:          0400 DEFINED AT LINE 551 IN MINT.asm
                    > USED AT LINE 1757 IN MINT.asm
PAGE4:              0600 DEFINED AT LINE 863 IN MINT.asm
AND_:               0600 DEFINED AT LINE 865 IN MINT.asm
AND1:               0607 DEFINED AT LINE 873 IN MINT.asm
                    > USED AT LINE 887 IN MINT.asm
                    > USED AT LINE 898 IN MINT.asm
OR_:                060B DEFINED AT LINE 879 IN MINT.asm
XOR_:               0614 DEFINED AT LINE 889 IN MINT.asm
XOR1:               0615 DEFINED AT LINE 891 IN MINT.asm
                    > USED AT LINE 902 IN MINT.asm
INV_:               061D DEFINED AT LINE 900 IN MINT.asm
ADD_:               0622 DEFINED AT LINE 904 IN MINT.asm
ARRDEF_:            0628 DEFINED AT LINE 912 IN MINT.asm
ARRDEF:             0628 DEFINED AT LINE 913 IN MINT.asm
ARRDEF1:            062A DEFINED AT LINE 915 IN MINT.asm
                    > USED AT LINE 1352 IN MINT.asm
CALL_:              063A DEFINED AT LINE 922 IN MINT.asm
DOT_:               0644 DEFINED AT LINE 930 IN MINT.asm
DOT2:               0648 DEFINED AT LINE 933 IN MINT.asm
                    > USED AT LINE 941 IN MINT.asm
HDOT_:              064F DEFINED AT LINE 938 IN MINT.asm
DROP_:              0655 DEFINED AT LINE 943 IN MINT.asm
DUP_:               0658 DEFINED AT LINE 947 IN MINT.asm
ETX_:               065D DEFINED AT LINE 952 IN MINT.asm
EXIT_:              0660 DEFINED AT LINE 955 IN MINT.asm
FETCH_:             066A DEFINED AT LINE 963 IN MINT.asm
FETCH1:             066B DEFINED AT LINE 965 IN MINT.asm
                    > USED AT LINE 1600 IN MINT.asm
NOP_:               0671 DEFINED AT LINE 973 IN MINT.asm
OVER_:              0674 DEFINED AT LINE 977 IN MINT.asm
RET_:               067B DEFINED AT LINE 985 IN MINT.asm
SHL_:               0682 DEFINED AT LINE 991 IN MINT.asm
SHR_:               0687 DEFINED AT LINE 998 IN MINT.asm
SHR1:               0688 DEFINED AT LINE 1000 IN MINT.asm
                    > USED AT LINE 1388 IN MINT.asm
STORE_:             068F DEFINED AT LINE 1006 IN MINT.asm
SWAP_:              0696 DEFINED AT LINE 1015 IN MINT.asm
SUB_:               069B DEFINED AT LINE 1021 IN MINT.asm
SUB2:               069D DEFINED AT LINE 1025 IN MINT.asm
                    > USED AT LINE 1034 IN MINT.asm
NEG_:               06A3 DEFINED AT LINE 1031 IN MINT.asm
EQ_:                06A9 DEFINED AT LINE 1036 IN MINT.asm
GT_:                06B5 DEFINED AT LINE 1045 IN MINT.asm
LT_:                06B9 DEFINED AT LINE 1050 IN MINT.asm
CMP_:               06BB DEFINED AT LINE 1054 IN MINT.asm
                    > USED AT LINE 1048 IN MINT.asm
EQUAL:              06C6 DEFINED AT LINE 1060 IN MINT.asm
                    > USED AT LINE 1041 IN MINT.asm
LESS:               06C7 DEFINED AT LINE 1062 IN MINT.asm
                    > USED AT LINE 1043 IN MINT.asm
                    > USED AT LINE 1057 IN MINT.asm
                    > USED AT LINE 1059 IN MINT.asm
VAR_:               06CA DEFINED AT LINE 1066 IN MINT.asm
AGAIN_:             06D1 DEFINED AT LINE 1072 IN MINT.asm
ALT_:               06D4 DEFINED AT LINE 1074 IN MINT.asm
ARREND_:            06D7 DEFINED AT LINE 1076 IN MINT.asm
GETREF_:            06DA DEFINED AT LINE 1078 IN MINT.asm
MUL_:               06DD DEFINED AT LINE 1080 IN MINT.asm
HEX_:               06E0 DEFINED AT LINE 1082 IN MINT.asm
DEF_:               06E3 DEFINED AT LINE 1084 IN MINT.asm
BEGIN_:             06E6 DEFINED AT LINE 1086 IN MINT.asm
NUM_:               06E8 DEFINED AT LINE 1088 IN MINT.asm
DIV_:               06EA DEFINED AT LINE 1090 IN MINT.asm
STR_:               06EC DEFINED AT LINE 1092 IN MINT.asm
STR:                06EC DEFINED AT LINE 1093 IN MINT.asm
STR1:               06ED DEFINED AT LINE 1096 IN MINT.asm
                    > USED AT LINE 1102 IN MINT.asm
STR2:               06F8 DEFINED AT LINE 1104 IN MINT.asm
                    > USED AT LINE 1100 IN MINT.asm
BEGIN:              06FB DEFINED AT LINE 1116 IN MINT.asm
                    > USED AT LINE 1086 IN MINT.asm
BEGIN1:             071C DEFINED AT LINE 1133 IN MINT.asm
                    > USED AT LINE 1120 IN MINT.asm
                    > USED AT LINE 1403 IN MINT.asm
                    > USED AT LINE 1516 IN MINT.asm
BEGIN2:             071E DEFINED AT LINE 1135 IN MINT.asm
                    > USED AT LINE 1141 IN MINT.asm
BEGIN3:             0727 DEFINED AT LINE 1142 IN MINT.asm
NUM:                0729 DEFINED AT LINE 1157 IN MINT.asm
                    > USED AT LINE 1088 IN MINT.asm
NUM1:               072D DEFINED AT LINE 1161 IN MINT.asm
                    > USED AT LINE 1185 IN MINT.asm
NUM2:               0747 DEFINED AT LINE 1187 IN MINT.asm
                    > USED AT LINE 1173 IN MINT.asm
                    > USED AT LINE 1175 IN MINT.asm
                    > USED AT LINE 1249 IN MINT.asm
                    > USED AT LINE 1251 IN MINT.asm
DIV:                074B DEFINED AT LINE 1205 IN MINT.asm
                    > USED AT LINE 1090 IN MINT.asm
DIV1:               0755 DEFINED AT LINE 1215 IN MINT.asm
                    > USED AT LINE 1228 IN MINT.asm
DIV2:               0762 DEFINED AT LINE 1224 IN MINT.asm
                    > USED AT LINE 1221 IN MINT.asm
DIV3:               0763 DEFINED AT LINE 1226 IN MINT.asm
                    > USED AT LINE 1223 IN MINT.asm
DIV4:               0768 DEFINED AT LINE 1231 IN MINT.asm
HEX:                076D DEFINED AT LINE 1239 IN MINT.asm
                    > USED AT LINE 1082 IN MINT.asm
HEX1:               0770 DEFINED AT LINE 1241 IN MINT.asm
                    > USED AT LINE 1258 IN MINT.asm
HEX2:               0778 DEFINED AT LINE 1247 IN MINT.asm
                    > USED AT LINE 1245 IN MINT.asm
ARREND:             078A DEFINED AT LINE 1260 IN MINT.asm
                    > USED AT LINE 1076 IN MINT.asm
ARREND2:            079F DEFINED AT LINE 1272 IN MINT.asm
                    > USED AT LINE 1269 IN MINT.asm
DEF:                07A6 DEFINED AT LINE 1287 IN MINT.asm
                    > USED AT LINE 1084 IN MINT.asm
DEF1:               07B6 DEFINED AT LINE 1297 IN MINT.asm
                    > USED AT LINE 1304 IN MINT.asm
DEF2:               07C0 DEFINED AT LINE 1306 IN MINT.asm
                    > USED AT LINE 1303 IN MINT.asm
DEF3:               07C1 DEFINED AT LINE 1308 IN MINT.asm
AGAIN:              07C7 DEFINED AT LINE 1312 IN MINT.asm
                    > USED AT LINE 1072 IN MINT.asm
AGAIN1:             07D9 DEFINED AT LINE 1325 IN MINT.asm
                    > USED AT LINE 1319 IN MINT.asm
AGAIN2:             07F3 DEFINED AT LINE 1337 IN MINT.asm
                    > USED AT LINE 1330 IN MINT.asm
AGAIN3:             07F6 DEFINED AT LINE 1339 IN MINT.asm
                    > USED AT LINE 1323 IN MINT.asm
PAGE6:              0800 DEFINED AT LINE 1348 IN MINT.asm
CARRDEF_:           0800 DEFINED AT LINE 1350 IN MINT.asm
CFETCH_:            0805 DEFINED AT LINE 1354 IN MINT.asm
ANOP_:              080A DEFINED AT LINE 1359 IN MINT.asm
CHARCODE_:          080C DEFINED AT LINE 1362 IN MINT.asm
COMMENT_:           0811 DEFINED AT LINE 1367 IN MINT.asm
                    > USED AT LINE 1371 IN MINT.asm
CSTORE_:            081A DEFINED AT LINE 1375 IN MINT.asm
DEPTH_:             081F DEFINED AT LINE 1381 IN MINT.asm
EMIT_:              082D DEFINED AT LINE 1390 IN MINT.asm
IFTE_:              0834 DEFINED AT LINE 1396 IN MINT.asm
IFTE1:              083E DEFINED AT LINE 1404 IN MINT.asm
                    > USED AT LINE 1400 IN MINT.asm
EXEC_:              0846 DEFINED AT LINE 1409 IN MINT.asm
EXEC1:              084B DEFINED AT LINE 1412 IN MINT.asm
                    > USED AT LINE 1410 IN MINT.asm
GO_:                084E DEFINED AT LINE 1417 IN MINT.asm
GO1:                084F DEFINED AT LINE 1419 IN MINT.asm
                    > USED AT LINE 928 IN MINT.asm
GO2:                085B DEFINED AT LINE 1427 IN MINT.asm
                    > USED AT LINE 1422 IN MINT.asm
NSCALL_:            085D DEFINED AT LINE 1430 IN MINT.asm
NSCALL2:            087A DEFINED AT LINE 1442 IN MINT.asm
                    > USED AT LINE 1435 IN MINT.asm
NSEXIT_:            0882 DEFINED AT LINE 1446 IN MINT.asm
                    > USED AT LINE 1441 IN MINT.asm
PROMPT_:            088A DEFINED AT LINE 1451 IN MINT.asm
SYSVAR_:            088F DEFINED AT LINE 1455 IN MINT.asm
I_:                 0899 DEFINED AT LINE 1464 IN MINT.asm
INPORT_:            089D DEFINED AT LINE 1468 IN MINT.asm
KEY_:               08A8 DEFINED AT LINE 1478 IN MINT.asm
KEY1:               08AB DEFINED AT LINE 1480 IN MINT.asm
                    > USED AT LINE 1365 IN MINT.asm
NEWLN_:             08B1 DEFINED AT LINE 1486 IN MINT.asm
OUTPORT_:           08B6 DEFINED AT LINE 1490 IN MINT.asm
ROT_:               08BF DEFINED AT LINE 1499 IN MINT.asm
BREAK_:             08C6 DEFINED AT LINE 1507 IN MINT.asm
BREAK1:             08CD DEFINED AT LINE 1513 IN MINT.asm
                    > USED AT LINE 1511 IN MINT.asm
NSENTER_:           08D5 DEFINED AT LINE 1518 IN MINT.asm
NSENTER1:           08D6 DEFINED AT LINE 1520 IN MINT.asm
                    > USED AT LINE 1432 IN MINT.asm
EDITDEF_:           08F4 DEFINED AT LINE 1537 IN MINT.asm
PRINTSTK_:          08F6 DEFINED AT LINE 1540 IN MINT.asm
PRINTSTK:           08F6 DEFINED AT LINE 1541 IN MINT.asm
EDITDEF:            0916 DEFINED AT LINE 1556 IN MINT.asm
                    > USED AT LINE 1538 IN MINT.asm
EDITDEF1:           0932 DEFINED AT LINE 1574 IN MINT.asm
                    > USED AT LINE 1580 IN MINT.asm
EDITDEF2:           0933 DEFINED AT LINE 1576 IN MINT.asm
                    > USED AT LINE 1573 IN MINT.asm
EDITDEF3:           093B DEFINED AT LINE 1581 IN MINT.asm
                    > USED AT LINE 1568 IN MINT.asm
WRITECHAR:          0946 DEFINED AT LINE 1587 IN MINT.asm
                    > USED AT LINE 1570 IN MINT.asm
                    > USED AT LINE 1572 IN MINT.asm
                    > USED AT LINE 1578 IN MINT.asm
GETREF:             094B DEFINED AT LINE 1596 IN MINT.asm
                    > USED AT LINE 1078 IN MINT.asm
ALT:                0953 DEFINED AT LINE 1602 IN MINT.asm
                    > USED AT LINE 1074 IN MINT.asm
MUL:                095E DEFINED AT LINE 1614 IN MINT.asm
                    > USED AT LINE 1080 IN MINT.asm
MUL2:               0968 DEFINED AT LINE 1623 IN MINT.asm
                    > USED AT LINE 1632 IN MINT.asm
ENTER:              097A DEFINED AT LINE 1641 IN MINT.asm
                    > USED AT LINE 103 IN MINT.asm
                    > USED AT LINE 1439 IN MINT.asm
                    > USED AT LINE 1543 IN MINT.asm
NSLOOKUP:           0983 DEFINED AT LINE 1648 IN MINT.asm
                    > USED AT LINE 924 IN MINT.asm
                    > USED AT LINE 1292 IN MINT.asm
                    > USED AT LINE 1436 IN MINT.asm
                    > USED AT LINE 1561 IN MINT.asm
                    > USED AT LINE 1599 IN MINT.asm
NSLOOKUP2:          0989 DEFINED AT LINE 1652 IN MINT.asm
                    > USED AT LINE 1068 IN MINT.asm
                    > USED AT LINE 1443 IN MINT.asm
NSLOOKUP3:          098D DEFINED AT LINE 1655 IN MINT.asm
                    > USED AT LINE 1651 IN MINT.asm
PRINTSTR:           0997 DEFINED AT LINE 1664 IN MINT.asm
                    > USED AT LINE 53 IN MINT.asm
                    > USED AT LINE 247 IN MINT.asm
                    > USED AT LINE 252 IN MINT.asm
PRINTSTR1:          099A DEFINED AT LINE 1668 IN MINT.asm
                    > USED AT LINE 1675 IN MINT.asm
PRINTSTR2:          099E DEFINED AT LINE 1672 IN MINT.asm
                    > USED AT LINE 1666 IN MINT.asm
PRINTDEC:           09A5 DEFINED AT LINE 1680 IN MINT.asm
                    > USED AT LINE 932 IN MINT.asm
PRINTDEC1:          09BE DEFINED AT LINE 1690 IN MINT.asm
                    > USED AT LINE 1682 IN MINT.asm
                    > USED AT LINE 1684 IN MINT.asm
                    > USED AT LINE 1686 IN MINT.asm
                    > USED AT LINE 1688 IN MINT.asm
PRINTDEC2:          09C0 DEFINED AT LINE 1692 IN MINT.asm
                    > USED AT LINE 1695 IN MINT.asm
PRINTHEX:           09C9 DEFINED AT LINE 1699 IN MINT.asm
                    > USED AT LINE 940 IN MINT.asm
PRINTHEX2:          09D4 DEFINED AT LINE 1709 IN MINT.asm
                    > USED AT LINE 1703 IN MINT.asm
                    > USED AT LINE 1705 IN MINT.asm
PRINTHEX3:          09DD DEFINED AT LINE 1717 IN MINT.asm
                    > USED AT LINE 1715 IN MINT.asm
RPUSH:              09E8 DEFINED AT LINE 1725 IN MINT.asm
                    > USED AT LINE 919 IN MINT.asm
                    > USED AT LINE 1406 IN MINT.asm
                    > USED AT LINE 1424 IN MINT.asm
                    > USED AT LINE 1531 IN MINT.asm
                    > USED AT LINE 1643 IN MINT.asm
RPOP:               09F3 DEFINED AT LINE 1732 IN MINT.asm
                    > USED AT LINE 958 IN MINT.asm
                    > USED AT LINE 986 IN MINT.asm
                    > USED AT LINE 1261 IN MINT.asm
                    > USED AT LINE 1447 IN MINT.asm
RPOP2:              09FD DEFINED AT LINE 1737 IN MINT.asm
                    > USED AT LINE 1431 IN MINT.asm
INITOPCODES:        09FE DEFINED AT LINE 1740 IN MINT.asm
                    > USED AT LINE 199 IN MINT.asm
INITOPCODES1:       0A07 DEFINED AT LINE 1745 IN MINT.asm
                    > USED AT LINE 1753 IN MINT.asm
INITOPS:            0A11 DEFINED AT LINE 1756 IN MINT.asm
INITOPS1:           0A1A DEFINED AT LINE 1761 IN MINT.asm
                    > USED AT LINE 1771 IN MINT.asm
                    > USED AT LINE 1782 IN MINT.asm
INITOPS2:           0A2A DEFINED AT LINE 1773 IN MINT.asm
                    > USED AT LINE 1766 IN MINT.asm
INITOPS2A:          0A2F DEFINED AT LINE 1778 IN MINT.asm
                    > USED AT LINE 1781 IN MINT.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             1880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 33 IN MINT.asm
                    > USED AT LINE 43 IN MINT.asm
                    > USED AT LINE 46 IN MINT.asm
                    > USED AT LINE 51 IN MINT.asm
                    > USED AT LINE 1385 IN MINT.asm
RSTACK:             1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 185 IN MINT.asm
OPCODES:            1900 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 1742 IN MINT.asm
                    > USED AT LINE 1758 IN MINT.asm
CTRLCODES:          1980 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 97 IN MINT.asm
ALTCODES:           1980 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 1605 IN MINT.asm
TIB:                1A00 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 66 IN MINT.asm
                    > USED AT LINE 109 IN MINT.asm
                    > USED AT LINE 118 IN MINT.asm
                    > USED AT LINE 135 IN MINT.asm
                    > USED AT LINE 1567 IN MINT.asm
                    > USED AT LINE 1582 IN MINT.asm
MINTVARS:           1B00 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1457 IN MINT.asm
SYSVARS:            1B00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 188 IN MINT.asm
                    > USED AT LINE 1457 IN MINT.asm
VS0:                1B00 DEFINED AT LINE 23 IN ram.asm
VBASE16:            1B02 DEFINED AT LINE 24 IN ram.asm
VTIBPTR:            1B04 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 60 IN MINT.asm
                    > USED AT LINE 96 IN MINT.asm
                    > USED AT LINE 105 IN MINT.asm
                    > USED AT LINE 134 IN MINT.asm
                    > USED AT LINE 1585 IN MINT.asm
VNS:                1B06 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 1448 IN MINT.asm
                    > USED AT LINE 1530 IN MINT.asm
                    > USED AT LINE 1534 IN MINT.asm
                    > USED AT LINE 1660 IN MINT.asm
VLASTDEF:           1B08 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 1290 IN MINT.asm
VHEAPPTR:           1B0E DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 172 IN MINT.asm
                    > USED AT LINE 181 IN MINT.asm
                    > USED AT LINE 918 IN MINT.asm
                    > USED AT LINE 1264 IN MINT.asm
                    > USED AT LINE 1293 IN MINT.asm
                    > USED AT LINE 1309 IN MINT.asm
VBYTEMODE:          1B36 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 174 IN MINT.asm
                    > USED AT LINE 917 IN MINT.asm
                    > USED AT LINE 1267 IN MINT.asm
TBPTR:              1B68 DEFINED AT LINE 53 IN ram.asm
RST08:              1B6A DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B6C DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B6E DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B70 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B72 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B74 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B76 DEFINED AT LINE 61 IN ram.asm
INTVEC:             1B78 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B7A DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B7C DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B7E DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NS0:                1B80 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 36 IN MINT.asm
                    > USED AT LINE 192 IN MINT.asm
                    > USED AT LINE 1532 IN MINT.asm
HEAP:               1E00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 40 IN MINT.asm
