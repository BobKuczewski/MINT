0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1B               LD   (RST08),HL   
0094   22 38 1B               LD   (RST10),HL   
0097   22 3A 1B               LD   (RST18),HL   
009A   22 3C 1B               LD   (RST20),HL   
009D   22 3E 1B               LD   (RST28),HL   
00A0   22 40 1B               LD   (RST30),HL   
00A3   22 44 1B               LD   (INTVEC),HL   
00A6   22 46 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 9B 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   
00C6                NSNUM:    EQU   5   ; namespaces
00C6                NSSIZE:   EQU   $80   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 DB len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 DB (len | $80)
00C6                 DB data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 DB 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      
0180   00 1A                  DW   dStack   ; a vS0
0182   00 00                  DW   FALSE   ; b vBase16
0184   00 00                  DW   0   ; c vTIBPtr
0186   C0 1B                  DW   NS0   ; d vNS
0188   41 00                  DW   65   ; e vLastDef "A"
018A   00 00                  DW   0   ; f
018C   00 06                  DW   page6   ; g
018E   40 1E                  DW   HEAP   ; h vHeapPtr
0190                ETX:         ;=12
0190   21 00 E6               LD   HL,-DSTACK   
0193   39                     ADD   HL,SP   
0194   30 03                  JR   NC,etx1   
0196   31 00 1A               LD   SP,DSTACK   
0199                ETX1:        
0199   18 15                  JR   interpret   
019B                START:       
019B   31 00 1A               LD   SP,DSTACK   
019E   CD 3D 02               CALL   init   
01A1   CD 5A 03               CALL   printStr   
01A4   4D 49 4E 54 20 56 31 2E 31 0D 0A 00 .CSTR   "MINT V1.1\r\n"   
01B0                INTERPRET:      
01B0   CD EE 03               CALL   prompt   
01B3   01 00 00               LD   BC,0   ; load BC with offset into TIB
01B6   ED 43 84 1B            LD   (vTIBPtr),BC   
01BA                INTERPRET2:      ; calc nesting (a macro might have changed it)
01BA   1E 00                  LD   E,0   ; initilize nesting value
01BC   C5                     PUSH   BC   ; save offset into TIB,
01BD                             ; BC is also the count of chars in TIB
01BD   21 00 18               LD   HL,TIB   ; HL is start of TIB
01C0   18 06                  JR   interpret4   
01C2                INTERPRET3:      
01C2   7E                     LD   A,(HL)   ; A = char in TIB
01C3   23                     INC   HL   ; inc pointer into TIB
01C4   0B                     DEC   BC   ; dec count of chars in TIB
01C5   CD C2 03               CALL   nesting   ; update nesting value
01C8                INTERPRET4:      
01C8   79                     LD   A,C   ; is count zero?
01C9   B0                     OR   B   
01CA   20 F6                  JR   NZ,interpret3   ; if not loop
01CC   C1                     POP   BC   ; restore offset into TIB
01CD                             ; *******************************************************************
01CD                             ; Wait for a character from the serial input (keyboard)
01CD                             ; and store it in the text buffer. Keep accepting characters,
01CD                             ; increasing the instruction pointer BC - until a newline received.
01CD                             ; *******************************************************************
01CD                WAITCHAR:      
01CD   CD 81 00               CALL   getchar   ; loop around waiting for character
01D0   FE 20                  CP   $20   
01D2   30 21                  JR   NC,waitchar1   
01D4   FE 00                  CP   $0   ; is it end of string?
01D6   28 41                  JR   Z,waitchar4   
01D8   FE 0D                  CP   "\r"   ; carriage return?
01DA   28 27                  JR   Z,waitchar3   
01DC                             ; LD D,0
01DC                MACRO:       ;=25
01DC   ED 43 84 1B            LD   (vTIBPtr),BC   
01E0   21 80 1A               LD   HL,ctrlCodes   
01E3   85                     ADD   A,L   
01E4   6F                     LD   L,A   
01E5   5E                     LD   E,(HL)   
01E6   16 02                  LD   D,msb(macros)   
01E8   D5                     PUSH   DE   
01E9   CD 81 02               CALL   ENTER   
01EC   5C 5E 00               .CSTR   "\\^"   
01EF   ED 4B 84 1B            LD   BC,(vTIBPtr)   
01F3   18 C5                  JR   interpret2   
01F5                WAITCHAR1:      
01F5   21 00 18               LD   HL,TIB   
01F8   09                     ADD   HL,BC   
01F9   77                     LD   (HL),A   ; store the character in textbuf
01FA   03                     INC   BC   
01FB   CD 85 00               CALL   putchar   ; echo character to screen
01FE   CD C2 03               CALL   nesting   
0201   18 CA                  JR   waitchar   ; wait for next character
0203                WAITCHAR3:      
0203   21 00 18               LD   HL,TIB   
0206   09                     ADD   HL,BC   
0207   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0209   23                     INC   HL   
020A   36 0A                  LD   (HL),"\n"   
020C   23                     INC   HL   ; ????
020D   03                     INC   BC   
020E   03                     INC   BC   
020F   CD F7 03               CALL   crlf   ; echo character to screen
0212   7B                     LD   A,E   ; if zero nesting append and ETX after \r
0213   B7                     OR   A   
0214   20 B7                  JR   NZ,waitchar   
0216   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0218   03                     INC   BC   
0219                WAITCHAR4:      
0219   ED 43 84 1B            LD   (vTIBPtr),BC   
021D   01 00 18               LD   BC,TIB   ; Instructions stored on heap at address HERE
0220   0B                     DEC   BC   
0221                             ; ********************************************************************************
0221                             ; 
0221                             ; Dispatch Routine.
0221                             ; 
0221                             ; Get the next character and form a 1 byte jump address
0221                             ; 
0221                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
0221                             ; jump to the selected function.
0221                             ; 
0221                             ; Individual handler routines will deal with each category:
0221                             ; 
0221                             ; 1. Detect characters A-Z and jump to the User Command handler routine
0221                             ; 
0221                             ; 2. Detect characters a-z and jump to the variable handler routine
0221                             ; 
0221                             ; 3. All other characters are punctuation and cause a jump to the associated
0221                             ; primitive code.
0221                             ; 
0221                             ; Instruction Pointer IP BC is incremented
0221                             ; 
0221                             ; *********************************************************************************
0221                NEXT:        ;=9
0221   03                     INC   BC   ;       Increment the IP
0222   0A                     LD   A,(BC)   ;       Get the next character and dispatch
0223   6F                     LD   L,A   ;       Index into table
0224   26 1A                  LD   H,msb(opcodes)   ;       Start address of jump table
0226   6E                     LD   L,(HL)   ;       get low jump address
0227   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
0229   E9                     JP   (HL)   ;       Jump to routine
022A                             ; ARRAY compilation routine
022A                COMPNEXT:      ;=20
022A   D1                     POP   DE   ; DE = return address
022B   2A 8E 1B               LD   HL,(vHeapPtr)   ; load heap ptr
022E   73                     LD   (HL),E   ; store lsb
022F   3A 02 1B               LD   A,(vByteMode)   
0232   23                     INC   HL   
0233   B7                     OR   A   
0234   20 02                  JR   NZ,compNext1   
0236   72                     LD   (HL),D   
0237   23                     INC   HL   
0238                COMPNEXT1:      
0238   22 8E 1B               LD   (vHeapPtr),HL   ; save heap ptr
023B   18 E4                  JR   NEXT   
023D                INIT:        ;=68
023D   DD 21 80 19            LD   IX,RSTACK   
0241   FD 21 21 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
0245   21 80 01               LD   HL,ialtVars   
0248   11 80 1B               LD   DE,altVars   
024B   01 10 00               LD   BC,8 * 2   
024E   ED B0                  LDIR      
0250   21 C0 1B               LD   HL,NS0   ; init namespaces to 0
0253   54 5D                  LD   DE,HL   
0255   13                     INC   DE   
0256   36 00                  LD   (HL),0   
0258   01 80 02               LD   BC,NSNUM*NSSIZE   
025B   ED B0                  LDIR      
025D                INITOPS:      
025D   21 E1 02               LD   HL,iOpcodes   
0260   11 00 1A               LD   DE,opcodes   
0263   01 00 01               LD   BC,256   
0266                INITOPS1:      
0266   7E                     LD   A,(HL)   
0267   23                     INC   HL   
0268   CB 27                  SLA   A   
026A   C8                     RET   Z   
026B   38 09                  JR   C,initOps2   
026D   CB 3F                  SRL   A   
026F   4F                     LD   C,A   
0270   06 00                  LD   B,0   
0272   ED B0                  LDIR      
0274   18 F0                  JR   initOps1   
0276                INITOPS2:      
0276   CB 3F                  SRL   A   
0278   47                     LD   B,A   
0279   7E                     LD   A,(HL)   
027A   23                     INC   HL   
027B                INITOPS2A:      
027B   12                     LD   (DE),A   
027C   13                     INC   DE   
027D   10 FC                  DJNZ   initOps2a   
027F   18 E5                  JR   initOps1   
0281                ENTER:       ;=9
0281   60 69                  LD   HL,BC   
0283   CD AC 03               CALL   rpush   ; save Instruction Pointer
0286   C1                     POP   BC   
0287   0B                     DEC   BC   
0288   FD E9                  JP   (IY)   
028A                             ; **************************************************************************
028A                             ; Macros must be written in Mint and end with ;
028A                             ; this code must not span pages
028A                             ; **************************************************************************
028A                MACROS:      
028A                BACKSP_:      
028A   5C 63 40 30 3D 30 3D 28 5C 63 40 31 2D 5C 63 21 60 08 20 08 60 29 3B DB   "\\c@0=0=(\\c@1-\\c!`\b \b`);"   
02A1                REEDIT_:      
02A1   5C 65 5C 40 5C 23 35 3B DB   "\\e\\@\\#5;"   
02A9                EDIT_:       
02A9   60 3F 60 3F 5C 3E 5C 23 35 3B 00 .CSTR   "`?`?\\>\\#5;"   
02B4                LIST_:       
02B4   5C 24 32 36 28 5C 69 40 36 35 2B 5C 23 35 5C 63 40 30 3E 28 5C 24 29 29 5C 3E 3B 00 .CSTR   "\\$26(\\i@65+\\#5\\c@0>(\\$))\\>;"   
02D0                PRINTSTACK_:      
02D0   5C 23 34 5C 3E 3B 00   .CSTR   "\\#4\\>;"   
02D7                TOGGLEBASE_:      
02D7   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
02E1                IOPCODES:      
02E1                          ;*Macro unroll:  LITDAT 4
02E1   04                     DB   4   
02E2   60                     DB   lsb(exit_)   ;   NUL
02E3   7A                     DB   lsb(nop_)   ;   SOH
02E4   7A                     DB   lsb(nop_)   ;   STX
02E5   5D                     DB   lsb(etx_)   ;   ETX
02E6                          ;*Macro unroll:  REPDAT 29, lsb(nop_)
02E6   9D                     DB   (29 | $80)   
02E7   7A                     DB   lsb(nop_)   
02E8                          ;*Macro unroll:  LITDAT 15
02E8   0F                     DB   15   
02E9   9F                     DB   lsb(store_)   ;   !
02EA   58                     DB   lsb(dup_)   ;   "
02EB   ED                     DB   lsb(hex_)   ;    #
02EC   A6                     DB   lsb(swap_)   ;    $
02ED   7D                     DB   lsb(over_)   ;    %
02EE   00                     DB   lsb(and_)   ;    &
02EF   55                     DB   lsb(drop_)   ;    '
02F0   FA                     DB   lsb(begin_)   ;    (
02F1   E1                     DB   lsb(again_)   ;    )
02F2   EA                     DB   lsb(mul_)   ;    *
02F3   22                     DB   lsb(add_)   ;    +
02F4   4F                     DB   lsb(hdot_)   ;    ,
02F5   AB                     DB   lsb(sub_)   ;    -
02F6   44                     DB   lsb(dot_)   ;    .
02F7   F8                     DB   lsb(div_)   ;    /
02F8                          ;*Macro unroll:  REPDAT 10, lsb(num_)
02F8   8A                     DB   (10 | $80)   
02F9   F6                     DB   lsb(num_)   
02FA                          ;*Macro unroll:  LITDAT 7
02FA   07                     DB   7   
02FB   F0                     DB   lsb(def_)   ;    :
02FC   84                     DB   lsb(ret_)   ;    ;
02FD   C9                     DB   lsb(lt_)   ;    <
02FE   B9                     DB   lsb(eq_)   ;    =
02FF   C5                     DB   lsb(gt_)   ;    >
0300   71                     DB   lsb(key_)   ;    ?   ( -- val )  read a char from input
0301   6A                     DB   lsb(fetch_)   ;    @
0302                          ;*Macro unroll:  REPDAT 26, lsb(call_)
0302   9A                     DB   (26 | $80)   
0303   3A                     DB   lsb(call_)   
0304                          ;*Macro unroll:  LITDAT 6
0304   06                     DB   6   
0305   28                     DB   lsb(arrDef_)   ;    [
0306   E4                     DB   lsb(alt_)   ;    \
0307   E7                     DB   lsb(arrEnd_)   ;    ]
0308   14                     DB   lsb(xor_)   ;    ^
0309   B3                     DB   lsb(neg_)   ;    _
030A   F3                     DB   lsb(str_)   ;    `
030B                          ;*Macro unroll:  REPDAT 26, lsb(var_)
030B   9A                     DB   (26 | $80)   
030C   DA                     DB   lsb(var_)   
030D                          ;*Macro unroll:  LITDAT 5
030D   05                     DB   5   
030E   92                     DB   lsb(shl_)   ;    {
030F   0B                     DB   lsb(or_)   ;    |
0310   97                     DB   lsb(shr_)   ;    }
0311   8B                     DB   lsb(rot_)   ;    ~ ( a b c -- b c a ) rotate
0312   7A                     DB   lsb(nop_)   ;    backspace
0313                          ;*Macro unroll:  LITDAT 17
0313   11                     DB   17   
0314   00                     DB   lsb(EMPTY)   ; NUL ^@
0315   00                     DB   lsb(EMPTY)   ; SOH ^A  1
0316   D7                     DB   lsb(toggleBase_)   ; STX ^B  2
0317   00                     DB   lsb(EMPTY)   ; ETX ^C  3
0318   00                     DB   lsb(EMPTY)   ; EOT ^D  4
0319   A9                     DB   lsb(edit_)   ; ENQ ^E  5
031A   00                     DB   lsb(EMPTY)   ; ACK ^F  6
031B   00                     DB   lsb(EMPTY)   ; BEL ^G  7
031C   8A                     DB   lsb(backsp_)   ; BS  ^H  8
031D   00                     DB   lsb(EMPTY)   ; TAB ^I  9
031E   A1                     DB   lsb(reedit_)   ; LF  ^J 10
031F   00                     DB   lsb(EMPTY)   ; VT  ^K 11
0320   B4                     DB   lsb(list_)   ; FF  ^L 12
0321   00                     DB   lsb(EMPTY)   ; CR  ^M 13
0322   00                     DB   lsb(EMPTY)   ; SO  ^N 14
0323   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0324   D0                     DB   lsb(printStack_)   ; DLE ^P 16
0325                          ;*Macro unroll:  REPDAT 15, lsb(EMPTY)
0325   8F                     DB   (15 | $80)   
0326   00                     DB   lsb(EMPTY)   
0327                          ;*Macro unroll:  LITDAT 5
0327   05                     DB   5   
0328   11                     DB   lsb(aNop_)   ;a0    SP
0329   04                     DB   lsb(anonDef_)   ;a1    \!
032A   11                     DB   lsb(aNop_)   ;a2    \"
032B   C7                     DB   lsb(util_)   ;a3    \#  utility command
032C   8C                     DB   lsb(newln_)   ;a4    \$  prints a newline to output
032D                          ;*Macro unroll:  REPDAT 3, lsb(aNop_)
032D   83                     DB   (3 | $80)   
032E   11                     DB   lsb(aNop_)   
032F                          ;*Macro unroll:  LITDAT 8
032F   08                     DB   8   
0330   28                     DB   lsb(ifte_)   ;a8    (  ( b -- )
0331   11                     DB   lsb(aNop_)   ;a9    )
0332   11                     DB   lsb(aNop_)   ;aa    *
0333   11                     DB   lsb(aNop_)   ;ab    +
0334   21                     DB   lsb(emit_)   ;ac    ,  ( b -- ) prints a char
0335   11                     DB   lsb(aNop_)   ;ad    -
0336   C1                     DB   lsb(prnStr_)   ;ae    .  ( b -- )
0337   11                     DB   lsb(aNop_)   ;af    /
0338                          ;*Macro unroll:  REPDAT 5, lsb(NSRef_)
0338   85                     DB   (5 | $80)   
0339   51                     DB   lsb(NSRef_)   
033A                          ;*Macro unroll:  REPDAT 5, lsb(aNop_)
033A   85                     DB   (5 | $80)   
033B   11                     DB   lsb(aNop_)   
033C                          ;*Macro unroll:  LITDAT 7
033C   07                     DB   7   
033D   02                     DB   lsb(altDef_)   ;ba    :  ( -- adr) returns adr of anonymous command
033E   11                     DB   lsb(aNop_)   ;bb    ;
033F   11                     DB   lsb(aNop_)   ;bc    <
0340   88                     DB   lsb(i_)   ;bd    =  ( -- adr) returns address of index variable
0341   79                     DB   lsb(prompt_)   ;be    >
0342   3A                     DB   lsb(getRef_)   ;bf    ?
0343   0C                     DB   lsb(cFetch_)   ;c0    @
0344                          ;*Macro unroll:  REPDAT 26, lsb(altCall_)
0344   9A                     DB   (26 | $80)   
0345   00                     DB   lsb(altCall_)   
0346                          ;*Macro unroll:  LITDAT 6
0346   06                     DB   6   
0347   07                     DB   lsb(cArrDef_)   ;db    [
0348   13                     DB   lsb(comment_)   ;dc    \  comment text, skips reading until end of line
0349   11                     DB   lsb(aNop_)   ;dd    ]
034A   42                     DB   lsb(go_)   ;de    ^  ( -- ? ) execute mint definition
034B   91                     DB   lsb(break_)   ;df    _  break loop if true
034C   BF                     DB   lsb(strDef_)   ;e0    `  ( -- adr ) defines a string \` string `
034D                          ;*Macro unroll:  REPDAT 8, lsb(altVar_)  ;e1
034D   88                     DB   (8 | $80)   ;e1
034E   7E                     DB   lsb(altVar_)   
034F                          ;*Macro unroll:  LITDAT 1
034F   01                     DB   1   
0350   88                     DB   lsb(i_)   ;e9    i  ; returns index variable of current loop
0351                          ;*Macro unroll:  REPDAT 17, lsb(altVar_)
0351   91                     DB   (17 | $80)   
0352   7E                     DB   lsb(altVar_)   
0353                          ;*Macro unroll:  LITDAT 5
0353   05                     DB   5   
0354   A0                     DB   lsb(NSEnter_)   ;fb    {
0355   11                     DB   lsb(aNop_)   ;fc    |
0356   71                     DB   lsb(NSExit_)   ;fd    }
0357   11                     DB   lsb(aNop_)   ;fe    ~
0358   11                     DB   lsb(aNop_)   ;ff    BS		
0359                          ;*Macro unroll:  ENDDAT
0359   00                     DB   0   
035A                PRINTSTR:      ;=14
035A   E3                     EX   (SP),HL   
035B   CD 65 03               CALL   putStr   
035E   23                     INC   HL   
035F   E3                     EX   (SP),HL   
0360   C9                     RET      
0361                PUTSTR0:      
0361   CD 85 00               CALL   putchar   
0364   23                     INC   HL   
0365                PUTSTR:      
0365   7E                     LD   A,(HL)   
0366   B7                     OR   A   
0367   20 F8                  JR   NZ,putStr0   
0369   C9                     RET      
036A                NSLOOKUP:      
036A   16 00                  LD   D,0   
036C                NSLOOKUP0:      
036C   FE 61                  CP   "a"   
036E   30 06                  JR   NC,NSLookup2   
0370                NSLOOKUP1:      
0370   D6 41                  SUB   "A"   
0372   1E 00                  LD   E,0   
0374   18 04                  JR   NSLookup3   
0376                NSLOOKUP2:      
0376   D6 61                  SUB   "a"   
0378   1E 34                  LD   E,26*2   
037A                NSLOOKUP3:      
037A   87                     ADD   A,A   
037B   83                     ADD   A,E   
037C   2A 86 1B               LD   HL,(vNS)   
037F   85                     ADD   A,L   
0380   6F                     LD   L,A   
0381   3E 00                  LD   A,0   
0383   8C                     ADC   A,H   
0384   67                     LD   H,A   
0385   AF                     XOR   A   
0386   B3                     OR   E   ; sets Z flag if A-Z
0387   C9                     RET      
0388                PRINTDEC:      ;=36
0388   11 F0 D8               LD   DE,-10000   
038B   CD A1 03               CALL   printdec1   
038E   11 18 FC               LD   DE,-1000   
0391   CD A1 03               CALL   printdec1   
0394   11 9C FF               LD   DE,-100   
0397   CD A1 03               CALL   printdec1   
039A   1E F6                  LD   E,-10   
039C   CD A1 03               CALL   printdec1   
039F   1E FF                  LD   E,-1   
03A1                PRINTDEC1:      
03A1   3E 2F                  LD   A,"0"-1   
03A3                PRINTDEC2:      
03A3   3C                     INC   A   
03A4   19                     ADD   HL,DE   
03A5   38 FC                  JR   C,printdec2   
03A7   ED 52                  SBC   HL,DE   
03A9   C3 85 00               JP   putchar   
03AC                RPUSH:       ;=11
03AC   DD 2B                  DEC   IX   
03AE   DD 74 00               LD   (IX+0),H   
03B1   DD 2B                  DEC   IX   
03B3   DD 75 00               LD   (IX+0),L   
03B6   C9                     RET      
03B7                RPOP:        ;=11
03B7   DD 6E 00               LD   L,(IX+0)   
03BA   DD 23                  INC   IX   
03BC   DD 66 00               LD   H,(IX+0)   
03BF   DD 23                  INC   IX   
03C1                RPOP2:       
03C1   C9                     RET      
03C2                             ; **************************************************************************
03C2                             ; calculate nesting value
03C2                             ; A is char to be tested,
03C2                             ; E is the nesting value (initially 0)
03C2                             ; E is increased by ( and [
03C2                             ; E is decreased by ) and ]
03C2                             ; E has its bit 7 toggled by `
03C2                             ; limited to 127 levels
03C2                             ; **************************************************************************
03C2                NESTING:      ;=44
03C2   FE 60                  CP   "`"   
03C4   20 0A                  JR   NZ,nesting1   
03C6   CB 7B                  BIT   7,E   
03C8   28 03                  JR   Z,nesting1a   
03CA   CB BB                  RES   7,E   
03CC   C9                     RET      
03CD                NESTING1A:      
03CD   CB FB                  SET   7,E   
03CF   C9                     RET      
03D0                NESTING1:      
03D0   CB 7B                  BIT   7,E   
03D2   C0                     RET   NZ   
03D3   FE 3A                  CP   ":"   
03D5   28 08                  JR   Z,nesting2   
03D7   FE 5B                  CP   "["   
03D9   28 04                  JR   Z,nesting2   
03DB   FE 28                  CP   "("   
03DD   20 02                  JR   NZ,nesting3   
03DF                NESTING2:      
03DF   1C                     INC   E   
03E0   C9                     RET      
03E1                NESTING3:      
03E1   FE 3B                  CP   ";"   
03E3   28 07                  JR   Z,nesting4   
03E5   FE 5D                  CP   "]"   
03E7   28 03                  JR   Z,nesting4   
03E9   FE 29                  CP   ")"   
03EB   C0                     RET   NZ   
03EC                NESTING4:      
03EC   1D                     DEC   E   
03ED   C9                     RET      
03EE                PROMPT:      ;=9
03EE   CD 5A 03               CALL   printStr   
03F1   0D 0A 3E 20 00         .CSTR   "\r\n> "   
03F6   C9                     RET      
03F7                CRLF:        ;=7
03F7   CD 5A 03               CALL   printStr   
03FA   0D 0A 00               .CSTR   "\r\n"   
03FD   C9                     RET      
03FE                             ; **********************************************************************			
03FE                             ; Page 4 primitive routines
03FE                             ; **********************************************************************
03FE                          ALIGN   $100   
0400                PAGE4:       
0400                AND_:        
0400   D1                     POP   DE   ;     Bitwise AND the top 2 elements of the stack
0401   E1                     POP   HL   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   HL   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                OR_:         
040B   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
040C   E1                     POP   HL   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                XOR_:        
0414   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0415                XOR1:        
0415   E1                     POP   HL   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                INV_:        ; Bitwise INVert the top member of the stack
041D   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0420   18 F3                  JR   xor1   
0422                ADD_:        ; Add the top 2 members of the stack
0422   D1                     POP   DE   
0423   E1                     POP   HL   
0424   19                     ADD   HL,DE   
0425   E5                     PUSH   HL   
0426   FD E9                  JP   (IY)   
0428                ARRDEF_:      
0428                ARRDEF:      ;=18
0428   3E 00                  LD   A,FALSE   
042A                ARRDEF1:      
042A   FD 21 2A 02            LD   IY,compNEXT   
042E   32 02 1B               LD   (vByteMode),A   
0431   2A 8E 1B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0434   CD AC 03               CALL   rpush   ; save start of array \[  \]
0437   C3 21 02               JP   NEXT   ; hardwired to NEXT
043A                CALL_:       
043A   0A                     LD   A,(BC)   
043B   CD 70 03               CALL   NSLookup1   
043E   5E                     LD   E,(HL)   
043F   23                     INC   HL   
0440   56                     LD   D,(HL)   
0441   C3 43 06               JP   go1   
0444                DOT_:        
0444   E1                     POP   HL   
0445   CD 88 03               CALL   printdec   
0448                DOT2:        
0448   3E 20                  LD   A," "   
044A   CD 85 00               CALL   putChar   
044D   FD E9                  JP   (IY)   
044F                HDOT_:       ; print hexadecimal
044F   E1                     POP   HL   
0450   CD D6 07               CALL   printhex   
0453   18 F3                  JR   dot2   
0455                DROP_:       ; Discard the top member of the stack
0455   E1                     POP   HL   
0456   FD E9                  JP   (IY)   
0458                DUP_:        
0458   E1                     POP   HL   ; Duplicate the top member of the stack
0459   E5                     PUSH   HL   
045A   E5                     PUSH   HL   
045B   FD E9                  JP   (IY)   
045D                ETX_:        
045D   C3 90 01               JP   ETX   
0460                EXIT_:       
0460   03                     INC   BC   
0461   50 59                  LD   DE,BC   
0463   CD B7 03               CALL   rpop   ; Restore Instruction pointer
0466   44 4D                  LD   BC,HL   
0468   EB                     EX   DE,HL   
0469   E9                     JP   (HL)   
046A                FETCH_:      ; Fetch the value from the address placed on the top of the stack
046A   E1                     POP   HL   
046B                FETCH1:      
046B   5E                     LD   E,(HL)   
046C   23                     INC   HL   
046D   56                     LD   D,(HL)   
046E   D5                     PUSH   DE   
046F   FD E9                  JP   (IY)   
0471                KEY_:        
0471   CD 81 00               CALL   getchar   
0474   26 00                  LD   H,0   
0476   6F                     LD   L,A   
0477   E5                     PUSH   HL   
0478   FD E9                  JP   (IY)   
047A                NOP_:        
047A   C3 21 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
047D                OVER_:       
047D   E1                     POP   HL   ; Duplicate 2nd element of the stack
047E   D1                     POP   DE   
047F   D5                     PUSH   DE   
0480   E5                     PUSH   HL   
0481   D5                     PUSH   DE   ; And push it to top of stack
0482   FD E9                  JP   (IY)   
0484                RET_:        
0484   CD B7 03               CALL   rpop   ; Restore Instruction pointer
0487   44 4D                  LD   BC,HL   
0489   FD E9                  JP   (IY)   
048B                ROT_:        ; a b c -- b c a
048B   D1                     POP   DE   ; a b                   de = c
048C   E1                     POP   HL   ; a                     hl = b
048D   E3                     EX   (SP),HL   ; b                     hl = a
048E   D5                     PUSH   DE   ; b c
048F   E5                     PUSH   HL   ; b c a
0490   FD E9                  JP   (IY)   
0492                             ;  Left shift { is multiply by 2		
0492                SHL_:        
0492   E1                     POP   HL   ; Duplicate the top member of the stack
0493   29                     ADD   HL,HL   
0494   E5                     PUSH   HL   ; shift left fallthrough into add_
0495   FD E9                  JP   (IY)   ; 
0497                             ;  Right shift } is a divide by 2		
0497                SHR_:        
0497   E1                     POP   HL   ; Get the top member of the stack
0498                SHR1:        
0498   CB 3C                  SRL   H   
049A   CB 1D                  RR   L   
049C   E5                     PUSH   HL   
049D   FD E9                  JP   (IY)   ; 
049F                STORE_:      ; Store the value at the address placed on the top of the stack
049F   E1                     POP   HL   
04A0   D1                     POP   DE   
04A1   73                     LD   (HL),E   
04A2   23                     INC   HL   
04A3   72                     LD   (HL),D   
04A4   FD E9                  JP   (IY)   
04A6                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
04A6                SWAP_:       
04A6   E1                     POP   HL   
04A7   E3                     EX   (SP),HL   
04A8   E5                     PUSH   HL   
04A9   FD E9                  JP   (IY)   
04AB                SUB_:        ; Subtract the value 2nd on stack from top of stack
04AB   D1                     POP   DE   ; 
04AC   E1                     POP   HL   ;      Entry point for INVert
04AD                SUB2:        
04AD   A7                     AND   A   ;      Entry point for NEGate
04AE   ED 52                  SBC   HL,DE   ; 15t
04B0   E5                     PUSH   HL   ; 
04B1   FD E9                  JP   (IY)   ; 
04B3                             ; 5
04B3                NEG_:        
04B3   21 00 00               LD   HL,0   ; NEGate the value on top of stack (2's complement)
04B6   D1                     POP   DE   ; 
04B7   18 F4                  JR   sub2   ; use the SUBtract routine
04B9                EQ_:         
04B9   E1                     POP   HL   
04BA   D1                     POP   DE   
04BB   A7                     AND   A   ; reset the carry flag
04BC   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04BE   28 16                  JR   Z,equal   
04C0   21 00 00               LD   HL,0   
04C3   18 12                  JR   less   ; HL = 1
04C5                GT_:         
04C5   D1                     POP   DE   
04C6   E1                     POP   HL   
04C7   18 02                  JR   cmp_   
04C9                LT_:         
04C9   E1                     POP   HL   
04CA   D1                     POP   DE   
04CB                CMP_:        
04CB   A7                     AND   A   ; reset the carry flag
04CC   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04CE   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04D0   21 00 00               LD   HL,0   
04D3   FA D7 04               JP   M,less   
04D6                EQUAL:       
04D6   2C                     INC   L   ; HL = 1
04D7                LESS:        
04D7   E5                     PUSH   HL   
04D8   FD E9                  JP   (IY)   
04DA                VAR_:        
04DA   0A                     LD   A,(BC)   
04DB   CD 76 03               CALL   NSLookup2   
04DE   E5                     PUSH   HL   
04DF   FD E9                  JP   (IY)   
04E1   C3 C8 05     AGAIN_:   JP   again   
04E4   C3 5E 07     ALT_:     JP   alt   
04E7   C3 8B 05     ARREND_:   JP   arrEnd   
04EA   C3 7A 07     MUL_:     JP   mul   
04ED   C3 6E 05     HEX_:     JP   hex   
04F0   C3 A7 05     DEF_:     JP   def   
04F3                STR_:        
04F3   C3 6B 07               JP   str   
04F6   18 32        NUM_:     JR   num   
04F8   18 52        DIV_:     JR   div   
04FA   18 00        BEGIN_:   JR   begin   
04FC                             ;*******************************************************************
04FC                             ; Page 5 primitive routines
04FC                             ;*******************************************************************
04FC                             ;falls through
04FC                             ; *************************************
04FC                             ; Loop Handling Code
04FC                             ; *************************************
04FC                             ;=23
04FC                BEGIN:       ; Left parentesis begins a loop
04FC   E1                     POP   HL   
04FD   7D                     LD   A,L   ; zero?
04FE   B4                     OR   H   
04FF   28 1C                  JR   Z,begin1   
0501   2B                     DEC   HL   
0502   11 FA FF               LD   DE,-6   
0505   DD 19                  ADD   IX,DE   
0507   DD 36 00 00            LD   (IX+0),0   ; loop var
050B   DD 36 01 00            LD   (IX+1),0   
050F   DD 75 02               LD   (IX+2),L   ; loop limit
0512   DD 74 03               LD   (IX+3),H   
0515   DD 71 04               LD   (IX+4),C   ; loop address
0518   DD 70 05               LD   (IX+5),B   
051B   FD E9                  JP   (IY)   
051D                BEGIN1:      
051D   1E 01                  LD   E,1   
051F                BEGIN2:      
051F   03                     INC   BC   
0520   0A                     LD   A,(BC)   
0521   CD C2 03               CALL   nesting   
0524   AF                     XOR   A   
0525   B3                     OR   E   
0526   20 F7                  JR   NZ,begin2   
0528                BEGIN3:      
0528   FD E9                  JP   (IY)   
052A                             ; ********************************************************************************
052A                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
052A                             ; Read the first character.
052A                             ;			
052A                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
052A                             ; and then added into the L register. (HL forms a 16-bit accumulator)
052A                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
052A                             ; and then add in the next digit. Repeat this until a non-number character is
052A                             ; detected. Add in the final digit so that HL contains the converted number.
052A                             ; Push HL onto the stack and proceed to the dispatch routine.
052A                             ; ********************************************************************************
052A                NUM:         ;=23
052A   21 00 00               LD   HL,$0000   ;     Clear HL to accept the number
052D   0A                     LD   A,(BC)   ;     Get the character which is a numeral
052E                NUM1:        ; corrected KB 24/11/21
052E   D6 30                  SUB   $30   ;       Form decimal digit
0530   85                     ADD   A,L   ;       Add into bottom of HL
0531   6F                     LD   L,A   ; 
0532   3E 00                  LD   A,00   ;       Clear A
0534   8C                     ADC   A,H   ; Add with carry H-reg
0535   67                     LD   H,A   ; Put result in H-reg
0536   03                     INC   BC   ;       Increment IP
0537   0A                     LD   A,(BC)   ;       and get the next character
0538   FE 30                  CP   $30   ;       Less than $30
053A   38 0C                  JR   C,num2   ;       Not a number / end of number
053C   FE 3A                  CP   $3A   ;       Greater or equal to $3A
053E   30 08                  JR   NC,num2   ;       Not a number / end of number
0540                             ; Multiply digit(s) in HL by 10
0540   29                     ADD   HL,HL   ;        2X
0541   5D                     LD   E,L   ;        LD DE,HL
0542   54                     LD   D,H   ; 
0543   29                     ADD   HL,HL   ;        4X
0544   29                     ADD   HL,HL   ;        8X
0545   19                     ADD   HL,DE   ;        2X  + 8X  = 10X
0546                             ; 52t cycles
0546   18 E6                  JR   num1   
0548                NUM2:        
0548   0B                     DEC   BC   
0549   E5                     PUSH   HL   ;       Put the number on the stack
054A   FD E9                  JP   (IY)   ; and process the next character
054C                             ; ********************************************************************
054C                             ; 16-bit division subroutine.
054C                             ; 
054C                             ; BC: divisor, DE: dividend, HL: remainder
054C                             ; *********************************************************************
054C                             ; This divides DE by BC, storing the result in DE, remainder in HL
054C                             ; *********************************************************************
054C                             ; 1382 cycles
054C                             ; 35 bytes (reduced from 48)
054C                             ; 
054C                DIV:         ;=24
054C   D1                     POP   DE   ; get first value
054D   E1                     POP   HL   ; get 2nd value
054E   C5                     PUSH   BC   ; Preserve the IP
054F   44                     LD   B,H   ; BC = 2nd value
0550   4D                     LD   C,L   
0551                             ; 
0551   21 00 00               LD   HL,0   ; Zero the remainder
0554   3E 10                  LD   A,16   ; Loop counter
0556                DIV1:        ;shift the bits from BC (numerator) into HL (accumulator)
0556   CB 21                  SLA   C   
0558   CB 10                  RL   B   
055A   ED 6A                  ADC   HL,HL   
055C   ED 52                  SBC   HL,DE   ;Check if remainder >= denominator (HL>=DE)
055E   38 03                  JR   C,div2   
0560   0C                     INC   C   
0561   18 01                  JR   div3   
0563                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
0563   19                     ADD   hl,de   
0564                DIV3:        
0564   3D                     DEC   A   
0565   20 EF                  JR   NZ,div1   
0567   50                     LD   D,B   ; Result from BC to DE
0568   59                     LD   E,C   
0569                DIV4:        
0569   C1                     POP   BC   ; Restore the IP
056A   D5                     PUSH   DE   ; Push Result
056B   E5                     PUSH   HL   ; Push remainder
056C   FD E9                  JP   (IY)   
056E                HEX:         ;=26
056E   21 00 00               LD   HL,0   ;     Clear HL to accept the number
0571                HEX1:        
0571   03                     INC   BC   
0572   0A                     LD   A,(BC)   ;     Get the character which is a numeral
0573   CB 77                  BIT   6,A   ;       is it uppercase alpha?
0575   28 02                  JR   Z,hex2   ; no a decimal
0577   D6 07                  SUB   7   ; sub 7  to make $A - $F
0579                HEX2:        
0579   D6 30                  SUB   $30   ;       Form decimal digit
057B   DA 48 05               JP   C,num2   
057E   FE 10                  CP   $0F+1   
0580   D2 48 05               JP   NC,num2   
0583   29                     ADD   HL,HL   ;        2X ; Multiply digit(s) in HL by 16
0584   29                     ADD   HL,HL   ;        4X
0585   29                     ADD   HL,HL   ;        8X
0586   29                     ADD   HL,HL   ;       16X
0587   85                     ADD   A,L   ;       Add into bottom of HL
0588   6F                     LD   L,A   ; 
0589   18 E6                  JR   hex1   
058B                ARREND:      ;=27
058B   CD B7 03               CALL   rpop   ; DE = start of array
058E   E5                     PUSH   HL   
058F   EB                     EX   DE,HL   
0590   2A 8E 1B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0593   B7                     OR   A   
0594   ED 52                  SBC   HL,DE   ; bytes on heap
0596   3A 02 1B               LD   A,(vByteMode)   
0599   B7                     OR   A   
059A   20 04                  JR   NZ,arrEnd2   
059C   CB 3C                  SRL   H   ; BC = m words
059E   CB 1D                  RR   L   
05A0                ARREND2:      
05A0   E5                     PUSH   HL   
05A1   FD 21 21 02            LD   IY,NEXT   
05A5   FD E9                  JP   (IY)   ; hardwired to NEXT
05A7                             ; **************************************************************************
05A7                             ; def is used to create a colon definition
05A7                             ; When a colon is detected, the next character (usually uppercase alpha)
05A7                             ; is looked up in the vector table to get its associated code field address
05A7                             ; This CFA is updated to point to the character after uppercase alpha
05A7                             ; The remainder of the characters are then skipped until after a semicolon
05A7                             ; is found.
05A7                             ; ***************************************************************************
05A7                             ;=31
05A7                DEF:         ; Create a colon definition
05A7   03                     INC   BC   
05A8   0A                     LD   A,(BC)   ; Get the next character
05A9   32 88 1B               LD   (vLastDef),A   
05AC   03                     INC   BC   
05AD   CD 6A 03               CALL   NSLookup   
05B0   ED 5B 8E 1B            LD   DE,(vHeapPtr)   ; start of defintion
05B4   73                     LD   (HL),E   ; Save low byte of address in CFA
05B5   23                     INC   HL   
05B6   72                     LD   (HL),D   ; Save high byte of address in CFA+1
05B7                DEF1:        ; Skip to end of definition
05B7   0A                     LD   A,(BC)   ; Get the next character
05B8   03                     INC   BC   ; Point to next character
05B9   12                     LD   (DE),A   
05BA   13                     INC   DE   
05BB   FE 3B                  CP   ";"   ; Is it a semicolon
05BD   28 02                  JR   Z,def2   ; end the definition
05BF   18 F6                  JR   def1   ; get the next element
05C1                DEF2:        
05C1   0B                     DEC   BC   
05C2                DEF3:        
05C2   ED 53 8E 1B            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
05C6   FD E9                  JP   (IY)   
05C8                AGAIN:       ;=51
05C8   DD 5E 00               LD   E,(IX+0)   ; peek loop var
05CB   DD 56 01               LD   D,(IX+1)   
05CE   7A                     LD   A,D   ; check if IFTEMode
05CF   A3                     AND   E   
05D0   3C                     INC   A   
05D1   20 07                  JR   NZ,again1   
05D3   13                     INC   DE   
05D4   D5                     PUSH   DE   ; push FALSE condition
05D5   11 02 00               LD   DE,2   
05D8   18 1D                  JR   again3   ; drop IFTEMode
05DA                AGAIN1:      
05DA   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
05DD   DD 66 03               LD   H,(IX+3)   
05E0   B7                     OR   A   
05E1   ED 52                  SBC   HL,DE   
05E3   28 0F                  JR   Z,again2   
05E5   13                     INC   DE   
05E6   DD 73 00               LD   (IX+0),E   ; poke loop var
05E9   DD 72 01               LD   (IX+1),D   
05EC   DD 4E 04               LD   C,(IX+4)   ; peek loop address
05EF   DD 46 05               LD   B,(IX+5)   
05F2   FD E9                  JP   (IY)   
05F4                AGAIN2:      
05F4   11 06 00               LD   DE,6   ; drop loop frame
05F7                AGAIN3:      
05F7   DD 19                  ADD   IX,DE   
05F9   FD E9                  JP   (IY)   
05FB                             ; **************************************************************************
05FB                             ; Page 6 Alt primitives
05FB                             ; **************************************************************************
05FB                          ALIGN   $100   
0600                PAGE6:       
0600                ALTCALL_:      
0600   FD E9                  JP   (IY)   
0602                ALTDEF_:      
0602   FD E9                  JP   (IY)   
0604                ANONDEF_:      
0604   C3 E0 06               JP   anonDef   
0607                CARRDEF_:      ; define a byte array
0607   3E 01                  LD   A,TRUE   
0609   C3 2A 04               JP   arrDef1   
060C                CFETCH_:      
060C   E1                     POP   HL   
060D   16 00                  LD   D,0   
060F   5E                     LD   E,(HL)   
0610   D5                     PUSH   DE   
0611                ANOP_:       
0611   FD E9                  JP   (IY)   
0613                COMMENT_:      
0613   03                     INC   BC   ; point to next char
0614   0A                     LD   A,(BC)   
0615   FE 0D                  CP   "\r"   ; terminate at cr
0617   20 FA                  JR   NZ,comment_   
0619   0B                     DEC   BC   
061A   FD E9                  JP   (IY)   
061C                CSTORE_:      
061C   E1                     POP   HL   
061D   D1                     POP   DE   
061E   73                     LD   (HL),E   
061F   FD E9                  JP   (IY)   
0621                EMIT_:       
0621   E1                     POP   HL   
0622   7D                     LD   A,L   
0623   CD 85 00               CALL   putchar   
0626   FD E9                  JP   (IY)   
0628                IFTE_:       
0628   D1                     POP   DE   
0629   7B                     LD   A,E   
062A   B2                     OR   D   
062B   20 05                  JR   NZ,ifte1   
062D   13                     INC   DE   
062E   D5                     PUSH   DE   ; push TRUE on stack for else clause
062F   C3 1D 05               JP   begin1   ; skip to closing ) works with \) too
0632                IFTE1:       
0632   21 FF FF               LD   HL,-1   ; push -1 on return stack to indicate IFTEMode
0635   CD AC 03               CALL   rpush   
0638   FD E9                  JP   (IY)   
063A                GETREF_:      
063A                GETREF:      ;=8
063A   03                     INC   BC   
063B   0A                     LD   A,(BC)   
063C   CD 6A 03               CALL   NSLookup   
063F   C3 6B 04               JP   fetch1   
0642                GO_:         
0642   D1                     POP   DE   
0643                GO1:         
0643   7A                     LD   A,D   
0644   B3                     OR   E   
0645   28 08                  JR   Z,go2   
0647   60 69                  LD   HL,BC   
0649   CD AC 03               CALL   rpush   ; save Instruction Pointer
064C   42 4B                  LD   BC,DE   
064E   0B                     DEC   BC   
064F                GO2:         
064F   FD E9                  JP   (IY)   
0651                NSREF_:      ;=25
0651   FD 21 C1 03            LD   IY,rpop2   ; rewire NEXT to simply return
0655   CD A1 06               CALL   NSEnter1   ; enter namespace return here on NEXT
0658   0A                     LD   A,(BC)   
0659   CD 6A 03               CALL   NSLookup   
065C   20 0E                  JR   NZ,NSRef2   
065E   E5                     PUSH   HL   
065F   FD 21 21 02            LD   IY,NEXT   ; restore NEXT
0663   CD 81 02               CALL   enter   ; enter MINT interpreter with TOS=command
0666   40 5C 5E 00            .CSTR   "@\\^"   ; execute and restore namespace
066A   18 05                  JR   NSExit_   
066C                NSREF2:      ;=25
066C   E5                     PUSH   HL   
066D   FD 21 21 02            LD   IY,NEXT   ; restore NEXT
0671                NSEXIT_:      
0671   CD B7 03               CALL   rpop   
0674   22 86 1B               LD   (vNS),HL   
0677   FD E9                  JP   (IY)   
0679                PROMPT_:      
0679   CD EE 03               CALL   prompt   
067C   FD E9                  JP   (IY)   
067E                ALTVAR_:      
067E   0A                     LD   A,(BC)   
067F   D6 21                  SUB   "a" - ((altVars - mintVars)/2)   
0681   87                     ADD   A,A   
0682   26 1B                  LD   H,msb(mintVars)   
0684   6F                     LD   L,A   
0685   E5                     PUSH   HL   
0686   FD E9                  JP   (IY)   
0688                I_:          
0688   DD E5                  PUSH   IX   
068A   FD E9                  JP   (IY)   
068C                NEWLN_:      
068C   CD F7 03               CALL   crlf   
068F   FD E9                  JP   (IY)   
0691                BREAK_:      
0691   E1                     POP   HL   
0692   7D                     LD   A,L   ; zero?
0693   B4                     OR   H   
0694   20 02                  JR   NZ,break1   
0696   FD E9                  JP   (IY)   
0698                BREAK1:      
0698   11 06 00               LD   DE,6   ; drop loop frame
069B   DD 19                  ADD   IX,DE   
069D   C3 1D 05               JP   begin1   ; skip to end of loop
06A0                NSENTER_:      
06A0   03                     INC   BC   
06A1                NSENTER1:      
06A1   0A                     LD   A,(BC)   ; read NS ASCII code
06A2   D6 30                  SUB   "0"   ; convert to number
06A4   03                     INC   BC   
06A5   57                     LD   D,A   ; multiply by 64
06A6   1E 00                  LD   E,0   
06A8   CB 3A                  SRL   D   
06AA   CB 1B                  RR   E   
06AC   CB 3A                  SRL   D   
06AE   CB 1B                  RR   E   
06B0   2A 86 1B               LD   HL,(vNS)   ; 
06B3   CD AC 03               CALL   rpush   
06B6   21 C0 1B               LD   HL,NS0   
06B9   19                     ADD   HL,DE   
06BA   22 86 1B               LD   (vNS),HL   
06BD   FD E9                  JP   (IY)   
06BF                STRDEF_:      
06BF   18 09                  JR   strDef   
06C1                PRNSTR_:      
06C1                PRNSTR:      
06C1   E1                     POP   HL   
06C2   CD 65 03               CALL   putStr   
06C5   FD E9                  JP   (IY)   
06C7                UTIL_:       
06C7   C3 96 07               JP   util   
06CA                             ; **************************************************************************
06CA                             ; Page 6 primitive routines
06CA                             ; **************************************************************************
06CA                             ; falls through
06CA                             ; **************************************************************************
06CA                             ; copy definition to text input buffer
06CA                             ; update TIBPtr
06CA                             ; **************************************************************************
06CA                STRDEF:      ;=21
06CA   ED 5B 8E 1B            LD   DE,(vHeapPtr)   ; HL = heap ptr
06CE   D5                     PUSH   DE   ; save start of string
06CF   03                     INC   BC   ; point to next char
06D0   18 03                  JR   strDef2   
06D2                STRDEF1:      
06D2   12                     LD   (DE),A   
06D3   13                     INC   DE   ; increase count
06D4   03                     INC   BC   ; point to next char
06D5                STRDEF2:      
06D5   0A                     LD   A,(BC)   
06D6   FE 60                  CP   "`"   ; ` is the string terminator
06D8   20 F8                  JR   NZ,strDef1   
06DA   AF                     XOR   A   ; write null to terminate string
06DB   12                     LD   (DE),A   
06DC   13                     INC   DE   
06DD   C3 C2 05               JP   def3   
06E0                ANONDEF:      ; Create a colon definition
06E0   03                     INC   BC   
06E1   ED 5B 8E 1B            LD   DE,(vHeapPtr)   ; start of defintion
06E5   D5                     PUSH   DE   
06E6                ANONDEF1:      ; Skip to end of definition
06E6   0A                     LD   A,(BC)   ; Get the next character
06E7   03                     INC   BC   ; Point to next character
06E8   12                     LD   (DE),A   
06E9   13                     INC   DE   
06EA   FE 3B                  CP   ";"   ; Is it a semicolon
06EC   28 02                  JR   Z,anonDef2   ; end the definition
06EE   18 F6                  JR   anonDef1   ; get the next element
06F0                ANONDEF2:      
06F0   0B                     DEC   BC   
06F1   ED 53 8E 1B            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
06F5   FD E9                  JP   (IY)   
06F7                          ALIGN   $100   
0700                UTILTABLE:      
0700   55                     DB   lsb(outPort_)   ;0    ( val port -- )
0701   4A                     DB   lsb(inPort_)   ;1    ( port -- val )
0702   06                     DB   lsb(exec_)   ;2
0703   0E                     DB   lsb(depth_)   ;3    ( -- val ) depth of data stack
0704   1C                     DB   lsb(printStk_)   ;4    ( -- ) non-destructively prints stack
0705   45                     DB   lsb(editDef_)   ;5
0706                UTILCODE:      
0706                EXEC_:       
0706   CD 0B 07               CALL   exec1   
0709   FD E9                  JP   (IY)   
070B                EXEC1:       
070B   E1                     POP   HL   
070C   E3                     EX   (SP),HL   
070D   E9                     JP   (HL)   
070E                DEPTH_:      
070E   21 00 00               LD   HL,0   
0711   39                     ADD   HL,SP   
0712   EB                     EX   DE,HL   
0713   21 00 1A               LD   HL,DSTACK   
0716   B7                     OR   A   
0717   ED 52                  SBC   HL,DE   
0719   C3 98 04               JP   shr1   
071C                PRINTSTK_:      
071C                PRINTSTK:      ;=40
071C                             ; MINT: \a@2- \#3 1- ("@ \b@ \(,)(.) 2-) '
071C   CD 81 02               CALL   ENTER   
071F   60 3D 3E 20 60 5C 61 40 32 2D 5C 23 33 20 31 2D 28 22 40 5C 62 40 5C 28 2C 29 28 2E 29 32 2D 29 27 5C 24 00 .CSTR   "`=> `\\a@2-\\#3 1-(",$22,"@\\b@\\(,)(.)2-)'\\$"   
0743   FD E9                  JP   (IY)   
0745                EDITDEF_:      
0745   CD A1 07               CALL   editDef   
0748   FD E9                  JP   (IY)   
074A                INPORT_:      
074A   E1                     POP   HL   
074B   79                     LD   A,C   
074C   4D                     LD   C,L   
074D   ED 68                  IN   L,(C)   
074F   26 00                  LD   H,0   
0751   4F                     LD   C,A   
0752   E5                     PUSH   HL   
0753   FD E9                  JP   (IY)   
0755                OUTPORT_:      
0755   E1                     POP   HL   
0756   59                     LD   E,C   
0757   4D                     LD   C,L   
0758   E1                     POP   HL   
0759   ED 69                  OUT   (C),L   
075B   4B                     LD   C,E   
075C   FD E9                  JP   (IY)   
075E                             ;*******************************************************************
075E                             ; Page 5 primitive routines continued
075E                             ;*******************************************************************
075E                ALT:         ;=11
075E   03                     INC   BC   
075F   0A                     LD   A,(BC)   
0760   21 80 1A               LD   HL,altCodes   
0763   85                     ADD   A,L   
0764   6F                     LD   L,A   
0765                ALT2:        
0765   7E                     LD   A,(HL)   ;       get low jump address
0766   2A 8C 1B               LD   HL,(vAltPage)   
0769   6F                     LD   L,A   
076A   E9                     JP   (HL)   ;       Jump to routine
076B                STR:         
076B   03                     INC   BC   
076C                STR1:        
076C   0A                     LD   A,(BC)   
076D   03                     INC   BC   
076E   FE 60                  CP   "`"   ; ` is the string terminator
0770   28 05                  JR   Z,str2   
0772   CD 85 00               CALL   putchar   
0775   18 F5                  JR   str1   
0777                STR2:        
0777   0B                     DEC   BC   
0778   FD E9                  JP   (IY)   
077A                             ; ********************************************************************
077A                             ; 16-bit multiply
077A                MUL:         ;=19
077A   D1                     POP   DE   ; get first value
077B   E1                     POP   HL   
077C   C5                     PUSH   BC   ; Preserve the IP
077D   44                     LD   B,H   ; BC = 2nd value
077E   4D                     LD   C,L   
077F   21 00 00               LD   HL,0   
0782   3E 10                  LD   A,16   
0784                MUL2:        
0784   29                     ADD   HL,HL   
0785   CB 13                  RL   E   
0787   CB 12                  RL   D   
0789   30 04                  JR   NC,$+6   
078B   09                     ADD   HL,BC   
078C   30 01                  JR   NC,$+3   
078E   13                     INC   DE   
078F   3D                     DEC   A   
0790   20 F2                  JR   NZ,mul2   
0792   C1                     POP   BC   ; Restore the IP
0793   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
0794   FD E9                  JP   (IY)   
0796                UTIL:        
0796   03                     INC   BC   
0797   0A                     LD   A,(BC)   
0798   D6 30                  SUB   "0"   
079A   26 07                  LD   H,msb(utilTable)   
079C   6F                     LD   L,A   
079D   6E                     LD   L,(HL)   
079E   26 07                  LD   H,msb(utilCode)   
07A0   E9                     JP   (HL)   
07A1                             ;*******************************************************************
07A1                             ; Subroutines
07A1                             ;*******************************************************************
07A1                EDITDEF:      ;=50 lookup up def based on number
07A1   E1                     POP   HL   ; pop ret address
07A2   E3                     EX   (SP),HL   ; swap with TOS
07A3   7D                     LD   A,L   
07A4   08                     EX   AF,AF'   
07A5   7D                     LD   A,L   
07A6   CD 6A 03               CALL   NSLookup   
07A9   5E                     LD   E,(HL)   
07AA   23                     INC   HL   
07AB   56                     LD   D,(HL)   
07AC   7A                     LD   A,D   
07AD   B3                     OR   E   
07AE   21 00 18               LD   HL,TIB   
07B1   28 14                  JR   Z,editDef3   
07B3   3E 3A                  LD   A,":"   
07B5   CD D1 07               CALL   writeChar   
07B8   08                     EX   AF,AF'   
07B9   CD D1 07               CALL   writeChar   
07BC   18 01                  JR   editDef2   
07BE                EDITDEF1:      
07BE   13                     INC   DE   
07BF                EDITDEF2:      
07BF   1A                     LD   A,(DE)   
07C0   CD D1 07               CALL   writeChar   
07C3   FE 3B                  CP   ";"   
07C5   20 F7                  JR   NZ,editDef1   
07C7                EDITDEF3:      
07C7   11 00 18               LD   DE,TIB   
07CA   B7                     OR   A   
07CB   ED 52                  SBC   HL,DE   
07CD   22 84 1B               LD   (vTIBPtr),HL   
07D0   C9                     RET      
07D1                WRITECHAR:      ;=5
07D1   77                     LD   (HL),A   
07D2   23                     INC   HL   
07D3   C3 85 00               JP   putchar   
07D6                PRINTHEX:      ;=11
07D6                             ; Display HL as a 16-bit number in hex.
07D6   C5                     PUSH   BC   ; preserve the IP
07D7   7C                     LD   A,H   
07D8   CD E1 07               CALL   printhex2   
07DB   7D                     LD   A,L   
07DC   CD E1 07               CALL   printhex2   
07DF   C1                     POP   BC   
07E0   C9                     RET      
07E1                PRINTHEX2:      
07E1   4F                     LD   C,A   
07E2   1F                     RRA      
07E3   1F                     RRA      
07E4   1F                     RRA      
07E5   1F                     RRA      
07E6   CD EA 07               CALL   printhex3   
07E9   79                     LD   A,C   
07EA                PRINTHEX3:      
07EA   E6 0F                  AND   0x0F   
07EC   C6 90                  ADD   A,0x90   
07EE   27                     DAA      
07EF   CE 40                  ADC   A,0x40   
07F1   27                     DAA      
07F2   C3 85 00               JP   putchar   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                OPCODES:      
1A00                          DS   $80   
1A80                CTRLCODES:      
1A80                ALTCODES:      
1A80                          DS   $80   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                          DS   2   ; 
1B02                VBYTEMODE:   DS   2   ; 
1B04                          DS   $30   
1B34                TBPTR:    DS   2   ; reserved for tests
1B36                RST08:    DS   2   
1B38                RST10:    DS   2   
1B3A                RST18:    DS   2   
1B3C                RST20:    DS   2   
1B3E                RST28:    DS   2   
1B40                RST30:    DS   2   ; 
1B42                BAUD:     DS   2   ; 
1B44                INTVEC:   DS   2   ; 
1B46                NMIVEC:   DS   2   ; 
1B48                GETCVEC:   DS   2   ; 
1B4A                PUTCVEC:   DS   2   ; 
1B4C                ALTDEFS:      
1B4C                          DS   26*2   
1B80                ALTVARS:      
1B80                VS0:      DS   2   ; a
1B82                VBASE16:   DS   2   ; b
1B84                VTIBPTR:   DS   2   ; c
1B86                VNS:      DS   2   ; d
1B88                VLASTDEF:   DS   2   ; e
1B8A                          DS   2   ; f
1B8C                VALTPAGE:   DS   2   ; g
1B8E                VHEAPPTR:   DS   2   ; h
1B90                          DS   2   ; i
1B92                          DS   2   ; j
1B94                          DS   2   ; k
1B96                          DS   2   ; l
1B98                          DS   2   ; m
1B9A                          DS   2   ; n
1B9C                          DS   2   ; o
1B9E                          DS   2   ; p
1BA0                          DS   2   ; q
1BA2                          DS   2   ; r
1BA4                          DS   2   ; s
1BA6                          DS   2   ; t
1BA8                          DS   2   ; u
1BAA                          DS   2   ; v
1BAC                          DS   2   ; w
1BAE                          DS   2   ; x
1BB0                          DS   2   ; y
1BB2                          DS   2   ; z
1BB4                             ; ****************************************************************
1BB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB4                             ; ****************************************************************
1BB4                          ALIGN   $40   
1BA8                          .ORG   $-($80-26*2*2)   
1BA8                          DS   ($80-26*2*2)   ; 12 bytes free vars for NS 0
1BC0                NS0:      DS   NSSIZE * NSNUM   
1E40                NS1:      EQU   NS0 + NSSIZE   
1E40                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 41 IN MINT.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 101 IN MINT.asm
                    > USED AT LINE 633 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 127 IN MINT.asm
                    > USED AT LINE 398 IN MINT.asm
                    > USED AT LINE 448 IN MINT.asm
                    > USED AT LINE 594 IN MINT.asm
                    > USED AT LINE 1046 IN MINT.asm
                    > USED AT LINE 1290 IN MINT.asm
                    > USED AT LINE 1370 IN MINT.asm
                    > USED AT LINE 1395 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 1018 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 48 IN MINT.asm
                    > USED AT LINE 573 IN MINT.asm
EMPTY:              0000 DEFINED AT LINE 18 IN MINT.asm
NSNUM:              0005 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 210 IN MINT.asm
                    > USED AT LINE 74 IN ram.asm
NSSIZE:             0080 DEFINED AT LINE 21 IN MINT.asm
                    > USED AT LINE 210 IN MINT.asm
                    > USED AT LINE 74 IN ram.asm
                    > USED AT LINE 75 IN ram.asm
IALTVARS:           0180 DEFINED AT LINE 46 IN MINT.asm
                    > USED AT LINE 201 IN MINT.asm
ETX:                0190 DEFINED AT LINE 56 IN MINT.asm
                    > USED AT LINE 612 IN MINT.asm
ETX1:               0199 DEFINED AT LINE 61 IN MINT.asm
                    > USED AT LINE 59 IN MINT.asm
START:              019B DEFINED AT LINE 64 IN MINT.asm
                    > USED AT LINE 6
INTERPRET:          01B0 DEFINED AT LINE 70 IN MINT.asm
                    > USED AT LINE 62 IN MINT.asm
INTERPRET2:         01BA DEFINED AT LINE 76 IN MINT.asm
                    > USED AT LINE 120 IN MINT.asm
INTERPRET3:         01C2 DEFINED AT LINE 83 IN MINT.asm
                    > USED AT LINE 92 IN MINT.asm
INTERPRET4:         01C8 DEFINED AT LINE 89 IN MINT.asm
                    > USED AT LINE 81 IN MINT.asm
WAITCHAR:           01CD DEFINED AT LINE 100 IN MINT.asm
                    > USED AT LINE 129 IN MINT.asm
                    > USED AT LINE 143 IN MINT.asm
MACRO:              01DC DEFINED AT LINE 109 IN MINT.asm
WAITCHAR1:          01F5 DEFINED AT LINE 122 IN MINT.asm
                    > USED AT LINE 103 IN MINT.asm
WAITCHAR3:          0203 DEFINED AT LINE 131 IN MINT.asm
                    > USED AT LINE 107 IN MINT.asm
WAITCHAR4:          0219 DEFINED AT LINE 147 IN MINT.asm
                    > USED AT LINE 105 IN MINT.asm
NEXT:               0221 DEFINED AT LINE 174 IN MINT.asm
                    > USED AT LINE 196 IN MINT.asm
                    > USED AT LINE 200 IN MINT.asm
                    > USED AT LINE 579 IN MINT.asm
                    > USED AT LINE 640 IN MINT.asm
                    > USED AT LINE 933 IN MINT.asm
                    > USED AT LINE 1089 IN MINT.asm
                    > USED AT LINE 1095 IN MINT.asm
COMPNEXT:           022A DEFINED AT LINE 184 IN MINT.asm
                    > USED AT LINE 575 IN MINT.asm
COMPNEXT1:          0238 DEFINED AT LINE 194 IN MINT.asm
                    > USED AT LINE 191 IN MINT.asm
INIT:               023D DEFINED AT LINE 198 IN MINT.asm
                    > USED AT LINE 66 IN MINT.asm
INITOPS:            025D DEFINED AT LINE 213 IN MINT.asm
INITOPS1:           0266 DEFINED AT LINE 218 IN MINT.asm
                    > USED AT LINE 228 IN MINT.asm
                    > USED AT LINE 239 IN MINT.asm
INITOPS2:           0276 DEFINED AT LINE 230 IN MINT.asm
                    > USED AT LINE 223 IN MINT.asm
INITOPS2A:          027B DEFINED AT LINE 235 IN MINT.asm
                    > USED AT LINE 238 IN MINT.asm
ENTER:              0281 DEFINED AT LINE 241 IN MINT.asm
                    > USED AT LINE 117 IN MINT.asm
                    > USED AT LINE 1090 IN MINT.asm
                    > USED AT LINE 1238 IN MINT.asm
MACROS:             028A DEFINED AT LINE 252 IN MINT.asm
BACKSP_:            028A DEFINED AT LINE 1 IN MINT.asm
REEDIT_:            02A1 DEFINED AT LINE 4 IN MINT.asm
EDIT_:              02A9 DEFINED AT LINE 7 IN MINT.asm
LIST_:              02B4 DEFINED AT LINE 10 IN MINT.asm
PRINTSTACK_:        02D0 DEFINED AT LINE 13 IN MINT.asm
TOGGLEBASE_:        02D7 DEFINED AT LINE 16 IN MINT.asm
IOPCODES:           02E1 DEFINED AT LINE 256 IN MINT.asm
                    > USED AT LINE 214 IN MINT.asm
PRINTSTR:           035A DEFINED AT LINE 390 IN MINT.asm
                    > USED AT LINE 67 IN MINT.asm
                    > USED AT LINE 509 IN MINT.asm
                    > USED AT LINE 514 IN MINT.asm
PUTSTR0:            0361 DEFINED AT LINE 397 IN MINT.asm
                    > USED AT LINE 403 IN MINT.asm
PUTSTR:             0365 DEFINED AT LINE 400 IN MINT.asm
                    > USED AT LINE 392 IN MINT.asm
                    > USED AT LINE 1158 IN MINT.asm
NSLOOKUP:           036A DEFINED AT LINE 406 IN MINT.asm
                    > USED AT LINE 951 IN MINT.asm
                    > USED AT LINE 1066 IN MINT.asm
                    > USED AT LINE 1086 IN MINT.asm
                    > USED AT LINE 1341 IN MINT.asm
NSLOOKUP0:          036C DEFINED AT LINE 408 IN MINT.asm
NSLOOKUP1:          0370 DEFINED AT LINE 411 IN MINT.asm
                    > USED AT LINE 583 IN MINT.asm
NSLOOKUP2:          0376 DEFINED AT LINE 415 IN MINT.asm
                    > USED AT LINE 410 IN MINT.asm
                    > USED AT LINE 742 IN MINT.asm
NSLOOKUP3:          037A DEFINED AT LINE 418 IN MINT.asm
                    > USED AT LINE 414 IN MINT.asm
PRINTDEC:           0388 DEFINED AT LINE 431 IN MINT.asm
                    > USED AT LINE 591 IN MINT.asm
PRINTDEC1:          03A1 DEFINED AT LINE 441 IN MINT.asm
                    > USED AT LINE 433 IN MINT.asm
                    > USED AT LINE 435 IN MINT.asm
                    > USED AT LINE 437 IN MINT.asm
                    > USED AT LINE 439 IN MINT.asm
PRINTDEC2:          03A3 DEFINED AT LINE 443 IN MINT.asm
                    > USED AT LINE 446 IN MINT.asm
RPUSH:              03AC DEFINED AT LINE 450 IN MINT.asm
                    > USED AT LINE 243 IN MINT.asm
                    > USED AT LINE 578 IN MINT.asm
                    > USED AT LINE 1059 IN MINT.asm
                    > USED AT LINE 1076 IN MINT.asm
                    > USED AT LINE 1146 IN MINT.asm
RPOP:               03B7 DEFINED AT LINE 457 IN MINT.asm
                    > USED AT LINE 617 IN MINT.asm
                    > USED AT LINE 652 IN MINT.asm
                    > USED AT LINE 920 IN MINT.asm
                    > USED AT LINE 1097 IN MINT.asm
RPOP2:              03C1 DEFINED AT LINE 462 IN MINT.asm
                    > USED AT LINE 1083 IN MINT.asm
NESTING:            03C2 DEFINED AT LINE 475 IN MINT.asm
                    > USED AT LINE 87 IN MINT.asm
                    > USED AT LINE 128 IN MINT.asm
                    > USED AT LINE 797 IN MINT.asm
NESTING1A:          03CD DEFINED AT LINE 482 IN MINT.asm
                    > USED AT LINE 479 IN MINT.asm
NESTING1:           03D0 DEFINED AT LINE 485 IN MINT.asm
                    > USED AT LINE 477 IN MINT.asm
NESTING2:           03DF DEFINED AT LINE 494 IN MINT.asm
                    > USED AT LINE 489 IN MINT.asm
                    > USED AT LINE 491 IN MINT.asm
NESTING3:           03E1 DEFINED AT LINE 497 IN MINT.asm
                    > USED AT LINE 493 IN MINT.asm
NESTING4:           03EC DEFINED AT LINE 504 IN MINT.asm
                    > USED AT LINE 499 IN MINT.asm
                    > USED AT LINE 501 IN MINT.asm
PROMPT:             03EE DEFINED AT LINE 508 IN MINT.asm
                    > USED AT LINE 71 IN MINT.asm
                    > USED AT LINE 1102 IN MINT.asm
CRLF:               03F7 DEFINED AT LINE 513 IN MINT.asm
                    > USED AT LINE 140 IN MINT.asm
                    > USED AT LINE 1119 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 522 IN MINT.asm
AND_:               0400 DEFINED AT LINE 524 IN MINT.asm
AND1:               0407 DEFINED AT LINE 532 IN MINT.asm
                    > USED AT LINE 546 IN MINT.asm
                    > USED AT LINE 557 IN MINT.asm
OR_:                040B DEFINED AT LINE 538 IN MINT.asm
XOR_:               0414 DEFINED AT LINE 548 IN MINT.asm
XOR1:               0415 DEFINED AT LINE 550 IN MINT.asm
                    > USED AT LINE 561 IN MINT.asm
INV_:               041D DEFINED AT LINE 559 IN MINT.asm
ADD_:               0422 DEFINED AT LINE 563 IN MINT.asm
ARRDEF_:            0428 DEFINED AT LINE 571 IN MINT.asm
ARRDEF:             0428 DEFINED AT LINE 572 IN MINT.asm
ARRDEF1:            042A DEFINED AT LINE 574 IN MINT.asm
                    > USED AT LINE 1019 IN MINT.asm
CALL_:              043A DEFINED AT LINE 581 IN MINT.asm
DOT_:               0444 DEFINED AT LINE 589 IN MINT.asm
DOT2:               0448 DEFINED AT LINE 592 IN MINT.asm
                    > USED AT LINE 600 IN MINT.asm
HDOT_:              044F DEFINED AT LINE 597 IN MINT.asm
DROP_:              0455 DEFINED AT LINE 602 IN MINT.asm
DUP_:               0458 DEFINED AT LINE 606 IN MINT.asm
ETX_:               045D DEFINED AT LINE 611 IN MINT.asm
EXIT_:              0460 DEFINED AT LINE 614 IN MINT.asm
FETCH_:             046A DEFINED AT LINE 622 IN MINT.asm
FETCH1:             046B DEFINED AT LINE 624 IN MINT.asm
                    > USED AT LINE 1067 IN MINT.asm
KEY_:               0471 DEFINED AT LINE 632 IN MINT.asm
NOP_:               047A DEFINED AT LINE 639 IN MINT.asm
OVER_:              047D DEFINED AT LINE 643 IN MINT.asm
RET_:               0484 DEFINED AT LINE 651 IN MINT.asm
ROT_:               048B DEFINED AT LINE 656 IN MINT.asm
SHL_:               0492 DEFINED AT LINE 665 IN MINT.asm
SHR_:               0497 DEFINED AT LINE 672 IN MINT.asm
SHR1:               0498 DEFINED AT LINE 674 IN MINT.asm
                    > USED AT LINE 1233 IN MINT.asm
STORE_:             049F DEFINED AT LINE 680 IN MINT.asm
SWAP_:              04A6 DEFINED AT LINE 689 IN MINT.asm
SUB_:               04AB DEFINED AT LINE 695 IN MINT.asm
SUB2:               04AD DEFINED AT LINE 699 IN MINT.asm
                    > USED AT LINE 708 IN MINT.asm
NEG_:               04B3 DEFINED AT LINE 705 IN MINT.asm
EQ_:                04B9 DEFINED AT LINE 710 IN MINT.asm
GT_:                04C5 DEFINED AT LINE 719 IN MINT.asm
LT_:                04C9 DEFINED AT LINE 724 IN MINT.asm
CMP_:               04CB DEFINED AT LINE 728 IN MINT.asm
                    > USED AT LINE 722 IN MINT.asm
EQUAL:              04D6 DEFINED AT LINE 734 IN MINT.asm
                    > USED AT LINE 715 IN MINT.asm
LESS:               04D7 DEFINED AT LINE 736 IN MINT.asm
                    > USED AT LINE 717 IN MINT.asm
                    > USED AT LINE 731 IN MINT.asm
                    > USED AT LINE 733 IN MINT.asm
VAR_:               04DA DEFINED AT LINE 740 IN MINT.asm
AGAIN_:             04E1 DEFINED AT LINE 746 IN MINT.asm
ALT_:               04E4 DEFINED AT LINE 748 IN MINT.asm
ARREND_:            04E7 DEFINED AT LINE 750 IN MINT.asm
MUL_:               04EA DEFINED AT LINE 752 IN MINT.asm
HEX_:               04ED DEFINED AT LINE 754 IN MINT.asm
DEF_:               04F0 DEFINED AT LINE 756 IN MINT.asm
STR_:               04F3 DEFINED AT LINE 758 IN MINT.asm
NUM_:               04F6 DEFINED AT LINE 761 IN MINT.asm
DIV_:               04F8 DEFINED AT LINE 763 IN MINT.asm
BEGIN_:             04FA DEFINED AT LINE 765 IN MINT.asm
BEGIN:              04FC DEFINED AT LINE 775 IN MINT.asm
                    > USED AT LINE 765 IN MINT.asm
BEGIN1:             051D DEFINED AT LINE 792 IN MINT.asm
                    > USED AT LINE 779 IN MINT.asm
                    > USED AT LINE 1056 IN MINT.asm
                    > USED AT LINE 1131 IN MINT.asm
BEGIN2:             051F DEFINED AT LINE 794 IN MINT.asm
                    > USED AT LINE 800 IN MINT.asm
BEGIN3:             0528 DEFINED AT LINE 801 IN MINT.asm
NUM:                052A DEFINED AT LINE 816 IN MINT.asm
                    > USED AT LINE 761 IN MINT.asm
NUM1:               052E DEFINED AT LINE 820 IN MINT.asm
                    > USED AT LINE 844 IN MINT.asm
NUM2:               0548 DEFINED AT LINE 846 IN MINT.asm
                    > USED AT LINE 832 IN MINT.asm
                    > USED AT LINE 834 IN MINT.asm
                    > USED AT LINE 908 IN MINT.asm
                    > USED AT LINE 910 IN MINT.asm
DIV:                054C DEFINED AT LINE 864 IN MINT.asm
                    > USED AT LINE 763 IN MINT.asm
DIV1:               0556 DEFINED AT LINE 874 IN MINT.asm
                    > USED AT LINE 887 IN MINT.asm
DIV2:               0563 DEFINED AT LINE 883 IN MINT.asm
                    > USED AT LINE 880 IN MINT.asm
DIV3:               0564 DEFINED AT LINE 885 IN MINT.asm
                    > USED AT LINE 882 IN MINT.asm
DIV4:               0569 DEFINED AT LINE 890 IN MINT.asm
HEX:                056E DEFINED AT LINE 898 IN MINT.asm
                    > USED AT LINE 754 IN MINT.asm
HEX1:               0571 DEFINED AT LINE 900 IN MINT.asm
                    > USED AT LINE 917 IN MINT.asm
HEX2:               0579 DEFINED AT LINE 906 IN MINT.asm
                    > USED AT LINE 904 IN MINT.asm
ARREND:             058B DEFINED AT LINE 919 IN MINT.asm
                    > USED AT LINE 750 IN MINT.asm
ARREND2:            05A0 DEFINED AT LINE 931 IN MINT.asm
                    > USED AT LINE 928 IN MINT.asm
DEF:                05A7 DEFINED AT LINE 946 IN MINT.asm
                    > USED AT LINE 756 IN MINT.asm
DEF1:               05B7 DEFINED AT LINE 956 IN MINT.asm
                    > USED AT LINE 963 IN MINT.asm
DEF2:               05C1 DEFINED AT LINE 965 IN MINT.asm
                    > USED AT LINE 962 IN MINT.asm
DEF3:               05C2 DEFINED AT LINE 967 IN MINT.asm
                    > USED AT LINE 1189 IN MINT.asm
AGAIN:              05C8 DEFINED AT LINE 971 IN MINT.asm
                    > USED AT LINE 746 IN MINT.asm
AGAIN1:             05DA DEFINED AT LINE 984 IN MINT.asm
                    > USED AT LINE 978 IN MINT.asm
AGAIN2:             05F4 DEFINED AT LINE 996 IN MINT.asm
                    > USED AT LINE 989 IN MINT.asm
AGAIN3:             05F7 DEFINED AT LINE 998 IN MINT.asm
                    > USED AT LINE 982 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 1006 IN MINT.asm
                    > USED AT LINE 53 IN MINT.asm
ALTCALL_:           0600 DEFINED AT LINE 1008 IN MINT.asm
ALTDEF_:            0602 DEFINED AT LINE 1011 IN MINT.asm
ANONDEF_:           0604 DEFINED AT LINE 1014 IN MINT.asm
CARRDEF_:           0607 DEFINED AT LINE 1017 IN MINT.asm
CFETCH_:            060C DEFINED AT LINE 1021 IN MINT.asm
ANOP_:              0611 DEFINED AT LINE 1026 IN MINT.asm
COMMENT_:           0613 DEFINED AT LINE 1029 IN MINT.asm
                    > USED AT LINE 1033 IN MINT.asm
CSTORE_:            061C DEFINED AT LINE 1037 IN MINT.asm
EMIT_:              0621 DEFINED AT LINE 1043 IN MINT.asm
IFTE_:              0628 DEFINED AT LINE 1049 IN MINT.asm
IFTE1:              0632 DEFINED AT LINE 1057 IN MINT.asm
                    > USED AT LINE 1053 IN MINT.asm
GETREF_:            063A DEFINED AT LINE 1062 IN MINT.asm
GETREF:             063A DEFINED AT LINE 1063 IN MINT.asm
GO_:                0642 DEFINED AT LINE 1069 IN MINT.asm
GO1:                0643 DEFINED AT LINE 1071 IN MINT.asm
                    > USED AT LINE 587 IN MINT.asm
GO2:                064F DEFINED AT LINE 1079 IN MINT.asm
                    > USED AT LINE 1074 IN MINT.asm
NSREF_:             0651 DEFINED AT LINE 1082 IN MINT.asm
NSREF2:             066C DEFINED AT LINE 1093 IN MINT.asm
                    > USED AT LINE 1087 IN MINT.asm
NSEXIT_:            0671 DEFINED AT LINE 1096 IN MINT.asm
                    > USED AT LINE 1092 IN MINT.asm
PROMPT_:            0679 DEFINED AT LINE 1101 IN MINT.asm
ALTVAR_:            067E DEFINED AT LINE 1105 IN MINT.asm
I_:                 0688 DEFINED AT LINE 1114 IN MINT.asm
NEWLN_:             068C DEFINED AT LINE 1118 IN MINT.asm
BREAK_:             0691 DEFINED AT LINE 1122 IN MINT.asm
BREAK1:             0698 DEFINED AT LINE 1128 IN MINT.asm
                    > USED AT LINE 1126 IN MINT.asm
NSENTER_:           06A0 DEFINED AT LINE 1133 IN MINT.asm
NSENTER1:           06A1 DEFINED AT LINE 1135 IN MINT.asm
                    > USED AT LINE 1084 IN MINT.asm
STRDEF_:            06BF DEFINED AT LINE 1152 IN MINT.asm
PRNSTR_:            06C1 DEFINED AT LINE 1155 IN MINT.asm
PRNSTR:             06C1 DEFINED AT LINE 1156 IN MINT.asm
UTIL_:              06C7 DEFINED AT LINE 1161 IN MINT.asm
STRDEF:             06CA DEFINED AT LINE 1173 IN MINT.asm
                    > USED AT LINE 1153 IN MINT.asm
STRDEF1:            06D2 DEFINED AT LINE 1178 IN MINT.asm
                    > USED AT LINE 1185 IN MINT.asm
STRDEF2:            06D5 DEFINED AT LINE 1182 IN MINT.asm
                    > USED AT LINE 1177 IN MINT.asm
ANONDEF:            06E0 DEFINED AT LINE 1191 IN MINT.asm
                    > USED AT LINE 1015 IN MINT.asm
ANONDEF1:           06E6 DEFINED AT LINE 1195 IN MINT.asm
                    > USED AT LINE 1202 IN MINT.asm
ANONDEF2:           06F0 DEFINED AT LINE 1203 IN MINT.asm
                    > USED AT LINE 1201 IN MINT.asm
UTILTABLE:          0700 DEFINED AT LINE 1208 IN MINT.asm
UTILCODE:           0706 DEFINED AT LINE 1216 IN MINT.asm
EXEC_:              0706 DEFINED AT LINE 1218 IN MINT.asm
EXEC1:              070B DEFINED AT LINE 1221 IN MINT.asm
                    > USED AT LINE 1219 IN MINT.asm
DEPTH_:             070E DEFINED AT LINE 1226 IN MINT.asm
PRINTSTK_:          071C DEFINED AT LINE 1235 IN MINT.asm
PRINTSTK:           071C DEFINED AT LINE 1236 IN MINT.asm
EDITDEF_:           0745 DEFINED AT LINE 1242 IN MINT.asm
INPORT_:            074A DEFINED AT LINE 1246 IN MINT.asm
OUTPORT_:           0755 DEFINED AT LINE 1256 IN MINT.asm
ALT:                075E DEFINED AT LINE 1270 IN MINT.asm
                    > USED AT LINE 748 IN MINT.asm
ALT2:               0765 DEFINED AT LINE 1276 IN MINT.asm
STR:                076B DEFINED AT LINE 1282 IN MINT.asm
                    > USED AT LINE 759 IN MINT.asm
STR1:               076C DEFINED AT LINE 1285 IN MINT.asm
                    > USED AT LINE 1291 IN MINT.asm
STR2:               0777 DEFINED AT LINE 1293 IN MINT.asm
                    > USED AT LINE 1289 IN MINT.asm
MUL:                077A DEFINED AT LINE 1299 IN MINT.asm
                    > USED AT LINE 752 IN MINT.asm
MUL2:               0784 DEFINED AT LINE 1308 IN MINT.asm
                    > USED AT LINE 1317 IN MINT.asm
UTIL:               0796 DEFINED AT LINE 1322 IN MINT.asm
                    > USED AT LINE 1162 IN MINT.asm
EDITDEF:            07A1 DEFINED AT LINE 1335 IN MINT.asm
                    > USED AT LINE 1243 IN MINT.asm
EDITDEF1:           07BE DEFINED AT LINE 1354 IN MINT.asm
                    > USED AT LINE 1360 IN MINT.asm
EDITDEF2:           07BF DEFINED AT LINE 1356 IN MINT.asm
                    > USED AT LINE 1353 IN MINT.asm
EDITDEF3:           07C7 DEFINED AT LINE 1361 IN MINT.asm
                    > USED AT LINE 1348 IN MINT.asm
WRITECHAR:          07D1 DEFINED AT LINE 1367 IN MINT.asm
                    > USED AT LINE 1350 IN MINT.asm
                    > USED AT LINE 1352 IN MINT.asm
                    > USED AT LINE 1358 IN MINT.asm
PRINTHEX:           07D6 DEFINED AT LINE 1372 IN MINT.asm
                    > USED AT LINE 599 IN MINT.asm
PRINTHEX2:          07E1 DEFINED AT LINE 1381 IN MINT.asm
                    > USED AT LINE 1376 IN MINT.asm
                    > USED AT LINE 1378 IN MINT.asm
PRINTHEX3:          07EA DEFINED AT LINE 1389 IN MINT.asm
                    > USED AT LINE 1387 IN MINT.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 80 IN MINT.asm
                    > USED AT LINE 123 IN MINT.asm
                    > USED AT LINE 132 IN MINT.asm
                    > USED AT LINE 149 IN MINT.asm
                    > USED AT LINE 1347 IN MINT.asm
                    > USED AT LINE 1362 IN MINT.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 199 IN MINT.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 47 IN MINT.asm
                    > USED AT LINE 57 IN MINT.asm
                    > USED AT LINE 60 IN MINT.asm
                    > USED AT LINE 65 IN MINT.asm
                    > USED AT LINE 1230 IN MINT.asm
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
OPCODES:            1A00 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 215 IN MINT.asm
CTRLCODES:          1A80 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 111 IN MINT.asm
ALTCODES:           1A80 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 1273 IN MINT.asm
MINTVARS:           1B00 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 1107 IN MINT.asm
VBYTEMODE:          1B02 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 188 IN MINT.asm
                    > USED AT LINE 576 IN MINT.asm
                    > USED AT LINE 926 IN MINT.asm
TBPTR:              1B34 DEFINED AT LINE 23 IN ram.asm
RST08:              1B36 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B38 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B3A DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3C DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3E DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B40 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B42 DEFINED AT LINE 31 IN ram.asm
INTVEC:             1B44 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B46 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B48 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B4A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTDEFS:            1B4C DEFINED AT LINE 37 IN ram.asm
ALTVARS:            1B80 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 202 IN MINT.asm
                    > USED AT LINE 1107 IN MINT.asm
VS0:                1B80 DEFINED AT LINE 41 IN ram.asm
VBASE16:            1B82 DEFINED AT LINE 42 IN ram.asm
VTIBPTR:            1B84 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 74 IN MINT.asm
                    > USED AT LINE 110 IN MINT.asm
                    > USED AT LINE 119 IN MINT.asm
                    > USED AT LINE 148 IN MINT.asm
                    > USED AT LINE 1365 IN MINT.asm
VNS:                1B86 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 421 IN MINT.asm
                    > USED AT LINE 1098 IN MINT.asm
                    > USED AT LINE 1145 IN MINT.asm
                    > USED AT LINE 1149 IN MINT.asm
VLASTDEF:           1B88 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 949 IN MINT.asm
VALTPAGE:           1B8C DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1278 IN MINT.asm
VHEAPPTR:           1B8E DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 186 IN MINT.asm
                    > USED AT LINE 195 IN MINT.asm
                    > USED AT LINE 577 IN MINT.asm
                    > USED AT LINE 923 IN MINT.asm
                    > USED AT LINE 952 IN MINT.asm
                    > USED AT LINE 968 IN MINT.asm
                    > USED AT LINE 1174 IN MINT.asm
                    > USED AT LINE 1193 IN MINT.asm
                    > USED AT LINE 1205 IN MINT.asm
NS0:                1BC0 DEFINED AT LINE 74 IN ram.asm
                    > USED AT LINE 50 IN MINT.asm
                    > USED AT LINE 206 IN MINT.asm
                    > USED AT LINE 1147 IN MINT.asm
                    > USED AT LINE 75 IN ram.asm
NS1:                1C40 DEFINED AT LINE 75 IN ram.asm
HEAP:               1E40 DEFINED AT LINE 76 IN ram.asm
                    > USED AT LINE 54 IN MINT.asm
