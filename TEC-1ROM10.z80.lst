0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 6A 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 6C 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 6E 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 70 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 72 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 74 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 78 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 7A 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 7C 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 7E 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 08               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 6A 0A               LD   (RST08),HL   
0094   22 6C 0A               LD   (RST10),HL   
0097   22 6E 0A               LD   (RST18),HL   
009A   22 70 0A               LD   (RST20),HL   
009D   22 72 0A               LD   (RST28),HL   
00A0   22 74 0A               LD   (RST30),HL   
00A3   22 78 0A               LD   (INTVEC),HL   
00A6   22 7A 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 7C 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 7E 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 80 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   
00C6                NSNUM:    EQU   4   ; namespaces
00C6                NSSIZE:   EQU   $80   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   
0180                START:       
0180   31 80 08               LD   SP,DSTACK   
0183   CD A7 01               CALL   initialize   
0186   CD 9A 07               CALL   printStr   
0189   4D 49 4E 54 20 56 31 2E 30 0D 0A 00 .CSTR   "MINT V1.0\r\n"   
0195   18 55                  JR   interpret   
0197                             ; ***********************************************************************
0197                             ; Initial values for user mintVars		
0197                             ; ***********************************************************************		
0197                ISYSVARS:      
0197   80 08                  DW   dStack   ; a vS0
0199   00 00                  DW   FALSE   ; b vBase16
019B   00 00                  DW   0   ; c vTIBPtr
019D   C0 0A                  DW   DEFS   ; d vNS
019F   41 00                  DW   65   ; e vLastDef "A"
01A1   00 00                  DW   0   ; f
01A3   00 00                  DW   0   ; g
01A5   C0 0C                  DW   HEAP   ; h vHeapPtr
01A7                INITIALIZE:      
01A7   DD 21 00 09            LD   IX,RSTACK   
01AB   FD 21 4B 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01AF   21 97 01               LD   HL,iSysVars   
01B2   11 00 0A               LD   DE,sysVars   
01B5   01 10 00               LD   BC,8 * 2   
01B8   ED B0                  LDIR      
01BA   21 C0 0A               LD   HL,DEFS   ; init namespaces to 0
01BD   54 5D                  LD   DE,HL   
01BF   13                     INC   DE   
01C0   36 00                  LD   (HL),0   
01C2   01 00 02               LD   BC,NSNUM*NSSIZE   
01C5   ED B0                  LDIR      
01C7   C9                     RET      
01C8                ETX:         ;=12
01C8   21 80 F7               LD   HL,-DSTACK   
01CB   39                     ADD   HL,SP   
01CC   30 03                  JR   NC,etx1   
01CE   31 80 08               LD   SP,DSTACK   
01D1                ETX1:        
01D1   18 19                  JR   interpret   
01D3                MACRO:       ;=25
01D3   ED 43 04 0A            LD   (vTIBPtr),BC   
01D7   21 80 03               LD   HL,ctrlCodes   
01DA   85                     ADD   A,L   
01DB   6F                     LD   L,A   
01DC   5E                     LD   E,(HL)   
01DD   16 02                  LD   D,msb(macros)   
01DF   D5                     PUSH   DE   
01E0   CD 7D 07               CALL   ENTER   
01E3   5C 47 00               .CSTR   "\\G"   
01E6   ED 4B 04 0A            LD   BC,(vTIBPtr)   
01EA   18 0A                  JR   interpret2   
01EC                INTERPRET:      
01EC   CD 93 02               CALL   prompt   
01EF   01 00 00               LD   BC,0   ; load BC with offset into TIB
01F2   ED 43 04 0A            LD   (vTIBPtr),BC   
01F6                INTERPRET2:      ; calc nesting (a macro might have changed it)
01F6   1E 00                  LD   E,0   ; initilize nesting value
01F8   C5                     PUSH   BC   ; save offset into TIB,
01F9                             ; BC is also the count of chars in TIB
01F9   21 00 09               LD   HL,TIB   ; HL is start of TIB
01FC   18 06                  JR   interpret4   
01FE                INTERPRET3:      
01FE   7E                     LD   A,(HL)   ; A = char in TIB
01FF   23                     INC   HL   ; inc pointer into TIB
0200   0B                     DEC   BC   ; dec count of chars in TIB
0201   CD 67 02               CALL   nesting   ; update nesting value
0204                INTERPRET4:      
0204   79                     LD   A,C   ; is count zero?
0205   B0                     OR   B   
0206   20 F6                  JR   NZ,interpret3   ; if not loop
0208   C1                     POP   BC   ; restore offset into TIB
0209                             ; *******************************************************************
0209                             ; Wait for a character from the serial input (keyboard)
0209                             ; and store it in the text buffer. Keep accepting characters,
0209                             ; increasing the instruction pointer BC - until a newline received.
0209                             ; *******************************************************************
0209                WAITCHAR:      
0209   CD 81 00               CALL   getchar   ; loop around waiting for character
020C   FE 20                  CP   $20   
020E   30 0C                  JR   NC,waitchar1   
0210   FE 00                  CP   $0   ; is it end of string?
0212   28 2C                  JR   Z,waitchar4   
0214   FE 0D                  CP   "\r"   ; carriage return?
0216   28 12                  JR   Z,waitchar3   
0218   16 00                  LD   D,0   
021A   18 B7                  JR   macro   
021C                WAITCHAR1:      
021C   21 00 09               LD   HL,TIB   
021F   09                     ADD   HL,BC   
0220   77                     LD   (HL),A   ; store the character in textbuf
0221   03                     INC   BC   
0222   CD 85 00               CALL   putchar   ; echo character to screen
0225   CD 67 02               CALL   nesting   
0228   18 DF                  JR   waitchar   ; wait for next character
022A                WAITCHAR3:      
022A   21 00 09               LD   HL,TIB   
022D   09                     ADD   HL,BC   
022E   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0230   23                     INC   HL   
0231   36 0A                  LD   (HL),"\n"   
0233   23                     INC   HL   ; ????
0234   03                     INC   BC   
0235   03                     INC   BC   
0236   CD 9C 02               CALL   crlf   ; echo character to screen
0239   7B                     LD   A,E   ; if zero nesting append and ETX after \r
023A   B7                     OR   A   
023B   20 CC                  JR   NZ,waitchar   
023D   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
023F   03                     INC   BC   
0240                WAITCHAR4:      
0240   ED 43 04 0A            LD   (vTIBPtr),BC   
0244   01 00 09               LD   BC,TIB   ; Instructions stored on heap at address HERE
0247   0B                     DEC   BC   
0248   C3 4B 02               JP   NEXT   
024B                             ; ********************************************************************************
024B                             ; 
024B                             ; Dispatch Routine.
024B                             ; 
024B                             ; Get the next character and form a 1 byte jump address
024B                             ; 
024B                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
024B                             ; jump to the selected function.
024B                             ; 
024B                             ; Individual handler routines will deal with each category:
024B                             ; 
024B                             ; 1. Detect characters A-Z and jump to the User Command handler routine
024B                             ; 
024B                             ; 2. Detect characters a-z and jump to the variable handler routine
024B                             ; 
024B                             ; 3. All other characters are punctuation and cause a jump to the associated
024B                             ; primitive code.
024B                             ; 
024B                             ; Instruction Pointer IP BC is incremented
024B                             ; 
024B                             ; *********************************************************************************
024B                NEXT:        ;=9
024B   03                     INC   BC   ;       Increment the IP
024C   0A                     LD   A,(BC)   ;       Get the next character and dispatch
024D   6F                     LD   L,A   ;       Index into table
024E   26 03                  LD   H,msb(opcodes)   ;       Start address of jump table
0250   6E                     LD   L,(HL)   ;       get low jump address
0251   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
0253   E9                     JP   (HL)   ;       Jump to routine
0254                             ; ARRAY compilation routine
0254                COMPNEXT:      ;=20
0254   D1                     POP   DE   ; DE = return address
0255   2A 0E 0A               LD   HL,(vHeapPtr)   ; load heap ptr
0258   73                     LD   (HL),E   ; store lsb
0259   3A 36 0A               LD   A,(vByteMode)   
025C   23                     INC   HL   
025D   B7                     OR   A   
025E   20 02                  JR   NZ,compNext1   
0260   72                     LD   (HL),D   
0261   23                     INC   HL   
0262                COMPNEXT1:      
0262   22 0E 0A               LD   (vHeapPtr),HL   ; save heap ptr
0265   18 E4                  JR   NEXT   
0267                             ; **************************************************************************
0267                             ; calculate nesting value
0267                             ; A is char to be tested,
0267                             ; E is the nesting value (initially 0)
0267                             ; E is increased by ( and [
0267                             ; E is decreased by ) and ]
0267                             ; E has its bit 7 toggled by `
0267                             ; limited to 127 levels
0267                             ; **************************************************************************
0267                NESTING:      ;=44
0267   FE 60                  CP   "`"   
0269   20 0A                  JR   NZ,nesting1   
026B   CB 7B                  BIT   7,E   
026D   28 03                  JR   Z,nesting1a   
026F   CB BB                  RES   7,E   
0271   C9                     RET      
0272                NESTING1A:      
0272   CB FB                  SET   7,E   
0274   C9                     RET      
0275                NESTING1:      
0275   CB 7B                  BIT   7,E   
0277   C0                     RET   NZ   
0278   FE 3A                  CP   ":"   
027A   28 08                  JR   Z,nesting2   
027C   FE 5B                  CP   "["   
027E   28 04                  JR   Z,nesting2   
0280   FE 28                  CP   "("   
0282   20 02                  JR   NZ,nesting3   
0284                NESTING2:      
0284   1C                     INC   E   
0285   C9                     RET      
0286                NESTING3:      
0286   FE 3B                  CP   ";"   
0288   28 07                  JR   Z,nesting4   
028A   FE 5D                  CP   "]"   
028C   28 03                  JR   Z,nesting4   
028E   FE 29                  CP   ")"   
0290   C0                     RET   NZ   
0291                NESTING4:      
0291   1D                     DEC   E   
0292   C9                     RET      
0293                PROMPT:      ;=9
0293   CD 9A 07               CALL   printStr   
0296   0D 0A 3E 20 00         .CSTR   "\r\n> "   
029B   C9                     RET      
029C                CRLF:        ;=7
029C   CD 9A 07               CALL   printStr   
029F   0D 0A 00               .CSTR   "\r\n"   
02A2   C9                     RET      
02A3                             ; **************************************************************************
02A3                             ; Macros must be written in Mint and end with ;
02A3                             ; this code must not span pages
02A3                             ; **************************************************************************
02A3                MACROS:      
02A3                BACKSP_:      
02A3   5C 63 40 30 3D 30 3D 28 5C 63 40 31 2D 5C 63 21 60 08 20 08 60 29 3B DB   "\\c@0=0=(\\c@1-\\c!`\b \b`);"   
02BA                REEDIT_:      
02BA   5C 65 5C 40 5C 5A 3B   DB   "\\e\\@\\Z;"   
02C1                EDIT_:       
02C1   60 3F 60 5C 4B 5C 3E 5C 5A 3B 00 .CSTR   "`?`\\K\\>\\Z;"   
02CC                LIST_:       
02CC   5C 4E 32 36 28 5C 69 40 5C 5E 41 2B 5C 5A 5C 63 40 30 3E 28 5C 4E 29 29 5C 3E 3B 00 .CSTR   "\\N26(\\i@\\^A+\\Z\\c@0>(\\N))\\>;"   
02E8                PRINTSTACK_:      
02E8   60 3D 3E 20 60 5C 50 5C 4E 5C 3E 3B 00 .CSTR   "`=> `\\P\\N\\>;"   
02F5                TOGGLEBASE_:      
02F5   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
02FF                             ; **************************************************************************
02FF                             ; Page 2  Jump Tables
02FF                             ; **************************************************************************
02FF                          ALIGN   $100   
0300                OPCODES:      
0300                             ; ***********************************************************************
0300                             ; Initial values for user mintVars		
0300                             ; ***********************************************************************		
0300   65                     DB   lsb(exit_)   ;   NUL
0301   76                     DB   lsb(nop_)   ;   SOH
0302   76                     DB   lsb(nop_)   ;   STX
0303   62                     DB   lsb(etx_)   ;   ETX
0304   76                     DB   lsb(nop_)   ;   EOT
0305   76                     DB   lsb(nop_)   ;   ENQ
0306   76                     DB   lsb(nop_)   ;   ACK
0307   76                     DB   lsb(nop_)   ;   BEL
0308   76                     DB   lsb(nop_)   ;   BS
0309   76                     DB   lsb(nop_)   ;   TAB
030A   76                     DB   lsb(nop_)   ;   LF
030B   76                     DB   lsb(nop_)   ;   VT
030C   76                     DB   lsb(nop_)   ;   FF
030D   76                     DB   lsb(nop_)   ;   CR
030E   76                     DB   lsb(nop_)   ;   SO
030F   76                     DB   lsb(nop_)   ;   SI
0310   76                     DB   lsb(nop_)   ;   DLE
0311   76                     DB   lsb(nop_)   ;   DC1
0312   76                     DB   lsb(nop_)   ;   DC2
0313   76                     DB   lsb(nop_)   ;   DC3
0314   76                     DB   lsb(nop_)   ;   DC4
0315   76                     DB   lsb(nop_)   ;   NAK
0316   76                     DB   lsb(nop_)   ;   SYN
0317   76                     DB   lsb(nop_)   ;   ETB
0318   76                     DB   lsb(nop_)   ;   CAN
0319   76                     DB   lsb(nop_)   ;   EM
031A   76                     DB   lsb(nop_)   ;   SUB
031B   76                     DB   lsb(nop_)   ;   ESC
031C   76                     DB   lsb(nop_)   ;   FS
031D   76                     DB   lsb(nop_)   ;   GS
031E   76                     DB   lsb(nop_)   ;   RS
031F   76                     DB   lsb(nop_)   ;   US
0320   76                     DB   lsb(nop_)   ;   SP
0321   87                     DB   lsb(store_)   ;   !
0322   5D                     DB   lsb(dup_)   ;   "
0323   E5                     DB   lsb(hex_)   ;    #
0324   8E                     DB   lsb(swap_)   ;    $
0325   79                     DB   lsb(over_)   ;    %
0326   00                     DB   lsb(and_)   ;    &
0327   5A                     DB   lsb(drop_)   ;    '
0328   EB                     DB   lsb(begin_)   ;    (
0329   D6                     DB   lsb(again_)   ;    )
032A   E2                     DB   lsb(mul_)   ;    *
032B   22                     DB   lsb(add_)   ;    +
032C   49                     DB   lsb(hdot_)   ;    ,
032D   A6                     DB   lsb(sub_)   ;    -
032E   4F                     DB   lsb(dot_)   ;    .
032F   EF                     DB   lsb(div_)   ;    /
0330   ED                     DB   lsb(num_)   ;    0
0331   ED                     DB   lsb(num_)   ;    1
0332   ED                     DB   lsb(num_)   ;    2
0333   ED                     DB   lsb(num_)   ;    3
0334   ED                     DB   lsb(num_)   ;    4
0335   ED                     DB   lsb(num_)   ;    5
0336   ED                     DB   lsb(num_)   ;    6
0337   ED                     DB   lsb(num_)   ;    7
0338   ED                     DB   lsb(num_)   ;    8
0339   ED                     DB   lsb(num_)   ;    9
033A   E8                     DB   lsb(def_)   ;    :
033B   80                     DB   lsb(ret_)   ;    ;
033C   BE                     DB   lsb(lt_)   ;    <
033D   AE                     DB   lsb(eq_)   ;    =
033E   BA                     DB   lsb(gt_)   ;    >
033F   DF                     DB   lsb(getRef_)   ;    ?
0340   6F                     DB   lsb(fetch_)   ;    @
0341   3A                     DB   lsb(call_)   ;    A
0342   3A                     DB   lsb(call_)   ;    B
0343   3A                     DB   lsb(call_)   ;    C
0344   3A                     DB   lsb(call_)   ;    D
0345   3A                     DB   lsb(call_)   ;    E
0346   3A                     DB   lsb(call_)   ;    F
0347   3A                     DB   lsb(call_)   ;    G
0348   3A                     DB   lsb(call_)   ;    H
0349   3A                     DB   lsb(call_)   ;    I
034A   3A                     DB   lsb(call_)   ;    J
034B   3A                     DB   lsb(call_)   ;    K
034C   3A                     DB   lsb(call_)   ;    L
034D   3A                     DB   lsb(call_)   ;    M
034E   3A                     DB   lsb(call_)   ;    N
034F   3A                     DB   lsb(call_)   ;    O
0350   3A                     DB   lsb(call_)   ;    P
0351   3A                     DB   lsb(call_)   ;    Q
0352   3A                     DB   lsb(call_)   ;    R
0353   3A                     DB   lsb(call_)   ;    S
0354   3A                     DB   lsb(call_)   ;    T
0355   3A                     DB   lsb(call_)   ;    U
0356   3A                     DB   lsb(call_)   ;    V
0357   3A                     DB   lsb(call_)   ;    W
0358   3A                     DB   lsb(call_)   ;    X
0359   3A                     DB   lsb(call_)   ;    Y
035A   3A                     DB   lsb(call_)   ;    Z
035B   28                     DB   lsb(arrDef_)   ;    [
035C   D9                     DB   lsb(alt_)   ;    \
035D   DC                     DB   lsb(arrEnd_)   ;    ]
035E   14                     DB   lsb(xor_)   ;    ^
035F   A0                     DB   lsb(neg_)   ;    _
0360   F1                     DB   lsb(str_)   ;    `
0361   CF                     DB   lsb(var_)   ;    a
0362   CF                     DB   lsb(var_)   ;    b
0363   CF                     DB   lsb(var_)   ;    c
0364   CF                     DB   lsb(var_)   ;    d
0365   CF                     DB   lsb(var_)   ;    e
0366   CF                     DB   lsb(var_)   ;    f
0367   CF                     DB   lsb(var_)   ;    g
0368   CF                     DB   lsb(var_)   ;    h
0369   CF                     DB   lsb(var_)   ;    i
036A   CF                     DB   lsb(var_)   ;    j
036B   CF                     DB   lsb(var_)   ;    k
036C   CF                     DB   lsb(var_)   ;    l
036D   CF                     DB   lsb(var_)   ;    m
036E   CF                     DB   lsb(var_)   ;    n
036F   CF                     DB   lsb(var_)   ;    o
0370   CF                     DB   lsb(var_)   ;    p
0371   CF                     DB   lsb(var_)   ;    q
0372   CF                     DB   lsb(var_)   ;    r
0373   CF                     DB   lsb(var_)   ;    s
0374   CF                     DB   lsb(var_)   ;    t
0375   CF                     DB   lsb(var_)   ;    u
0376   CF                     DB   lsb(var_)   ;    v
0377   CF                     DB   lsb(var_)   ;    w
0378   CF                     DB   lsb(var_)   ;    x
0379   CF                     DB   lsb(var_)   ;    y
037A   CF                     DB   lsb(var_)   ;    z
037B   93                     DB   lsb(shl_)   ;    {
037C   0B                     DB   lsb(or_)   ;    |
037D   98                     DB   lsb(shr_)   ;    }
037E   1D                     DB   lsb(inv_)   ;    ~
037F   76                     DB   lsb(nop_)   ;    backspace
0380                             ; ***********************************************************************
0380                             ; Alternate function codes		
0380                             ; ***********************************************************************		
0380                CTRLCODES:      
0380                ALTCODES:      
0380   00                     DB   lsb(EMPTY)   ; NUL ^@
0381   00                     DB   lsb(EMPTY)   ; SOH ^A  1
0382   F5                     DB   lsb(toggleBase_)   ; STX ^B  2
0383   00                     DB   lsb(EMPTY)   ; ETX ^C  3
0384   00                     DB   lsb(EMPTY)   ; EOT ^D  4
0385   C1                     DB   lsb(edit_)   ; ENQ ^E  5
0386   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0387   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0388   A3                     DB   lsb(backsp_)   ; BS  ^H  8
0389   00                     DB   lsb(EMPTY)   ; TAB ^I  9
038A   BA                     DB   lsb(reedit_)   ; LF  ^J 10
038B   00                     DB   lsb(EMPTY)   ; VT  ^K 11
038C   CC                     DB   lsb(list_)   ; FF  ^L 12
038D   00                     DB   lsb(EMPTY)   ; CR  ^M 13
038E   00                     DB   lsb(EMPTY)   ; SO  ^N 14
038F   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0390   E8                     DB   lsb(printStack_)   ; DLE ^P 16
0391   00                     DB   lsb(EMPTY)   ; DC1 ^Q 17
0392   00                     DB   lsb(EMPTY)   ; DC2 ^R 18
0393   00                     DB   lsb(EMPTY)   ; DC3 ^S 19
0394   00                     DB   lsb(EMPTY)   ; DC4 ^T 20
0395   00                     DB   lsb(EMPTY)   ; NAK ^U 21
0396   00                     DB   lsb(EMPTY)   ; SYN ^V 22
0397   00                     DB   lsb(EMPTY)   ; ETB ^W 23
0398   00                     DB   lsb(EMPTY)   ; CAN ^X 24
0399   00                     DB   lsb(EMPTY)   ; EM  ^Y 25
039A   00                     DB   lsb(EMPTY)   ; SUB ^Z 26
039B   00                     DB   lsb(EMPTY)   ; ESC ^[
039C   00                     DB   lsb(EMPTY)   ; FS  ^\
039D   00                     DB   lsb(EMPTY)   ; GS  ^]
039E   00                     DB   lsb(EMPTY)   ; RS  ^^
039F   00                     DB   lsb(EMPTY)   ; US  ^_)
03A0   0A                     DB   lsb(aNop_)   ; SP  ^`
03A1   1A                     DB   lsb(cStore_)   ;    !
03A2   0A                     DB   lsb(aNop_)   ;    "
03A3   0A                     DB   lsb(aNop_)   ;    #
03A4   0A                     DB   lsb(aNop_)   ;    $  ( -- adr ) text input ptr
03A5   0A                     DB   lsb(aNop_)   ;    %
03A6   0A                     DB   lsb(aNop_)   ;    &
03A7   0A                     DB   lsb(aNop_)   ;    '
03A8   34                     DB   lsb(ifte_)   ;    (  ( b -- )
03A9   0A                     DB   lsb(aNop_)   ;    )
03AA   0A                     DB   lsb(aNop_)   ;    *
03AB   0A                     DB   lsb(aNop_)   ;    +
03AC   0A                     DB   lsb(aNop_)   ;    ,
03AD   0A                     DB   lsb(aNop_)   ;    -
03AE   0A                     DB   lsb(aNop_)   ;    .
03AF   0A                     DB   lsb(aNop_)   ;    /
03B0   5D                     DB   lsb(NSCall_)   ;    0
03B1   5D                     DB   lsb(NSCall_)   ;    1
03B2   5D                     DB   lsb(NSCall_)   ;    2
03B3   5D                     DB   lsb(NSCall_)   ;    3
03B4   5D                     DB   lsb(NSCall_)   ;    4
03B5   0A                     DB   lsb(aNop_)   ;    5
03B6   0A                     DB   lsb(aNop_)   ;    6
03B7   0A                     DB   lsb(aNop_)   ;    7
03B8   0A                     DB   lsb(aNop_)   ;    8
03B9   0A                     DB   lsb(aNop_)   ;    9
03BA   0A                     DB   lsb(aNop_)   ;    :  start defining a macro
03BB   0A                     DB   lsb(aNop_)   ;    ;
03BC   0A                     DB   lsb(aNop_)   ;    <
03BD   0A                     DB   lsb(aNop_)   ;    =
03BE   8D                     DB   lsb(prompt_)   ;    >
03BF   0A                     DB   lsb(aNop_)   ;    ?
03C0   05                     DB   lsb(cFetch_)   ;    @
03C1   0A                     DB   lsb(aNop_)   ;    A
03C2   C9                     DB   lsb(break_)   ;    B
03C3   76                     DB   lsb(nop_)   ;    C
03C4   1F                     DB   lsb(depth_)   ;    D  ( -- val ) depth of data stack
03C5   2D                     DB   lsb(emit_)   ;    E   ( val -- ) emits a char to output
03C6   0A                     DB   lsb(aNop_)   ;    F
03C7   4E                     DB   lsb(go_)   ;    G   ( -- ? ) execute mint definition
03C8   0A                     DB   lsb(aNop_)   ;    H
03C9   A0                     DB   lsb(inPort_)   ;    I  ( port -- val )
03CA   0A                     DB   lsb(aNop_)   ;    J
03CB   AB                     DB   lsb(key_)   ;    K  ( -- val )  read a char from input
03CC   0A                     DB   lsb(aNop_)   ;    L
03CD   0A                     DB   lsb(aNop_)   ;    M
03CE   B4                     DB   lsb(newln_)   ;    N   ; prints a newline to output
03CF   B9                     DB   lsb(outPort_)   ;    O  ( val port -- )
03D0   D8                     DB   lsb(printStk_)   ;    P  ( -- ) non-destructively prints stack
03D1   0A                     DB   lsb(aNop_)   ;    Q  quits from Mint REPL
03D2   C2                     DB   lsb(rot_)   ;    R  ( a b c -- b c a )
03D3   0A                     DB   lsb(aNop_)   ;    S
03D4   0A                     DB   lsb(aNop_)   ;    T
03D5   0A                     DB   lsb(aNop_)   ;    U
03D6   0A                     DB   lsb(aNop_)   ;    V
03D7   0A                     DB   lsb(aNop_)   ;    W   ; ( b -- ) if false, skip to end of loop
03D8   46                     DB   lsb(exec_)   ;    X
03D9   0A                     DB   lsb(aNop_)   ;    Y
03DA   DA                     DB   lsb(editDef_)   ;    Z
03DB   00                     DB   lsb(cArrDef_)   ;    [
03DC   11                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03DD   0A                     DB   lsb(aNop_)   ;    ]
03DE   0C                     DB   lsb(charCode_)   ;    ^
03DF   0A                     DB   lsb(aNop_)   ;    _
03E0   0A                     DB   lsb(aNop_)   ;    `
03E1   92                     DB   lsb(sysVar_)   ;    a  ; start of data stack variable
03E2   92                     DB   lsb(sysVar_)   ;    b  ; base16 variable
03E3   92                     DB   lsb(sysVar_)   ;    c  ; TIBPtr variable
03E4   92                     DB   lsb(sysVar_)   ;    d
03E5   92                     DB   lsb(sysVar_)   ;    e
03E6   92                     DB   lsb(sysVar_)   ;    f
03E7   92                     DB   lsb(sysVar_)   ;    g
03E8   92                     DB   lsb(sysVar_)   ;    h  ; heap ptr variable
03E9   9C                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03EA   92                     DB   lsb(sysVar_)   ;    j  ; returns index variable of outer loop
03EB   92                     DB   lsb(sysVar_)   ;    k
03EC   92                     DB   lsb(sysVar_)   ;    l
03ED   92                     DB   lsb(sysVar_)   ;    m  ( a b -- c ) return the minimum value
03EE   92                     DB   lsb(sysVar_)   ;    n
03EF   92                     DB   lsb(sysVar_)   ;    o
03F0   92                     DB   lsb(sysVar_)   ;    p
03F1   92                     DB   lsb(sysVar_)   ;    q
03F2   92                     DB   lsb(sysVar_)   ;    r
03F3   92                     DB   lsb(sysVar_)   ;    s
03F4   92                     DB   lsb(sysVar_)   ;    t
03F5   92                     DB   lsb(sysVar_)   ;    u
03F6   92                     DB   lsb(sysVar_)   ;    v
03F7   92                     DB   lsb(sysVar_)   ;    w
03F8   92                     DB   lsb(sysVar_)   ;    x
03F9   92                     DB   lsb(sysVar_)   ;    y
03FA   92                     DB   lsb(sysVar_)   ;    z
03FB   8A                     DB   lsb(NSEnter_)   ;    {
03FC   0A                     DB   lsb(aNop_)   ;    |
03FD   82                     DB   lsb(NSExit_)   ;    }
03FE   0A                     DB   lsb(aNop_)   ;    ~
03FF   0A                     DB   lsb(aNop_)   ;    BS		
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE4:       
0400                AND_:        
0400   D1                     POP   DE   ;     Bitwise AND the top 2 elements of the stack
0401   E1                     POP   HL   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   HL   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                OR_:         
040B   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
040C   E1                     POP   HL   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                XOR_:        
0414   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0415                XOR1:        
0415   E1                     POP   HL   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                INV_:        ; Bitwise INVert the top member of the stack
041D   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0420   18 F3                  JR   xor1   
0422                ADD_:        ; Add the top 2 members of the stack
0422   D1                     POP   DE   
0423   E1                     POP   HL   
0424   19                     ADD   HL,DE   
0425   E5                     PUSH   HL   
0426   FD E9                  JP   (IY)   
0428                ARRDEF_:      
0428                ARRDEF:      ;=18
0428   3E 00                  LD   A,FALSE   
042A                ARRDEF1:      
042A   FD 21 54 02            LD   IY,compNEXT   
042E   32 36 0A               LD   (vByteMode),A   
0431   2A 0E 0A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0434   CD EB 07               CALL   rpush   ; save start of array \[  \]
0437   C3 4B 02               JP   NEXT   ; hardwired to NEXT
043A                CALL_:       
043A   60 69                  LD   HL,BC   
043C   CD EB 07               CALL   rpush   ; save Instruction Pointer
043F   0A                     LD   A,(BC)   
0440   CD 86 07               CALL   NSLookup   
0443   5E                     LD   E,(HL)   
0444   23                     INC   HL   
0445   56                     LD   D,(HL)   
0446   C3 4F 06               JP   go1   
0449                HDOT_:       ; print hexadecimal
0449   E1                     POP   HL   
044A   CD CC 07               CALL   printhex   
044D   18 04                  JR   dot2   
044F                DOT_:        
044F   E1                     POP   HL   
0450   CD A8 07               CALL   printdec   
0453                DOT2:        
0453   3E 20                  LD   A," "   
0455   CD 85 00               CALL   putChar   
0458   FD E9                  JP   (IY)   
045A                DROP_:       ; Discard the top member of the stack
045A   E1                     POP   HL   
045B   FD E9                  JP   (IY)   
045D                DUP_:        
045D   E1                     POP   HL   ; Duplicate the top member of the stack
045E   E5                     PUSH   HL   
045F   E5                     PUSH   HL   
0460   FD E9                  JP   (IY)   
0462                ETX_:        
0462   C3 C8 01               JP   ETX   
0465                EXIT_:       
0465   03                     INC   BC   
0466   50 59                  LD   DE,BC   
0468   CD F6 07               CALL   rpop   ; Restore Instruction pointer
046B   44 4D                  LD   BC,HL   
046D   EB                     EX   DE,HL   
046E   E9                     JP   (HL)   
046F                FETCH_:      ; Fetch the value from the address placed on the top of the stack
046F   E1                     POP   HL   
0470                FETCH1:      
0470   5E                     LD   E,(HL)   
0471   23                     INC   HL   
0472   56                     LD   D,(HL)   
0473   D5                     PUSH   DE   
0474   FD E9                  JP   (IY)   
0476   C3 4B 02     NOP_:     JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0479                OVER_:       
0479   E1                     POP   HL   ; Duplicate 2nd element of the stack
047A   D1                     POP   DE   
047B   D5                     PUSH   DE   
047C   E5                     PUSH   HL   
047D   D5                     PUSH   DE   ; And push it to top of stack
047E   FD E9                  JP   (IY)   
0480                RET_:        
0480   CD F6 07               CALL   rpop   ; Restore Instruction pointer
0483   44 4D                  LD   BC,HL   
0485   FD E9                  JP   (IY)   
0487                STORE_:      ; Store the value at the address placed on the top of the stack
0487   E1                     POP   HL   
0488   D1                     POP   DE   
0489   73                     LD   (HL),E   
048A   23                     INC   HL   
048B   72                     LD   (HL),D   
048C   FD E9                  JP   (IY)   
048E                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
048E                SWAP_:       
048E   E1                     POP   HL   
048F   E3                     EX   (SP),HL   
0490   E5                     PUSH   HL   
0491   FD E9                  JP   (IY)   
0493                             ;  Left shift { is multiply by 2		
0493                SHL_:        
0493   E1                     POP   HL   ; Duplicate the top member of the stack
0494   29                     ADD   HL,HL   
0495   E5                     PUSH   HL   ; shift left fallthrough into add_
0496   FD E9                  JP   (IY)   ; 
0498                             ;  Right shift } is a divide by 2		
0498                SHR_:        
0498   E1                     POP   HL   ; Get the top member of the stack
0499                SHR1:        
0499   CB 3C                  SRL   H   
049B   CB 1D                  RR   L   
049D   E5                     PUSH   HL   
049E   FD E9                  JP   (IY)   ; 
04A0   21 00 00     NEG_:     LD   HL,0   ; NEGate the value on top of stack (2's complement)
04A3   D1                     POP   DE   ; 
04A4   18 02                  JR   SUB_2   ; use the SUBtract routine
04A6                SUB_:        ; Subtract the value 2nd on stack from top of stack
04A6   D1                     POP   DE   ; 
04A7   E1           SUB_1:    POP   HL   ;      Entry point for INVert
04A8   A7           SUB_2:    AND   A   ;      Entry point for NEGate
04A9   ED 52                  SBC   HL,DE   ; 15t
04AB   E5                     PUSH   HL   ; 
04AC   FD E9                  JP   (IY)   ; 
04AE                             ; 5
04AE   E1           EQ_:      POP   HL   
04AF   D1                     POP   DE   
04B0   A7                     AND   A   ; reset the carry flag
04B1   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04B3   28 16                  JR   Z,equal   
04B5   21 00 00               LD   HL,0   
04B8   18 12                  JR   less   ; HL = 1
04BA   D1           GT_:      POP   DE   
04BB   E1                     POP   HL   
04BC   18 02                  JR   cmp_   
04BE   E1           LT_:      POP   HL   
04BF   D1                     POP   DE   
04C0   A7           CMP_:     AND   A   ; reset the carry flag
04C1   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04C3   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04C5   21 00 00               LD   HL,0   
04C8   FA CC 04               JP   M,less   
04CB   2C           EQUAL:    INC   L   ; HL = 1
04CC                LESS:        
04CC   E5                     PUSH   HL   
04CD   FD E9                  JP   (IY)   
04CF                VAR_:        
04CF   0A                     LD   A,(BC)   
04D0   CD 8C 07               CALL   NSLookup2   
04D3   E5                     PUSH   HL   
04D4   FD E9                  JP   (IY)   
04D6   C3 CC 05     AGAIN_:   JP   again   
04D9   C3 56 07     ALT_:     JP   alt   
04DC   C3 8F 05     ARREND_:   JP   arrEnd   
04DF   C3 4E 07     GETREF_:   JP   getRef   
04E2   C3 61 07     MUL_:     JP   mul   
04E5   C3 72 05     HEX_:     JP   hex   
04E8   C3 AB 05     DEF_:     JP   def   
04EB   18 13        BEGIN_:   JR   begin   
04ED   18 3F        NUM_:     JR   num   
04EF   18 5F        DIV_:     JR   div   
04F1                STR_:        
04F1                STR:         
04F1   03                     INC   BC   
04F2                STR1:        
04F2   0A                     LD   A,(BC)   
04F3   03                     INC   BC   
04F4   FE 60                  CP   "`"   ; ` is the string terminator
04F6   28 05                  JR   Z,str2   
04F8   CD 85 00               CALL   putchar   
04FB   18 F5                  JR   str1   
04FD                STR2:        
04FD   0B                     DEC   BC   
04FE   FD E9                  JP   (IY)   
0500                             ;*******************************************************************
0500                             ; Page 5 primitive routines
0500                             ;*******************************************************************
0500                             ;falls through
0500                             ; *************************************
0500                             ; Loop Handling Code
0500                             ; *************************************
0500                             ;=23
0500                BEGIN:       ; Left parentesis begins a loop
0500   E1                     POP   HL   
0501   7D                     LD   A,L   ; zero?
0502   B4                     OR   H   
0503   28 1C                  JR   Z,begin1   
0505   2B                     DEC   HL   
0506   11 FA FF               LD   DE,-6   
0509   DD 19                  ADD   IX,DE   
050B   DD 36 00 00            LD   (IX+0),0   ; loop var
050F   DD 36 01 00            LD   (IX+1),0   
0513   DD 75 02               LD   (IX+2),L   ; loop limit
0516   DD 74 03               LD   (IX+3),H   
0519   DD 71 04               LD   (IX+4),C   ; loop address
051C   DD 70 05               LD   (IX+5),B   
051F   FD E9                  JP   (IY)   
0521                BEGIN1:      
0521   1E 01                  LD   E,1   
0523                BEGIN2:      
0523   03                     INC   BC   
0524   0A                     LD   A,(BC)   
0525   CD 67 02               CALL   nesting   
0528   AF                     XOR   A   
0529   B3                     OR   E   
052A   20 F7                  JR   NZ,begin2   
052C                BEGIN3:      
052C   FD E9                  JP   (IY)   
052E                             ; ********************************************************************************
052E                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
052E                             ; Read the first character.
052E                             ;			
052E                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
052E                             ; and then added into the L register. (HL forms a 16-bit accumulator)
052E                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
052E                             ; and then add in the next digit. Repeat this until a non-number character is
052E                             ; detected. Add in the final digit so that HL contains the converted number.
052E                             ; Push HL onto the stack and proceed to the dispatch routine.
052E                             ; ********************************************************************************
052E                NUM:         ;=23
052E   21 00 00               LD   HL,$0000   ;     Clear HL to accept the number
0531   0A                     LD   A,(BC)   ;     Get the character which is a numeral
0532                NUM1:        ; corrected KB 24/11/21
0532   D6 30                  SUB   $30   ;       Form decimal digit
0534   85                     ADD   A,L   ;       Add into bottom of HL
0535   6F                     LD   L,A   ; 
0536   3E 00                  LD   A,00   ;       Clear A
0538   8C                     ADC   A,H   ; Add with carry H-reg
0539   67                     LD   H,A   ; Put result in H-reg
053A   03                     INC   BC   ;       Increment IP
053B   0A                     LD   A,(BC)   ;       and get the next character
053C   FE 30                  CP   $30   ;       Less than $30
053E   38 0C                  JR   C,num2   ;       Not a number / end of number
0540   FE 3A                  CP   $3A   ;       Greater or equal to $3A
0542   30 08                  JR   NC,num2   ;       Not a number / end of number
0544                             ; Multiply digit(s) in HL by 10
0544   29                     ADD   HL,HL   ;        2X
0545   5D                     LD   E,L   ;        LD DE,HL
0546   54                     LD   D,H   ; 
0547   29                     ADD   HL,HL   ;        4X
0548   29                     ADD   HL,HL   ;        8X
0549   19                     ADD   HL,DE   ;        2X  + 8X  = 10X
054A                             ; 52t cycles
054A   18 E6                  JR   num1   
054C                NUM2:        
054C   0B                     DEC   BC   
054D   E5                     PUSH   HL   ;       Put the number on the stack
054E   FD E9                  JP   (IY)   ; and process the next character
0550                             ; ********************************************************************
0550                             ; 16-bit division subroutine.
0550                             ; 
0550                             ; BC: divisor, DE: dividend, HL: remainder
0550                             ; *********************************************************************
0550                             ; This divides DE by BC, storing the result in DE, remainder in HL
0550                             ; *********************************************************************
0550                             ; 1382 cycles
0550                             ; 35 bytes (reduced from 48)
0550                             ; 
0550                DIV:         ;=24
0550   D1                     POP   DE   ; get first value
0551   E1                     POP   HL   ; get 2nd value
0552   C5                     PUSH   BC   ; Preserve the IP
0553   44                     LD   B,H   ; BC = 2nd value
0554   4D                     LD   C,L   
0555                             ; 
0555   21 00 00               LD   HL,0   ; Zero the remainder
0558   3E 10                  LD   A,16   ; Loop counter
055A                DIV1:        ;shift the bits from BC (numerator) into HL (accumulator)
055A   CB 21                  SLA   C   
055C   CB 10                  RL   B   
055E   ED 6A                  ADC   HL,HL   
0560   ED 52                  SBC   HL,DE   ;Check if remainder >= denominator (HL>=DE)
0562   38 03                  JR   C,div2   
0564   0C                     INC   C   
0565   18 01                  JR   div3   
0567                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
0567   19                     ADD   hl,de   
0568                DIV3:        
0568   3D                     DEC   A   
0569   20 EF                  JR   NZ,div1   
056B   50                     LD   D,B   ; Result from BC to DE
056C   59                     LD   E,C   
056D                DIV4:        
056D   C1                     POP   BC   ; Restore the IP
056E   D5                     PUSH   DE   ; Push Result
056F   E5                     PUSH   HL   ; Push remainder
0570   FD E9                  JP   (IY)   
0572                HEX:         ;=26
0572   21 00 00               LD   HL,0   ;     Clear HL to accept the number
0575                HEX1:        
0575   03                     INC   BC   
0576   0A                     LD   A,(BC)   ;     Get the character which is a numeral
0577   CB 77                  BIT   6,A   ;       is it uppercase alpha?
0579   28 02                  JR   Z,hex2   ; no a decimal
057B   D6 07                  SUB   7   ; sub 7  to make $A - $F
057D                HEX2:        
057D   D6 30                  SUB   $30   ;       Form decimal digit
057F   DA 4C 05               JP   C,num2   
0582   FE 10                  CP   $0F+1   
0584   D2 4C 05               JP   NC,num2   
0587   29                     ADD   HL,HL   ;        2X ; Multiply digit(s) in HL by 16
0588   29                     ADD   HL,HL   ;        4X
0589   29                     ADD   HL,HL   ;        8X
058A   29                     ADD   HL,HL   ;       16X
058B   85                     ADD   A,L   ;       Add into bottom of HL
058C   6F                     LD   L,A   ; 
058D   18 E6                  JR   hex1   
058F                ARREND:      ;=27
058F   CD F6 07               CALL   rpop   ; DE = start of array
0592   E5                     PUSH   HL   
0593   EB                     EX   DE,HL   
0594   2A 0E 0A               LD   HL,(vHeapPtr)   ; HL = heap ptr
0597   B7                     OR   A   
0598   ED 52                  SBC   HL,DE   ; bytes on heap
059A   3A 36 0A               LD   A,(vByteMode)   
059D   B7                     OR   A   
059E   20 04                  JR   NZ,arrEnd2   
05A0   CB 3C                  SRL   H   ; BC = m words
05A2   CB 1D                  RR   L   
05A4                ARREND2:      
05A4   E5                     PUSH   HL   
05A5   FD 21 4B 02            LD   IY,NEXT   
05A9   FD E9                  JP   (IY)   ; hardwired to NEXT
05AB                             ; **************************************************************************
05AB                             ; def is used to create a colon definition
05AB                             ; When a colon is detected, the next character (usually uppercase alpha)
05AB                             ; is looked up in the vector table to get its associated code field address
05AB                             ; This CFA is updated to point to the character after uppercase alpha
05AB                             ; The remainder of the characters are then skipped until after a semicolon
05AB                             ; is found.
05AB                             ; ***************************************************************************
05AB                             ;=31
05AB                DEF:         ; Create a colon definition
05AB   03                     INC   BC   
05AC   0A                     LD   A,(BC)   ; Get the next character
05AD   32 08 0A               LD   (vLastDef),A   
05B0   03                     INC   BC   
05B1   CD 86 07               CALL   NSLookup   
05B4   ED 5B 0E 0A            LD   DE,(vHeapPtr)   ; start of defintion
05B8   73                     LD   (HL),E   ; Save low byte of address in CFA
05B9   23                     INC   HL   
05BA   72                     LD   (HL),D   ; Save high byte of address in CFA+1
05BB                DEF1:        ; Skip to end of definition
05BB   0A                     LD   A,(BC)   ; Get the next character
05BC   03                     INC   BC   ; Point to next character
05BD   12                     LD   (DE),A   
05BE   13                     INC   DE   
05BF   FE 3B                  CP   ";"   ; Is it a semicolon
05C1   28 02                  JR   Z,def2   ; end the definition
05C3   18 F6                  JR   def1   ; get the next element
05C5                DEF2:        
05C5   0B                     DEC   BC   
05C6                DEF3:        
05C6   ED 53 0E 0A            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
05CA   FD E9                  JP   (IY)   
05CC                AGAIN:       ;=51
05CC   DD 5E 00               LD   E,(IX+0)   ; peek loop var
05CF   DD 56 01               LD   D,(IX+1)   
05D2   7A                     LD   A,D   ; check if IFTEMode
05D3   A3                     AND   E   
05D4   3C                     INC   A   
05D5   20 07                  JR   NZ,again1   
05D7   13                     INC   DE   
05D8   D5                     PUSH   DE   ; push FALSE condition
05D9   11 02 00               LD   DE,2   
05DC   18 1D                  JR   again3   ; drop IFTEMode
05DE                AGAIN1:      
05DE   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
05E1   DD 66 03               LD   H,(IX+3)   
05E4   B7                     OR   A   
05E5   ED 52                  SBC   HL,DE   
05E7   28 0F                  JR   Z,again2   
05E9   13                     INC   DE   
05EA   DD 73 00               LD   (IX+0),E   ; poke loop var
05ED   DD 72 01               LD   (IX+1),D   
05F0   DD 4E 04               LD   C,(IX+4)   ; peek loop address
05F3   DD 46 05               LD   B,(IX+5)   
05F6   FD E9                  JP   (IY)   
05F8                AGAIN2:      
05F8   11 06 00               LD   DE,6   ; drop loop frame
05FB                AGAIN3:      
05FB   DD 19                  ADD   IX,DE   
05FD   FD E9                  JP   (IY)   
05FF                             ; **************************************************************************
05FF                             ; Page 6 Alt primitives
05FF                             ; **************************************************************************
05FF                          ALIGN   $100   
0600                PAGE6:       
0600                CARRDEF_:      ; define a byte array
0600   3E 01                  LD   A,TRUE   
0602   C3 2A 04               JP   arrDef1   
0605                CFETCH_:      
0605   E1                     POP   HL   
0606   16 00                  LD   D,0   
0608   5E                     LD   E,(HL)   
0609   D5                     PUSH   DE   
060A                ANOP_:       
060A   FD E9                  JP   (IY)   
060C                CHARCODE_:      
060C   03                     INC   BC   
060D   0A                     LD   A,(BC)   
060E   C3 AE 06               JP   key1   
0611                COMMENT_:      
0611   03                     INC   BC   ; point to next char
0612   0A                     LD   A,(BC)   
0613   FE 0D                  CP   "\r"   ; terminate at cr
0615   20 FA                  JR   NZ,comment_   
0617   0B                     DEC   BC   
0618   FD E9                  JP   (IY)   
061A                CSTORE_:      
061A   E1                     POP   HL   
061B   D1                     POP   DE   
061C   73                     LD   (HL),E   
061D   FD E9                  JP   (IY)   
061F                DEPTH_:      
061F   21 00 00               LD   HL,0   
0622   39                     ADD   HL,SP   
0623   EB                     EX   DE,HL   
0624   21 80 08               LD   HL,DSTACK   
0627   B7                     OR   A   
0628   ED 52                  SBC   HL,DE   
062A   C3 99 04               JP   shr1   
062D                EMIT_:       
062D   E1                     POP   HL   
062E   7D                     LD   A,L   
062F   CD 85 00               CALL   putchar   
0632   FD E9                  JP   (IY)   
0634                IFTE_:       
0634   D1                     POP   DE   
0635   7B                     LD   A,E   
0636   B2                     OR   D   
0637   20 05                  JR   NZ,ifte1   
0639   13                     INC   DE   
063A   D5                     PUSH   DE   ; push TRUE on stack for else clause
063B   C3 21 05               JP   begin1   ; skip to closing ) works with \) too
063E                IFTE1:       
063E   21 FF FF               LD   HL,-1   ; push -1 on return stack to indicate IFTEMode
0641   CD EB 07               CALL   rpush   
0644   FD E9                  JP   (IY)   
0646                EXEC_:       
0646   CD 4B 06               CALL   exec1   
0649   FD E9                  JP   (IY)   
064B                EXEC1:       
064B   E1                     POP   HL   
064C   E3                     EX   (SP),HL   
064D   E9                     JP   (HL)   
064E                GO_:         
064E   D1                     POP   DE   
064F                GO1:         
064F   7A                     LD   A,D   
0650   B3                     OR   E   
0651   28 08                  JR   Z,go2   
0653   60 69                  LD   HL,BC   
0655   CD EB 07               CALL   rpush   ; save Instruction Pointer
0658   42 4B                  LD   BC,DE   
065A   0B                     DEC   BC   
065B                GO2:         
065B   FD E9                  JP   (IY)   
065D                NSCALL_:      ;=25
065D   FD 21 00 08            LD   IY,rpop2   ; rewire NEXT to simply return
0661   CD 10 07               CALL   NSEnter1   ; enter namespace return here on NEXT
0664   0A                     LD   A,(BC)   
0665   FE 61                  CP   "a"   
0667   30 11                  JR   NC,NSCall2   
0669   CD 86 07               CALL   NSLookup   
066C   E5                     PUSH   HL   
066D   FD 21 4B 02            LD   IY,NEXT   ; restore NEXT
0671   CD 7D 07               CALL   enter   ; enter MINT interpreter with TOS=command
0674   40 5C 47 00            .CSTR   "@\\G"   ; execute and restore namespace
0678   18 08                  JR   NSExit_   
067A                NSCALL2:      ;=25
067A   CD 8C 07               CALL   NSLookup2   
067D   E5                     PUSH   HL   
067E   FD 21 4B 02            LD   IY,NEXT   ; restore NEXT
0682                NSEXIT_:      
0682   CD F6 07               CALL   rpop   
0685   22 06 0A               LD   (vNS),HL   
0688   FD E9                  JP   (IY)   
068A                NSENTER_:      
068A   C3 0F 07               JP   NSEnter   
068D                PROMPT_:      
068D   CD 93 02               CALL   prompt   
0690   FD E9                  JP   (IY)   
0692                SYSVAR_:      
0692   0A                     LD   A,(BC)   
0693   D6 61                  SUB   "a" - ((sysVars - mintVars)/2)   
0695   87                     ADD   A,A   
0696   26 0A                  LD   H,msb(mintVars)   
0698   6F                     LD   L,A   
0699   E5                     PUSH   HL   
069A   FD E9                  JP   (IY)   
069C                I_:          
069C   DD E5                  PUSH   IX   
069E   FD E9                  JP   (IY)   
06A0                INPORT_:      
06A0   E1                     POP   HL   
06A1   79                     LD   A,C   
06A2   4D                     LD   C,L   
06A3   ED 68                  IN   L,(C)   
06A5   26 00                  LD   H,0   
06A7   4F                     LD   C,A   
06A8   E5                     PUSH   HL   
06A9   FD E9                  JP   (IY)   
06AB                KEY_:        
06AB   CD 81 00               CALL   getchar   
06AE                KEY1:        
06AE   26 00                  LD   H,0   
06B0   6F                     LD   L,A   
06B1   E5                     PUSH   HL   
06B2   FD E9                  JP   (IY)   
06B4                NEWLN_:      
06B4   CD 9C 02               CALL   crlf   
06B7   FD E9                  JP   (IY)   
06B9                OUTPORT_:      
06B9   E1                     POP   HL   
06BA   59                     LD   E,C   
06BB   4D                     LD   C,L   
06BC   E1                     POP   HL   
06BD   ED 69                  OUT   (C),L   
06BF   4B                     LD   C,E   
06C0   FD E9                  JP   (IY)   
06C2                ROT_:        ; a b c -- b c a
06C2   D1                     POP   DE   ; a b                   de = c
06C3   E1                     POP   HL   ; a                     hl = b
06C4   E3                     EX   (SP),HL   ; b                     hl = a
06C5   D5                     PUSH   DE   ; b c
06C6   E5                     PUSH   HL   ; b c a
06C7   FD E9                  JP   (IY)   
06C9                BREAK_:      
06C9   E1                     POP   HL   
06CA   7D                     LD   A,L   ; zero?
06CB   B4                     OR   H   
06CC   20 02                  JR   NZ,break1   
06CE   FD E9                  JP   (IY)   
06D0                BREAK1:      
06D0   11 06 00               LD   DE,6   ; drop loop frame
06D3   DD 19                  ADD   IX,DE   
06D5   C3 21 05               JP   begin1   ; skip to end of loop
06D8                PRINTSTK_:      
06D8   18 54                  JR   printStk   
06DA                EDITDEF_:      
06DA                             ; **************************************************************************
06DA                             ; Page 6 primitive routines
06DA                             ; **************************************************************************
06DA                             ; falls through
06DA                             ; **************************************************************************
06DA                             ; copy definition to text input buffer
06DA                             ; update TIBPtr
06DA                             ; **************************************************************************
06DA                EDITDEF:      ;=50 lookup up def based on number
06DA   D1                     POP   DE   
06DB   7B                     LD   A,E   
06DC   08                     EX   AF,AF'   
06DD   7B                     LD   A,E   
06DE   CD 86 07               CALL   NSLookup   
06E1   5E                     LD   E,(HL)   
06E2   23                     INC   HL   
06E3   56                     LD   D,(HL)   
06E4   7A                     LD   A,D   
06E5   B3                     OR   E   
06E6   28 20                  JR   Z,editDef3   
06E8   21 00 09               LD   HL,TIB   
06EB   3E 3A                  LD   A,":"   
06ED   CD 0A 07               CALL   writeChar   
06F0   08                     EX   AF,AF'   
06F1   CD 0A 07               CALL   writeChar   
06F4   18 01                  JR   editDef2   
06F6                EDITDEF1:      
06F6   13                     INC   DE   
06F7                EDITDEF2:      
06F7   1A                     LD   A,(DE)   
06F8   CD 0A 07               CALL   writeChar   
06FB   FE 3B                  CP   ";"   
06FD   20 F7                  JR   NZ,editDef1   
06FF   11 00 09               LD   DE,TIB   
0702   B7                     OR   A   
0703   ED 52                  SBC   HL,DE   
0705   22 04 0A               LD   (vTIBPtr),HL   
0708                EDITDEF3:      
0708   FD E9                  JP   (IY)   
070A                WRITECHAR:      ;=5
070A   77                     LD   (HL),A   
070B   23                     INC   HL   
070C   C3 85 00               JP   putchar   
070F                NSENTER:      ;=31
070F   03                     INC   BC   
0710                NSENTER1:      
0710   0A                     LD   A,(BC)   ; read NS ASCII code
0711   D6 30                  SUB   "0"   ; convert to number
0713   03                     INC   BC   
0714   57                     LD   D,A   ; multiply by 64
0715   1E 00                  LD   E,0   
0717   CB 3A                  SRL   D   
0719   CB 1B                  RR   E   
071B   CB 3A                  SRL   D   
071D   CB 1B                  RR   E   
071F   2A 06 0A               LD   HL,(vNS)   ; 
0722   CD EB 07               CALL   rpush   
0725   21 C0 0A               LD   HL,DEFS   
0728   19                     ADD   HL,DE   
0729   22 06 0A               LD   (vNS),HL   
072C   FD E9                  JP   (IY)   
072E                PRINTSTK:      ;=40
072E                             ; MINT: \a@2- \D1- ("@ \b@ \(,)(.) 2-) '
072E   CD 7D 07               CALL   ENTER   
0731   5C 61 40 32 2D 5C 44 31 2D 28 22 40 5C 62 40 5C 28 2C 29 28 2E 29 32 2D 29 27 00 .CSTR   "\\a@2-\\D1-(",$22,"@\\b@\\(,)(.)2-)'"   
074C   FD E9                  JP   (IY)   
074E                             ;*******************************************************************
074E                             ; Page 5 primitive routines continued
074E                             ;*******************************************************************
074E                GETREF:      ;=8
074E   03                     INC   BC   
074F   0A                     LD   A,(BC)   
0750   CD 86 07               CALL   NSLookup   
0753   C3 70 04               JP   fetch1   
0756                ALT:         ;=11
0756   03                     INC   BC   
0757   0A                     LD   A,(BC)   
0758   21 80 03               LD   HL,altCodes   
075B   85                     ADD   A,L   
075C   6F                     LD   L,A   
075D   6E                     LD   L,(HL)   ;       get low jump address
075E   26 06                  LD   H,msb(page6)   ; Load H with the 5th page address
0760   E9                     JP   (HL)   ;       Jump to routine
0761                             ; ********************************************************************
0761                             ; 16-bit multiply
0761                MUL:         ;=19
0761   D1                     POP   DE   ; get first value
0762   E1                     POP   HL   
0763   C5                     PUSH   BC   ; Preserve the IP
0764   44                     LD   B,H   ; BC = 2nd value
0765   4D                     LD   C,L   
0766   21 00 00               LD   HL,0   
0769   3E 10                  LD   A,16   
076B                MUL2:        
076B   29                     ADD   HL,HL   
076C   CB 13                  RL   E   
076E   CB 12                  RL   D   
0770   30 04                  JR   NC,$+6   
0772   09                     ADD   HL,BC   
0773   30 01                  JR   NC,$+3   
0775   13                     INC   DE   
0776   3D                     DEC   A   
0777   20 F2                  JR   NZ,mul2   
0779   C1                     POP   BC   ; Restore the IP
077A   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
077B   FD E9                  JP   (IY)   
077D                             ;*******************************************************************
077D                             ; Subroutines
077D                             ;*******************************************************************
077D                ENTER:       ;=9
077D   60 69                  LD   HL,BC   
077F   CD EB 07               CALL   rpush   ; save Instruction Pointer
0782   C1                     POP   BC   
0783   0B                     DEC   BC   
0784   FD E9                  JP   (IY)   
0786                NSLOOKUP:      
0786   D6 41                  SUB   "A"   
0788   1E 00                  LD   E,0   
078A   18 04                  JR   NSLookup3   
078C                NSLOOKUP2:      
078C   D6 61                  SUB   "a"   
078E   1E 34                  LD   E,26*2   
0790                NSLOOKUP3:      
0790   87                     ADD   A,A   
0791   83                     ADD   A,E   
0792   5F                     LD   E,A   
0793   16 00                  LD   D,0   
0795   2A 06 0A               LD   HL,(vNS)   
0798   19                     ADD   HL,DE   
0799   C9                     RET      
079A                PRINTSTR:      ;=14
079A   E3                     EX   (SP),HL   
079B   18 04                  JR   printStr2   
079D                PRINTSTR1:      
079D   CD 85 00               CALL   putchar   
07A0   23                     INC   HL   
07A1                PRINTSTR2:      
07A1   7E                     LD   A,(HL)   
07A2   B7                     OR   A   
07A3   20 F8                  JR   NZ,printStr1   
07A5   23                     INC   HL   
07A6   E3                     EX   (SP),HL   
07A7   C9                     RET      
07A8                PRINTDEC:      ;=36
07A8   11 F0 D8               LD   DE,-10000   
07AB   CD C1 07               CALL   printdec1   
07AE   11 18 FC               LD   DE,-1000   
07B1   CD C1 07               CALL   printdec1   
07B4   11 9C FF               LD   DE,-100   
07B7   CD C1 07               CALL   printdec1   
07BA   1E F6                  LD   E,-10   
07BC   CD C1 07               CALL   printdec1   
07BF   1E FF                  LD   E,-1   
07C1                PRINTDEC1:      
07C1   3E 2F                  LD   A,"0"-1   
07C3                PRINTDEC2:      
07C3   3C                     INC   A   
07C4   19                     ADD   HL,DE   
07C5   38 FC                  JR   C,printdec2   
07C7   ED 52                  SBC   HL,DE   
07C9   C3 85 00               JP   putchar   
07CC                PRINTHEX:      ;=11
07CC                             ; Display HL as a 16-bit number in hex.
07CC   C5                     PUSH   BC   ; preserve the IP
07CD   7C                     LD   A,H   
07CE   CD D7 07               CALL   printhex2   
07D1   7D                     LD   A,L   
07D2   CD D7 07               CALL   printhex2   
07D5   C1                     POP   BC   
07D6   C9                     RET      
07D7                PRINTHEX2:      ;=20
07D7   4F                     LD   C,A   
07D8   1F                     RRA      
07D9   1F                     RRA      
07DA   1F                     RRA      
07DB   1F                     RRA      
07DC   CD E0 07               CALL   printhex3   
07DF   79                     LD   A,C   
07E0                PRINTHEX3:      
07E0   E6 0F                  AND   0x0F   
07E2   C6 90                  ADD   A,0x90   
07E4   27                     DAA      
07E5   CE 40                  ADC   A,0x40   
07E7   27                     DAA      
07E8   C3 85 00               JP   putchar   
07EB                RPUSH:       ;=11
07EB   DD 2B                  DEC   IX   
07ED   DD 74 00               LD   (IX+0),H   
07F0   DD 2B                  DEC   IX   
07F2   DD 75 00               LD   (IX+0),L   
07F5   C9                     RET      
07F6                RPOP:        ;=11
07F6   DD 6E 00               LD   L,(IX+0)   
07F9   DD 23                  INC   IX   
07FB   DD 66 00               LD   H,(IX+0)   
07FE   DD 23                  INC   IX   
0800                RPOP2:       
0800   C9                     RET      
0800                          .ORG   RAMSTART   
0800                          DS   DSIZE   
0880                STACK:       
0880                DSTACK:      
0880                          DS   RSIZE   
0900                RSTACK:      
0900                TIB:      DS   TIBSIZE   
0A00                          ALIGN   $100   
0A00                MINTVARS:      
0A00                SYSVARS:      
0A00                VS0:      DS   2   ; a
0A02                VBASE16:   DS   2   ; b
0A04                VTIBPTR:   DS   2   ; c
0A06                VNS:      DS   2   ; d
0A08                VLASTDEF:   DS   2   ; e
0A0A                          DS   2   ; f
0A0C                          DS   2   ; g
0A0E                VHEAPPTR:   DS   2   ; h
0A10                          DS   2   ; i
0A12                          DS   2   ; j
0A14                          DS   2   ; k
0A16                          DS   2   ; l
0A18                          DS   2   ; m
0A1A                          DS   2   ; n
0A1C                          DS   2   ; o
0A1E                          DS   2   ; p
0A20                          DS   2   ; q
0A22                          DS   2   ; r
0A24                          DS   2   ; s
0A26                          DS   2   ; t
0A28                          DS   2   ; u
0A2A                          DS   2   ; v
0A2C                          DS   2   ; w
0A2E                          DS   2   ; x
0A30                          DS   2   ; y
0A32                          DS   2   ; z
0A34                          DS   2   ; 
0A36                VBYTEMODE:   DS   2   ; 
0A38                          DS   $30   
0A68                TBPTR:    DS   2   ; reserved for tests
0A6A                RST08:    DS   2   
0A6C                RST10:    DS   2   
0A6E                RST18:    DS   2   
0A70                RST20:    DS   2   
0A72                RST28:    DS   2   
0A74                RST30:    DS   2   ; 
0A76                BAUD:     DS   2   ; 
0A78                INTVEC:   DS   2   ; 
0A7A                NMIVEC:   DS   2   ; 
0A7C                GETCVEC:   DS   2   ; 
0A7E                PUTCVEC:   DS   2   ; 
0A80                             ; ****************************************************************
0A80                             ; VARS Table - holds 26 16-bit user variables
0A80                             ; ****************************************************************
0A80                VARS:     DS   26 * 2   
0AB4                             ; ****************************************************************
0AB4                             ; DEFS Table - holds 26 addresses of user routines
0AB4                             ; ****************************************************************
0AB4                          ALIGN   $40   
0AA8                          .ORG   $-($80-26*2*2)   
0AA8                          DS   ($80-26*2*2)   ; vars for group 0
0AC0                DEFS:     DS   NSSIZE * NSNUM   
0CC0                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 27 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 118 IN MINT.asm
                    > USED AT LINE 1155 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 133 IN MINT.asm
                    > USED AT LINE 622 IN MINT.asm
                    > USED AT LINE 774 IN MINT.asm
                    > USED AT LINE 1066 IN MINT.asm
                    > USED AT LINE 1240 IN MINT.asm
                    > USED AT LINE 1344 IN MINT.asm
                    > USED AT LINE 1372 IN MINT.asm
                    > USED AT LINE 1398 IN MINT.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 10 IN ram.asm
TRUE:               0001 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 1024 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 41 IN MINT.asm
                    > USED AT LINE 595 IN MINT.asm
EMPTY:              0000 DEFINED AT LINE 18 IN MINT.asm
NSNUM:              0004 DEFINED AT LINE 20 IN MINT.asm
                    > USED AT LINE 61 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
NSSIZE:             0080 DEFINED AT LINE 21 IN MINT.asm
                    > USED AT LINE 61 IN MINT.asm
                    > USED AT LINE 70 IN ram.asm
START:              0180 DEFINED AT LINE 29 IN MINT.asm
                    > USED AT LINE 6
ISYSVARS:           0197 DEFINED AT LINE 39 IN MINT.asm
                    > USED AT LINE 52 IN MINT.asm
INITIALIZE:         01A7 DEFINED AT LINE 49 IN MINT.asm
                    > USED AT LINE 31 IN MINT.asm
ETX:                01C8 DEFINED AT LINE 66 IN MINT.asm
                    > USED AT LINE 635 IN MINT.asm
ETX1:               01D1 DEFINED AT LINE 71 IN MINT.asm
                    > USED AT LINE 69 IN MINT.asm
MACRO:              01D3 DEFINED AT LINE 74 IN MINT.asm
                    > USED AT LINE 126 IN MINT.asm
INTERPRET:          01EC DEFINED AT LINE 87 IN MINT.asm
                    > USED AT LINE 34 IN MINT.asm
                    > USED AT LINE 72 IN MINT.asm
INTERPRET2:         01F6 DEFINED AT LINE 93 IN MINT.asm
                    > USED AT LINE 85 IN MINT.asm
INTERPRET3:         01FE DEFINED AT LINE 100 IN MINT.asm
                    > USED AT LINE 109 IN MINT.asm
INTERPRET4:         0204 DEFINED AT LINE 106 IN MINT.asm
                    > USED AT LINE 98 IN MINT.asm
WAITCHAR:           0209 DEFINED AT LINE 117 IN MINT.asm
                    > USED AT LINE 135 IN MINT.asm
                    > USED AT LINE 149 IN MINT.asm
WAITCHAR1:          021C DEFINED AT LINE 128 IN MINT.asm
                    > USED AT LINE 120 IN MINT.asm
WAITCHAR3:          022A DEFINED AT LINE 137 IN MINT.asm
                    > USED AT LINE 124 IN MINT.asm
WAITCHAR4:          0240 DEFINED AT LINE 153 IN MINT.asm
                    > USED AT LINE 122 IN MINT.asm
NEXT:               024B DEFINED AT LINE 181 IN MINT.asm
                    > USED AT LINE 51 IN MINT.asm
                    > USED AT LINE 157 IN MINT.asm
                    > USED AT LINE 203 IN MINT.asm
                    > USED AT LINE 601 IN MINT.asm
                    > USED AT LINE 655 IN MINT.asm
                    > USED AT LINE 947 IN MINT.asm
                    > USED AT LINE 1111 IN MINT.asm
                    > USED AT LINE 1118 IN MINT.asm
COMPNEXT:           0254 DEFINED AT LINE 191 IN MINT.asm
                    > USED AT LINE 597 IN MINT.asm
COMPNEXT1:          0262 DEFINED AT LINE 201 IN MINT.asm
                    > USED AT LINE 198 IN MINT.asm
NESTING:            0267 DEFINED AT LINE 215 IN MINT.asm
                    > USED AT LINE 104 IN MINT.asm
                    > USED AT LINE 134 IN MINT.asm
                    > USED AT LINE 811 IN MINT.asm
NESTING1A:          0272 DEFINED AT LINE 222 IN MINT.asm
                    > USED AT LINE 219 IN MINT.asm
NESTING1:           0275 DEFINED AT LINE 225 IN MINT.asm
                    > USED AT LINE 217 IN MINT.asm
NESTING2:           0284 DEFINED AT LINE 234 IN MINT.asm
                    > USED AT LINE 229 IN MINT.asm
                    > USED AT LINE 231 IN MINT.asm
NESTING3:           0286 DEFINED AT LINE 237 IN MINT.asm
                    > USED AT LINE 233 IN MINT.asm
NESTING4:           0291 DEFINED AT LINE 244 IN MINT.asm
                    > USED AT LINE 239 IN MINT.asm
                    > USED AT LINE 241 IN MINT.asm
PROMPT:             0293 DEFINED AT LINE 248 IN MINT.asm
                    > USED AT LINE 88 IN MINT.asm
                    > USED AT LINE 1128 IN MINT.asm
CRLF:               029C DEFINED AT LINE 253 IN MINT.asm
                    > USED AT LINE 146 IN MINT.asm
                    > USED AT LINE 1163 IN MINT.asm
MACROS:             02A3 DEFINED AT LINE 262 IN MINT.asm
BACKSP_:            02A3 DEFINED AT LINE 1 IN MINT.asm
REEDIT_:            02BA DEFINED AT LINE 4 IN MINT.asm
EDIT_:              02C1 DEFINED AT LINE 7 IN MINT.asm
LIST_:              02CC DEFINED AT LINE 10 IN MINT.asm
PRINTSTACK_:        02E8 DEFINED AT LINE 13 IN MINT.asm
TOGGLEBASE_:        02F5 DEFINED AT LINE 16 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 271 IN MINT.asm
CTRLCODES:          0380 DEFINED AT LINE 408 IN MINT.asm
                    > USED AT LINE 76 IN MINT.asm
ALTCODES:           0380 DEFINED AT LINE 409 IN MINT.asm
                    > USED AT LINE 1280 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 544 IN MINT.asm
AND_:               0400 DEFINED AT LINE 546 IN MINT.asm
AND1:               0407 DEFINED AT LINE 554 IN MINT.asm
                    > USED AT LINE 568 IN MINT.asm
                    > USED AT LINE 579 IN MINT.asm
OR_:                040B DEFINED AT LINE 560 IN MINT.asm
XOR_:               0414 DEFINED AT LINE 570 IN MINT.asm
XOR1:               0415 DEFINED AT LINE 572 IN MINT.asm
                    > USED AT LINE 583 IN MINT.asm
INV_:               041D DEFINED AT LINE 581 IN MINT.asm
ADD_:               0422 DEFINED AT LINE 585 IN MINT.asm
ARRDEF_:            0428 DEFINED AT LINE 593 IN MINT.asm
ARRDEF:             0428 DEFINED AT LINE 594 IN MINT.asm
ARRDEF1:            042A DEFINED AT LINE 596 IN MINT.asm
                    > USED AT LINE 1025 IN MINT.asm
CALL_:              043A DEFINED AT LINE 603 IN MINT.asm
HDOT_:              0449 DEFINED AT LINE 613 IN MINT.asm
DOT_:               044F DEFINED AT LINE 617 IN MINT.asm
DOT2:               0453 DEFINED AT LINE 620 IN MINT.asm
                    > USED AT LINE 616 IN MINT.asm
DROP_:              045A DEFINED AT LINE 625 IN MINT.asm
DUP_:               045D DEFINED AT LINE 629 IN MINT.asm
ETX_:               0462 DEFINED AT LINE 634 IN MINT.asm
EXIT_:              0465 DEFINED AT LINE 637 IN MINT.asm
FETCH_:             046F DEFINED AT LINE 645 IN MINT.asm
FETCH1:             0470 DEFINED AT LINE 647 IN MINT.asm
                    > USED AT LINE 1275 IN MINT.asm
NOP_:               0476 DEFINED AT LINE 655 IN MINT.asm
OVER_:              0479 DEFINED AT LINE 658 IN MINT.asm
RET_:               0480 DEFINED AT LINE 666 IN MINT.asm
STORE_:             0487 DEFINED AT LINE 671 IN MINT.asm
SWAP_:              048E DEFINED AT LINE 680 IN MINT.asm
SHL_:               0493 DEFINED AT LINE 687 IN MINT.asm
SHR_:               0498 DEFINED AT LINE 694 IN MINT.asm
SHR1:               0499 DEFINED AT LINE 696 IN MINT.asm
                    > USED AT LINE 1061 IN MINT.asm
NEG_:               04A0 DEFINED AT LINE 702 IN MINT.asm
SUB_:               04A6 DEFINED AT LINE 706 IN MINT.asm
SUB_1:              04A7 DEFINED AT LINE 709 IN MINT.asm
SUB_2:              04A8 DEFINED AT LINE 710 IN MINT.asm
                    > USED AT LINE 704 IN MINT.asm
EQ_:                04AE DEFINED AT LINE 715 IN MINT.asm
GT_:                04BA DEFINED AT LINE 723 IN MINT.asm
LT_:                04BE DEFINED AT LINE 727 IN MINT.asm
CMP_:               04C0 DEFINED AT LINE 729 IN MINT.asm
                    > USED AT LINE 725 IN MINT.asm
EQUAL:              04CB DEFINED AT LINE 734 IN MINT.asm
                    > USED AT LINE 719 IN MINT.asm
LESS:               04CC DEFINED AT LINE 735 IN MINT.asm
                    > USED AT LINE 721 IN MINT.asm
                    > USED AT LINE 731 IN MINT.asm
                    > USED AT LINE 733 IN MINT.asm
VAR_:               04CF DEFINED AT LINE 739 IN MINT.asm
AGAIN_:             04D6 DEFINED AT LINE 745 IN MINT.asm
ALT_:               04D9 DEFINED AT LINE 747 IN MINT.asm
ARREND_:            04DC DEFINED AT LINE 749 IN MINT.asm
GETREF_:            04DF DEFINED AT LINE 751 IN MINT.asm
MUL_:               04E2 DEFINED AT LINE 753 IN MINT.asm
HEX_:               04E5 DEFINED AT LINE 755 IN MINT.asm
DEF_:               04E8 DEFINED AT LINE 757 IN MINT.asm
BEGIN_:             04EB DEFINED AT LINE 759 IN MINT.asm
NUM_:               04ED DEFINED AT LINE 761 IN MINT.asm
DIV_:               04EF DEFINED AT LINE 763 IN MINT.asm
STR_:               04F1 DEFINED AT LINE 765 IN MINT.asm
STR:                04F1 DEFINED AT LINE 766 IN MINT.asm
STR1:               04F2 DEFINED AT LINE 769 IN MINT.asm
                    > USED AT LINE 775 IN MINT.asm
STR2:               04FD DEFINED AT LINE 777 IN MINT.asm
                    > USED AT LINE 773 IN MINT.asm
BEGIN:              0500 DEFINED AT LINE 789 IN MINT.asm
                    > USED AT LINE 759 IN MINT.asm
BEGIN1:             0521 DEFINED AT LINE 806 IN MINT.asm
                    > USED AT LINE 793 IN MINT.asm
                    > USED AT LINE 1076 IN MINT.asm
                    > USED AT LINE 1192 IN MINT.asm
BEGIN2:             0523 DEFINED AT LINE 808 IN MINT.asm
                    > USED AT LINE 814 IN MINT.asm
BEGIN3:             052C DEFINED AT LINE 815 IN MINT.asm
NUM:                052E DEFINED AT LINE 830 IN MINT.asm
                    > USED AT LINE 761 IN MINT.asm
NUM1:               0532 DEFINED AT LINE 834 IN MINT.asm
                    > USED AT LINE 858 IN MINT.asm
NUM2:               054C DEFINED AT LINE 860 IN MINT.asm
                    > USED AT LINE 846 IN MINT.asm
                    > USED AT LINE 848 IN MINT.asm
                    > USED AT LINE 922 IN MINT.asm
                    > USED AT LINE 924 IN MINT.asm
DIV:                0550 DEFINED AT LINE 878 IN MINT.asm
                    > USED AT LINE 763 IN MINT.asm
DIV1:               055A DEFINED AT LINE 888 IN MINT.asm
                    > USED AT LINE 901 IN MINT.asm
DIV2:               0567 DEFINED AT LINE 897 IN MINT.asm
                    > USED AT LINE 894 IN MINT.asm
DIV3:               0568 DEFINED AT LINE 899 IN MINT.asm
                    > USED AT LINE 896 IN MINT.asm
DIV4:               056D DEFINED AT LINE 904 IN MINT.asm
HEX:                0572 DEFINED AT LINE 912 IN MINT.asm
                    > USED AT LINE 755 IN MINT.asm
HEX1:               0575 DEFINED AT LINE 914 IN MINT.asm
                    > USED AT LINE 931 IN MINT.asm
HEX2:               057D DEFINED AT LINE 920 IN MINT.asm
                    > USED AT LINE 918 IN MINT.asm
ARREND:             058F DEFINED AT LINE 933 IN MINT.asm
                    > USED AT LINE 749 IN MINT.asm
ARREND2:            05A4 DEFINED AT LINE 945 IN MINT.asm
                    > USED AT LINE 942 IN MINT.asm
DEF:                05AB DEFINED AT LINE 960 IN MINT.asm
                    > USED AT LINE 757 IN MINT.asm
DEF1:               05BB DEFINED AT LINE 970 IN MINT.asm
                    > USED AT LINE 977 IN MINT.asm
DEF2:               05C5 DEFINED AT LINE 979 IN MINT.asm
                    > USED AT LINE 976 IN MINT.asm
DEF3:               05C6 DEFINED AT LINE 981 IN MINT.asm
AGAIN:              05CC DEFINED AT LINE 985 IN MINT.asm
                    > USED AT LINE 745 IN MINT.asm
AGAIN1:             05DE DEFINED AT LINE 998 IN MINT.asm
                    > USED AT LINE 992 IN MINT.asm
AGAIN2:             05F8 DEFINED AT LINE 1010 IN MINT.asm
                    > USED AT LINE 1003 IN MINT.asm
AGAIN3:             05FB DEFINED AT LINE 1012 IN MINT.asm
                    > USED AT LINE 996 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 1021 IN MINT.asm
CARRDEF_:           0600 DEFINED AT LINE 1023 IN MINT.asm
CFETCH_:            0605 DEFINED AT LINE 1027 IN MINT.asm
ANOP_:              060A DEFINED AT LINE 1032 IN MINT.asm
CHARCODE_:          060C DEFINED AT LINE 1035 IN MINT.asm
COMMENT_:           0611 DEFINED AT LINE 1040 IN MINT.asm
                    > USED AT LINE 1044 IN MINT.asm
CSTORE_:            061A DEFINED AT LINE 1048 IN MINT.asm
DEPTH_:             061F DEFINED AT LINE 1054 IN MINT.asm
EMIT_:              062D DEFINED AT LINE 1063 IN MINT.asm
IFTE_:              0634 DEFINED AT LINE 1069 IN MINT.asm
IFTE1:              063E DEFINED AT LINE 1077 IN MINT.asm
                    > USED AT LINE 1073 IN MINT.asm
EXEC_:              0646 DEFINED AT LINE 1082 IN MINT.asm
EXEC1:              064B DEFINED AT LINE 1085 IN MINT.asm
                    > USED AT LINE 1083 IN MINT.asm
GO_:                064E DEFINED AT LINE 1090 IN MINT.asm
GO1:                064F DEFINED AT LINE 1092 IN MINT.asm
                    > USED AT LINE 611 IN MINT.asm
GO2:                065B DEFINED AT LINE 1100 IN MINT.asm
                    > USED AT LINE 1095 IN MINT.asm
NSCALL_:            065D DEFINED AT LINE 1103 IN MINT.asm
NSCALL2:            067A DEFINED AT LINE 1115 IN MINT.asm
                    > USED AT LINE 1108 IN MINT.asm
NSEXIT_:            0682 DEFINED AT LINE 1119 IN MINT.asm
                    > USED AT LINE 1114 IN MINT.asm
NSENTER_:           068A DEFINED AT LINE 1124 IN MINT.asm
PROMPT_:            068D DEFINED AT LINE 1127 IN MINT.asm
SYSVAR_:            0692 DEFINED AT LINE 1131 IN MINT.asm
I_:                 069C DEFINED AT LINE 1140 IN MINT.asm
INPORT_:            06A0 DEFINED AT LINE 1144 IN MINT.asm
KEY_:               06AB DEFINED AT LINE 1154 IN MINT.asm
KEY1:               06AE DEFINED AT LINE 1156 IN MINT.asm
                    > USED AT LINE 1038 IN MINT.asm
NEWLN_:             06B4 DEFINED AT LINE 1162 IN MINT.asm
OUTPORT_:           06B9 DEFINED AT LINE 1166 IN MINT.asm
ROT_:               06C2 DEFINED AT LINE 1175 IN MINT.asm
BREAK_:             06C9 DEFINED AT LINE 1183 IN MINT.asm
BREAK1:             06D0 DEFINED AT LINE 1189 IN MINT.asm
                    > USED AT LINE 1187 IN MINT.asm
PRINTSTK_:          06D8 DEFINED AT LINE 1194 IN MINT.asm
EDITDEF_:           06DA DEFINED AT LINE 1196 IN MINT.asm
EDITDEF:            06DA DEFINED AT LINE 1206 IN MINT.asm
EDITDEF1:           06F6 DEFINED AT LINE 1224 IN MINT.asm
                    > USED AT LINE 1230 IN MINT.asm
EDITDEF2:           06F7 DEFINED AT LINE 1226 IN MINT.asm
                    > USED AT LINE 1223 IN MINT.asm
EDITDEF3:           0708 DEFINED AT LINE 1235 IN MINT.asm
                    > USED AT LINE 1217 IN MINT.asm
WRITECHAR:          070A DEFINED AT LINE 1237 IN MINT.asm
                    > USED AT LINE 1220 IN MINT.asm
                    > USED AT LINE 1222 IN MINT.asm
                    > USED AT LINE 1228 IN MINT.asm
NSENTER:            070F DEFINED AT LINE 1242 IN MINT.asm
                    > USED AT LINE 1125 IN MINT.asm
NSENTER1:           0710 DEFINED AT LINE 1244 IN MINT.asm
                    > USED AT LINE 1105 IN MINT.asm
PRINTSTK:           072E DEFINED AT LINE 1261 IN MINT.asm
                    > USED AT LINE 1195 IN MINT.asm
GETREF:             074E DEFINED AT LINE 1271 IN MINT.asm
                    > USED AT LINE 751 IN MINT.asm
ALT:                0756 DEFINED AT LINE 1277 IN MINT.asm
                    > USED AT LINE 747 IN MINT.asm
MUL:                0761 DEFINED AT LINE 1289 IN MINT.asm
                    > USED AT LINE 753 IN MINT.asm
MUL2:               076B DEFINED AT LINE 1298 IN MINT.asm
                    > USED AT LINE 1307 IN MINT.asm
ENTER:              077D DEFINED AT LINE 1316 IN MINT.asm
                    > USED AT LINE 82 IN MINT.asm
                    > USED AT LINE 1112 IN MINT.asm
                    > USED AT LINE 1263 IN MINT.asm
NSLOOKUP:           0786 DEFINED AT LINE 1323 IN MINT.asm
                    > USED AT LINE 607 IN MINT.asm
                    > USED AT LINE 965 IN MINT.asm
                    > USED AT LINE 1109 IN MINT.asm
                    > USED AT LINE 1211 IN MINT.asm
                    > USED AT LINE 1274 IN MINT.asm
NSLOOKUP2:          078C DEFINED AT LINE 1327 IN MINT.asm
                    > USED AT LINE 741 IN MINT.asm
                    > USED AT LINE 1116 IN MINT.asm
NSLOOKUP3:          0790 DEFINED AT LINE 1330 IN MINT.asm
                    > USED AT LINE 1326 IN MINT.asm
PRINTSTR:           079A DEFINED AT LINE 1339 IN MINT.asm
                    > USED AT LINE 32 IN MINT.asm
                    > USED AT LINE 249 IN MINT.asm
                    > USED AT LINE 254 IN MINT.asm
PRINTSTR1:          079D DEFINED AT LINE 1343 IN MINT.asm
                    > USED AT LINE 1350 IN MINT.asm
PRINTSTR2:          07A1 DEFINED AT LINE 1347 IN MINT.asm
                    > USED AT LINE 1341 IN MINT.asm
PRINTDEC:           07A8 DEFINED AT LINE 1355 IN MINT.asm
                    > USED AT LINE 619 IN MINT.asm
PRINTDEC1:          07C1 DEFINED AT LINE 1365 IN MINT.asm
                    > USED AT LINE 1357 IN MINT.asm
                    > USED AT LINE 1359 IN MINT.asm
                    > USED AT LINE 1361 IN MINT.asm
                    > USED AT LINE 1363 IN MINT.asm
PRINTDEC2:          07C3 DEFINED AT LINE 1367 IN MINT.asm
                    > USED AT LINE 1370 IN MINT.asm
PRINTHEX:           07CC DEFINED AT LINE 1374 IN MINT.asm
                    > USED AT LINE 615 IN MINT.asm
PRINTHEX2:          07D7 DEFINED AT LINE 1384 IN MINT.asm
                    > USED AT LINE 1378 IN MINT.asm
                    > USED AT LINE 1380 IN MINT.asm
PRINTHEX3:          07E0 DEFINED AT LINE 1392 IN MINT.asm
                    > USED AT LINE 1390 IN MINT.asm
RPUSH:              07EB DEFINED AT LINE 1400 IN MINT.asm
                    > USED AT LINE 600 IN MINT.asm
                    > USED AT LINE 605 IN MINT.asm
                    > USED AT LINE 1079 IN MINT.asm
                    > USED AT LINE 1097 IN MINT.asm
                    > USED AT LINE 1255 IN MINT.asm
                    > USED AT LINE 1318 IN MINT.asm
RPOP:               07F6 DEFINED AT LINE 1407 IN MINT.asm
                    > USED AT LINE 640 IN MINT.asm
                    > USED AT LINE 667 IN MINT.asm
                    > USED AT LINE 934 IN MINT.asm
                    > USED AT LINE 1120 IN MINT.asm
RPOP2:              0800 DEFINED AT LINE 1412 IN MINT.asm
                    > USED AT LINE 1104 IN MINT.asm
STACK:              0880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
DSTACK:             0880 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 30 IN MINT.asm
                    > USED AT LINE 40 IN MINT.asm
                    > USED AT LINE 67 IN MINT.asm
                    > USED AT LINE 70 IN MINT.asm
                    > USED AT LINE 1058 IN MINT.asm
RSTACK:             0900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 50 IN MINT.asm
TIB:                0900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 97 IN MINT.asm
                    > USED AT LINE 129 IN MINT.asm
                    > USED AT LINE 138 IN MINT.asm
                    > USED AT LINE 155 IN MINT.asm
                    > USED AT LINE 1218 IN MINT.asm
                    > USED AT LINE 1231 IN MINT.asm
MINTVARS:           0A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1133 IN MINT.asm
SYSVARS:            0A00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 53 IN MINT.asm
                    > USED AT LINE 1133 IN MINT.asm
VS0:                0A00 DEFINED AT LINE 16 IN ram.asm
VBASE16:            0A02 DEFINED AT LINE 17 IN ram.asm
VTIBPTR:            0A04 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 75 IN MINT.asm
                    > USED AT LINE 84 IN MINT.asm
                    > USED AT LINE 91 IN MINT.asm
                    > USED AT LINE 154 IN MINT.asm
                    > USED AT LINE 1234 IN MINT.asm
VNS:                0A06 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 1121 IN MINT.asm
                    > USED AT LINE 1254 IN MINT.asm
                    > USED AT LINE 1258 IN MINT.asm
                    > USED AT LINE 1335 IN MINT.asm
VLASTDEF:           0A08 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 963 IN MINT.asm
VHEAPPTR:           0A0E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 193 IN MINT.asm
                    > USED AT LINE 202 IN MINT.asm
                    > USED AT LINE 599 IN MINT.asm
                    > USED AT LINE 937 IN MINT.asm
                    > USED AT LINE 966 IN MINT.asm
                    > USED AT LINE 982 IN MINT.asm
VBYTEMODE:          0A36 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 195 IN MINT.asm
                    > USED AT LINE 598 IN MINT.asm
                    > USED AT LINE 940 IN MINT.asm
TBPTR:              0A68 DEFINED AT LINE 46 IN ram.asm
RST08:              0A6A DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0A6C DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0A6E DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0A70 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0A72 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0A74 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0A76 DEFINED AT LINE 54 IN ram.asm
INTVEC:             0A78 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0A7A DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0A7C DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0A7E DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
VARS:               0A80 DEFINED AT LINE 62 IN ram.asm
DEFS:               0AC0 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 43 IN MINT.asm
                    > USED AT LINE 57 IN MINT.asm
                    > USED AT LINE 1256 IN MINT.asm
HEAP:               0CC0 DEFINED AT LINE 72 IN ram.asm
                    > USED AT LINE 47 IN MINT.asm
