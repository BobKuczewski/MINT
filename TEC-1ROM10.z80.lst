0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 06 0A               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 08 0A               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 0A 0A               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 0C 0A               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 0E 0A               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 10 0A               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 14 0A               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 16 0A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 18 0A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 1A 0A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 06 0A               LD   (RST08),HL   
0094   22 08 0A               LD   (RST10),HL   
0097   22 0A 0A               LD   (RST18),HL   
009A   22 0C 0A               LD   (RST20),HL   
009D   22 0E 0A               LD   (RST28),HL   
00A0   22 10 0A               LD   (RST30),HL   
00A3   22 14 0A               LD   (INTVEC),HL   
00A6   22 16 0A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 18 0A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 1A 0A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 18 02               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       MINT 2.0 Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       John Hardy and Ken Boak
00C6                             ;       incorporates bit-bang serial routines by Craig Jones
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   
00C6                FALSE:    EQU   0   
00C6                UNLIMITED:   EQU   -1   
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_R:   EQU   18   
00C6                CTRL_S:   EQU   19   
00C6                BSLASH:   EQU   $5c   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 db len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 db (len | $80)
00C6                 db data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 db 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put mint code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mint and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                REEDIT_:      
0180   2F 7A 2F 4C 3B         DB   "/z/L;"   ; remembers last line edited
0185                EDIT_:       
0185   60 3F 60 2F 4B 2F 50 2F 4C 3B 00 .CSTR   "`?`/K/P/L;"   
0190                LIST_:       
0190   2F 4E 32 36 28 2F 69 36 35 2B 2F 4C 2F 6B 30 3E 28 2F 4E 29 29 2F 50 3B 00 .CSTR   "/N26(/i65+/L/k0>(/N))/P;"   
01A9                PRINTSTACK_:      
01A9   60 3D 3E 20 60 2F 73 32 2D 20 2F 44 31 2D 28 22 2C 32 2D 29 27 2F 4E 2F 50 3B 00 .CSTR   "`=> `/s2- /D1-(",$22,",2-)'/N/P;"   
01C4                IOPCODES:      
01C4                          ;*Macro unroll:  LITDAT 15
01C4   0F                     DB   15   
01C5   6A                     DB   lsb(bang_)   ;   !
01C6   47                     DB   lsb(dquote_)   ;   "
01C7   EC                     DB   lsb(hash_)   ;   #
01C8   7A                     DB   lsb(dollar_)   ;   $
01C9   4F                     DB   lsb(percent_)   ;   %
01CA   03                     DB   lsb(amper_)   ;   &
01CB   00                     DB   lsb(quote_)   ;   '
01CC   E7                     DB   lsb(lparen_)   ;   (
01CD   DE                     DB   lsb(rparen_)   ;   )
01CE   EE                     DB   lsb(star_)   ;   *
01CF   25                     DB   lsb(plus_)   ;   +
01D0   41                     DB   lsb(comma_)   ;   ,
01D1   7F                     DB   lsb(minus_)   ;   -
01D2   36                     DB   lsb(dot_)   ;   .
01D3   F0                     DB   lsb(slash_)   ;   /	
01D4                          ;*Macro unroll:  REPDAT 10, lsb(num_)	; 10 x repeat lsb of add to the num routine
01D4   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
01D5   DB                     DB   lsb(num_)   
01D6                          ;*Macro unroll:  LITDAT 7
01D6   07                     DB   7   
01D7   E4                     DB   lsb(colon_)   ;    :
01D8   56                     DB   lsb(semi_)   ;    ;
01D9   A3                     DB   lsb(lt_)   ;    <
01DA   94                     DB   lsb(eq_)   ;    =
01DB   9F                     DB   lsb(gt_)   ;    >
01DC   EA                     DB   lsb(question_)   ;    ?
01DD   01                     DB   lsb(at_)   ;    @
01DE                          ;*Macro unroll:  REPDAT 26, lsb(call_)	; call a command a, B ....Z
01DE   9A                     DB   (26 | $80)   ; call a command a, B ....Z
01DF   2C                     DB   lsb(call_)   
01E0                          ;*Macro unroll:  LITDAT 6
01E0   06                     DB   6   
01E1   D2                     DB   lsb(lbrack_)   ;    [
01E2   01                     DB   lsb(bslash_)   ;    \
01E3   E1                     DB   lsb(rbrack_)   ;    ]
01E4   17                     DB   lsb(caret_)   ;    ^
01E5   01                     DB   lsb(underscore_)   ;    _
01E6   C3                     DB   lsb(grave_)   ;    `   ; for printing `hello`
01E7                          ;*Macro unroll:  REPDAT 26, lsb(var_)	; a b c .....z
01E7   9A                     DB   (26 | $80)   ; a b c .....z
01E8   AE                     DB   lsb(var_)   
01E9                          ;*Macro unroll:  LITDAT 4
01E9   04                     DB   4   
01EA   5D                     DB   lsb(lbrace_)   ;    {
01EB   0E                     DB   lsb(pipe_)   ;    |
01EC   62                     DB   lsb(rbrace_)   ;    }
01ED   20                     DB   lsb(tilde_)   ;    ~ ( a b c -- b c a ) rotate
01EE                IALTCODES:      
01EE                          ;*Macro unroll:  LITDAT 26
01EE   1A                     DB   26   
01EF   00                     DB   lsb(alloc_)   ;A      allocate some heap memory
01F0   13                     DB   lsb(bmode_)   ;B      toggle byte mode
01F1   3D                     DB   lsb(printChar_)   ;C      print a char
01F2   2F                     DB   lsb(depth_)   ;D      depth of stack
01F3   09                     DB   lsb(aNop_)   ;E      else condition
01F4   F1                     DB   lsb(false_)   ;F      false condition
01F5   56                     DB   lsb(go_)   ;G      go execute mint code
01F6   09                     DB   lsb(aNop_)   ;H
01F7   74                     DB   lsb(inPort_)   ;I      input from port
01F8   09                     DB   lsb(aNop_)   ;J
01F9   6B                     DB   lsb(key_)   ;K      read a char from input
01FA   4C                     DB   lsb(editDef_)   ;L      edit line
01FB   09                     DB   lsb(aNop_)   ;M
01FC   7F                     DB   lsb(newln_)   ;N      prints a newline to output
01FD   84                     DB   lsb(outPort_)   ;O      output to port
01FE   51                     DB   lsb(prompt_)   ;P      print MINT prompt
01FF   09                     DB   lsb(aNop_)   ;Q
0200   09                     DB   lsb(aNop_)   ;R
0201   0B                     DB   lsb(arrSize_)   ;S      array size
0202   09                     DB   lsb(aNop_)   ;T      true condition
0203   09                     DB   lsb(aNop_)   ;U      unlimited endless loops
0204   09                     DB   lsb(aNop_)   ;V
0205   1F                     DB   lsb(while_)   ;W      conditional break from loop
0206   44                     DB   lsb(exec_)   ;X      execute machine code
0207   09                     DB   lsb(aNop_)   ;Y
0208   09                     DB   lsb(aNop_)   ;Z
0209                          ;*Macro unroll:  ENDDAT
0209   00                     DB   0   
020A                BACKSPACE:      
020A   79                     LD   a,c   
020B   B0                     OR   b   
020C   28 27                  JR   z,interpret2   
020E   0B                     DEC   bc   
020F   CD B6 03               CALL   printStr   
0212   08 20 08 00            .CSTR   "\b \b"   
0216   18 1D                  JR   interpret2   
0218                START:       
0218   31 00 0A               LD   SP,DSTACK   ; start of MINT
021B   CD DE 02               CALL   init   ; setups
021E   CD B6 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0221   4D 49 4E 54 32 2E 30 0D 0A 00 .CSTR   "MINT2.0\r\n"   
022B                INTERPRET:      
022B   CD A6 03               CALL   prompt   
022E   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0231   ED 43 14 0C            LD   (vTIBPtr),bc   
0235                INTERPRET2:      ; calc nesting (a macro might have changed it)
0235   1E 00                  LD   E,0   ; initilize nesting value
0237   C5                     PUSH   bc   ; save offset into TIB,
0238                             ; bc is also the count of chars in TIB
0238   21 00 08               LD   hl,TIB   ; hl is start of TIB
023B   18 06                  JR   interpret4   
023D                INTERPRET3:      
023D   7E                     LD   a,(hl)   ; A = char in TIB
023E   23                     INC   hl   ; inc pointer into TIB
023F   0B                     DEC   bc   ; dec count of chars in TIB
0240   CD 7A 03               CALL   nesting   ; update nesting value
0243                INTERPRET4:      
0243   79                     LD   a,C   ; is count zero?
0244   B0                     OR   B   
0245   20 F6                  JR   NZ,interpret3   ; if not loop
0247   C1                     POP   bc   ; restore offset into TIB
0248                WAITCHAR:      
0248   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
024B   FE 20                  CP   $20   ; compare to space
024D   30 39                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
024F   FE 00                  CP   $0   ; is it end of string? null end of string
0251   28 59                  JR   Z,waitchar4   
0253   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0255   28 3F                  JR   Z,waitchar3   ; if anything else its macro/control
0257   FE 08                  CP   CTRL_H   
0259   28 AF                  JR   z,backSpace   
025B   16 01                  LD   d,msb(macros)   
025D   FE 05                  CP   CTRL_E   
025F   1E 85                  LD   e,lsb(edit_)   
0261   28 14                  JR   z,macro   
0263   FE 12                  CP   CTRL_R   
0265   1E 80                  LD   e,lsb(reedit_)   
0267   28 0E                  JR   z,macro   
0269   FE 0C                  CP   CTRL_L   
026B   1E 90                  LD   e,lsb(list_)   
026D   28 08                  JR   z,macro   
026F   FE 13                  CP   CTRL_S   
0271   1E A9                  LD   e,lsb(printStack_)   
0273   28 02                  JR   z,macro   
0275   18 BE                  JR   interpret2   
0277                MACRO:       
0277   ED 43 14 0C            LD   (vTIBPtr),bc   
027B   D5                     PUSH   de   
027C   CD E1 03               CALL   ENTER   ;mint go operation and jump to it
027F   2F 47 00               .CSTR   "/G"   
0282   ED 4B 14 0C            LD   bc,(vTIBPtr)   
0286   18 AD                  JR   interpret2   
0288                WAITCHAR1:      
0288   21 00 08               LD   hl,TIB   
028B   09                     ADD   hl,bc   
028C   77                     LD   (hl),A   ; store the character in textbuf
028D   03                     INC   bc   
028E   CD 85 00               CALL   putchar   ; echo character to screen
0291   CD 7A 03               CALL   nesting   
0294   18 B2                  JR   waitchar   ; wait for next character
0296                WAITCHAR3:      
0296   21 00 08               LD   hl,TIB   
0299   09                     ADD   hl,bc   
029A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
029C   23                     INC   hl   
029D   36 0A                  LD   (hl),"\n"   
029F   23                     INC   hl   ; ????
02A0   03                     INC   bc   
02A1   03                     INC   bc   
02A2   CD AF 03               CALL   crlf   ; echo character to screen
02A5   7B                     LD   a,E   ; if zero nesting append and ETX after \r
02A6   B7                     OR   A   
02A7   20 9F                  JR   NZ,waitchar   
02A9   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02AB   03                     INC   bc   
02AC                WAITCHAR4:      
02AC   ED 43 14 0C            LD   (vTIBPtr),bc   
02B0   01 00 08               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02B3   0B                     DEC   bc   
02B4                NEXT:        
02B4   03                     INC   bc   ;       Increment the IP
02B5   0A                     LD   a,(bc)   ;       Get the next character and dispatch
02B6   B7                     OR   a   ; is it NUL?
02B7   28 0F                  JR   z,exit   
02B9   FE 03                  CP   CTRL_C   
02BB   28 15                  JR   z,etx   
02BD   D6 21                  SUB   "!"   
02BF   38 F3                  JR   c,NEXT   
02C1   6F                     LD   L,A   ;       Index into table
02C2   26 0B                  LD   H,msb(opcodes)   ;       Start address of jump table
02C4   6E                     LD   L,(hl)   ;       get low jump address
02C5   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
02C7   E9                     JP   (hl)   ;       Jump to routine
02C8                EXIT:        
02C8   03                     INC   bc   ; store offests into a table of bytes, smaller
02C9   50 59                  LD   de,bc   
02CB   CD D1 03               CALL   rpop   ; Restore Instruction pointer
02CE   44 4D                  LD   bc,hl   
02D0   EB                     EX   de,hl   
02D1   E9                     JP   (hl)   
02D2                ETX:         
02D2   21 00 F6               LD   hl,-DSTACK   ; check if stack pointer is underwater
02D5   39                     ADD   hl,SP   
02D6   30 03                  JR   NC,etx1   
02D8   31 00 0A               LD   SP,DSTACK   
02DB                ETX1:        
02DB   C3 2B 02               JP   interpret   
02DE                INIT:        
02DE   DD 21 80 09            LD   IX,RSTACK   
02E2   FD 21 B4 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
02E6   21 00 0C               LD   hl,altVars   ; init altVars to 0
02E9   06 34                  LD   b,26 * 2   
02EB                INIT1:       
02EB   36 00                  LD   (hl),0   
02ED   23                     INC   hl   
02EE   10 FB                  DJNZ   init1   
02F0   21 FF FF               LD   hl,TRUE   ; hl = TRUE
02F3   22 26 0C               LD   (vTrue),hl   
02F6   2B                     DEC   hl   ; hl = Unlimited
02F7   22 28 0C               LD   (vUnlimited),hl   
02FA   21 00 0A               LD   hl,dStack   
02FD   22 24 0C               LD   (vStkStart),hl   
0300   21 41 00               LD   hl,65   
0303   22 32 0C               LD   (vLastDef),hl   
0306   21 9C 0C               LD   hl,HEAP   
0309   22 0E 0C               LD   (vHeapPtr),hl   
030C   21 34 0C               LD   hl,VARS   ; init namespaces to 0 using LDIR
030F   54 5D                  LD   de,hl   
0311   13                     INC   de   
0312   36 00                  LD   (hl),0   
0314   01 68 00               LD   bc,VARS_SIZE   
0317   ED B0                  LDIR      
0319                INITOPS:      
0319   21 C4 01               LD   hl,iOpcodes   
031C   11 00 0B               LD   de,opcodes   
031F   01 78 00               LD   bc,$80-32-1-1+26   
0322                INITOPS1:      
0322   7E                     LD   a,(hl)   
0323   23                     INC   hl   
0324   CB 27                  SLA   A   
0326   C8                     RET   Z   
0327   38 09                  JR   C,initOps2   
0329   CB 3F                  SRL   A   
032B   4F                     LD   C,A   
032C   06 00                  LD   B,0   
032E   ED B0                  LDIR      
0330   18 F0                  JR   initOps1   
0332                INITOPS2:      
0332   CB 3F                  SRL   A   
0334   47                     LD   B,A   
0335   7E                     LD   a,(hl)   
0336   23                     INC   hl   
0337                INITOPS2A:      
0337   12                     LD   (de),A   
0338   13                     INC   de   
0339   10 FC                  DJNZ   initOps2a   
033B   18 E5                  JR   initOps1   
033D                LOOKUPREF:      
033D   16 00                  LD   D,0   
033F                LOOKUPREF0:      
033F   FE 61                  CP   "a"   
0341   30 06                  JR   NC,lookupRef2   
0343                LOOKUPREF1:      
0343   D6 41                  SUB   "A"   
0345   1E 00                  LD   E,0   
0347   18 04                  JR   lookupRef3   
0349                LOOKUPREF2:      
0349   D6 61                  SUB   "a"   
034B   1E 34                  LD   E,26*2   
034D                LOOKUPREF3:      
034D   87                     ADD   a,A   
034E   83                     ADD   a,E   
034F   21 34 0C               LD   hl,VARS   
0352   85                     ADD   a,L   
0353   6F                     LD   L,A   
0354   3E 00                  LD   a,0   
0356   8C                     ADC   a,H   
0357   67                     LD   H,A   
0358   AF                     XOR   A   
0359   B3                     OR   E   ; sets Z flag if A-Z
035A   C9                     RET      
035B                PRINTHEX:      
035B                             ; Display hl as a 16-bit number in hex.
035B   C5                     PUSH   bc   ; preserve the IP
035C   7C                     LD   a,H   
035D   CD 66 03               CALL   printhex2   
0360   7D                     LD   a,L   
0361   CD 66 03               CALL   printhex2   
0364   C1                     POP   bc   
0365   C9                     RET      
0366                PRINTHEX2:      
0366   4F                     LD   C,A   
0367   1F                     RRA      
0368   1F                     RRA      
0369   1F                     RRA      
036A   1F                     RRA      
036B   CD 6F 03               CALL   printhex3   
036E   79                     LD   a,C   
036F                PRINTHEX3:      
036F   E6 0F                  AND   0x0F   
0371   C6 90                  ADD   a,0x90   
0373   27                     DAA      
0374   CE 40                  ADC   a,0x40   
0376   27                     DAA      
0377   C3 85 00               JP   putchar   
037A                             ; **************************************************************************
037A                             ; calculate nesting value
037A                             ; A is char to be tested,
037A                             ; E is the nesting value (initially 0)
037A                             ; E is increased by ( and [
037A                             ; E is decreased by ) and ]
037A                             ; E has its bit 7 toggled by `
037A                             ; limited to 127 levels
037A                             ; **************************************************************************
037A                NESTING:      
037A   FE 60                  CP   "`"   
037C   20 0A                  JR   NZ,nesting1   
037E   CB 7B                  BIT   7,E   
0380   28 03                  JR   Z,nesting1a   
0382   CB BB                  RES   7,E   
0384   C9                     RET      
0385                NESTING1A:      
0385   CB FB                  SET   7,E   
0387   C9                     RET      
0388                NESTING1:      
0388   CB 7B                  BIT   7,E   
038A   C0                     RET   NZ   
038B   FE 3A                  CP   ":"   
038D   28 08                  JR   Z,nesting2   
038F   FE 5B                  CP   "["   
0391   28 04                  JR   Z,nesting2   
0393   FE 28                  CP   "("   
0395   20 02                  JR   NZ,nesting3   
0397                NESTING2:      
0397   1C                     INC   E   
0398   C9                     RET      
0399                NESTING3:      
0399   FE 3B                  CP   ";"   
039B   28 07                  JR   Z,nesting4   
039D   FE 5D                  CP   "]"   
039F   28 03                  JR   Z,nesting4   
03A1   FE 29                  CP   ")"   
03A3   C0                     RET   NZ   
03A4                NESTING4:      
03A4   1D                     DEC   E   
03A5   C9                     RET      
03A6                PROMPT:      
03A6   CD B6 03               CALL   printStr   
03A9   0D 0A 3E 20 00         .CSTR   "\r\n> "   
03AE   C9                     RET      
03AF                CRLF:        
03AF   CD B6 03               CALL   printStr   
03B2   0D 0A 00               .CSTR   "\r\n"   
03B5   C9                     RET      
03B6                PRINTSTR:      
03B6   E3                     EX   (SP),hl   ; swap			
03B7   CD C1 03               CALL   putStr   
03BA   23                     INC   hl   ; inc past null
03BB   E3                     EX   (SP),hl   ; put it back	
03BC   C9                     RET      
03BD                PUTSTR0:      
03BD   CD 85 00               CALL   putchar   
03C0   23                     INC   hl   
03C1                PUTSTR:      
03C1   7E                     LD   a,(hl)   
03C2   B7                     OR   A   
03C3   20 F8                  JR   NZ,putStr0   
03C5   C9                     RET      
03C6                RPUSH:       
03C6   DD 2B                  DEC   IX   
03C8   DD 74 00               LD   (IX+0),H   
03CB   DD 2B                  DEC   IX   
03CD   DD 75 00               LD   (IX+0),L   
03D0   C9                     RET      
03D1                RPOP:        
03D1   DD 6E 00               LD   L,(IX+0)   
03D4   DD 23                  INC   IX   
03D6   DD 66 00               LD   H,(IX+0)   
03D9   DD 23                  INC   IX   
03DB                RPOP2:       
03DB   C9                     RET      
03DC                WRITECHAR:      
03DC   77                     LD   (hl),A   
03DD   23                     INC   hl   
03DE   C3 85 00               JP   putchar   
03E1                ENTER:       
03E1   60 69                  LD   hl,bc   
03E3   CD C6 03               CALL   rpush   ; save Instruction Pointer
03E6   C1                     POP   bc   
03E7   0B                     DEC   bc   
03E8   FD E9                  JP   (IY)   
03EA                CARRY:       
03EA   21 00 00               LD   hl,0   
03ED   CB 15                  RL   l   
03EF   22 04 0C               LD   (vCarry),hl   
03F2   FD E9                  JP   (iy)   
03F4                             ; **********************************************************************			
03F4                             ; Page 4 primitive routines
03F4                             ; **********************************************************************
03F4                          ALIGN   $100   
0400                PAGE4:       
0400                QUOTE_:      ; Discard the top member of the stack
0400   E1                     POP   hl   
0401                AT_:         
0401                BSLASH_:      
0401                UNDERSCORE_:      
0401   FD E9                  JP   (IY)   
0403                AMPER_:      
0403   D1                     POP   de   ;     Bitwise and the top 2 elements of the stack
0404   E1                     POP   hl   
0405   7B                     LD   a,E   
0406   A5                     AND   L   
0407   6F                     LD   L,A   
0408   7A                     LD   a,D   
0409   A4                     AND   H   
040A                AND1:        
040A   67                     LD   H,A   
040B   E5                     PUSH   hl   
040C   FD E9                  JP   (IY)   
040E                PIPE_:       
040E   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
040F   E1                     POP   hl   
0410   7B                     LD   a,E   
0411   B5                     OR   L   
0412   6F                     LD   L,A   
0413   7A                     LD   a,D   
0414   B4                     OR   H   
0415   18 F3                  JR   and1   
0417                CARET_:      
0417   D1                     POP   de   ; Bitwise XOR the top 2 elements of the stack
0418                XOR1:        
0418   E1                     POP   hl   
0419   7B                     LD   a,E   
041A   AD                     XOR   L   
041B   6F                     LD   L,A   
041C   7A                     LD   a,D   
041D   AC                     XOR   H   
041E   18 EA                  JR   and1   
0420                TILDE_:      
0420                INVERT:      ; Bitwise INVert the top member of the stack
0420   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0423   18 F3                  JR   xor1   
0425                PLUS_:       ; add the top 2 members of the stack
0425   D1                     POP   de   
0426   E1                     POP   hl   
0427   19                     ADD   hl,de   
0428   E5                     PUSH   hl   
0429   C3 EA 03               JP   carry   
042C                CALL_:       
042C   0A                     LD   a,(bc)   
042D   CD 43 03               CALL   lookupRef1   
0430   5E                     LD   E,(hl)   
0431   23                     INC   hl   
0432   56                     LD   D,(hl)   
0433   C3 57 06               JP   go1   
0436                DOT_:        
0436   E1                     POP   hl   
0437   CD BD 06               CALL   printDec   
043A                DOT2:        
043A   3E 20                  LD   a," "   
043C   CD 85 00               CALL   putChar   
043F   FD E9                  JP   (IY)   
0441                COMMA_:      ; print hexadecimal
0441   E1                     POP   hl   
0442   CD 5B 03               CALL   printhex   
0445   18 F3                  JR   dot2   
0447                DQUOTE_:      
0447   E1                     POP   hl   ; Duplicate the top member of the stack
0448   E5                     PUSH   hl   
0449   E5                     PUSH   hl   
044A   FD E9                  JP   (IY)   
044C   C3 B4 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
044F                PERCENT_:      
044F   E1                     POP   hl   ; Duplicate 2nd element of the stack
0450   D1                     POP   de   
0451   D5                     PUSH   de   
0452   E5                     PUSH   hl   
0453   D5                     PUSH   de   ; and push it to top of stack
0454   FD E9                  JP   (IY)   
0456                SEMI_:       
0456   CD D1 03               CALL   rpop   ; Restore Instruction pointer
0459   44 4D                  LD   bc,hl   
045B   FD E9                  JP   (IY)   
045D                             ;  Left shift { is multiply by 2		
045D                LBRACE_:      
045D   E1                     POP   hl   ; Duplicate the top member of the stack
045E   29                     ADD   hl,hl   
045F   E5                     PUSH   hl   ; shift left fallthrough into plus_
0460   FD E9                  JP   (IY)   
0462                             ;  Right shift } is a divide by 2		
0462                RBRACE_:      
0462   E1                     POP   hl   ; Get the top member of the stack
0463                SHR1:        
0463   CB 3C                  SRL   H   
0465   CB 1D                  RR   L   
0467   E5                     PUSH   hl   
0468   FD E9                  JP   (IY)   
046A                BANG_:       ; Store the value at the address placed on the top of the stack
046A                ASSIGN:      
046A   E1                     POP   hl   ; discard value of last accessed variable
046B   D1                     POP   de   ; new value
046C   2A 1E 0C               LD   hl,(vPointer)   
046F   73                     LD   (hl),e   
0470   3A 02 0C               LD   a,(vByteMode)   
0473   3C                     INC   a   ; is it byte?
0474   28 02                  JR   z,assign1   
0476   23                     INC   hl   
0477   72                     LD   (hl),d   
0478                ASSIGN1:      
0478   FD E9                  JP   (IY)   
047A                             ; $ swap                    ; a b -- b a Swap the top 2 elements of the stack
047A                DOLLAR_:      
047A   E1                     POP   hl   
047B   E3                     EX   (SP),hl   
047C   E5                     PUSH   hl   
047D   FD E9                  JP   (IY)   
047F                MINUS_:      ; Subtract the value 2nd on stack from top of stack
047F   03                     INC   bc   ; check if sign of a number
0480   0A                     LD   a,(bc)   
0481   0B                     DEC   bc   
0482   FE 30                  CP   "0"   
0484   38 05                  JR   c,sub1   
0486   FE 3A                  CP   "9"+1   
0488   DA 32 07               JP   c,num   
048B                SUB1:        
048B   D1                     POP   de   
048C   E1                     POP   hl   
048D                SUB2:        
048D   A7                     AND   A   
048E   ED 52                  SBC   hl,de   
0490   E5                     PUSH   hl   
0491   C3 EA 03               JP   carry   
0494                EQ_:         
0494   E1                     POP   hl   
0495   D1                     POP   de   
0496   B7                     OR   a   ; reset the carry flag
0497   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0499   CA F7 07               JP   z,true_   
049C   C3 F1 07               JP   false_   
049F                GT_:         
049F   E1                     POP   hl   
04A0   D1                     POP   de   
04A1   18 02                  JR   lt1_   
04A3                LT_:         
04A3   D1                     POP   de   
04A4   E1                     POP   hl   
04A5                LT1_:        
04A5   B7                     OR   a   ; reset the carry flag
04A6   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04A8   DA F7 07               JP   c,true_   
04AB   C3 F1 07               JP   false_   
04AE                VAR_:        
04AE   0A                     LD   a,(bc)   
04AF   CD 49 03               CALL   lookupRef2   
04B2                VAR1:        
04B2   22 1E 0C               LD   (vPointer),hl   
04B5   16 00                  LD   d,0   
04B7   5E                     LD   e,(hl)   
04B8   3A 02 0C               LD   a,(vByteMode)   
04BB   3C                     INC   a   ; is it byte?
04BC   28 02                  JR   z,var2   
04BE   23                     INC   hl   
04BF   56                     LD   d,(hl)   
04C0                VAR2:        
04C0   D5                     PUSH   de   
04C1   FD E9                  JP   (iy)   
04C3                GRAVE_:      
04C3                STR:         
04C3   03                     INC   bc   
04C4                STR1:        
04C4   0A                     LD   a,(bc)   
04C5   03                     INC   bc   
04C6   FE 60                  CP   "`"   ; ` is the string terminator
04C8   28 05                  JR   Z,str2   
04CA   CD 85 00               CALL   putchar   
04CD   18 F5                  JR   str1   
04CF                STR2:        
04CF   0B                     DEC   bc   
04D0   FD E9                  JP   (IY)   
04D2                LBRACK_:      
04D2                ARRDEF:      
04D2   21 00 00               LD   hl,0   
04D5   39                     ADD   hl,sp   ; save
04D6   CD C6 03               CALL   rpush   
04D9   FD E9                  JP   (iy)   
04DB                NUM_:        
04DB   C3 32 07               JP   num   
04DE                RPAREN_:      
04DE   C3 C2 05               JP   again   ; close loop
04E1                RBRACK_:      
04E1   C3 62 07               JP   arrEnd   
04E4                COLON_:      
04E4   C3 05 07               JP   def   
04E7                LPAREN_:      
04E7   C3 88 05               JP   begin   
04EA                QUESTION_:      
04EA   18 54                  JR   arrAccess   
04EC                HASH_:       
04EC   18 5F                  JR   hex   
04EE                STAR_:       
04EE   18 7C                  JR   mul   
04F0                SLASH_:      
04F0                ALT_:        ; falls through (must be on page 4)
04F0                             ;*******************************************************************
04F0                             ; Page 5 primitive routines
04F0                             ;*******************************************************************
04F0                ALT:         
04F0   03                     INC   bc   
04F1   0A                     LD   a,(bc)   
04F2   FE 7B                  CP   "z"+1   
04F4   30 10                  JR   nc,alt1   
04F6   FE 61                  CP   "a"   
04F8   30 10                  JR   nc,altVar   
04FA   FE 5C                  CP   BSLASH   
04FC   28 2C                  JR   z,comment   
04FE   FE 5B                  CP   "Z"+1   
0500   30 04                  JR   nc,alt1   
0502   FE 41                  CP   "A"   
0504   30 2D                  JR   nc,altCode   
0506                ALT1:        
0506   0B                     DEC   bc   
0507   C3 AA 07               JP   div   
050A                ALTVAR:      
050A   FE 69                  CP   "i"   
050C   2E 00                  LD   l,0   
050E   CA 20 05               JP   z,loopVar   
0511   FE 6A                  CP   "j"   
0513   2E 08                  LD   l,8   
0515   28 09                  JR   z,loopVar   
0517   D6 61                  SUB   "a"   
0519   87                     ADD   a,a   
051A   26 0C                  LD   h,msb(altVars)   
051C   6F                     LD   l,A   
051D   C3 B2 04               JP   var1   
0520                LOOPVAR:      
0520   26 00                  LD   h,0   
0522   DD 54                  LD   d,ixh   
0524   DD 5D                  LD   e,ixl   
0526   19                     ADD   hl,de   
0527   C3 B2 04               JP   var1   
052A                COMMENT:      
052A   03                     INC   bc   ; point to next char
052B   0A                     LD   a,(bc)   
052C   FE 0D                  CP   "\r"   ; terminate at cr
052E   20 FA                  JR   NZ,comment   
0530   0B                     DEC   bc   
0531   FD E9                  JP   (IY)   
0533                ALTCODE:      
0533   21 5E 0B               LD   hl,altCodes   
0536   D6 41                  SUB   "A"   
0538   85                     ADD   a,L   
0539   6F                     LD   L,A   
053A   7E                     LD   a,(hl)   ;       get low jump address
053B   21 00 06               LD   hl,page6   
053E   6F                     LD   L,A   
053F   E9                     JP   (hl)   ;       Jump to routine
0540                ARRACCESS:      
0540   E1                     POP   hl   ; hl = index
0541   D1                     POP   de   ; de = array
0542   3A 02 0C               LD   a,(vByteMode)   ; a = data width
0545   3C                     INC   a   
0546   28 01                  JR   z,arrAccess1   
0548   29                     ADD   hl,hl   ; if data width = 2 then double
0549                ARRACCESS1:      
0549   19                     ADD   hl,de   ; hl = addr
054A   C3 B2 04               JP   var1   
054D                HEX:         
054D   21 00 00               LD   hl,0   ; Clear hl to accept the number
0550                HEX1:        
0550   03                     INC   bc   
0551   0A                     LD   a,(bc)   ; Get the character which is a numeral
0552   CB 77                  BIT   6,A   ; is it uppercase alpha?
0554   CA 59 05               JP   Z,hex2   ; no a decimal
0557   D6 07                  SUB   7   ; sub 7  to make $A - $F
0559                HEX2:        
0559   D6 30                  SUB   $30   ; Form decimal digit
055B   DA 54 07               JP   C,num2   
055E   FE 10                  CP   $0F+1   
0560   D2 54 07               JP   NC,num2   
0563   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0564   29                     ADD   hl,hl   ; 4X
0565   29                     ADD   hl,hl   ; 8X
0566   29                     ADD   hl,hl   ; 16X
0567   85                     ADD   a,L   ; add into bottom of hl
0568   6F                     LD   L,A   
0569   C3 50 05               JP   hex1   
056C                MUL:         
056C   D1                     POP   de   ; get first value
056D   E1                     POP   hl   
056E   C5                     PUSH   bc   ; Preserve the IP
056F   44                     LD   B,H   ; bc = 2nd value
0570   4D                     LD   C,L   
0571   21 00 00               LD   hl,0   
0574   3E 10                  LD   a,16   
0576                MUL2:        
0576   29                     ADD   hl,hl   
0577   CB 13                  RL   E   
0579   CB 12                  RL   D   
057B   30 04                  JR   NC,$+6   
057D   09                     ADD   hl,bc   
057E   30 01                  JR   NC,$+3   
0580   13                     INC   de   
0581   3D                     DEC   A   
0582   20 F2                  JR   NZ,mul2   
0584   C1                     POP   bc   ; Restore the IP
0585   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0586   FD E9                  JP   (IY)   
0588                BEGIN:       
0588                LOOPSTART:      
0588   ED 43 02 0A            LD   (vTemp1),bc   ; save start
058C   1E 01                  LD   e,1   ; skip to loop end, nesting = 1
058E                LOOPSTART1:      
058E   03                     INC   bc   
058F   0A                     LD   a,(bc)   
0590   CD 7A 03               CALL   nesting   ; affects zero flag
0593   20 F9                  JR   nz,loopStart1   
0595   D1                     POP   de   ; de = limit
0596   7B                     LD   a,e   ; is it zero?
0597   B2                     OR   d   
0598   20 07                  JR   nz,loopStart2   
059A   1B                     DEC   de   ; de = TRUE
059B   ED 53 08 0C            LD   (vElse),de   
059F   18 1F                  JR   loopStart4   ; yes continue after skip
05A1                LOOPSTART2:      
05A1   3E 02                  LD   a,2   ; is it TRUE
05A3   83                     ADD   a,e   
05A4   82                     ADD   a,d   
05A5   20 03                  JR   nz,loopStart3   
05A7   11 01 00               LD   de,1   ; yes make it 1
05AA                LOOPSTART3:      
05AA   60 69                  LD   hl,bc   
05AC   CD C6 03               CALL   rpush   ; rpush loop end
05AF   0B                     DEC   bc   ; IP points to ")"
05B0   2A 02 0A               LD   hl,(vTemp1)   ; restore start
05B3   CD C6 03               CALL   rpush   ; rpush start
05B6   EB                     EX   de,hl   ; hl = limit
05B7   CD C6 03               CALL   rpush   ; rpush limit
05BA   21 FF FF               LD   hl,-1   ; hl = count = -1
05BD   CD C6 03               CALL   rpush   ; rpush count
05C0                LOOPSTART4:      
05C0   FD E9                  JP   (iy)   
05C2                AGAIN:       
05C2                LOOPEND:      
05C2   DD 5E 02               LD   e,(ix+2)   ; de = limit
05C5   DD 56 03               LD   d,(ix+3)   
05C8   7B                     LD   a,e   ; a = lsb(limit)
05C9   B2                     OR   d   ; if limit 0 exit loop
05CA   28 2B                  JR   z,loopEnd4   
05CC   13                     INC   de   ; is limit -2
05CD   13                     INC   de   
05CE   7B                     LD   a,e   ; a = lsb(limit)
05CF   B2                     OR   d   ; if limit 0 exit loop
05D0   28 09                  JR   z,loopEnd2   ; yes, loop again
05D2   1B                     DEC   de   
05D3   1B                     DEC   de   
05D4   1B                     DEC   de   
05D5   DD 73 02               LD   (ix+2),e   
05D8   DD 72 03               LD   (ix+3),d   
05DB                LOOPEND2:      
05DB   DD 5E 00               LD   e,(ix+0)   ; inc counter
05DE   DD 56 01               LD   d,(ix+1)   
05E1   13                     INC   de   
05E2   DD 73 00               LD   (ix+0),e   
05E5   DD 72 01               LD   (ix+1),d   
05E8                LOOPEND3:      
05E8   11 00 00               LD   de,FALSE   ; if clause ran then vElse = FALSE
05EB   ED 53 08 0C            LD   (vElse),de   
05EF   DD 4E 04               LD   c,(ix+4)   ; IP = start
05F2   DD 46 05               LD   b,(ix+5)   
05F5   FD E9                  JP   (iy)   
05F7                LOOPEND4:      
05F7   11 08 00               LD   de,2*4   ; rpop frame
05FA   DD 19                  ADD   ix,de   
05FC   FD E9                  JP   (iy)   
05FE                             ; **************************************************************************
05FE                             ; Page 6 Alt primitives
05FE                             ; **************************************************************************
05FE                          ALIGN   $100   
0600                PAGE6:       
0600                             ; allocates raw heap memory in bytes (ignores byte mode)
0600                             ; n --
0600                ALLOC_:      
0600   D1                     POP   de   
0601   2A 0E 0C               LD   hl,(vHeapPtr)   
0604   E5                     PUSH   hl   
0605   19                     ADD   hl,de   
0606   22 0E 0C               LD   (vHeapPtr),hl   
0609                ANOP_:       
0609   FD E9                  JP   (iy)   
060B                ARRSIZE_:      
060B                ARRSIZE:      
060B   E1                     POP   hl   
060C   2B                     DEC   hl   ; msb size
060D   56                     LD   d,(hl)   
060E   2B                     DEC   hl   ; lsb size
060F   5E                     LD   e,(hl)   
0610   D5                     PUSH   de   
0611   FD E9                  JP   (iy)   
0613                BMODE_:      
0613   21 02 0C               LD   hl,vByteMode   
0616                TOGGLE:      
0616   7E                     LD   a,(hl)   
0617   2F                     CPL      
0618   77                     LD   (hl),a   
0619   23                     INC   hl   
061A   7E                     LD   a,(hl)   
061B   2F                     CPL      
061C   77                     LD   (hl),a   
061D   FD E9                  JP   (iy)   
061F                BREAK_:      
061F                WHILE_:      
061F                WHILE:       
061F   E1                     POP   hl   
0620   7D                     LD   a,l   
0621   B4                     OR   h   
0622   20 09                  JR   nz,while2   
0624   DD 4E 06               LD   c,(ix+6)   ; IP = )
0627   DD 46 07               LD   b,(ix+7)   
062A   C3 F7 05               JP   loopEnd4   
062D                WHILE2:      
062D   FD E9                  JP   (iy)   
062F                DEPTH_:      
062F                DEPTH:       
062F   21 00 00               LD   hl,0   
0632   39                     ADD   hl,SP   
0633   EB                     EX   de,hl   
0634   21 00 0A               LD   hl,DSTACK   
0637   B7                     OR   A   
0638   ED 52                  SBC   hl,de   
063A   C3 63 04               JP   shr1   
063D                PRINTCHAR_:      
063D   E1                     POP   hl   
063E   7D                     LD   a,L   
063F   CD 85 00               CALL   putchar   
0642   FD E9                  JP   (IY)   
0644                EXEC_:       
0644   CD 49 06               CALL   exec1   
0647   FD E9                  JP   (IY)   
0649                EXEC1:       
0649   E1                     POP   hl   
064A   E3                     EX   (SP),hl   
064B   E9                     JP   (hl)   
064C                EDITDEF_:      
064C   CD 8D 06               CALL   editDef   
064F   FD E9                  JP   (IY)   
0651                PROMPT_:      
0651   CD A6 03               CALL   prompt   
0654   FD E9                  JP   (IY)   
0656                GO_:         
0656   D1                     POP   de   
0657                GO1:         
0657   7A                     LD   a,D   ; skip if destination address is null
0658   B3                     OR   E   
0659   28 0E                  JR   Z,go3   
065B   60 69                  LD   hl,bc   
065D   03                     INC   bc   ; read next char from source
065E   0A                     LD   a,(bc)   ; if ; to tail call optimise
065F   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
0661   28 03                  JR   Z,go2   
0663   CD C6 03               CALL   rpush   ; save Instruction Pointer
0666                GO2:         
0666   42 4B                  LD   bc,de   
0668   0B                     DEC   bc   
0669                GO3:         
0669   FD E9                  JP   (IY)   
066B                KEY_:        
066B   CD 81 00               CALL   getchar   
066E   26 00                  LD   H,0   
0670   6F                     LD   L,A   
0671   E5                     PUSH   hl   
0672   FD E9                  JP   (IY)   
0674                INPORT_:      ; \<
0674   E1                     POP   hl   
0675   79                     LD   a,C   
0676   4D                     LD   C,L   
0677   ED 68                  IN   L,(C)   
0679   26 00                  LD   H,0   
067B   4F                     LD   C,A   
067C   E5                     PUSH   hl   
067D   FD E9                  JP   (IY)   
067F                NEWLN_:      
067F   CD AF 03               CALL   crlf   
0682   FD E9                  JP   (IY)   
0684                OUTPORT_:      
0684   E1                     POP   hl   
0685   59                     LD   E,C   
0686   4D                     LD   C,L   
0687   E1                     POP   hl   
0688   ED 69                  OUT   (C),L   
068A   4B                     LD   C,E   
068B   FD E9                  JP   (IY)   
068D                             ;*******************************************************************
068D                             ; Subroutines
068D                             ;*******************************************************************
068D                EDITDEF:      ; lookup up def based on number
068D   E1                     POP   hl   ; pop ret address
068E   E3                     EX   (SP),hl   ; swap with TOS
068F   7D                     LD   a,L   
0690   08                     EX   AF,AF'   
0691   7D                     LD   a,L   
0692   CD 3D 03               CALL   lookupRef   
0695   5E                     LD   E,(hl)   
0696   23                     INC   hl   
0697   56                     LD   D,(hl)   
0698   7A                     LD   a,D   
0699   B3                     OR   E   
069A   21 00 08               LD   hl,TIB   
069D   28 14                  JR   Z,editDef3   
069F   3E 3A                  LD   a,":"   
06A1   CD DC 03               CALL   writeChar   
06A4   08                     EX   AF,AF'   
06A5   CD DC 03               CALL   writeChar   
06A8   18 01                  JR   editDef2   
06AA                EDITDEF1:      
06AA   13                     INC   de   
06AB                EDITDEF2:      
06AB   1A                     LD   a,(de)   
06AC   CD DC 03               CALL   writeChar   
06AF   FE 3B                  CP   ";"   
06B1   20 F7                  JR   NZ,editDef1   
06B3                EDITDEF3:      
06B3   11 00 08               LD   de,TIB   
06B6   B7                     OR   A   
06B7   ED 52                  SBC   hl,de   
06B9   22 14 0C               LD   (vTIBPtr),hl   
06BC   C9                     RET      
06BD                             ; hl = value
06BD                PRINTDEC:      
06BD   CB 7C                  BIT   7,h   
06BF   28 0B                  JR   z,printDec2   
06C1   3E 2D                  LD   a,"-"   
06C3   CD 85 00               CALL   putchar   
06C6   AF                     XOR   a   
06C7   95                     SUB   l   
06C8   6F                     LD   l,a   
06C9   9F                     SBC   a,a   
06CA   94                     SUB   h   
06CB   67                     LD   h,a   
06CC                PRINTDEC2:      
06CC   C5                     PUSH   bc   
06CD   0E 00                  LD   c,0   ; leading zeros flag = false
06CF   11 F0 D8               LD   de,-10000   
06D2   CD EE 06               CALL   printDec4   
06D5   11 18 FC               LD   de,-1000   
06D8   CD EE 06               CALL   printDec4   
06DB   11 9C FF               LD   de,-100   
06DE   CD EE 06               CALL   printDec4   
06E1   1E F6                  LD   e,-10   
06E3   CD EE 06               CALL   printDec4   
06E6   0C                     INC   c   ; flag = true for at least digit
06E7   1E FF                  LD   e,-1   
06E9   CD EE 06               CALL   printDec4   
06EC   C1                     POP   bc   
06ED   C9                     RET      
06EE                PRINTDEC4:      
06EE   06 2F                  LD   b,"0"-1   
06F0                PRINTDEC5:      
06F0   04                     INC   b   
06F1   19                     ADD   hl,de   
06F2   38 FC                  JR   c,printDec5   
06F4   ED 52                  SBC   hl,de   
06F6   3E 30                  LD   a,"0"   
06F8   B8                     CP   b   
06F9   20 05                  JR   nz,printDec6   
06FB   AF                     XOR   a   
06FC   B1                     OR   c   
06FD   C8                     RET   z   
06FE   18 01                  JR   printDec7   
0700                PRINTDEC6:      
0700   0C                     INC   c   
0701                PRINTDEC7:      
0701   78                     LD   a,b   
0702   C3 85 00               JP   putchar   
0705                             ;*******************************************************************
0705                             ; Page 5 primitive routines continued
0705                             ;*******************************************************************
0705                DEF:         ; Create a colon definition
0705   03                     INC   bc   
0706   0A                     LD   a,(bc)   ; Get the next character
0707   FE 3A                  CP   ":"   ; is it anonymouse
0709   20 08                  JR   nz,def0   
070B   03                     INC   bc   
070C   ED 5B 0E 0C            LD   de,(vHeapPtr)   ; return start of definition
0710   D5                     PUSH   de   
0711   18 0E                  JR   def1   
0713                DEF0:        
0713   32 32 0C               LD   (vLastDef),A   
0716   CD 3D 03               CALL   lookupRef   
0719   ED 5B 0E 0C            LD   de,(vHeapPtr)   ; start of defintion
071D   73                     LD   (hl),E   ; Save low byte of address in CFA
071E   23                     INC   hl   
071F   72                     LD   (hl),D   ; Save high byte of address in CFA+1
0720   03                     INC   bc   
0721                DEF1:        ; Skip to end of definition
0721   0A                     LD   a,(bc)   ; Get the next character
0722   03                     INC   bc   ; Point to next character
0723   12                     LD   (de),A   
0724   13                     INC   de   
0725   FE 3B                  CP   ";"   ; Is it a semicolon
0727   28 02                  JR   Z,def2   ; end the definition
0729   18 F6                  JR   def1   ; get the next element
072B                DEF2:        
072B   0B                     DEC   bc   
072C                DEF3:        
072C   ED 53 0E 0C            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0730   FD E9                  JP   (IY)   
0732                NUM:         
0732   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0735   0A                     LD   a,(bc)   ; Get numeral or -
0736   FE 2D                  CP   "-"   
0738   20 01                  JR   nz,num0   
073A   03                     INC   bc   ; move to next char, no flags affected
073B                NUM0:        
073B   08                     EX   af,af'   ; save zero flag = 0 for later
073C                NUM1:        
073C   0A                     LD   a,(bc)   ; read digit
073D   D6 30                  SUB   "0"   ; less than 0?
073F   38 13                  JR   c,num2   ; not a digit, exit loop
0741   FE 0A                  CP   10   ; greater that 9?
0743   30 0F                  JR   nc,num2   ; not a digit, exit loop
0745   03                     INC   bc   ; inc IP
0746   54 5D                  LD   de,hl   ; multiply hl * 10
0748   29                     ADD   hl,hl   
0749   29                     ADD   hl,hl   
074A   19                     ADD   hl,de   
074B   29                     ADD   hl,hl   
074C   85                     ADD   a,l   ; add digit in a to hl
074D   6F                     LD   l,a   
074E   3E 00                  LD   a,0   
0750   8C                     ADC   a,h   
0751   67                     LD   h,a   
0752   18 E8                  JR   num1   
0754                NUM2:        
0754   0B                     DEC   bc   
0755   08                     EX   af,af'   ; restore zero flag
0756   20 07                  JR   nz,num3   
0758   EB                     EX   de,hl   ; negate the value of hl
0759   21 00 00               LD   hl,0   
075C   B7                     OR   a   ; jump to sub2
075D   ED 52                  SBC   hl,de   
075F                NUM3:        
075F   E5                     PUSH   hl   ; Put the number on the stack
0760   FD E9                  JP   (iy)   ; and process the next character
0762                ARREND:      
0762   ED 43 02 0A            LD   (vTemp1),bc   ; save IP
0766   CD D1 03               CALL   rpop   
0769   22 04 0A               LD   (vTemp2),hl   ; save old SP
076C   54 5D                  LD   de,hl   ; de = hl = old SP
076E   B7                     OR   a   
076F   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0771   CB 3C                  SRL   h   ; num items = num bytes / 2
0773   CB 1D                  RR   l   
0775   44 4D                  LD   bc,hl   ; bc = count
0777   2A 0E 0C               LD   hl,(vHeapPtr)   ; hl = array[-4]
077A   71                     LD   (hl),c   ; write num items in length word
077B   23                     INC   hl   
077C   70                     LD   (hl),b   
077D   23                     INC   hl   ; hl = array[0], bc = count
077E                             ; de = old SP, hl = array[0], bc = count
077E   18 11                  JR   arrayEnd2   
0780                ARRAYEND1:      
0780   0B                     DEC   bc   ; dec items count
0781   1B                     DEC   de   
0782   1B                     DEC   de   
0783   1A                     LD   a,(de)   ; a = lsb of stack item
0784   77                     LD   (hl),a   ; write lsb of array item
0785   23                     INC   hl   ; move to msb of array item
0786   3A 02 0C               LD   a,(vByteMode)   ; vByteMode=1?
0789   3C                     INC   a   
078A   28 05                  JR   z,arrayEnd2   
078C   13                     INC   de   
078D   1A                     LD   a,(de)   ; a = msb of stack item
078E   1B                     DEC   de   
078F   77                     LD   (hl),a   ; write msb of array item
0790   23                     INC   hl   ; move to next word in array
0791                ARRAYEND2:      
0791   79                     LD   a,c   ; if not zero loop
0792   B0                     OR   b   
0793   20 EB                  JR   nz,arrayEnd1   
0795   EB                     EX   de,hl   ; de = end of array
0796   2A 04 0A               LD   hl,(vTemp2)   
0799   F9                     LD   sp,hl   ; SP = old SP
079A   2A 0E 0C               LD   hl,(vHeapPtr)   ; de = array[-2]
079D   23                     INC   hl   
079E   23                     INC   hl   
079F   E5                     PUSH   hl   ; return array[0]
07A0   ED 53 0E 0C            LD   (vHeapPtr),de   ; move heap* to end of array
07A4   ED 4B 02 0A            LD   bc,(vTemp1)   ; restore IP
07A8   FD E9                  JP   (iy)   
07AA                DIV:         
07AA   60 69                  LD   hl,bc   ; hl = IP
07AC   C1                     POP   bc   ; bc = denominator
07AD   E3                     EX   (sp),hl   ; save IP, hl = numerator
07AE   7C                     LD   a,h   
07AF   A8                     XOR   b   
07B0   F5                     PUSH   af   
07B1   A8                     XOR   b   
07B2   F2 BB 07               JP   p,absbc   
07B5                             ;absHL
07B5   AF                     XOR   a   
07B6   95                     SUB   l   
07B7   6F                     LD   l,a   
07B8   9F                     SBC   a,a   
07B9   94                     SUB   h   
07BA   67                     LD   h,a   
07BB                ABSBC:       
07BB   A8                     XOR   b   
07BC   F2 C5 07               JP   p,$+9   
07BF   AF                     XOR   a   
07C0   91                     SUB   c   
07C1   4F                     LD   c,a   
07C2   9F                     SBC   a,a   
07C3   90                     SUB   b   
07C4   47                     LD   b,a   
07C5   29                     ADD   hl,hl   
07C6   3E 0F                  LD   a,15   
07C8   11 00 00               LD   de,0   
07CB   EB                     EX   de,hl   
07CC   18 04                  JR   jumpin   
07CE                LOOP1:       
07CE   09                     ADD   hl,bc   ;--
07CF                LOOP2:       
07CF   3D                     DEC   a   ;4
07D0   28 0E                  JR   z,EndSDiv   ;12|7
07D2                JUMPIN:      
07D2   CB 23                  SLA   e   ;8
07D4   CB 12                  RL   d   ;8
07D6   ED 6A                  ADC   hl,hl   ;15
07D8   ED 42                  SBC   hl,bc   ;15
07DA   38 F2                  JR   c,Loop1   ;23-2b
07DC   1C                     INC   e   ;--
07DD   C3 CF 07               JP   Loop2   ;--
07E0                ENDSDIV:      
07E0   F1                     POP   af   
07E1   F2 EA 07               JP   p,div10   
07E4   AF                     XOR   a   
07E5   93                     SUB   e   
07E6   5F                     LD   e,a   
07E7   9F                     SBC   a,a   
07E8   92                     SUB   d   
07E9   57                     LD   d,a   
07EA                DIV10:       
07EA   C1                     POP   bc   
07EB   D5                     PUSH   de   ; quotient
07EC   22 22 0C               LD   (vRemain),hl   ; remainder
07EF   FD E9                  JP   (iy)   
07F1                FALSE_:      
07F1   21 00 00               LD   hl,FALSE   
07F4   E5                     PUSH   hl   
07F5   FD E9                  JP   (iy)   
07F7                TRUE_:       
07F7   21 FF FF               LD   hl,TRUE   
07FA   E5                     PUSH   hl   
07FB   FD E9                  JP   (iy)   
07FD                DSIZE:    EQU   $80   
07FD                RSIZE:    EQU   $80   
07FD                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
07FD                VARS_SIZE:   EQU   26*2*2   ; A..Z, a..z words
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                TBPTR:    DS   2   ; reserved for tests
0A02                VTEMP1:   DS   2   ; 
0A04                VTEMP2:   DS   2   ; 
0A06                RST08:    DS   2   
0A08                RST10:    DS   2   
0A0A                RST18:    DS   2   
0A0C                RST20:    DS   2   
0A0E                RST28:    DS   2   
0A10                RST30:    DS   2   ; 
0A12                BAUD:     DS   2   ; 
0A14                INTVEC:   DS   2   ; 
0A16                NMIVEC:   DS   2   ; 
0A18                GETCVEC:   DS   2   ; 
0A1A                PUTCVEC:   DS   2   ; 
0A1C                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80-32-1-1   
0B5E                ALTCODES:      
0B5E                          DS   26   
0B78                          ALIGN   $100   
0C00                ALTVARS:      
0C00                          DS   2   ; a
0C02                VBYTEMODE:   DS   2   ; b
0C04                VCARRY:   DS   2   ; c
0C06                          DS   2   ; d
0C08                VELSE:    DS   2   ; e
0C0A                VFALSE:   DS   2   ; f
0C0C                          DS   2   ; g
0C0E                VHEAPPTR:   DS   2   ; h
0C10                          DS   2   ; i
0C12                          DS   2   ; j
0C14                VTIBPTR:   DS   2   ; k
0C16                          DS   2   ; l
0C18                          DS   2   ; m
0C1A                          DS   2   ; n
0C1C                          DS   2   ; o
0C1E                VPOINTER:   DS   2   ; p
0C20                          DS   2   ; q
0C22                VREMAIN:   DS   2   ; r
0C24                VSTKSTART:   DS   2   ; s
0C26                VTRUE:    DS   2   ; t
0C28                VUNLIMITED:   DS   2   ; u
0C2A                          DS   2   ; v
0C2C                          DS   2   ; w
0C2E                          DS   2   ; x
0C30                          DS   2   ; y
0C32                VLASTDEF:   DS   2   ; z
0C34                VARS:     DS   VARS_SIZE   
0C9C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 44 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 7 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 184 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 381 IN MAIN.asm
                    > USED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 13 IN MAIN.asm
                    > USED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 14 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
UNLIMITED:          00-1 DEFINED AT LINE 15 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
CTRL_R:             0012 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
BSLASH:             005C DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 50 IN MAIN.asm
REEDIT_:            0180 DEFINED AT LINE 52 IN MAIN.asm
EDIT_:              0185 DEFINED AT LINE 55 IN MAIN.asm
LIST_:              0190 DEFINED AT LINE 58 IN MAIN.asm
PRINTSTACK_:        01A9 DEFINED AT LINE 61 IN MAIN.asm
IOPCODES:           01C4 DEFINED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
IALTCODES:          01EE DEFINED AT LINE 111 IN MAIN.asm
BACKSPACE:          020A DEFINED AT LINE 143 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
START:              0218 DEFINED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 6
INTERPRET:          022B DEFINED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
INTERPRET2:         0235 DEFINED AT LINE 164 IN MAIN.asm
                    > USED AT LINE 146 IN MAIN.asm
                    > USED AT LINE 150 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
INTERPRET3:         023D DEFINED AT LINE 171 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
INTERPRET4:         0243 DEFINED AT LINE 177 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
WAITCHAR:           0248 DEFINED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
MACRO:              0277 DEFINED AT LINE 208 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
WAITCHAR1:          0288 DEFINED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
WAITCHAR3:          0296 DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
WAITCHAR4:          02AC DEFINED AT LINE 241 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
NEXT:               02B4 DEFINED AT LINE 246 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
EXIT:               02C8 DEFINED AT LINE 261 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
ETX:                02D2 DEFINED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
ETX1:               02DB DEFINED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
INIT:               02DE DEFINED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 154 IN MAIN.asm
INIT1:              02EB DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
INITOPS:            0319 DEFINED AT LINE 305 IN MAIN.asm
INITOPS1:           0322 DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
INITOPS2:           0332 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
INITOPS2A:          0337 DEFINED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 330 IN MAIN.asm
LOOKUPREF:          033D DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
LOOKUPREF0:         033F DEFINED AT LINE 335 IN MAIN.asm
LOOKUPREF1:         0343 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 547 IN MAIN.asm
LOOKUPREF2:         0349 DEFINED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
LOOKUPREF3:         034D DEFINED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
PRINTHEX:           035B DEFINED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
PRINTHEX2:          0366 DEFINED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
PRINTHEX3:          036F DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
NESTING:            037A DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
NESTING1A:          0385 DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 397 IN MAIN.asm
NESTING1:           0388 DEFINED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
NESTING2:           0397 DEFINED AT LINE 412 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
NESTING3:           0399 DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
NESTING4:           03A4 DEFINED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 417 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
PROMPT:             03A6 DEFINED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
CRLF:               03AF DEFINED AT LINE 431 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
PRINTSTR:           03B6 DEFINED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 148 IN MAIN.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
PUTSTR0:            03BD DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
PUTSTR:             03C1 DEFINED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
RPUSH:              03C6 DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
RPOP:               03D1 DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
RPOP2:              03DB DEFINED AT LINE 464 IN MAIN.asm
WRITECHAR:          03DC DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
ENTER:              03E1 DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 211 IN MAIN.asm
CARRY:              03EA DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 543 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
PAGE4:              0400 DEFINED AT LINE 489 IN MAIN.asm
QUOTE_:             0400 DEFINED AT LINE 491 IN MAIN.asm
AT_:                0401 DEFINED AT LINE 493 IN MAIN.asm
BSLASH_:            0401 DEFINED AT LINE 494 IN MAIN.asm
UNDERSCORE_:        0401 DEFINED AT LINE 495 IN MAIN.asm
AMPER_:             0403 DEFINED AT LINE 498 IN MAIN.asm
AND1:               040A DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
PIPE_:              040E DEFINED AT LINE 512 IN MAIN.asm
CARET_:             0417 DEFINED AT LINE 522 IN MAIN.asm
XOR1:               0418 DEFINED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
TILDE_:             0420 DEFINED AT LINE 533 IN MAIN.asm
INVERT:             0420 DEFINED AT LINE 534 IN MAIN.asm
PLUS_:              0425 DEFINED AT LINE 538 IN MAIN.asm
CALL_:              042C DEFINED AT LINE 545 IN MAIN.asm
DOT_:               0436 DEFINED AT LINE 553 IN MAIN.asm
DOT2:               043A DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
COMMA_:             0441 DEFINED AT LINE 561 IN MAIN.asm
DQUOTE_:            0447 DEFINED AT LINE 566 IN MAIN.asm
PERCENT_:           044F DEFINED AT LINE 574 IN MAIN.asm
SEMI_:              0456 DEFINED AT LINE 582 IN MAIN.asm
LBRACE_:            045D DEFINED AT LINE 588 IN MAIN.asm
RBRACE_:            0462 DEFINED AT LINE 595 IN MAIN.asm
SHR1:               0463 DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
BANG_:              046A DEFINED AT LINE 603 IN MAIN.asm
ASSIGN:             046A DEFINED AT LINE 604 IN MAIN.asm
ASSIGN1:            0478 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
DOLLAR_:            047A DEFINED AT LINE 618 IN MAIN.asm
MINUS_:             047F DEFINED AT LINE 624 IN MAIN.asm
SUB1:               048B DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
SUB2:               048D DEFINED AT LINE 635 IN MAIN.asm
EQ_:                0494 DEFINED AT LINE 641 IN MAIN.asm
GT_:                049F DEFINED AT LINE 649 IN MAIN.asm
LT_:                04A3 DEFINED AT LINE 654 IN MAIN.asm
LT1_:               04A5 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
VAR_:               04AE DEFINED AT LINE 664 IN MAIN.asm
VAR1:               04B2 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
VAR2:               04C0 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
GRAVE_:             04C3 DEFINED AT LINE 680 IN MAIN.asm
STR:                04C3 DEFINED AT LINE 681 IN MAIN.asm
STR1:               04C4 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 690 IN MAIN.asm
STR2:               04CF DEFINED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
LBRACK_:            04D2 DEFINED AT LINE 695 IN MAIN.asm
ARRDEF:             04D2 DEFINED AT LINE 696 IN MAIN.asm
NUM_:               04DB DEFINED AT LINE 702 IN MAIN.asm
RPAREN_:            04DE DEFINED AT LINE 704 IN MAIN.asm
RBRACK_:            04E1 DEFINED AT LINE 706 IN MAIN.asm
COLON_:             04E4 DEFINED AT LINE 708 IN MAIN.asm
LPAREN_:            04E7 DEFINED AT LINE 710 IN MAIN.asm
QUESTION_:          04EA DEFINED AT LINE 713 IN MAIN.asm
HASH_:              04EC DEFINED AT LINE 715 IN MAIN.asm
STAR_:              04EE DEFINED AT LINE 717 IN MAIN.asm
SLASH_:             04F0 DEFINED AT LINE 719 IN MAIN.asm
ALT_:               04F0 DEFINED AT LINE 721 IN MAIN.asm
ALT:                04F0 DEFINED AT LINE 725 IN MAIN.asm
ALT1:               0506 DEFINED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
ALTVAR:             050A DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
LOOPVAR:            0520 DEFINED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
COMMENT:            052A DEFINED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
ALTCODE:            0533 DEFINED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
ARRACCESS:          0540 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
ARRACCESS1:         0549 DEFINED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
HEX:                054D DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
HEX1:               0550 DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
HEX2:               0559 DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
MUL:                056C DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
MUL2:               0576 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
BEGIN:              0588 DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
LOOPSTART:          0588 DEFINED AT LINE 836 IN MAIN.asm
LOOPSTART1:         058E DEFINED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
LOOPSTART2:         05A1 DEFINED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
LOOPSTART3:         05AA DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
LOOPSTART4:         05C0 DEFINED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
AGAIN:              05C2 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
LOOPEND:            05C2 DEFINED AT LINE 871 IN MAIN.asm
LOOPEND2:           05DB DEFINED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
LOOPEND3:           05E8 DEFINED AT LINE 893 IN MAIN.asm
LOOPEND4:           05F7 DEFINED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
PAGE6:              0600 DEFINED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
ALLOC_:             0600 DEFINED AT LINE 912 IN MAIN.asm
ANOP_:              0609 DEFINED AT LINE 918 IN MAIN.asm
ARRSIZE_:           060B DEFINED AT LINE 921 IN MAIN.asm
ARRSIZE:            060B DEFINED AT LINE 922 IN MAIN.asm
BMODE_:             0613 DEFINED AT LINE 931 IN MAIN.asm
TOGGLE:             0616 DEFINED AT LINE 933 IN MAIN.asm
BREAK_:             061F DEFINED AT LINE 943 IN MAIN.asm
WHILE_:             061F DEFINED AT LINE 944 IN MAIN.asm
WHILE:              061F DEFINED AT LINE 945 IN MAIN.asm
WHILE2:             062D DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
DEPTH_:             062F DEFINED AT LINE 956 IN MAIN.asm
DEPTH:              062F DEFINED AT LINE 957 IN MAIN.asm
PRINTCHAR_:         063D DEFINED AT LINE 966 IN MAIN.asm
EXEC_:              0644 DEFINED AT LINE 972 IN MAIN.asm
EXEC1:              0649 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
EDITDEF_:           064C DEFINED AT LINE 980 IN MAIN.asm
PROMPT_:            0651 DEFINED AT LINE 984 IN MAIN.asm
GO_:                0656 DEFINED AT LINE 988 IN MAIN.asm
GO1:                0657 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
GO2:                0666 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
GO3:                0669 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 993 IN MAIN.asm
KEY_:               066B DEFINED AT LINE 1006 IN MAIN.asm
INPORT_:            0674 DEFINED AT LINE 1013 IN MAIN.asm
NEWLN_:             067F DEFINED AT LINE 1023 IN MAIN.asm
OUTPORT_:           0684 DEFINED AT LINE 1027 IN MAIN.asm
EDITDEF:            068D DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
EDITDEF1:           06AA DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
EDITDEF2:           06AB DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1058 IN MAIN.asm
EDITDEF3:           06B3 DEFINED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
PRINTDEC:           06BD DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PRINTDEC2:          06CC DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
PRINTDEC4:          06EE DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
PRINTDEC5:          06F0 DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
PRINTDEC6:          0700 DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
PRINTDEC7:          0701 DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
DEF:                0705 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
DEF0:               0713 DEFINED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
DEF1:               0721 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
DEF2:               072B DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
DEF3:               072C DEFINED AT LINE 1152 IN MAIN.asm
NUM:                0732 DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
NUM0:               073B DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
NUM1:               073C DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
NUM2:               0754 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
NUM3:               075F DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
ARREND:             0762 DEFINED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
ARRAYEND1:          0780 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
ARRAYEND2:          0791 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
DIV:                07AA DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
ABSBC:              07BB DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
LOOP1:              07CE DEFINED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
LOOP2:              07CF DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
JUMPIN:             07D2 DEFINED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
ENDSDIV:            07E0 DEFINED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
DIV10:              07EA DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
FALSE_:             07F1 DEFINED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
TRUE_:              07F7 DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
DSIZE:              0080 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 14 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 11 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 9 IN ram.asm
VARS_SIZE:          0068 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 302 IN MAIN.asm
                    > USED AT LINE 68 IN ram.asm
TIB:                0800 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
                    > USED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
RSTACK:             0980 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 278 IN MAIN.asm
DSTACK:             0A00 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
STACK:              0A00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
TBPTR:              0A00 DEFINED AT LINE 17 IN ram.asm
VTEMP1:             0A02 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
VTEMP2:             0A04 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
RST08:              0A06 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0A08 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0A0A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0A0C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0A0E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0A10 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0A12 DEFINED AT LINE 27 IN ram.asm
INTVEC:             0A14 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0A16 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0A18 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0A1A DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
OPCODES:            0B00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 307 IN MAIN.asm
ALTCODES:           0B5E DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 771 IN MAIN.asm
ALTVARS:            0C00 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 281 IN MAIN.asm
VBYTEMODE:          0C02 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
VCARRY:             0C04 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 482 IN MAIN.asm
VELSE:              0C08 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
VFALSE:             0C0A DEFINED AT LINE 46 IN ram.asm
VHEAPPTR:           0C0E DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
VTIBPTR:            0C14 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
VPOINTER:           0C1E DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
VREMAIN:            0C22 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1296 IN MAIN.asm
VSTKSTART:          0C24 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
VTRUE:              0C26 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 288 IN MAIN.asm
VUNLIMITED:         0C28 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 290 IN MAIN.asm
VLASTDEF:           0C32 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
VARS:               0C34 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
HEAP:               0C9C DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 295 IN MAIN.asm
