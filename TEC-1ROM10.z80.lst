0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 2A 0B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 2C 0B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 2E 0B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 30 0B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 32 0B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 34 0B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 24 0B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 26 0B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                             ; 
0081                             ; 
0081                             ; putting this code here for now
0081                             ; needing to re-integrate support for RC2014
0081                             ; 
0081                             ; .if RC2014        
0081                             ; 
0081                             ; ; **************************************************************************
0081                             ; ; Serial Handling Etc
0081                             ; ; **************************************************************************
0081                             ; 
0081                             ; ; ************************SERIAL HANDLING ROUTINES**********************        
0081                             ; ;
0081                             ; ;        Includes drivers for 68B50 ACIA 
0081                             ; ;		 serial interface I/O primitive routines getchar and putchar
0081                             ; ;        printstring
0081                             ; ;        printdec
0081                             ; ;        printhex
0081                             ; ;        crlf         
0081                             ; 
0081                             ; ; **********************************************************************
0081                             ; ; **  Device Driver                             by Stephen C Cousins  **
0081                             ; ; **  Hardware:  RC2014                                               **
0081                             ; ; **  Interface: Serial 6850 ACIA                                     **
0081                             ; ; **********************************************************************
0081                             ; 
0081                             ; ; This module is the driver for the RC2014 serial I/O interface which is
0081                             ; ; based on the 6850 Asynchronous Communications Interface Adapter (ACIA)
0081                             ; ;
0081                             ; ; Base addresses for ACIA externally defined. eg:
0081                             ; kACIA1:    .EQU 0x80           ;Base address of serial ACIA #1
0081                             ; kACIA2:    .EQU 0x80           ;Base address of serial ACIA #2
0081                             ; ;
0081                             ; ; RC2014 addresses for 68B50 number 2:
0081                             ; ; 0x40   Control registers (read and write)
0081                             ; ; 0x41   Data registers (read and write)
0081                             ; ;
0081                             ; ; Control registers (read and write)
0081                             ; ; Bit   Control write              Control read
0081                             ; ;  0    Counter divide select 1    Receive data register full
0081                             ; ;  1    Counter divide select 2    Transmit data register empty
0081                             ; ;  2    Word select 1              Data carrier detect (/DCD) input
0081                             ; ;  3    Word seelct 2              Clear to send (/CTS) input
0081                             ; ;  4    Word select 3              Framing error
0081                             ; ;  5    Transmit contol 1          Receiver overrun
0081                             ; ;  6    Transmit control 2         Parity error
0081                             ; ;  7    Receive interrupt enable   Interrupt request
0081                             ; ;
0081                             ; ; Control register write
0081                             ; ; Bit   7   6   5   4   3   2   1   0
0081                             ; ;       |   |   |   |   |   |   |   |
0081                             ; ;       |   |   |   |   |   |   0   0     Clock divide 1
0081                             ; ;       |   |   |   |   |   |   0   1     Clock divide 16
0081                             ; ; >     |   |   |   |   |   |   1   0  >  Clock divide 64
0081                             ; ;       |   |   |   |   |   |   1   1     Master reset
0081                             ; ;       |   |   |   |   |   |
0081                             ; ;       |   |   |   0   0   0     7 data bits, even parity, 2 stop bits
0081                             ; ;       |   |   |   0   0   1     7 data bits, odd parity,  2 stop bits
0081                             ; ;       |   |   |   0   1   0     7 data bits, even parity, 1 stop bit
0081                             ; ;       |   |   |   0   1   1     7 data bits, odd parity,  1 stop bit
0081                             ; ;       |   |   |   1   0   0     8 data bits, no parity,   2 stop bits
0081                             ; ;       |   |   |   1   0   1  >  8 data bits, no parity,   1 stop bit
0081                             ; ;       |   |   |   1   1   0     8 data bits, even parity, 1 stop bit
0081                             ; ;       |   |   |   1   1   1     8 data bits, odd parity,  1 stop bit
0081                             ; ;       |   |   |
0081                             ; ;       |   0   0  >  /RTS = low (ready), tx interrupt disabled
0081                             ; ;       |   0   1     /RTS = low (ready), tx interrupt enabled
0081                             ; ;       |   1   0     /RTS = high (not ready), tx interrupt disabled 
0081                             ; ;       |   1   1     /RTS = low, tx break, tx interrupt disabled
0081                             ; ;       |
0081                             ; ;       0  >  Receive interrupt disabled
0081                             ; ;       1     Receive interrupt enabled
0081                             ; ;
0081                             ; ; Control register read
0081                             ; ; Bit   7   6   5   4   3   2   1   0
0081                             ; ;       |   |   |   |   |   |   |   |
0081                             ; ;       |   |   |   |   |   |   |   +-------  Receive data register full
0081                             ; ;       |   |   |   |   |   |   +-------  Transmit data register empty
0081                             ; ;       |   |   |   |   |   +-------  Data carrier detect (/DCD)
0081                             ; ;       |   |   |   |   +-------  Clear to send (/CTS)
0081                             ; ;       |   |   |   +-------  Framing error
0081                             ; ;       |   |   +-------  Receiver overrun 
0081                             ; ;       |   +-------  Parity error
0081                             ; ;       +-------  Interrupt request
0081                             ; 
0081                             ; ; 6850 #1 registers derived from base address (above)
0081                             ; kACIA1Cont: .EQU kACIA1+0       ;I/O address of control register
0081                             ; kACIA1Data: .EQU kACIA1+1       ;I/O address of data register
0081                             ; ; 6850 #2 registers derived from base address (above)
0081                             ; kACIA2Cont: .EQU kACIA2+0       ;I/O address of control register
0081                             ; kACIA2Data: .EQU kACIA2+1       ;I/O address of data register
0081                             ; 
0081                             ; ; Control register values
0081                             ; k6850Reset: .EQU 0b00000011     ;Master reset
0081                             ; k6850Init:  .EQU 0b00010110     ;No int, RTS low, 8+1, /64
0081                             ; 
0081                             ; ; Status (control) register bit numbers
0081                             ; k6850RxRdy: .EQU 0              ;Receive data available bit number
0081                             ; k6850TxRdy: .EQU 1              ;Transmit data empty bit number
0081                             ; 
0081                             ; ; Device detection, test 1
0081                             ; ; This test just reads from the devices' status (control) register
0081                             ; ; and looks for register bits in known states:
0081                             ; ; /CTS input bit = low
0081                             ; ; /DCD input bit = low
0081                             ; ; WARNING
0081                             ; ; Sometimes at power up the Tx data reg empty bit is zero, but
0081                             ; ; recovers after device initialised. So test 1 excludes this bit.
0081                             ; k6850Mask1: .EQU  0b00001100    ;Mask for known bits in control reg
0081                             ; k6850Test1: .EQU  0b00000000    ;Test value following masking
0081                             ; 
0081                             ; ; Device detection, test 2
0081                             ; ; This test just reads from the devices' status (control) register
0081                             ; ; and looks for register bits in known states:
0081                             ; ; /CTS input bit = low
0081                             ; ; /DCD input bit = low
0081                             ; ; Transmit data register empty bit = high
0081                             ; k6850Mask2: .EQU  0b00001110    ;Mask for known bits in control reg
0081                             ; k6850Test2: .EQU  0b00000010    ;Test value following masking
0081                             ; 
0081                             ; ; RC2014 serial 6850 initialise
0081                             ; ;   On entry: No parameters required
0081                             ; ;   On exit:  Z flagged if device is found and initialised
0081                             ; ;             AF BC DE HL not specified
0081                             ; ;             IX IY I AF" BC" DE" HL" preserved
0081                             ; ; If the device is found it is initialised
0081                             ; serial_init:
0081                             ; ; First look to see if the device is present
0081                             ; ; Test 1, just read from chip, do not write anything
0081                             ;         IN   A,(kACIA1Cont) ;Read status (control) register
0081                             ;         AND  k6850Mask1     ;Mask for known bits in control reg
0081                             ;         CP   k6850Test1     ;and check for known values
0081                             ;         RET  NZ             ;If not found return with NZ flag
0081                             ; ; Attempt to initialise the chip
0081                             ;         LD   A,k6850Reset   ;Master reset
0081                             ;         OUT  (kACIA1Cont),A ;Write to ACIA control register
0081                             ;         LD   A,k6850Init    ;No int, RTS low, 8+1, /64
0081                             ;         OUT  (kACIA1Cont),A ;Write to ACIA control register
0081                             ; ; Test 2, perform tests on chip following initialisation
0081                             ;         IN   A,(kACIA1Cont) ;Read status (control) register
0081                             ;         AND  k6850Mask2     ;Mask for known bits in control reg
0081                             ;         CP   k6850Test2     ;Test value following masking
0081                             ; ;           RET  NZ             ;Return not found NZ flagged
0081                             ;         RET                 ;Return Z if found, NZ if not
0081                             ; 
0081                             ; 
0081                             ; ; RC2014 serial 6850 input character
0081                             ; ;   On entry: No parameters required
0081                             ; ;   On exit:  A = Character input from the device
0081                             ; ;             NZ flagged if character input
0081                             ; ;             BC DE IX IY I AF" BC" DE" HL" preserved
0081                             ; ;             HL destroyed
0081                             ; ; This function does not return until a character is available
0081                             ; 
0081                             ; getchar:
0081                             ;         IN   A,(kACIA1Cont) ;Address of status register
0081                             ;         AND  $01            ;Receive byte available
0081                             ;         JR   Z, getchar     ;Return Z if no character
0081                             ;         IN   A,(kACIA1Data) ;Read data byte
0081                             ;         RET                 ;NZ flagged if character input
0081                             ; 
0081                             ; 
0081                             ; ; RC2014 serial 6850 output character
0081                             ; ;   On entry: A = Character to be output to the device
0081                             ; ;   On exit:  If character output successful (eg. device was ready)
0081                             ; ;               NZ flagged and A != 0
0081                             ; ;             If character output failed (eg. device busy)
0081                             ; ;               Z flagged and A = Character to output
0081                             ; ;             BC DE HL IX IY I AF" BC" DE" HL" preserved
0081                             ; putchar:
0081                             ;         PUSH BC
0081                             ;         LD   C,kACIA1Cont   ;ACIA control register
0081                             ;         IN   B,(C)          ;Read ACIA control register
0081                             ;         BIT  k6850TxRdy,B   ;Transmit register full?
0081                             ;         POP  BC
0081                             ;         JR  Z, putchar      ;Return Z as character not output
0081                             ;         OUT  (kACIA1Data),A ;Write data byte
0081                             ;         OR   0xFF           ;Return success A=0xFF and NZ flagged
0081                             ;         RET
0081                             ; 
0081                             ; .endif        
0081                             ; 
0081                GETCHAR:      
0081   2A 20 0B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 22 0B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 09               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 2A 0B               LD   (RST08),HL   
0094   22 2C 0B               LD   (RST10),HL   
0097   22 2E 0B               LD   (RST18),HL   
009A   22 30 0B               LD   (RST20),HL   
009D   22 32 0B               LD   (RST28),HL   
00A0   22 34 0B               LD   (RST30),HL   
00A3   22 24 0B               LD   (INTVEC),HL   
00A6   22 26 0B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 20 0B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 22 0B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                          IF   RC2014   
                                 ; 
                                 ;  *************************************************************************		
                                 ;  Getchar and putchar hooks into SCM for RC2014
                                 ;  *************************************************************************
                                 ; 
                    GETCHAR:   PUSH   BC   
                              LD   C,$01   
                              RST   $30   
                              POP   BC   
                              RET      
                                 ; 
                    PUTCHAR:   PUSH   BC   
                              PUSH   HL   
                              LD   C,$02   
                              RST   $30   
                              OR   $FF   
                              POP   HL   
                              POP   BC   
                              RET      
00C3                          ENDIF      
00C3                             ; 
00C3   C3 D1 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;        MINT1_18 Micro-Interpreter for the Z80
00C6                             ; 
00C6                             ;        Ken Boak John Hardy and Craig Jones  November 28th 2021
00C6                             ; 
00C6                             ;        Comparison Operators < and > return 0 (false) when equality is detected
00C6                             ;        Printhex routine shortened
00C6                             ;        Getchar and Putchar hooks into Small Computer Monitor added in page 2 28-11-21
00C6                             ; 
00C6                             ;        Hex entry bug fixed 28-11-21
00C6                             ;        Decimal entry bug fixed  24-11-21
00C6                             ;        Division routine shortened by 13 bytes 24/11
00C6                             ; 
00C6                             ; 
00C6                             ;        Includes serial routines getchar and putchar
00C6                             ;        printstring
00C6                             ;        printdec
00C6                             ;        printhex
00C6                             ;        crlf
00C6                             ; 
00C6                             ;        Register Assignment:
00C6                             ; 
00C6                             ;        BC is the instruction pointer IP
00C6                             ;        DE is a working register and 2nd on stack NOS
00C6                             ;        HL is a working register and Top of stack TOS
00C6                             ;        SP is data stack pointer
00C6                             ;        IX is used to implement the return stack
00C6                             ;        IY is used as a jump back to NEXT
00C6                             ; 
00C6                             ;        All commands accessed via a byte wide look up table
00C6                             ; 
00C6                             ;        Heap used for command storage (HERE)
00C6                             ; 
00C6                             ;        Primitives are on two consecutive pages using a trampoline jump to the 2nd page.
00C6                             ; 
00C6                             ;        This allows single byte opcodes reducing the dispatch time from
00C6                             ;        64 t states to 33 t states
00C6                             ; 
00C6                             ; 
00C6                             ;        User defined commands and variables
00C6                             ; 
00C6                             ;        User Commands  A-Z
00C6                             ;        User Variables a-z
00C6                             ; 
00C6                             ;        Commands now available:
00C6                             ; 
00C6                             ;        Maths
00C6                             ; 
00C6                             ;        +     ADD
00C6                             ;		 -     SUB
00C6                             ;        *     MUL     (max product 65535)
00C6                             ;        /     DIV     Returns quotient and remainder
00C6                             ;        _     NEG
00C6                             ; 
00C6                             ;        }     Shift Right (2/)
00C6                             ;        {     Shift Left  (2*)
00C6                             ; 
00C6                             ;        Comparison - compare the top two elements on the stack
00C6                             ;        Puts 1 on the stack if condition is true, 0 if false
00C6                             ; 
00C6                             ;        <     LT
00C6                             ;        =     EQ
00C6                             ;        >     GT
00C6                             ; 
00C6                             ;        Logic
00C6                             ; 
00C6                             ;        &     AND
00C6                             ;        |     OR
00C6                             ;        ^     XOR
00C6                             ;        ~     INV
00C6                             ; 
00C6                             ;        Stack
00C6                             ; 
00C6                             ;        "     DUP
00C6                             ;        '     DROP
00C6                             ;        $     SWAP
00C6                             ;		 %     OVER
00C6                             ;        .     DOT     (Print the value of the top of stack as a decimal)
00C6                             ;        ,     COMMA   (Print the value of the top of stack as a hexadecimal)
00C6                             ;		 #     HEX     Accept a hexadecimal number
00C6                             ; 
00C6                             ;        Memory
00C6                             ; 
00C6                             ;        @     FETCH
00C6                             ;        !     STORE
00C6                             ; 
00C6                             ;        User Definitions
00C6                             ; 
00C6                             ;        :     Start a user definition
00C6                             ;        ;     End a user definition
00C6                             ; 
00C6                             ;        \     QUIT    (Print OK and return to monitor)
00C6                             ; 
00C6                             ; 
00C6                             ;        Loops    - execute the code between parenthesis
00C6                             ; 
00C6                             ;        The user variable i is used as the loop counter
00C6                             ;        It is decremented every time the loop is executed
00C6                             ; 
00C6                             ;        10(repeat this code 10 times)
00C6                             ; 
00C6                             ;        0(skip this code)
00C6                             ; 
00C6                             ;        1(execute this code only once)
00C6                             ; 
00C6                             ;        a@ b@ = (_print this if a=b_)
00C6                             ; 
00C6                             ;       1000(i@.)    Print out the value of i from 999 to 0
00C6                             ; 
00C6                             ;       10(a@ 1+ a! a@ .)  Increment a 10 times and print it out
00C6                             ; 
00C6                             ;       User Commands are allocated to uppercase alpha characters A to Z
00C6                             ; 
00C6                             ;       A user command can be defined by starting with a colon and
00C6                             ;       ending with a semicolon
00C6                             ; 
00C6                             ;       Example  :A 123 456 + . ;
00C6                             ; 
00C6                             ;       The A character represents a fixed address for the User routine
00C6                             ;       The interpreter copies all the characters after the A to a text buffer
00C6                             ;       located at address A
00C6                             ;       Each time A is encountered (outside of a colon definition)
00C6                             ;       it will execute the code  located there i.e. 123 456 + .
00C6                             ; 
00C6                             ;       Variables are associated with lowercase characters a-z
00C6                             ;       Each variable is allocated 2 bytes located on even addresses
00C6                             ;       They run contiguously from $A800 (a) to $A830 (z)
00C6                             ;       They are accessed using the fetch and store commands @ and !
00C6                             ; 
00C6                             ;       Examples:
00C6                             ; 
00C6                             ;       1234 a!     store 1234 in a
00C6                             ; 
00C6                             ;       b@ .        fetch the value from b and print it out
00C6                             ; 
00C6                             ;       a@ b@ + .   fetch values from a and b, add them together and print the sum
00C6                             ; 
00C6                             ;       a@ b!       copy the value in a and store it in b
00C6                             ; 
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                             ;ROMSTART    EQU $0
00C6                             ;RAMSTART    EQU $800
00C6                             ;EXTENDED    EQU 0
00C6                             ;ROMSIZE     EQU $800
00C6                DSIZE:    EQU   $100   
00C6                RSIZE:    EQU   $100   
00C6                TIBSIZE:   EQU   $100   
00C6                TRUE:     EQU   1   
00C6                FALSE:    EQU   0   
00C6                             ;        .ORG ROMSTART
00C6                             ; 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
00C6                             ;        JP start
0180                          .ORG   ROMSTART + $180   
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mint and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                EMPTY_:      
0180   3B 00                  .CSTR   ";"   
0182                ESCAPE_:      
0182                             ; .cstr ";"
0182   31 33 5C 45 37 30 28 60 20 60 29 31 33 5C 45 60 3E 20 60 30 5C 24 21 3B 00 .CSTR   "13\\E70(` `)13\\E`> `0\\$!;"   
019B                BACKSP_:      
019B   5C 24 40 30 3D 30 3D 28 31 5C 24 5C 2D 38 5C 45 60 20 60 38 5C 45 29 3B 00 .CSTR   "\\$@0=0=(1\\$\\-8\\E` `8\\E);"   
01B4                TOGGLEBASE_:      
01B4   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
01BE                PRINTSTACK_:      
01BE   60 3D 3E 20 60 5C 50 5C 4E 5C 4E 60 3E 20 60 3B 00 .CSTR   "`=> `\\P\\N\\N`> `;"   
01CF                             ; editt_:
01CF                             ;         .cstr "\\1@\\@\\9! \\9@\\^A< \\9@\\^Z> |0= (0\\1! 13\\E);"
01CF                VIEWDEFS_:      
01CF   3B 00                  .CSTR   ";"   
01D1                             ; DB "\\N26("
01D1                             ; DB      "\\2@\\i@{+@",$22
01D1                             ; DB      "\\@\\^;=0=("
01D1                             ; DB          "`:`\\^A\\j@+\\E"
01D1                             ; DB          "100("
01D1                             ; DB              $22,"\\i@+\\@"
01D1                             ; DB              $22,"\\E\\^;=0=\\W"
01D1                             ; DB          ")\\N"
01D1                             ; DB      ")"
01D1                             ; DB ");"
01D1                START:       
01D1                MINT:        
01D1   31 00 09               LD   SP,DSTACK   
01D4   CD EB 01               CALL   initialize   
01D7   CD 84 02               CALL   ENTER   
01DA   60 4D 49 4E 54 20 56 31 2E 30 60 5C 4E 00 .CSTR   "`MINT V1.0`\\N"   
01E8   C3 0C 02               JP   interpret   
01EB                INITIALIZE:      
01EB   DD 21 00 0A            LD   IX,RSTACK   
01EF   FD 21 6B 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
01F3   21 E0 03               LD   HL,iUserVars   
01F6   11 00 0B               LD   DE,userVars   
01F9   01 20 00               LD   BC,16 * 2   
01FC   ED B0                  LDIR      
01FE   21 F4 0B               LD   HL,defs   
0201   06 1A                  LD   B,26   
0203                INIT1:       
0203   36 80                  LD   (HL),lsb(empty_)   
0205   23                     INC   HL   
0206   36 01                  LD   (HL),msb(empty_)   
0208   23                     INC   HL   
0209   10 F8                  DJNZ   init1   
020B   C9                     RET      
020C                INTERPRET:      
020C   CD 84 02               CALL   ENTER   
020F   5C 4E 60 3E 20 60 00   .CSTR   "\\N`> `"   
0216                INTERPRET1:      ; used by tests
0216   01 00 00               LD   BC,0   ; load BC with offset into TIB
0219   ED 43 18 0B            LD   (vTIBPtr),BC   
021D                INTERPRET2:      ; calc nesting (a macro might have changed it)
021D   1E 00                  LD   E,0   ; initilize nesting value
021F   C5                     PUSH   BC   ; save offset into TIB,
0220                             ; BC is also the count of chars in TIB
0220   21 00 0A               LD   HL,TIB   ; HL is start of TIB
0223   18 06                  JR   interpret4   
0225                INTERPRET3:      
0225   7E                     LD   A,(HL)   ; A = char in TIB
0226   23                     INC   HL   ; inc pointer into TIB
0227   0B                     DEC   BC   ; dec count of chars in TIB
0228   CD CA 07               CALL   nesting   ; update nesting value
022B                INTERPRET4:      
022B   79                     LD   A,C   ; is count zero?
022C   B0                     OR   B   
022D   20 F6                  JR   NZ,interpret3   ; if not loop
022F   C1                     POP   BC   ; restore offset into TIB
0230                             ; *******************************************************************
0230                             ; Wait for a character from the serial input (keyboard)
0230                             ; and store it in the text buffer. Keep accepting characters,
0230                             ; increasing the instruction pointer BC - until a newline received.
0230                             ; *******************************************************************
0230                WAITCHAR:      
0230   CD 81 00               CALL   getchar   ; loop around waiting for character
0233   FE 20                  CP   $20   
0235   30 0D                  JR   NC,waitchar1   
0237   FE 00                  CP   $0   ; is it end of string?
0239   28 28                  JR   Z,waitchar4   
023B   FE 0D                  CP   "\r"   ; carriage return?
023D   28 13                  JR   Z,waitchar3   
023F   16 00                  LD   D,0   
0241   C3 AE 07               JP   macro   
0244                WAITCHAR1:      
0244   21 00 0A               LD   HL,TIB   
0247   09                     ADD   HL,BC   
0248   77                     LD   (HL),A   ; store the character in textbuf
0249   03                     INC   BC   
024A   CD 85 00               CALL   putchar   ; echo character to screen
024D   CD CA 07               CALL   nesting   
0250   18 DE                  JR   waitchar   ; wait for next character
0252                WAITCHAR3:      
0252   21 00 0A               LD   HL,TIB   
0255   09                     ADD   HL,BC   
0256   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
0258   03                     INC   BC   
0259   CD EB 07               CALL   crlf   ; echo character to screen
025C   7B                     LD   A,E   ; if zero nesting append and ETX after \r
025D   B7                     OR   A   
025E   20 D0                  JR   NZ,waitchar   
0260   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
0262   03                     INC   BC   
0263                WAITCHAR4:      
0263   ED 43 18 0B            LD   (vTIBPtr),BC   
0267   01 00 0A               LD   BC,TIB   ; Instructions stored on heap at address HERE
026A   0B                     DEC   BC   
026B                             ; Drop into the NEXT and dispatch routines
026B                             ; ********************************************************************************
026B                             ; 
026B                             ; Dispatch Routine.
026B                             ; 
026B                             ; Get the next character and form a 1 byte jump address
026B                             ; 
026B                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
026B                             ; jump to the selected function.
026B                             ; 
026B                             ; Individual handler routines will deal with each category:
026B                             ; 
026B                             ; 1. Detect characters A-Z and jump to the User Command handler routine
026B                             ; 
026B                             ; 2. Detect characters a-z and jump to the variable handler routine
026B                             ; 
026B                             ; 3. All other characters are punctuation and cause a jump to the associated
026B                             ; primitive code.
026B                             ; 
026B                             ; Instruction Pointer IP BC is incremented
026B                             ; 
026B                             ; *********************************************************************************
026B                NEXT:        
026B   03                     INC   BC   ; 6t    Increment the IP
026C   0A                     LD   A,(BC)   ; 7t    Get the next character and dispatch
026D                             ; 
026D                DISPATCH:      
026D   FE 00                  CP   0   ;       NULL? exit Mint
026F   CA 03 04               JP   Z,exit_   
0272   FE 03                  CP   $03   ;       ETX? interpret next line
0274   CA 0C 02               JP   Z,interpret   
0277   D6 20                  SUB   " "   ; 7t    remove char offset
0279   38 F0                  JR   C,NEXT   ;       ignore char
027B   11 00 03               LD   DE,opcodes   ; 7t    Start address of jump table
027E   5F                     LD   E,A   ; 4t    Index into table
027F   1A                     LD   A,(DE)   ; 7t    get low jump address
0280   26 04                  LD   H,msb(page1)   ; 7t    Load H with the 1st page address
0282   6F                     LD   L,A   ; 4t    and put into L
0283   E9                     JP   (HL)   ; 4t    Jump to routine
0284                ENTER:       
0284   60 69                  LD   HL,BC   
0286   CD E5 05               CALL   rpush   ; save Instruction Pointer
0289   C1                     POP   BC   
028A   0B                     DEC   BC   
028B   FD E9                  JP   (IY)   ; Execute code from User def
028D                PRINTDEC:      
028D                             ;Number in hl to decimal ASCII
028D                             ;inputs:	hl = number to ASCII
028D                             ;example: hl=300 outputs "00300"
028D                             ;destroys: af, de, hl
028D                DISPHL:      
028D   11 F0 D8               LD   de,-10000   
0290   CD A6 02               CALL   Num1   
0293   11 18 FC               LD   de,-1000   
0296   CD A6 02               CALL   Num1   
0299   11 9C FF               LD   de,-100   
029C   CD A6 02               CALL   Num1   
029F   1E F6                  LD   e,-10   
02A1   CD A6 02               CALL   Num1   
02A4   1E FF                  LD   e,-1   
02A6                NUM1:        
02A6   3E 2F                  LD   a,"0"-1   
02A8                NUM2:        
02A8   3C                     INC   a   
02A9   19                     ADD   hl,de   
02AA   38 FC                  JR   c,Num2   
02AC   ED 52                  SBC   hl,de   
02AE   C3 85 00               JP   putchar   
02B1                             ; ARRAY compilation routine
02B1                COMPNEXT:      
02B1   D1                     POP   DE   ; DE = return address
02B2   2A 14 0B               LD   HL,(vHeapPtr)   ; load heap ptr
02B5   73                     LD   (HL),E   ; store lsb
02B6   3A 1C 0B               LD   A,(vByteMode)   
02B9   23                     INC   HL   
02BA   B7                     OR   A   
02BB   20 02                  JR   NZ,compNext1   
02BD   72                     LD   (HL),D   
02BE   23                     INC   HL   
02BF                COMPNEXT1:      
02BF   22 14 0B               LD   (vHeapPtr),HL   ; save heap ptr
02C2   C3 6B 02               JP   NEXT   
02C5                             ; **************************************************************************
02C5                             ; Page 2  Jump Tables
02C5                             ; **************************************************************************
02C5                          ALIGN   $100   
0300                OPCODES:      
0300   FA                     DB   lsb(nop_)   ;    SP
0301   42                     DB   lsb(store_)   ;    !
0302   49                     DB   lsb(dup_)   ;    "
0303   C5                     DB   lsb(hex_)   ;    #
0304   4E                     DB   lsb(swap_)   ;    $
0305   53                     DB   lsb(over_)   ;    %
0306   5D                     DB   lsb(and_)   ;    &
0307   5A                     DB   lsb(drop_)   ;    '
0308   EF                     DB   lsb(begin_)   ;    (
0309   F1                     DB   lsb(again_)   ;    )
030A   E8                     DB   lsb(mul_)   ;    *
030B   83                     DB   lsb(add_)   ;    +
030C   E1                     DB   lsb(hexp_)   ;    ,
030D   9C                     DB   lsb(sub_)   ;    -
030E   CA                     DB   lsb(dot_)   ;    .
030F   EA                     DB   lsb(div_)   ;    /
0310   0D                     DB   lsb(num_)   ;    0
0311   0D                     DB   lsb(num_)   ;    1
0312   0D                     DB   lsb(num_)   ;    2
0313   0D                     DB   lsb(num_)   ;    3
0314   0D                     DB   lsb(num_)   ;    4
0315   0D                     DB   lsb(num_)   ;    5
0316   0D                     DB   lsb(num_)   ;    6
0317   0D                     DB   lsb(num_)   ;    7
0318   0D                     DB   lsb(num_)   ;    8
0319   0D                     DB   lsb(num_)   ;    9
031A   EC                     DB   lsb(def_)   ;    :
031B   26                     DB   lsb(ret_)   ;    ;
031C   B4                     DB   lsb(lt_)   ;    <
031D   A4                     DB   lsb(eq_)   ;    =
031E   B0                     DB   lsb(gt_)   ;    >
031F   E4                     DB   lsb(query_)   ;    ?
0320   3B                     DB   lsb(fetch_)   ;    @
0321   10                     DB   lsb(call_)   ;    A
0322   10                     DB   lsb(call_)   ;    B
0323   10                     DB   lsb(call_)   ;    C
0324   10                     DB   lsb(call_)   ;    D
0325   10                     DB   lsb(call_)   ;    E
0326   10                     DB   lsb(call_)   ;    F
0327   10                     DB   lsb(call_)   ;    G
0328   10                     DB   lsb(call_)   ;    H
0329   10                     DB   lsb(call_)   ;    I
032A   10                     DB   lsb(call_)   ;    J
032B   10                     DB   lsb(call_)   ;    K
032C   10                     DB   lsb(call_)   ;    L
032D   10                     DB   lsb(call_)   ;    M
032E   10                     DB   lsb(call_)   ;    N
032F   10                     DB   lsb(call_)   ;    O
0330   10                     DB   lsb(call_)   ;    P
0331   10                     DB   lsb(call_)   ;    Q
0332   10                     DB   lsb(call_)   ;    R
0333   10                     DB   lsb(call_)   ;    S
0334   10                     DB   lsb(call_)   ;    T
0335   10                     DB   lsb(call_)   ;    U
0336   10                     DB   lsb(call_)   ;    V
0337   10                     DB   lsb(call_)   ;    W
0338   10                     DB   lsb(call_)   ;    X
0339   10                     DB   lsb(call_)   ;    Y
033A   10                     DB   lsb(call_)   ;    Z
033B   F4                     DB   lsb(arrDef_)   ;    [
033C   00                     DB   lsb(alt_)   ;    \
033D   F7                     DB   lsb(arrEnd_)   ;    ]
033E   73                     DB   lsb(xor_)   ;    ^
033F   96                     DB   lsb(neg_)   ;    _
0340   DE                     DB   lsb(str_)   ;    `
0341   2D                     DB   lsb(var_)   ;    a
0342   2D                     DB   lsb(var_)   ;    b
0343   2D                     DB   lsb(var_)   ;    c
0344   2D                     DB   lsb(var_)   ;    d
0345   2D                     DB   lsb(var_)   ;    e
0346   2D                     DB   lsb(var_)   ;    f
0347   2D                     DB   lsb(var_)   ;    g
0348   2D                     DB   lsb(var_)   ;    h
0349   2D                     DB   lsb(var_)   ;    i
034A   2D                     DB   lsb(var_)   ;    j
034B   2D                     DB   lsb(var_)   ;    k
034C   2D                     DB   lsb(var_)   ;    l
034D   2D                     DB   lsb(var_)   ;    m
034E   2D                     DB   lsb(var_)   ;    n
034F   2D                     DB   lsb(var_)   ;    o
0350   2D                     DB   lsb(var_)   ;    p
0351   2D                     DB   lsb(var_)   ;    q
0352   2D                     DB   lsb(var_)   ;    r
0353   2D                     DB   lsb(var_)   ;    s
0354   2D                     DB   lsb(var_)   ;    t
0355   2D                     DB   lsb(var_)   ;    u
0356   2D                     DB   lsb(var_)   ;    v
0357   2D                     DB   lsb(var_)   ;    w
0358   2D                     DB   lsb(var_)   ;    x
0359   2D                     DB   lsb(var_)   ;    y
035A   2D                     DB   lsb(var_)   ;    z
035B   89                     DB   lsb(shl_)   ;    {
035C   68                     DB   lsb(or_)   ;    |
035D   8E                     DB   lsb(shr_)   ;    }
035E   7E                     DB   lsb(inv_)   ;    ~
035F   E6                     DB   lsb(del_)   ;    backspace
0360                             ; 
0360                             ; ***********************************************************************
0360                             ; Alternate function codes		
0360                             ; ***********************************************************************		
0360                CTRLCODES:      
0360                ALTCODES:      
0360   80                     DB   lsb(empty_)   ; NUL ^@
0361   80                     DB   lsb(empty_)   ; SOH ^A
0362   B4                     DB   lsb(toggleBase_)   ; STX ^B
0363   80                     DB   lsb(empty_)   ; ETX ^C
0364   80                     DB   lsb(empty_)   ; EOT ^D
0365   80                     DB   lsb(empty_)   ; ENQ ^E
0366   80                     DB   lsb(empty_)   ; ACK ^F
0367   80                     DB   lsb(empty_)   ; BEL ^G
0368   9B                     DB   lsb(backsp_)   ; BS  ^H
0369   80                     DB   lsb(empty_)   ; TAB ^I
036A   80                     DB   lsb(empty_)   ; LF  ^J
036B   80                     DB   lsb(empty_)   ; VT  ^K
036C   80                     DB   lsb(empty_)   ; FF  ^L
036D   80                     DB   lsb(empty_)   ; CR  ^M
036E   80                     DB   lsb(empty_)   ; SO  ^N
036F   80                     DB   lsb(empty_)   ; SI  ^O
0370   BE                     DB   lsb(printStack_)   ; DLE ^P
0371   80                     DB   lsb(empty_)   ; DC1 ^Q
0372   80                     DB   lsb(empty_)   ; DC2 ^R
0373   80                     DB   lsb(empty_)   ; DC3 ^S
0374   80                     DB   lsb(empty_)   ; DC4 ^T
0375   80                     DB   lsb(empty_)   ; NAK ^U
0376   CF                     DB   lsb(viewDefs_)   ; SYN ^V
0377   80                     DB   lsb(empty_)   ; ETB ^W
0378   80                     DB   lsb(empty_)   ; CAN ^X
0379   80                     DB   lsb(empty_)   ; EM  ^Y
037A   80                     DB   lsb(empty_)   ; SUB ^Z
037B   82                     DB   lsb(escape_)   ; ESC ^[
037C   80                     DB   lsb(empty_)   ; FS  ^\
037D   80                     DB   lsb(empty_)   ; GS  ^]
037E   80                     DB   lsb(empty_)   ; RS  ^^
037F   80                     DB   lsb(empty_)   ; US  ^_)
0380   FA                     DB   lsb(nop_)   ; SP  ^`
0381   23                     DB   lsb(cStore_)   ;    !
0382   FA                     DB   lsb(nop_)   ;    "
0383   FA                     DB   lsb(nop_)   ; 
0384   C1                     DB   lsb(TIBPtr_)   ;    $  ( -- adr ) text input ptr
0385   FA                     DB   lsb(nop_)   ;    %
0386   FA                     DB   lsb(nop_)   ;    &
0387   FA                     DB   lsb(nop_)   ;    '
0388   41                     DB   lsb(else_)   ;    (
0389   FA                     DB   lsb(nop_)   ;    )
038A   FA                     DB   lsb(nop_)   ;    *
038B   5F                     DB   lsb(incr_)   ;    +  ( adr -- ) decrements variable at address
038C   FA                     DB   lsb(nop_)   ;    ,
038D   6A                     DB   lsb(decr_)   ;    -  ( adr -- ) increments variable at address
038E   FA                     DB   lsb(nop_)   ;    .
038F   FA                     DB   lsb(nop_)   ;    /
0390   CA                     DB   lsb(knownVar_)   ;    0  ( -- adr ) start of data stack constant
0391   CA                     DB   lsb(knownVar_)   ;    1  ; returns HERE variable
0392   CA                     DB   lsb(knownVar_)   ;    2  ( -- adr ) TIBPtr variable
0393   CA                     DB   lsb(knownVar_)   ;    3  ( -- adr ) isHex variable
0394   CA                     DB   lsb(knownVar_)   ;    4
0395   CA                     DB   lsb(knownVar_)   ;    5
0396   CA                     DB   lsb(knownVar_)   ;    6
0397   CA                     DB   lsb(knownVar_)   ;    7
0398   CA                     DB   lsb(knownVar_)   ;    8
0399   CA                     DB   lsb(knownVar_)   ;    9
039A   FA                     DB   lsb(nop_)   ;    :  start defining a macro
039B   FA                     DB   lsb(nop_)   ;    ;
039C   FA                     DB   lsb(nop_)   ;    <
039D   FA                     DB   lsb(nop_)   ;    =
039E   FA                     DB   lsb(nop_)   ;    >
039F   FA                     DB   lsb(nop_)   ;    ?
03A0   0B                     DB   lsb(cFetch_)   ;    @
03A1   FA                     DB   lsb(nop_)   ;    A
03A2   00                     DB   lsb(base16_)   ;    B
03A3   FA                     DB   lsb(nop_)   ;    C
03A4   28                     DB   lsb(depth_)   ;    D
03A5   3A                     DB   lsb(emit_)   ;    E
03A6   FA                     DB   lsb(nop_)   ;    F
03A7   4C                     DB   lsb(go_)   ;    G
03A8   FA                     DB   lsb(nop_)   ;    H
03A9   75                     DB   lsb(inPort_)   ;    I  ( port -- val )
03AA   FA                     DB   lsb(nop_)   ;    J
03AB   88                     DB   lsb(key_)   ;    K
03AC   FA                     DB   lsb(nop_)   ;    L
03AD   9B                     DB   lsb(max_)   ;    M  ( a b -- c ) return the maximum value
03AE   A9                     DB   lsb(newln_)   ;    N
03AF   AE                     DB   lsb(outPort_)   ;    O  ( val port -- )
03B0   C7                     DB   lsb(dots_)   ;    P
03B1   FD                     DB   lsb(quit_)   ;    Q
03B2   FA                     DB   lsb(nop_)   ;    R
03B3   FA                     DB   lsb(nop_)   ;    S
03B4   FA                     DB   lsb(nop_)   ;    T
03B5   FA                     DB   lsb(nop_)   ;    U
03B6   FA                     DB   lsb(nop_)   ;    V
03B7   CD                     DB   lsb(while_)   ;    W
03B8   44                     DB   lsb(exec_)   ;    X
03B9   FA                     DB   lsb(nop_)   ;    Y
03BA   FA                     DB   lsb(nop_)   ;    Z
03BB   06                     DB   lsb(cArrDef_)   ;    [
03BC   1A                     DB   lsb(comment_)   ;    \  comment text, skips reading until end of line
03BD   FA                     DB   lsb(nop_)   ;    ]
03BE   12                     DB   lsb(charCode_)   ;    ^
03BF   B5                     DB   lsb(sign_)   ;    _)  ( n -- b ) returns true if -ve
03C0   FA                     DB   lsb(nop_)   ;    `
03C1   FA                     DB   lsb(nop_)   ;    a
03C2   FA                     DB   lsb(nop_)   ;    b
03C3   FA                     DB   lsb(nop_)   ;    c
03C4   FA                     DB   lsb(nop_)   ;    d  ( -- val ) depth of data stack
03C5   FA                     DB   lsb(nop_)   ;    e  ( val -- ) emits a char to output
03C6   FA                     DB   lsb(nop_)   ;    f
03C7   FA                     DB   lsb(nop_)   ;    g  ( -- ? ) execute mint definition
03C8   55                     DB   lsb(heapPtr_)   ;    h  ; returns heap ptr variable
03C9   5B                     DB   lsb(i_)   ;    i  ; returns index variable of current loop
03CA   7E                     DB   lsb(j_)   ;    j  ; returns index variable of outer loop
03CB   FA                     DB   lsb(nop_)   ;    k  ( -- val )  read a char from input
03CC   FA                     DB   lsb(nop_)   ;    l
03CD   91                     DB   lsb(min_)   ;    m  ( a b -- c ) return the minimum value
03CE   FA                     DB   lsb(nop_)   ;    n  ; prints a newline to output
03CF   FA                     DB   lsb(nop_)   ;    o
03D0   FA                     DB   lsb(nop_)   ;    p  ( -- ) non-destructively prints stack
03D1   FA                     DB   lsb(nop_)   ;    q  ; quits from Mint REPL
03D2   FA                     DB   lsb(nop_)   ;    r
03D3   FA                     DB   lsb(nop_)   ;    s
03D4   FA                     DB   lsb(nop_)   ;    t
03D5   FA                     DB   lsb(nop_)   ;    u
03D6   FA                     DB   lsb(nop_)   ;    v
03D7   FA                     DB   lsb(nop_)   ;    w  ; ( b -- ) if false, skip to end of loop
03D8   FA                     DB   lsb(nop_)   ;    x
03D9   FA                     DB   lsb(nop_)   ;    y
03DA   FA                     DB   lsb(nop_)   ;    z
03DB   FA                     DB   lsb(nop_)   ;    {
03DC   FA                     DB   lsb(nop_)   ;    |
03DD   FA                     DB   lsb(nop_)   ;    }
03DE   FA                     DB   lsb(nop_)   ;    ~
03DF   FA                     DB   lsb(nop_)   ;    BS		
03E0                IUSERVARS:      
03E0   00 09                  DW   dStack   ; \0 cS0
03E2   00 0A                  DW   TIB   ; \1 cTIB
03E4   F4 0B                  DW   defs   ; \2 cDefs
03E6   C0 0B                  DW   vars   ; \3 cVars
03E8   00 0B                  DW   userVars   ; \4 cUserVars
03EA   00 00                  DW   0   ; \5
03EC   00 00                  DW   0   ; \6
03EE   00 00                  DW   0   ; \7
03F0   00 00                  DW   0   ; \8
03F2   00 00                  DW   0   ; \9 vTemp
03F4   2A 0C                  DW   HEAP   ; vHeapPtr
03F6   00 00                  DW   FALSE   ; vBase16
03F8   00 0A                  DW   TIB   ; vTIBPtr
03FA   60 03                  DW   altCodes   ; vAltCodes
03FC   00 00                  DW   $0   ; 
03FE   00 00                  DW   $0   ; 
0400                             ; **********************************************************************			
0400                             ; Page 4 primitive routines
0400                             ; **********************************************************************
0400                          ALIGN   $100   
0400                PAGE1:       
0400                ALT_:        
0400   C3 C2 05               JP   alt   
0403                EXIT_:       
0403   03                     INC   BC   
0404   50 59                  LD   DE,BC   
0406   CD F0 05               CALL   rpop   ; Restore Instruction pointer
0409   44 4D                  LD   BC,HL   
040B   EB                     EX   DE,HL   
040C   E9                     JP   (HL)   
040D                NUM_:        
040D   C3 73 05               JP   number   
0410                CALL_:       
0410   60 69                  LD   HL,BC   
0412   CD E5 05               CALL   rpush   ; save Instruction Pointer
0415   0A                     LD   A,(BC)   
0416   D6 41                  SUB   "A"   ; Calc index
0418   87                     ADD   A,A   
0419   21 F4 0B               LD   HL,DEFS   
041C   5F                     LD   E,A   
041D   16 00                  LD   D,0   
041F   19                     ADD   HL,DE   
0420   4E                     LD   C,(HL)   
0421   23                     INC   HL   
0422   46                     LD   B,(HL)   
0423   0B                     DEC   BC   
0424   FD E9                  JP   (IY)   ; Execute code from User def
0426                RET_:        
0426   CD F0 05               CALL   rpop   ; Restore Instruction pointer
0429   44 4D                  LD   BC,HL   
042B   FD E9                  JP   (IY)   
042D                VAR_:        
042D   0A                     LD   A,(BC)   
042E   D6 61                  SUB   "a"   ; Calc index
0430   87                     ADD   A,A   
0431   21 C0 0B               LD   HL,VARS   
0434   5F                     LD   E,A   
0435   16 00                  LD   D,0   
0437   19                     ADD   HL,DE   
0438   E5                     PUSH   HL   
0439   FD E9                  JP   (IY)   
043B                FETCH_:      ; Fetch the value from the address placed on the top of the stack
043B   E1                     POP   HL   ; 10t
043C   5E                     LD   E,(HL)   ; 7t
043D   23                     INC   HL   ; 6t
043E   56                     LD   D,(HL)   ; 7t
043F   D5                     PUSH   DE   ; 11t
0440   FD E9                  JP   (IY)   ; 8t
0442                             ; 49t
0442                STORE_:      ; Store the value at the address placed on the top of the stack
0442   E1                     POP   HL   ; 10t
0443   D1                     POP   DE   ; 10t
0444   73                     LD   (HL),E   ; 7t
0445   23                     INC   HL   ; 6t
0446   72                     LD   (HL),D   ; 7t
0447   FD E9                  JP   (IY)   ; 8t
0449                             ; 48t
0449                DUP_:        
0449   E1                     POP   HL   ; Duplicate the top member of the stack
044A   E5                     PUSH   HL   
044B   E5                     PUSH   HL   
044C   FD E9                  JP   (IY)   
044E                             ; $ swap                    ; a b -- b a Swap the top 2 elements of the stack
044E                SWAP_:       
044E   E1                     POP   HL   
044F   E3                     EX   (SP),HL   
0450   E5                     PUSH   HL   
0451   FD E9                  JP   (IY)   
0453                OVER_:       
0453   E1                     POP   HL   ; Duplicate 2nd element of the stack
0454   D1                     POP   DE   
0455   D5                     PUSH   DE   
0456   E5                     PUSH   HL   
0457   D5                     PUSH   DE   ; And push it to top of stack
0458   FD E9                  JP   (IY)   
045A                DROP_:       ; Discard the top member of the stack
045A   E1                     POP   HL   
045B   FD E9                  JP   (IY)   
045D                AND_:        
045D   D1                     POP   DE   ; 10t Bitwise AND the top 2 elements of the stack
045E   E1                     POP   HL   ; 10t
045F   7B                     LD   A,E   ; 4t
0460   A5                     AND   L   ; 4t
0461   6F                     LD   L,A   ; 4t
0462   7A                     LD   A,D   ; 4t
0463   A4                     AND   H   ; 4t
0464   67                     LD   H,A   ; 4t
0465   E5                     PUSH   HL   ; 11t
0466   FD E9                  JP   (IY)   ; 8t
0468                             ; 63t
0468                OR_:         
0468   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
0469   E1                     POP   HL   
046A   7B                     LD   A,E   
046B   B5                     OR   L   
046C   6F                     LD   L,A   
046D   7A                     LD   A,D   
046E   B4                     OR   H   
046F   67                     LD   H,A   
0470   E5                     PUSH   HL   
0471   FD E9                  JP   (IY)   
0473                XOR_:        
0473   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0474                XOR1:        
0474   E1                     POP   HL   
0475   7B                     LD   A,E   
0476   AD                     XOR   L   
0477   6F                     LD   L,A   
0478   7A                     LD   A,D   
0479   AC                     XOR   H   
047A   67                     LD   H,A   
047B   E5                     PUSH   HL   
047C   FD E9                  JP   (IY)   
047E                INV_:        ; Bitwise INVert the top member of the stack
047E   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0481   18 F1                  JR   xor1   
0483                ADD_:        ; Add the top 2 members of the stack
0483   D1                     POP   DE   ; 10t
0484   E1                     POP   HL   ; 10t
0485   19                     ADD   HL,DE   ; 11t
0486   E5                     PUSH   HL   ; 11t
0487   FD E9                  JP   (IY)   ; 8t
0489                             ; 50t
0489                             ;  Left shift { is multply by 2		
0489                SHL_:        
0489   E1                     POP   HL   ; Duplicate the top member of the stack
048A   29                     ADD   HL,HL   
048B   E5                     PUSH   HL   ; shift left fallthrough into add_
048C   FD E9                  JP   (IY)   ; 8t
048E                             ;  Right shift } is a divide by 2		
048E                             ; 
048E                SHR_:        
048E   E1                     POP   HL   ; Get the top member of the stack
048F   CB 3C                  SRL   H   
0491   CB 1D                  RR   L   
0493   E5                     PUSH   HL   
0494   FD E9                  JP   (IY)   ; 8t
0496   21 00 00     NEG_:     LD   HL,0   ; NEGate the value on top of stack (2's complement)
0499   D1                     POP   DE   ; 10t
049A   18 02                  JR   SUB_2   ; use the SUBtract routine
049C                SUB_:        ; Subtract the value 2nd on stack from top of stack
049C   D1                     POP   DE   ; 10t
049D   E1           SUB_1:    POP   HL   ; 10t  Entry point for INVert
049E   A7           SUB_2:    AND   A   ;  4t  Entry point for NEGate
049F   ED 52                  SBC   HL,DE   ; 15t
04A1   E5                     PUSH   HL   ; 11t
04A2   FD E9                  JP   (IY)   ; 8t
04A4                             ; 58t
04A4   E1           EQ_:      POP   HL   
04A5   D1                     POP   DE   
04A6   A7                     AND   A   ; reset the carry flag
04A7   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04A9   28 16                  JR   Z,equal   
04AB   21 00 00               LD   HL,0   
04AE   18 12                  JR   less   ; HL = 1
04B0   D1           GT_:      POP   DE   
04B1   E1                     POP   HL   
04B2   18 02                  JR   cmp_   
04B4   E1           LT_:      POP   HL   
04B5   D1                     POP   DE   
04B6   A7           CMP_:     AND   A   ; reset the carry flag
04B7   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04B9   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04BB   21 00 00               LD   HL,0   
04BE   FA C2 04               JP   M,less   
04C1   2C           EQUAL:    INC   L   ; HL = 1
04C2                LESS:        
04C2   E5                     PUSH   HL   
04C3   FD E9                  JP   (IY)   
04C5   CD 72 07     HEX_:     CALL   get_hex   
04C8   18 F8                  JR   less   ; piggyback for ending
04CA                DOT_:        
04CA   E1                     POP   HL   
04CB   3A 16 0B               LD   A,(vBase16)   
04CE   B7                     OR   A   
04CF   28 05                  JR   Z,dot1   
04D1   CD 8E 07               CALL   printhex   
04D4   18 03                  JR   dot2   
04D6                DOT1:        
04D6   CD 8D 02               CALL   printdec   
04D9                DOT2:        
04D9   CD F5 07               CALL   space   
04DC   FD E9                  JP   (IY)   
04DE   C3 CD 05     STR_:     JP   str   
04E1   C3 DC 05     HEXP_:    JP   hexp   ; print hexadecimal
04E4   18 1A        QUERY_:   JR   query   
04E6   18 1A        DEL_:     JR   del   
04E8   18 1A        MUL_:     JR   mul   
04EA   18 32        DIV_:     JR   div   
04EC   C3 4B 07     DEF_:     JP   def   
04EF   18 50        BEGIN_:   JR   begin   
04F1   C3 95 05     AGAIN_:   JP   again   
04F4   C3 1D 07     ARRDEF_:   JP   arrDef   
04F7   C3 2F 07     ARREND_:   JP   arrEnd   
04FA   C3 6B 02     NOP_:     JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
04FD   C9           QUIT_:    RET      ; exit interpreter
04FE                             ;*******************************************************************
04FE                             ; Page 5 primitive routines
04FE                             ;*******************************************************************
04FE                          ALIGN   $100   
0500                QUERY:       
0500   FD E9                  JP   (IY)   
0502                DEL:         
0502   FD E9                  JP   (IY)   
0504                MUL:         ; 16-bit multiply
0504   D1                     POP   DE   ; get first value
0505   E1                     POP   HL   
0506   C5                     PUSH   BC   ; Preserve the IP
0507   44                     LD   B,H   ; BC = 2nd value
0508   4D                     LD   C,L   
0509   21 00 00               LD   HL,0   
050C   3E 10                  LD   A,16   
050E                MUL_LOOP_1:      
050E   29                     ADD   HL,HL   
050F   CB 13                  RL   E   
0511   CB 12                  RL   D   
0513   30 04                  JR   NC,$+6   
0515   09                     ADD   HL,BC   
0516   30 01                  JR   NC,$+3   
0518   13                     INC   DE   
0519   3D                     DEC   A   
051A   20 F2                  JR   NZ,Mul_Loop_1   
051C                             ; 
051C   18 1E                  JR   mul_end   
051E                             ; ********************************************************************
051E                             ; 16-bit division subroutine.
051E                             ; 
051E                             ; BC: divisor, DE: dividend, HL: remainder
051E                             ; *********************************************************************
051E                             ; This divides DE by BC, storing the result in DE, remainder in HL
051E                             ; *********************************************************************
051E                             ; 1382 cycles
051E                             ; 35 bytes (reduced from 48)
051E                             ; 
051E                DIV:         
051E   D1                     POP   DE   ; get first value
051F   E1                     POP   HL   ; get 2nd value
0520   C5                     PUSH   BC   ; Preserve the IP
0521   44                     LD   B,H   ; BC = 2nd value
0522   4D                     LD   C,L   
0523                             ; 
0523   21 00 00               LD   hl,0   ; Zero the remainder
0526   3E 10                  LD   a,16   ; Loop counter
0528                DIV_LOOP:      ;shift the bits from BC (numerator) into HL (accumulator)
0528   CB 21                  SLA   c   
052A   CB 10                  RL   b   
052C   ED 6A                  ADC   hl,hl   
052E   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (HL>=DE)
0530   38 03                  JR   c,div_adjust   
0532   0C                     INC   c   
0533   18 01                  JR   div_done   
0535                DIV_ADJUST:      ; remainder is not >= denominator, so we have to add DE back to HL
0535   19                     ADD   hl,de   
0536                DIV_DONE:      
0536   3D                     DEC   a   
0537   20 EF                  JR   nz,div_loop   
0539   50                     LD   D,B   ; Result from BC to DE
053A   59                     LD   E,C   
053B   EB                     EX   DE,HL   ; swap them over?
053C                             ; 
053C                MUL_END:      
053C                DIV_END:      
053C   C1                     POP   BC   ; Restore the IP
053D   D5                     PUSH   DE   ; Push Result
053E   E5                     PUSH   HL   ; Push remainder
053F   FD E9                  JP   (IY)   
0541                             ; *************************************
0541                             ; Loop Handling Code
0541                             ; *************************************
0541                             ; 
0541                BEGIN:       ; Left parentesis begins a loop
0541   21 1E 0B               LD   HL,vFlags   
0544   00                     RES   fELSE,(HL)   
0545   E1                     POP   HL   
0546   7D                     LD   A,L   ; zero?
0547   B4                     OR   H   
0548   28 1C                  JR   Z,begin1   
054A   2B                     DEC   HL   
054B   11 FA FF               LD   DE,-6   
054E   DD 19                  ADD   IX,DE   
0550   DD 36 00 00            LD   (IX+0),0   ; loop var
0554   DD 36 01 00            LD   (IX+1),0   
0558   DD 75 02               LD   (IX+2),L   ; loop limit
055B   DD 74 03               LD   (IX+3),H   
055E   DD 71 04               LD   (IX+4),C   ; loop address
0561   DD 70 05               LD   (IX+5),B   
0564   FD E9                  JP   (IY)   
0566                BEGIN1:      
0566   1E 01                  LD   E,1   
0568                BEGIN2:      
0568   03                     INC   BC   
0569   0A                     LD   A,(BC)   
056A   CD CA 07               CALL   nesting   
056D   AF                     XOR   A   
056E   B3                     OR   E   
056F   20 F7                  JR   NZ,begin2   
0571   FD E9                  JP   (IY)   
0573                             ; ********************************************************************************
0573                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
0573                             ; Read the first character.
0573                             ;			
0573                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
0573                             ; and then added into the L register. (HL forms a 16-bit accumulator)
0573                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
0573                             ; and then add in the next digit. Repeat this until a non-number character is
0573                             ; detected. Add in the final digit so that HL contains the converted number.
0573                             ; Push HL onto the stack and proceed to the dispatch routine.
0573                             ; ********************************************************************************
0573                             ; 
0573                NUMBER:      
0573   21 00 00               LD   HL,$0000   ; 10t Clear HL to accept the number
0576   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
0577                NUMBER1:      ; corrected KB 24/11/21
0577   D6 30                  SUB   $30   ; 7t    Form decimal digit
0579   85                     ADD   A,L   ; 4t    Add into bottom of HL
057A   6F                     LD   L,A   ; 4t
057B   3E 00                  LD   A,00   ; 4t    Clear A
057D   8C                     ADC   A,H   ; Add with carry H-reg
057E   67                     LD   H,A   ; Put result in H-reg
057F   03                     INC   BC   ; 6t    Increment IP
0580   0A                     LD   A,(BC)   ; 7t    and get the next character
0581   FE 30                  CP   $30   ; 7t    Less than $30
0583   38 0C                  JR   C,endnum   ; 7/12t Not a number / end of number
0585   FE 3A                  CP   $3A   ; 7t    Greater or equal to $3A
0587   30 08                  JR   NC,endnum   ; 7/12t Not a number / end of number
0589                TIMES10:      ; Multiply digit(s) in HL by 10
0589   29                     ADD   HL,HL   ; 11t    2X
058A   5D                     LD   E,L   ;  4t    LD DE,HL
058B   54                     LD   D,H   ;  4t
058C   29                     ADD   HL,HL   ; 11t    4X
058D   29                     ADD   HL,HL   ; 11t    8X
058E   19                     ADD   HL,DE   ; 11t    2X  + 8X  = 10X
058F                             ; 52t cycles
058F   18 E6                  JR   number1   
0591                ENDNUM:      
0591   E5                     PUSH   HL   ; 11t   Put the number on the stack
0592   0B                     DEC   BC   
0593   FD E9                  JP   (IY)   ; and process the next character
0595                AGAIN:       
0595   21 1E 0B               LD   HL,vFlags   
0598   00                     BIT   fELSE,(HL)   
0599   28 25                  JR   Z,again2   
059B   DD 5E 00               LD   E,(IX+0)   ; peek loop var
059E   DD 56 01               LD   D,(IX+1)   
05A1   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
05A4   DD 66 03               LD   H,(IX+3)   
05A7   B7                     OR   A   
05A8   ED 52                  SBC   HL,DE   
05AA   28 0F                  JR   Z,again1   
05AC   13                     INC   DE   
05AD   DD 73 00               LD   (IX+0),E   ; poke loop var
05B0   DD 72 01               LD   (IX+1),D   
05B3   DD 4E 04               LD   C,(IX+4)   ; peek loop address
05B6   DD 46 05               LD   B,(IX+5)   
05B9   FD E9                  JP   (IY)   
05BB                AGAIN1:      
05BB   11 06 00               LD   DE,6   ; drop loop frame
05BE   DD 19                  ADD   IX,DE   
05C0                AGAIN2:      
05C0   FD E9                  JP   (IY)   
05C2                ALT:         
05C2   03                     INC   BC   
05C3   0A                     LD   A,(BC)   
05C4   2A 1A 0B               LD   HL,(vAltCodes)   
05C7   85                     ADD   A,L   
05C8   6F                     LD   L,A   
05C9   6E                     LD   L,(HL)   ; 7t    get low jump address
05CA   26 06                  LD   H,msb(page5)   ; Load H with the 5th page address
05CC   E9                     JP   (HL)   ; 4t    Jump to routine
05CD                             ; **************************************************************************
05CD                             ; Print the string between the `backticks`
05CD                STR:         
05CD   03                     INC   BC   
05CE                NEXTCHAR:      
05CE   0A                     LD   A,(BC)   
05CF   03                     INC   BC   
05D0   FE 60                  CP   "`"   ; ` is the string terminator
05D2   28 05                  JR   Z,stringend   
05D4   CD 85 00               CALL   putchar   
05D7   18 F5                  JR   nextchar   
05D9                STRINGEND:      
05D9   0B                     DEC   BC   
05DA   FD E9                  JP   (IY)   
05DC                HEXP:        ; Print HL as a hexadecimal
05DC   E1                     POP   HL   
05DD   CD 8E 07               CALL   printhex   
05E0   CD F5 07               CALL   space   
05E3   FD E9                  JP   (IY)   
05E5                RPUSH:       
05E5   DD 2B                  DEC   IX   
05E7   DD 74 00               LD   (IX+0),H   
05EA   DD 2B                  DEC   IX   
05EC   DD 75 00               LD   (IX+0),L   
05EF   C9                     RET      
05F0                RPOP:        
05F0   DD 6E 00               LD   L,(IX+0)   
05F3   DD 23                  INC   IX   
05F5   DD 66 00               LD   H,(IX+0)   
05F8   DD 23                  INC   IX   
05FA   C9                     RET      
05FB                             ; **************************************************************************
05FB                             ; Page 6 Alt primitives
05FB                             ; **************************************************************************
05FB                          ALIGN   $100   
0600                PAGE5:       
0600                BASE16_:      
0600   21 16 0B               LD   HL,vBase16   
0603   E5                     PUSH   HL   
0604   FD E9                  JP   (IY)   
0606                CARRDEF_:      ; define a byte array
0606   3E 01                  LD   A,TRUE   
0608   C3 1F 07               JP   arrDef1   
060B                CFETCH_:      
060B   E1                     POP   HL   ; 10t
060C   5E                     LD   E,(HL)   ; 7t
060D   16 00                  LD   D,0   ; 7t
060F   D5                     PUSH   DE   ; 11t
0610   FD E9                  JP   (IY)   ; 8t
0612                             ; 49t
0612                CHARCODE_:      
0612   03                     INC   BC   
0613   0A                     LD   A,(BC)   
0614   26 00                  LD   H,0   
0616   6F                     LD   L,A   
0617   E5                     PUSH   HL   
0618   FD E9                  JP   (IY)   
061A                COMMENT_:      
061A                COMMENT:      
061A   03                     INC   BC   ; point to next char
061B   0A                     LD   A,(BC)   
061C   FE 0D                  CP   "\r"   ; terminate at newline
061E   20 FA                  JR   NZ,comment   
0620   0B                     DEC   BC   
0621   FD E9                  JP   (IY)   
0623                CSTORE_:      
0623   E1                     POP   HL   ; 10t
0624   D1                     POP   DE   ; 10t
0625   73                     LD   (HL),E   ; 7t
0626   FD E9                  JP   (IY)   ; 8t
0628                             ; 48t
0628                DEPTH_:      
0628   21 00 00               LD   HL,0   
062B   39                     ADD   HL,SP   
062C   EB                     EX   DE,HL   
062D   21 00 09               LD   HL,DSTACK   
0630   B7                     OR   A   
0631   ED 52                  SBC   HL,DE   
0633   CB 3C                  SRL   H   
0635   CB 1D                  RR   L   
0637   E5                     PUSH   HL   
0638   FD E9                  JP   (IY)   
063A                EMIT_:       
063A   E1                     POP   HL   
063B   7D                     LD   A,L   
063C   CD 85 00               CALL   putchar   
063F   FD E9                  JP   (IY)   
0641                ELSE_:       
0641   C3 02 07               JP   else   
0644                EXEC_:       
0644   CD 49 06               CALL   exec1   
0647   FD E9                  JP   (IY)   
0649                EXEC1:       
0649   E1                     POP   HL   
064A   E3                     EX   (SP),HL   
064B   E9                     JP   (HL)   
064C                GO_:         
064C   60 69                  LD   HL,BC   
064E   CD E5 05               CALL   rpush   ; save Instruction Pointer
0651   C1                     POP   BC   
0652   0B                     DEC   BC   
0653   FD E9                  JP   (IY)   ; Execute code from User def
0655                HEAPPTR_:      
0655   21 14 0B               LD   HL,vHeapPtr   
0658   E5                     PUSH   HL   
0659   FD E9                  JP   (IY)   
065B                I_:          
065B   DD E5                  PUSH   IX   
065D   FD E9                  JP   (IY)   
065F                             ; \+    a b -- [b]+a            ; increment variable at b by a
065F                INCR_:       
065F   E1                     POP   HL   
0660   D1                     POP   DE   
0661   7B                     LD   A,E   
0662   86                     ADD   A,(HL)   
0663   77                     LD   (HL),A   
0664   23                     INC   HL   
0665   7A                     LD   A,D   
0666   8E                     ADC   A,(HL)   
0667   77                     LD   (HL),A   
0668   FD E9                  JP   (IY)   
066A                             ; \-    a b -- [b]-a            ; decrement variable at b by a
066A                DECR_:       
066A   E1                     POP   HL   
066B   D1                     POP   DE   
066C   7E                     LD   A,(HL)   
066D   93                     SUB   E   
066E   77                     LD   (HL),A   
066F   23                     INC   HL   
0670   7E                     LD   A,(HL)   
0671   9A                     SBC   A,D   
0672   77                     LD   (HL),A   
0673   FD E9                  JP   (IY)   
0675                INPORT_:      
0675   E1                     POP   HL   
0676   4D                     LD   C,L   
0677   ED 68                  IN   L,(C)   
0679   26 00                  LD   H,0   
067B   E5                     PUSH   HL   
067C   FD E9                  JP   (IY)   
067E                J_:          
067E   DD E5                  PUSH   IX   
0680   E1                     POP   HL   
0681   11 06 00               LD   DE,6   
0684   19                     ADD   HL,DE   
0685   E5                     PUSH   HL   
0686   FD E9                  JP   (IY)   
0688                KEY_:        
0688   CD 81 00               CALL   getchar   
068B   6F                     LD   L,A   
068C   26 00                  LD   H,0   
068E   E5                     PUSH   HL   
068F   FD E9                  JP   (IY)   
0691                MIN_:        ; a b -- c
0691   D1                     POP   DE   
0692   E1                     POP   HL   
0693   E5                     PUSH   HL   
0694   B7                     OR   A   
0695   ED 52                  SBC   HL,DE   
0697   30 0C                  JR   NC,max1   
0699   FD E9                  JP   (IY)   
069B                MAX_:        ; a b -- c
069B   D1                     POP   DE   
069C   E1                     POP   HL   
069D   E5                     PUSH   HL   
069E   B7                     OR   A   
069F   ED 52                  SBC   HL,DE   
06A1   38 02                  JR   C,max1   
06A3   FD E9                  JP   (IY)   
06A5                MAX1:        
06A5   EB                     EX   DE,HL   
06A6   E3                     EX   (SP),HL   
06A7   FD E9                  JP   (IY)   
06A9                NEWLN_:      
06A9   CD EB 07               CALL   crlf   
06AC   FD E9                  JP   (IY)   
06AE                OUTPORT_:      
06AE   E1                     POP   HL   
06AF   4D                     LD   C,L   
06B0   E1                     POP   HL   
06B1   ED 69                  OUT   (C),L   
06B3   FD E9                  JP   (IY)   
06B5                SIGN_:       
06B5   E1                     POP   HL   
06B6   CB 7C                  BIT   7,H   
06B8   21 00 00               LD   HL,0   
06BB   28 01                  JR   Z,sign2   
06BD   23                     INC   HL   
06BE                SIGN2:       
06BE   E5                     PUSH   HL   
06BF   FD E9                  JP   (IY)   
06C1                TIBPTR_:      
06C1   21 18 0B               LD   HL,vTIBPtr   
06C4   E5                     PUSH   HL   
06C5   FD E9                  JP   (IY)   
06C7                DOTS_:       
06C7   C3 DC 06               JP   dots   
06CA                KNOWNVAR_:      
06CA   C3 0F 07               JP   knownVar   
06CD                WHILE_:      
06CD   E1                     POP   HL   
06CE   7D                     LD   A,L   ; zero?
06CF   B4                     OR   H   
06D0   28 02                  JR   Z,while1   
06D2   FD E9                  JP   (IY)   
06D4                WHILE1:      
06D4   11 06 00               LD   DE,6   ; drop loop frame
06D7   DD 19                  ADD   IX,DE   
06D9   C3 66 05               JP   begin1   ; skip to end of loop
06DC                             ; **************************************************************************
06DC                             ; Page 6 primitive routines
06DC                             ; **************************************************************************
06DC                DOTS:        
06DC   CD 84 02               CALL   ENTER   
06DF   5C 30 40 32 2D 5C 44 31 2D 5C 39 21 5C 39 40 5C 5F 30 3D 28 5C 39 40 28 22 40 2E 32 2D 29 29 27 00 DB   "\\0@2-\\D1-\\9!\\9@\\_0=(\\9@(",$22,"@.2-))'",0   
0700   FD E9                  JP   (IY)   
0702                ELSE:        
0702   21 1E 0B               LD   HL,vFlags   
0705   00                     SET   fELSE,(HL)   
0706   E1                     POP   HL   
0707   E5                     PUSH   HL   
0708   7D                     LD   A,L   ; zero?
0709   B4                     OR   H   
070A   C2 66 05               JP   NZ,begin1   
070D   FD E9                  JP   (IY)   
070F                             ; 
070F                KNOWNVAR:      
070F   0A                     LD   A,(BC)   
0710   D6 30                  SUB   "0"   ; Calc index
0712   6F                     LD   L,A   
0713   26 00                  LD   H,0   
0715   11 00 0B               LD   DE,knownVars   
0718                KNOWNVAR2:      
0718   29                     ADD   HL,HL   
0719   19                     ADD   HL,DE   
071A   E5                     PUSH   HL   
071B   FD E9                  JP   (IY)   
071D                             ;*******************************************************************
071D                             ; Page 5 primitive routines continued
071D                             ;*******************************************************************
071D                             ; define a word array
071D                ARRDEF:      
071D   3E 00                  LD   A,FALSE   
071F                ARRDEF1:      
071F   FD 21 B1 02            LD   IY,compNEXT   
0723   32 1C 0B               LD   (vByteMode),A   
0726   2A 14 0B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0729   CD E5 05               CALL   rpush   ; save start of array \[  \]
072C   C3 6B 02               JP   NEXT   ; hardwired to NEXT
072F                             ; end a word array
072F                ARREND:      
072F   CD F0 05               CALL   rpop   ; DE = start of array
0732   E5                     PUSH   HL   
0733   EB                     EX   DE,HL   
0734   2A 14 0B               LD   HL,(vHeapPtr)   ; HL = heap ptr
0737   B7                     OR   A   
0738   ED 52                  SBC   HL,DE   ; bytes on heap
073A   3A 1C 0B               LD   A,(vByteMode)   
073D   B7                     OR   A   
073E   20 04                  JR   NZ,arrEnd2   
0740   CB 3C                  SRL   H   ; BC = m words
0742   CB 1D                  RR   L   
0744                ARREND2:      
0744   E5                     PUSH   HL   
0745   FD 21 6B 02            LD   IY,NEXT   
0749   FD E9                  JP   (IY)   ; hardwired to NEXT
074B                             ; **************************************************************************
074B                             ; def is used to create a colon definition
074B                             ; When a colon is detected, the next character (usually uppercase alpha)
074B                             ; is looked up in the vector table to get its associated code field address
074B                             ; This CFA is updated to point to the character after uppercase alpha
074B                             ; The remainder of the characters are then skipped until after a semicolon
074B                             ; is found.
074B                             ; ***************************************************************************
074B                DEF:         ; Create a colon definition
074B   E5                     PUSH   HL   ; Save HL
074C   21 F4 0B               LD   HL,DEFS   ; Start address of jump table
074F   03                     INC   BC   
0750   0A                     LD   A,(BC)   ; Get the next character
0751   03                     INC   BC   
0752   D6 41                  SUB   "A"   ; Calc index
0754                DEF1:        
0754   87                     ADD   A,A   ; Double A to index even addresses
0755   5F                     LD   E,A   ; Index into table
0756   16 00                  LD   D,0   
0758   19                     ADD   HL,DE   
0759   ED 5B 14 0B            LD   DE,(vHeapPtr)   ; start of defintion
075D   73                     LD   (HL),E   ; Save low byte of address in CFA
075E   23                     INC   HL   
075F   72                     LD   (HL),D   ; Save high byte of address in CFA+1
0760   E1                     POP   HL   ; Restore HL
0761                NEXTBYTE:      ; Skip to end of definition
0761   0A                     LD   A,(BC)   ; Get the next character
0762   03                     INC   BC   ; Point to next character
0763   12                     LD   (DE),A   
0764   13                     INC   DE   
0765   FE 3B                  CP   ";"   ; Is it a semicolon
0767   28 02                  JR   z,end_def   ; end the definition
0769   18 F6                  JR   nextbyte   ; get the next element
076B                END_DEF:      
076B   ED 53 14 0B            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
076F   0B                     DEC   BC   
0770   FD E9                  JP   (IY)   
0772                GET_HEX:      
0772   21 00 00               LD   HL,$0000   ; 10t Clear HL to accept the number
0775   03                     INC   BC   
0776   0A                     LD   A,(BC)   ; 7t  Get the character which is a numeral
0777                GET_HEX1:      
0777   CB 77                  BIT   6,A   ; 7t    is it uppercase alpha?
0779   28 02                  JR   Z,ASCHX1   ; no a decimal
077B   D6 07                  SUB   7   ; sub 7  to make $A - $F
077D                ASCHX1:      
077D   D6 30                  SUB   $30   ; 7t    Form decimal digit
077F   85                     ADD   A,L   ; 4t    Add into bottom of HL
0780   6F                     LD   L,A   ; 4t
0781                             ;        LD A,00                 ; 4t    Clear A
0781                             ;        ADC	A,H	                ; Add with carry H-reg
0781                             ;	     LD	H,A	                ; Put result in H-reg
0781   03                     INC   BC   ; 6t    Increment IP
0782   0A                     LD   A,(BC)   ; 7t    and get the next character
0783   FE 20                  CP   $20   ; 7t    is a terminating space?
0785   28 06                  JR   Z,endhex   ; 7/12t Not a number / end of number
0787                TIMES16:      ; Multiply digit(s) in HL by 16
0787   29                     ADD   HL,HL   ; 11t    2X
0788   29                     ADD   HL,HL   ; 11t    4X
0789   29                     ADD   HL,HL   ; 11t    8X
078A   29                     ADD   HL,HL   ; 11t   16X
078B   18 EA                  JR   get_hex1   
078D   C9           ENDHEX:   RET      
078E                PRINTHEX:      
078E                             ; Display HL as a 16-bit number in hex.
078E   C5                     PUSH   BC   ; preserve the IP
078F   7C                     LD   A,H   
0790   CD 99 07               CALL   Print_Hex8   
0793   7D                     LD   A,L   
0794   CD 99 07               CALL   Print_Hex8   
0797   C1                     POP   BC   
0798   C9                     RET      
0799                             ; Print an 8-bit HEX number  - shortened KB 25/11/21
0799                             ; A: Number to print
0799                             ; 
0799                PRINT_HEX8:      
0799   4F                     LD   C,A   
079A   1F                     RRA      
079B   1F                     RRA      
079C   1F                     RRA      
079D   1F                     RRA      
079E   CD A2 07               CALL   conv   
07A1   79                     LD   A,C   
07A2                CONV:        
07A2   E6 0F                  AND   0x0F   
07A4   C6 90                  ADD   A,0x90   
07A6   27                     DAA      
07A7   CE 40                  ADC   A,0x40   
07A9   27                     DAA      
07AA   CD 85 00               CALL   putchar   
07AD   C9                     RET      
07AE                MACRO:       
07AE   ED 43 18 0B            LD   (vTIBPtr),BC   
07B2   21 60 03               LD   HL,ctrlCodes   
07B5   16 00                  LD   D,0   
07B7   5F                     LD   E,A   
07B8   19                     ADD   HL,DE   
07B9   5E                     LD   E,(HL)   
07BA   16 01                  LD   D,msb(macros)   
07BC   D5                     PUSH   DE   
07BD   CD 84 02               CALL   ENTER   
07C0   5C 47 00               .CSTR   "\\G"   
07C3   ED 4B 18 0B            LD   BC,(vTIBPtr)   
07C7   C3 1D 02               JP   interpret2   
07CA                             ; calculate nesting value
07CA                             ; A is char to be tested,
07CA                             ; E is the nesting value (initially 0)
07CA                             ; E is increased by ( and [
07CA                             ; E is decreased by ) and ]
07CA                             ; E has its bit 7 toggled by `
07CA                             ; limited to 127 levels
07CA                NESTING:      
07CA   FE 60                  CP   "`"   
07CC   20 0A                  JR   NZ,nesting1   
07CE   CB 7B                  BIT   7,E   
07D0   28 03                  JR   Z,nesting1a   
07D2   CB BB                  RES   7,E   
07D4   C9                     RET      
07D5                NESTING1A:      
07D5   CB FB                  SET   7,E   
07D7   C9                     RET      
07D8                NESTING1:      
07D8   FE 5B                  CP   "["   
07DA   28 04                  JR   Z,nesting2   
07DC   FE 28                  CP   "("   
07DE   20 02                  JR   NZ,nesting3   
07E0                NESTING2:      
07E0   1C                     INC   E   
07E1   C9                     RET      
07E2                NESTING3:      
07E2   FE 5D                  CP   "]"   
07E4   28 03                  JR   Z,nesting4   
07E6   FE 29                  CP   ")"   
07E8   C0                     RET   NZ   
07E9                NESTING4:      
07E9   1D                     DEC   E   
07EA   C9                     RET      
07EB                CRLF:        
07EB   3E 0D                  LD   A,"\r"   
07ED   CD 85 00               CALL   putchar   
07F0   3E 0A                  LD   A,"\n"   
07F2   C3 85 00               JP   putchar   
07F5                SPACE:       
07F5   3E 20                  LD   A," "   
07F7   C3 85 00               JP   putchar   
07FA                             ; ; *********************************************************************
07FA                             ; ; * extended or non-core routines
07FA                             ; ; *********************************************************************
07FA                             ; aDef_:
07FA                             ;         PUSH HL             ; Save HL
07FA                             ;         LD HL, MACROS       ; Start address of jump table
07FA                             ;         INC BC
07FA                             ;         LD  A,(BC)          ; Get the next character
07FA                             ;         INC BC
07FA                             ;         SUB "@"             ; Calc index
07FA                             ;         JP def1
07FA                             ; 
07FA                             ; strDef:
07FA                             ;         INC BC                  ; point to next char
07FA                             ;         PUSH BC                 ; push string address
07FA                             ;         LD DE,0                 ; count = 0
07FA                             ;         JR strDef2
07FA                             ; strDef1:
07FA                             ;         INC BC                  ; point to next char
07FA                             ;         INC DE                  ; increase count
07FA                             ; strDef2:
07FA                             ;         LD A,(BC)
07FA                             ;         CP "`"                  ; ` is the string terminator
07FA                             ;         JR NZ,strDef1
07FA                             ;         PUSH DE                 ; push count
07FA                             ;         JP   (IY)
07FA                             ; type:
07FA                             ;         call ENTER
07FA                             ;         .cstr "(",$22,"\\@\\E1+)"
07FA                             ;         JP (IY)
07FA                             ; userVar:
07FA                             ;         LD DE,userVars
07FA                             ;         POP HL
07FA                             ;         JP knownVar2
07FA                             ;         JP      (IY)
0800                          .ORG   RAMSTART   
0800                          DS   DSIZE   
0900                STACK:       
0900                DSTACK:      
0900                          DS   RSIZE   
0A00                RSTACK:      
0A00                TIB:         
0A00                          DS   TIBSIZE   
0B00                             ; ****************************************************************
0B00                             ; USER variables
0B00                             ; ****************************************************************
0B00                USERVARS:      
0B00                KNOWNVARS:      
0B00   00 00        CS0:      DW   0   ; 0     \00
0B02   00 00        CTIB:     DW   0   ; 1     \01
0B04   00 00        CDEFS:    DW   0   ; 2     \02
0B06   00 00        CVARS:    DW   0   ; 3     \03
0B08   00 00        CUSERVARS:   DW   0   ; 4     \04
0B0A   00 00                  DW   0   ; 5     \05
0B0C   00 00                  DW   0   ; 6     \06
0B0E   00 00                  DW   0   ; 7     \07
0B10   00 00                  DW   0   ; 8     \08
0B12   00 00        VTEMP:    DW   0   ; 9     \09
0B14   00 00        VHEAPPTR:   DW   0   ; 10
0B16   00 00        VBASE16:   DW   0   ; 11
0B18   00 00        VTIBPTR:   DW   0   ; 12
0B1A   00 00        VALTCODES:   DW   0   ; 13
0B1C   00 00        VBYTEMODE:   DW   0   ; 14
0B1E   00 00        VFLAGS:   DW   0   ; 15
0B20   00 00        GETCVEC:   DW   0   ; 16
0B22   00 00        PUTCVEC:   DW   0   ; 17
0B24   00 00        INTVEC:   DW   0   ; 18
0B26   00 00        NMIVEC:   DW   0   ; 19
0B28   00 00        BAUD:     DW   0   ; 20
0B2A   00 00        RST08:    DW   0   ; 21
0B2C   00 00        RST10:    DW   0   ; 22
0B2E   00 00        RST18:    DW   0   ; 23
0B30   00 00        RST20:    DW   0   ; 24
0B32   00 00        RST28:    DW   0   ; 25
0B34   00 00        RST30:    DW   0   ; 26
0B36   00 00                  DW   0   ; 27
0B38   00 00                  DW   0   ; 28
0B3A   00 00                  DW   0   ; 29
0B3C   00 00                  DW   0   ; 30
0B3E   00 00                  DW   0   ; 31
0B40                BUF:      DS   $80   
0BC0                             ; ****************************************************************
0BC0                             ; VARS Table - holds 26 16-bit user variables
0BC0                             ; ****************************************************************
0BC0                VARS:     DS   26 * 2   
0BF4                             ; ****************************************************************
0BF4                             ; DEFS Table - holds 26 addresses of user routines
0BF4                             ; ****************************************************************
0BF4                DEFS:     DS   26 * 2   
0C28   00 00        TBPTR:    DW   0   ; reserved for tests
0C2A                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 18 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 19 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 21 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 162 IN MINT.asm
RAMSTART:           0800 DEFINED AT LINE 22 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 23 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 24 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 647 IN IOSerial.asm
                    > USED AT LINE 669 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 646 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 668 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 652 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 628 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 640 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 638 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 616 IN IOSerial.asm
                    > USED AT LINE 230 IN MINT.asm
                    > USED AT LINE 1222 IN MINT.asm
PUTCHAR:            0085 DEFINED AT LINE 620 IN IOSerial.asm
                    > USED AT LINE 245 IN MINT.asm
                    > USED AT LINE 338 IN MINT.asm
                    > USED AT LINE 1061 IN MINT.asm
                    > USED AT LINE 1149 IN MINT.asm
                    > USED AT LINE 1454 IN MINT.asm
                    > USED AT LINE 1508 IN MINT.asm
                    > USED AT LINE 1510 IN MINT.asm
                    > USED AT LINE 1514 IN MINT.asm
RESET:              008B DEFINED AT LINE 626 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0100 DEFINED AT LINE 149 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
RSIZE:              0100 DEFINED AT LINE 150 IN MINT.asm
                    > USED AT LINE 7 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 151 IN MINT.asm
                    > USED AT LINE 11 IN ram.asm
TRUE:               0001 DEFINED AT LINE 152 IN MINT.asm
                    > USED AT LINE 1100 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 153 IN MINT.asm
                    > USED AT LINE 604 IN MINT.asm
                    > USED AT LINE 1327 IN MINT.asm
MACROS:             0180 DEFINED AT LINE 168 IN MINT.asm
EMPTY_:             0180 DEFINED AT LINE 1 IN MINT.asm
ESCAPE_:            0182 DEFINED AT LINE 4 IN MINT.asm
BACKSP_:            019B DEFINED AT LINE 8 IN MINT.asm
TOGGLEBASE_:        01B4 DEFINED AT LINE 11 IN MINT.asm
PRINTSTACK_:        01BE DEFINED AT LINE 14 IN MINT.asm
VIEWDEFS_:          01CF DEFINED AT LINE 20 IN MINT.asm
START:              01D1 DEFINED AT LINE 172 IN MINT.asm
                    > USED AT LINE 6
MINT:               01D1 DEFINED AT LINE 173 IN MINT.asm
INITIALIZE:         01EB DEFINED AT LINE 180 IN MINT.asm
                    > USED AT LINE 175 IN MINT.asm
INIT1:              0203 DEFINED AT LINE 189 IN MINT.asm
                    > USED AT LINE 194 IN MINT.asm
INTERPRET:          020C DEFINED AT LINE 197 IN MINT.asm
                    > USED AT LINE 178 IN MINT.asm
                    > USED AT LINE 297 IN MINT.asm
INTERPRET1:         0216 DEFINED AT LINE 201 IN MINT.asm
INTERPRET2:         021D DEFINED AT LINE 205 IN MINT.asm
                    > USED AT LINE 1469 IN MINT.asm
INTERPRET3:         0225 DEFINED AT LINE 212 IN MINT.asm
                    > USED AT LINE 221 IN MINT.asm
INTERPRET4:         022B DEFINED AT LINE 218 IN MINT.asm
                    > USED AT LINE 210 IN MINT.asm
WAITCHAR:           0230 DEFINED AT LINE 229 IN MINT.asm
                    > USED AT LINE 247 IN MINT.asm
                    > USED AT LINE 257 IN MINT.asm
WAITCHAR1:          0244 DEFINED AT LINE 240 IN MINT.asm
                    > USED AT LINE 232 IN MINT.asm
WAITCHAR3:          0252 DEFINED AT LINE 249 IN MINT.asm
                    > USED AT LINE 236 IN MINT.asm
WAITCHAR4:          0263 DEFINED AT LINE 261 IN MINT.asm
                    > USED AT LINE 234 IN MINT.asm
NEXT:               026B DEFINED AT LINE 289 IN MINT.asm
                    > USED AT LINE 182 IN MINT.asm
                    > USED AT LINE 299 IN MINT.asm
                    > USED AT LINE 353 IN MINT.asm
                    > USED AT LINE 840 IN MINT.asm
                    > USED AT LINE 1333 IN MINT.asm
                    > USED AT LINE 1350 IN MINT.asm
DISPATCH:           026D DEFINED AT LINE 293 IN MINT.asm
ENTER:              0284 DEFINED AT LINE 307 IN MINT.asm
                    > USED AT LINE 176 IN MINT.asm
                    > USED AT LINE 198 IN MINT.asm
                    > USED AT LINE 1295 IN MINT.asm
                    > USED AT LINE 1466 IN MINT.asm
PRINTDEC:           028D DEFINED AT LINE 314 IN MINT.asm
                    > USED AT LINE 824 IN MINT.asm
DISPHL:             028D DEFINED AT LINE 321 IN MINT.asm
NUM1:               02A6 DEFINED AT LINE 331 IN MINT.asm
                    > USED AT LINE 323 IN MINT.asm
                    > USED AT LINE 325 IN MINT.asm
                    > USED AT LINE 327 IN MINT.asm
                    > USED AT LINE 329 IN MINT.asm
NUM2:               02A8 DEFINED AT LINE 333 IN MINT.asm
                    > USED AT LINE 336 IN MINT.asm
COMPNEXT:           02B1 DEFINED AT LINE 341 IN MINT.asm
                    > USED AT LINE 1329 IN MINT.asm
COMPNEXT1:          02BF DEFINED AT LINE 351 IN MINT.asm
                    > USED AT LINE 348 IN MINT.asm
OPCODES:            0300 DEFINED AT LINE 359 IN MINT.asm
                    > USED AT LINE 300 IN MINT.asm
CTRLCODES:          0360 DEFINED AT LINE 460 IN MINT.asm
                    > USED AT LINE 1459 IN MINT.asm
ALTCODES:           0360 DEFINED AT LINE 461 IN MINT.asm
                    > USED AT LINE 606 IN MINT.asm
IUSERVARS:          03E0 DEFINED AT LINE 591 IN MINT.asm
                    > USED AT LINE 183 IN MINT.asm
PAGE1:              0400 DEFINED AT LINE 615 IN MINT.asm
ALT_:               0400 DEFINED AT LINE 617 IN MINT.asm
EXIT_:              0403 DEFINED AT LINE 619 IN MINT.asm
                    > USED AT LINE 295 IN MINT.asm
NUM_:               040D DEFINED AT LINE 627 IN MINT.asm
CALL_:              0410 DEFINED AT LINE 630 IN MINT.asm
RET_:               0426 DEFINED AT LINE 646 IN MINT.asm
VAR_:               042D DEFINED AT LINE 651 IN MINT.asm
FETCH_:             043B DEFINED AT LINE 662 IN MINT.asm
STORE_:             0442 DEFINED AT LINE 671 IN MINT.asm
DUP_:               0449 DEFINED AT LINE 680 IN MINT.asm
SWAP_:              044E DEFINED AT LINE 687 IN MINT.asm
OVER_:              0453 DEFINED AT LINE 693 IN MINT.asm
DROP_:              045A DEFINED AT LINE 701 IN MINT.asm
AND_:               045D DEFINED AT LINE 705 IN MINT.asm
OR_:                0468 DEFINED AT LINE 720 IN MINT.asm
XOR_:               0473 DEFINED AT LINE 733 IN MINT.asm
XOR1:               0474 DEFINED AT LINE 735 IN MINT.asm
                    > USED AT LINE 748 IN MINT.asm
INV_:               047E DEFINED AT LINE 746 IN MINT.asm
ADD_:               0483 DEFINED AT LINE 750 IN MINT.asm
SHL_:               0489 DEFINED AT LINE 759 IN MINT.asm
SHR_:               048E DEFINED AT LINE 768 IN MINT.asm
NEG_:               0496 DEFINED AT LINE 775 IN MINT.asm
SUB_:               049C DEFINED AT LINE 779 IN MINT.asm
SUB_1:              049D DEFINED AT LINE 782 IN MINT.asm
SUB_2:              049E DEFINED AT LINE 783 IN MINT.asm
                    > USED AT LINE 777 IN MINT.asm
EQ_:                04A4 DEFINED AT LINE 788 IN MINT.asm
GT_:                04B0 DEFINED AT LINE 797 IN MINT.asm
LT_:                04B4 DEFINED AT LINE 801 IN MINT.asm
CMP_:               04B6 DEFINED AT LINE 803 IN MINT.asm
                    > USED AT LINE 799 IN MINT.asm
EQUAL:              04C1 DEFINED AT LINE 808 IN MINT.asm
                    > USED AT LINE 792 IN MINT.asm
LESS:               04C2 DEFINED AT LINE 809 IN MINT.asm
                    > USED AT LINE 794 IN MINT.asm
                    > USED AT LINE 805 IN MINT.asm
                    > USED AT LINE 807 IN MINT.asm
                    > USED AT LINE 814 IN MINT.asm
HEX_:               04C5 DEFINED AT LINE 813 IN MINT.asm
DOT_:               04CA DEFINED AT LINE 816 IN MINT.asm
DOT1:               04D6 DEFINED AT LINE 823 IN MINT.asm
                    > USED AT LINE 820 IN MINT.asm
DOT2:               04D9 DEFINED AT LINE 825 IN MINT.asm
                    > USED AT LINE 822 IN MINT.asm
STR_:               04DE DEFINED AT LINE 829 IN MINT.asm
HEXP_:              04E1 DEFINED AT LINE 830 IN MINT.asm
QUERY_:             04E4 DEFINED AT LINE 831 IN MINT.asm
DEL_:               04E6 DEFINED AT LINE 832 IN MINT.asm
MUL_:               04E8 DEFINED AT LINE 833 IN MINT.asm
DIV_:               04EA DEFINED AT LINE 834 IN MINT.asm
DEF_:               04EC DEFINED AT LINE 835 IN MINT.asm
BEGIN_:             04EF DEFINED AT LINE 836 IN MINT.asm
AGAIN_:             04F1 DEFINED AT LINE 837 IN MINT.asm
ARRDEF_:            04F4 DEFINED AT LINE 838 IN MINT.asm
ARREND_:            04F7 DEFINED AT LINE 839 IN MINT.asm
NOP_:               04FA DEFINED AT LINE 840 IN MINT.asm
QUIT_:              04FD DEFINED AT LINE 841 IN MINT.asm
QUERY:              0500 DEFINED AT LINE 848 IN MINT.asm
                    > USED AT LINE 831 IN MINT.asm
DEL:                0502 DEFINED AT LINE 851 IN MINT.asm
                    > USED AT LINE 832 IN MINT.asm
MUL:                0504 DEFINED AT LINE 854 IN MINT.asm
                    > USED AT LINE 833 IN MINT.asm
MUL_LOOP_1:         050E DEFINED AT LINE 864 IN MINT.asm
                    > USED AT LINE 873 IN MINT.asm
DIV:                051E DEFINED AT LINE 890 IN MINT.asm
                    > USED AT LINE 834 IN MINT.asm
DIV_LOOP:           0528 DEFINED AT LINE 901 IN MINT.asm
                    > USED AT LINE 916 IN MINT.asm
DIV_ADJUST:         0535 DEFINED AT LINE 911 IN MINT.asm
                    > USED AT LINE 907 IN MINT.asm
DIV_DONE:           0536 DEFINED AT LINE 914 IN MINT.asm
                    > USED AT LINE 909 IN MINT.asm
MUL_END:            053C DEFINED AT LINE 923 IN MINT.asm
                    > USED AT LINE 875 IN MINT.asm
DIV_END:            053C DEFINED AT LINE 924 IN MINT.asm
BEGIN:              0541 DEFINED AT LINE 937 IN MINT.asm
                    > USED AT LINE 836 IN MINT.asm
BEGIN1:             0566 DEFINED AT LINE 957 IN MINT.asm
                    > USED AT LINE 944 IN MINT.asm
                    > USED AT LINE 1288 IN MINT.asm
                    > USED AT LINE 1306 IN MINT.asm
BEGIN2:             0568 DEFINED AT LINE 959 IN MINT.asm
                    > USED AT LINE 965 IN MINT.asm
NUMBER:             0573 DEFINED AT LINE 981 IN MINT.asm
                    > USED AT LINE 628 IN MINT.asm
NUMBER1:            0577 DEFINED AT LINE 985 IN MINT.asm
                    > USED AT LINE 1010 IN MINT.asm
TIMES10:            0589 DEFINED AT LINE 1001 IN MINT.asm
ENDNUM:             0591 DEFINED AT LINE 1012 IN MINT.asm
                    > USED AT LINE 997 IN MINT.asm
                    > USED AT LINE 999 IN MINT.asm
AGAIN:              0595 DEFINED AT LINE 1017 IN MINT.asm
                    > USED AT LINE 837 IN MINT.asm
AGAIN1:             05BB DEFINED AT LINE 1034 IN MINT.asm
                    > USED AT LINE 1027 IN MINT.asm
AGAIN2:             05C0 DEFINED AT LINE 1037 IN MINT.asm
                    > USED AT LINE 1020 IN MINT.asm
ALT:                05C2 DEFINED AT LINE 1040 IN MINT.asm
                    > USED AT LINE 618 IN MINT.asm
STR:                05CD DEFINED AT LINE 1053 IN MINT.asm
                    > USED AT LINE 829 IN MINT.asm
NEXTCHAR:           05CE DEFINED AT LINE 1056 IN MINT.asm
                    > USED AT LINE 1062 IN MINT.asm
STRINGEND:          05D9 DEFINED AT LINE 1064 IN MINT.asm
                    > USED AT LINE 1060 IN MINT.asm
HEXP:               05DC DEFINED AT LINE 1068 IN MINT.asm
                    > USED AT LINE 830 IN MINT.asm
RPUSH:              05E5 DEFINED AT LINE 1074 IN MINT.asm
                    > USED AT LINE 309 IN MINT.asm
                    > USED AT LINE 632 IN MINT.asm
                    > USED AT LINE 1164 IN MINT.asm
                    > USED AT LINE 1332 IN MINT.asm
RPOP:               05F0 DEFINED AT LINE 1081 IN MINT.asm
                    > USED AT LINE 622 IN MINT.asm
                    > USED AT LINE 647 IN MINT.asm
                    > USED AT LINE 1337 IN MINT.asm
PAGE5:              0600 DEFINED AT LINE 1092 IN MINT.asm
BASE16_:            0600 DEFINED AT LINE 1094 IN MINT.asm
CARRDEF_:           0606 DEFINED AT LINE 1099 IN MINT.asm
CFETCH_:            060B DEFINED AT LINE 1103 IN MINT.asm
CHARCODE_:          0612 DEFINED AT LINE 1110 IN MINT.asm
COMMENT_:           061A DEFINED AT LINE 1118 IN MINT.asm
COMMENT:            061A DEFINED AT LINE 1119 IN MINT.asm
                    > USED AT LINE 1123 IN MINT.asm
CSTORE_:            0623 DEFINED AT LINE 1127 IN MINT.asm
DEPTH_:             0628 DEFINED AT LINE 1134 IN MINT.asm
EMIT_:              063A DEFINED AT LINE 1146 IN MINT.asm
ELSE_:              0641 DEFINED AT LINE 1152 IN MINT.asm
EXEC_:              0644 DEFINED AT LINE 1154 IN MINT.asm
EXEC1:              0649 DEFINED AT LINE 1157 IN MINT.asm
                    > USED AT LINE 1155 IN MINT.asm
GO_:                064C DEFINED AT LINE 1162 IN MINT.asm
HEAPPTR_:           0655 DEFINED AT LINE 1169 IN MINT.asm
I_:                 065B DEFINED AT LINE 1174 IN MINT.asm
INCR_:              065F DEFINED AT LINE 1179 IN MINT.asm
DECR_:              066A DEFINED AT LINE 1192 IN MINT.asm
INPORT_:            0675 DEFINED AT LINE 1205 IN MINT.asm
J_:                 067E DEFINED AT LINE 1213 IN MINT.asm
KEY_:               0688 DEFINED AT LINE 1221 IN MINT.asm
MIN_:               0691 DEFINED AT LINE 1228 IN MINT.asm
MAX_:               069B DEFINED AT LINE 1237 IN MINT.asm
MAX1:               06A5 DEFINED AT LINE 1245 IN MINT.asm
                    > USED AT LINE 1234 IN MINT.asm
                    > USED AT LINE 1243 IN MINT.asm
NEWLN_:             06A9 DEFINED AT LINE 1250 IN MINT.asm
OUTPORT_:           06AE DEFINED AT LINE 1254 IN MINT.asm
SIGN_:              06B5 DEFINED AT LINE 1261 IN MINT.asm
SIGN2:              06BE DEFINED AT LINE 1267 IN MINT.asm
                    > USED AT LINE 1265 IN MINT.asm
TIBPTR_:            06C1 DEFINED AT LINE 1271 IN MINT.asm
DOTS_:              06C7 DEFINED AT LINE 1275 IN MINT.asm
KNOWNVAR_:          06CA DEFINED AT LINE 1277 IN MINT.asm
WHILE_:             06CD DEFINED AT LINE 1279 IN MINT.asm
WHILE1:             06D4 DEFINED AT LINE 1285 IN MINT.asm
                    > USED AT LINE 1283 IN MINT.asm
DOTS:               06DC DEFINED AT LINE 1294 IN MINT.asm
                    > USED AT LINE 1276 IN MINT.asm
ELSE:               0702 DEFINED AT LINE 1299 IN MINT.asm
                    > USED AT LINE 1153 IN MINT.asm
KNOWNVAR:           070F DEFINED AT LINE 1309 IN MINT.asm
                    > USED AT LINE 1278 IN MINT.asm
KNOWNVAR2:          0718 DEFINED AT LINE 1315 IN MINT.asm
ARRDEF:             071D DEFINED AT LINE 1326 IN MINT.asm
                    > USED AT LINE 838 IN MINT.asm
ARRDEF1:            071F DEFINED AT LINE 1328 IN MINT.asm
                    > USED AT LINE 1101 IN MINT.asm
ARREND:             072F DEFINED AT LINE 1336 IN MINT.asm
                    > USED AT LINE 839 IN MINT.asm
ARREND2:            0744 DEFINED AT LINE 1348 IN MINT.asm
                    > USED AT LINE 1345 IN MINT.asm
DEF:                074B DEFINED AT LINE 1362 IN MINT.asm
                    > USED AT LINE 835 IN MINT.asm
DEF1:               0754 DEFINED AT LINE 1369 IN MINT.asm
NEXTBYTE:           0761 DEFINED AT LINE 1379 IN MINT.asm
                    > USED AT LINE 1386 IN MINT.asm
END_DEF:            076B DEFINED AT LINE 1388 IN MINT.asm
                    > USED AT LINE 1385 IN MINT.asm
GET_HEX:            0772 DEFINED AT LINE 1393 IN MINT.asm
                    > USED AT LINE 813 IN MINT.asm
GET_HEX1:           0777 DEFINED AT LINE 1398 IN MINT.asm
                    > USED AT LINE 1421 IN MINT.asm
ASCHX1:             077D DEFINED AT LINE 1402 IN MINT.asm
                    > USED AT LINE 1400 IN MINT.asm
TIMES16:            0787 DEFINED AT LINE 1415 IN MINT.asm
ENDHEX:             078D DEFINED AT LINE 1423 IN MINT.asm
                    > USED AT LINE 1413 IN MINT.asm
PRINTHEX:           078E DEFINED AT LINE 1425 IN MINT.asm
                    > USED AT LINE 821 IN MINT.asm
                    > USED AT LINE 1070 IN MINT.asm
PRINT_HEX8:         0799 DEFINED AT LINE 1439 IN MINT.asm
                    > USED AT LINE 1430 IN MINT.asm
                    > USED AT LINE 1432 IN MINT.asm
CONV:               07A2 DEFINED AT LINE 1448 IN MINT.asm
                    > USED AT LINE 1445 IN MINT.asm
MACRO:              07AE DEFINED AT LINE 1457 IN MINT.asm
                    > USED AT LINE 238 IN MINT.asm
NESTING:            07CA DEFINED AT LINE 1479 IN MINT.asm
                    > USED AT LINE 216 IN MINT.asm
                    > USED AT LINE 246 IN MINT.asm
                    > USED AT LINE 962 IN MINT.asm
NESTING1A:          07D5 DEFINED AT LINE 1486 IN MINT.asm
                    > USED AT LINE 1483 IN MINT.asm
NESTING1:           07D8 DEFINED AT LINE 1489 IN MINT.asm
                    > USED AT LINE 1481 IN MINT.asm
NESTING2:           07E0 DEFINED AT LINE 1494 IN MINT.asm
                    > USED AT LINE 1491 IN MINT.asm
NESTING3:           07E2 DEFINED AT LINE 1497 IN MINT.asm
                    > USED AT LINE 1493 IN MINT.asm
NESTING4:           07E9 DEFINED AT LINE 1502 IN MINT.asm
                    > USED AT LINE 1499 IN MINT.asm
CRLF:               07EB DEFINED AT LINE 1506 IN MINT.asm
                    > USED AT LINE 254 IN MINT.asm
                    > USED AT LINE 1251 IN MINT.asm
SPACE:              07F5 DEFINED AT LINE 1512 IN MINT.asm
                    > USED AT LINE 826 IN MINT.asm
                    > USED AT LINE 1071 IN MINT.asm
STACK:              0900 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 627 IN IOSerial.asm
DSTACK:             0900 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 174 IN MINT.asm
                    > USED AT LINE 592 IN MINT.asm
                    > USED AT LINE 1138 IN MINT.asm
RSTACK:             0A00 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 181 IN MINT.asm
TIB:                0A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 209 IN MINT.asm
                    > USED AT LINE 241 IN MINT.asm
                    > USED AT LINE 250 IN MINT.asm
                    > USED AT LINE 263 IN MINT.asm
                    > USED AT LINE 593 IN MINT.asm
                    > USED AT LINE 605 IN MINT.asm
USERVARS:           0B00 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 184 IN MINT.asm
                    > USED AT LINE 596 IN MINT.asm
KNOWNVARS:          0B00 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 1314 IN MINT.asm
CS0:                0B00 DEFINED AT LINE 20 IN ram.asm
CTIB:               0B02 DEFINED AT LINE 21 IN ram.asm
CDEFS:              0B04 DEFINED AT LINE 22 IN ram.asm
CVARS:              0B06 DEFINED AT LINE 23 IN ram.asm
CUSERVARS:          0B08 DEFINED AT LINE 24 IN ram.asm
VTEMP:              0B12 DEFINED AT LINE 29 IN ram.asm
VHEAPPTR:           0B14 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 343 IN MINT.asm
                    > USED AT LINE 352 IN MINT.asm
                    > USED AT LINE 1170 IN MINT.asm
                    > USED AT LINE 1331 IN MINT.asm
                    > USED AT LINE 1340 IN MINT.asm
                    > USED AT LINE 1374 IN MINT.asm
                    > USED AT LINE 1389 IN MINT.asm
VBASE16:            0B16 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 818 IN MINT.asm
                    > USED AT LINE 1095 IN MINT.asm
VTIBPTR:            0B18 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 203 IN MINT.asm
                    > USED AT LINE 262 IN MINT.asm
                    > USED AT LINE 1272 IN MINT.asm
                    > USED AT LINE 1458 IN MINT.asm
                    > USED AT LINE 1468 IN MINT.asm
VALTCODES:          0B1A DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1043 IN MINT.asm
VBYTEMODE:          0B1C DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 345 IN MINT.asm
                    > USED AT LINE 1330 IN MINT.asm
                    > USED AT LINE 1343 IN MINT.asm
VFLAGS:             0B1E DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 938 IN MINT.asm
                    > USED AT LINE 1018 IN MINT.asm
                    > USED AT LINE 1300 IN MINT.asm
GETCVEC:            0B20 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 617 IN IOSerial.asm
                    > USED AT LINE 639 IN IOSerial.asm
PUTCVEC:            0B22 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 622 IN IOSerial.asm
                    > USED AT LINE 641 IN IOSerial.asm
INTVEC:             0B24 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 635 IN IOSerial.asm
NMIVEC:             0B26 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 636 IN IOSerial.asm
BAUD:               0B28 DEFINED AT LINE 42 IN ram.asm
RST08:              0B2A DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 629 IN IOSerial.asm
RST10:              0B2C DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 630 IN IOSerial.asm
RST18:              0B2E DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 631 IN IOSerial.asm
RST20:              0B30 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 632 IN IOSerial.asm
RST28:              0B32 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 633 IN IOSerial.asm
RST30:              0B34 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 634 IN IOSerial.asm
BUF:                0B40 DEFINED AT LINE 55 IN ram.asm
VARS:               0BC0 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 595 IN MINT.asm
                    > USED AT LINE 655 IN MINT.asm
DEFS:               0BF4 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 187 IN MINT.asm
                    > USED AT LINE 594 IN MINT.asm
                    > USED AT LINE 636 IN MINT.asm
                    > USED AT LINE 1364 IN MINT.asm
TBPTR:              0C28 DEFINED AT LINE 67 IN ram.asm
HEAP:               0C2A DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 603 IN MINT.asm
