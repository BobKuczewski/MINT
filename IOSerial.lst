0001   0000             ; ROM code
0002   0000             ; Targets:
0003   0000             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0004   0000             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0005   0000             ;Serial: Bit Bang, 6850 ACIA
0006   0000             .SYM
0007   0000             ;#define TEC-1
0008   0000             #define LOADER
0009   0000             #define BITBANG
0010   0000             
0011   0000             
0012   0000             ;TEC-1 TEC-1D 2k rom/ram
0013   0000             ;ROMSTART .equ $0000
0014   0000             ;RAMSTART .equ $0800
0015   0000             ;ROMSIZE  .equ 2048
0016   0000             ;RAMSIZE  .equ 2048
0017   0000             
0018   0000             ;TEC-1D SC 8k rom/ram 
0019   0000             ROMSTART .equ $0000
0020   0000             RAMSTART .equ $2000
0021   0000             ROMSIZE  .equ 8192
0022   0000             RAMSIZE  .equ 8192
0023   0000             
0024   0000             ; RC2014
0025   0000             ;ROMSTART .equ $0000
0026   0000             ;RAMSTART .equ $2000
0027   0000             ;ROMSIZE  .equ 8192
0028   0000             ;RAMSIZE  .equ 8192
0029   0000             
0030   0000             
0031   0000             
0032   0000             
0033   0000             #ifdef  BITBANG
0034   0000             ; bit bang baud rate constants @ 4MHz
0035   0000             B300:	.EQU	0220H
0036   0000             B1200:	.EQU	0080H
0037   0000             B2400:	.EQU	003FH
0038   0000             B4800:	.EQU	001BH
0039   0000             B9600:	.EQU	000BH
0040   0000             
0041   0000~            #else
0042   0000~            ;
0043   0000~            ; 6850 ACIA registers
0044   0000~            ;----------------------
0045   0000~            CONTROL         .EQU      $80   ;(write) 
0046   0000~            STATUS          .EQU      $80   ;(read)
0047   0000~            TDR             .EQU      $81   ;(write)
0048   0000~            RDR             .EQU      $81   ;(read)
0049   0000~            ;
0050   0000~            ; control register bits
0051   0000~            ;----------------------
0052   0000~            ;
0053   0000~            ;clock divisor
0054   0000~            ;
0055   0000~            MRESET  .EQU  $03        ;master reset the ACIA
0056   0000~            DIV0    .EQU  $00        ;CLOCK/1
0057   0000~            DIV16   .EQU  $01        ;CLOCK/16
0058   0000~            DIV64   .EQU  $02        ;CLOCK/64
0059   0000~            ;
0060   0000~            ; format select
0061   0000~            ;
0062   0000~            F7E2    .EQU   $00        ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0063   0000~            F7O2    .EQU   $04        ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0064   0000~            F7E1    .EQU   $08        ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0065   0000~            F7O1    .EQU   $0C        ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0066   0000~            F8N2    .EQU   $10        ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0067   0000~            F8N1    .EQU   $14        ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0068   0000~            F8E1    .EQU   $18        ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0069   0000~            F8O1    .EQU   $1C        ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0070   0000~            ;
0071   0000~            ; transmitter control
0072   0000~            ;
0073   0000~            RTSLID .EQU   $00        ;RTS LOW, transmit interrupt disabled
0074   0000~            RTSLIE .EQU   $20        ;RTS LOW, transmit interrupt enabled
0075   0000~            RTSHID .EQU   $40        ;RTS HIGH, transmit interrupt disabled
0076   0000~            RTSLIDB .EQU  $60        ;RTS LOW, transmit interrupt disabled and 'break' transmitted
0077   0000~            ;
0078   0000~            ; receiver interrupt
0079   0000~            ;
0080   0000~            RIE    .EQU   $80        ;receiver interrupt enabled
0081   0000~            ;
0082   0000~            ; status register bits
0083   0000~            ;---------------------
0084   0000~            RDRF   .EQU   0          ;receive data register full
0085   0000~            TDRE   .EQU   1          ;transmit data register empty
0086   0000~            DCD    .EQU   2          ;data carrier detect
0087   0000~            CTS    .EQU   3          ;clear to send
0088   0000~            FE     .EQU   4          ;framing error
0089   0000~            OVRN   .EQU   5          ;overrun
0090   0000~            PE     .EQU   6          ;parity error
0091   0000~            IRQ    .EQU   7          ;interrupt request
0092   0000~            
0093   0000             #endif
0094   0000             
0095   0000             
0096   0000             
0097   0000             ; I/O port addresses
0098   0000             
0099   0000             ;#IFDEF TEC-1
0100   0000             ;KEYBUF:      .EQU 00H             ;MM74C923N KEYBOARD ENCODER
0101   0000             ;SCAN:        .EQU 01H             ;DISPLAY SCAN LATCH
0102   0000             ;DISPLY:      .EQU 02H             ;DISPLAY LATCH
0103   0000             ;PORT3:       .EQU 03H             ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0104   0000             ;PORT4:       .EQU 04H             ;ST4 (8X8), LCD 'E' (DAT BOARD)
0105   0000             ;PORT5:       .EQU 05H
0106   0000             ;PORT6:       .EQU 06H
0107   0000             ;PORT7:       .EQU 07H             ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0108   0000             ;#ELSE ;SC
0109   0000             IO0:         .EQU 80H             ;IO PORT 0
0110   0000             IO1:         .EQU 81H             ;IO PORT 1
0111   0000             IO2:         .EQU 82H             ;IO PORT 2
0112   0000             IO3:         .EQU 83H             ;IO PORT 3
0113   0000             DISPLY:      .EQU 84H             ;DISPLAY LATCH
0114   0000             SCAN:        .EQU 85H             ;DISPLAY SCAN LATCH
0115   0000             KEYBUF:      .EQU 86H             ;KEYBOARD BUFFER
0116   0000             IO7:         .EQU 87H             ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0117   0000             ;#ENDIF
0118   0000             
0119   0000             INTVEC:  .equ    RAMSTART + RAMSIZE - 2
0120   0000             NMIVEC:  .equ    RAMSTART + RAMSIZE - 4
0121   0000             BAUD     .equ    RAMSTART + RAMSIZE - 6
0122   0000             RST08:   .equ    RAMSTART + RAMSIZE - 8
0123   0000             RST10:   .equ    RAMSTART + RAMSIZE - 10
0124   0000             RST18:   .equ    RAMSTART + RAMSIZE - 12
0125   0000             RST20:   .equ    RAMSTART + RAMSIZE - 14
0126   0000             RST28:   .equ    RAMSTART + RAMSIZE - 16
0127   0000             RST30:   .equ    RAMSTART + RAMSIZE - 18
0128   0000             BUF:     .equ    RAMSTART + RAMSIZE - 128
0129   0000             stack:   .equ   RAMSTART + RAMSIZE - 130
0130   0000             
0131   0000             ; ASCII codes
0132   0000             ESC:    .EQU   1BH
0133   0000             CR:     .EQU   0DH
0134   0000             LF:     .EQU   0AH
0135   0000             
0136   0000                     .ORG ROMSTART
0137   0000             ;reset
0138   0000             RSTVEC:
0139   0000 C3 6B 00            JP	RESET
0140   0003             ;RST 1
0141   0008             	.ORG	ROMSTART+$08
0142   0008 E5          	PUSH	HL
0143   0009 2A F8 3F    	LD	HL,(RST08)
0144   000C E9          	JP	(HL)
0145   000D                 
0146   000D             ;RST 2
0147   0010                 .ORG ROMSTART+$10
0148   0010 E5          	PUSH	HL
0149   0011 2A F6 3F    	LD	HL,(RST10)
0150   0014 E9          	JP	(HL)
0151   0015             ;RST 3
0152   0018                 .ORG ROMSTART+$18 
0153   0018 E5          	PUSH	HL
0154   0019 2A F4 3F    	LD	HL,(RST18)
0155   001C E9          	JP	(HL)
0156   001D                 
0157   001D             ;RST 4
0158   0020                 .ORG ROMSTART+$20
0159   0020 E5          	PUSH	HL
0160   0021 2A F2 3F    	LD	HL,(RST20)
0161   0024 E9          	JP	(HL)
0162   0025             
0163   0025             ;RST 5
0164   0028             	.ORG ROMSTART+$28
0165   0028 E5          	PUSH	HL
0166   0029 2A F0 3F    	LD	HL,(RST28)
0167   002C E9          	JP	(HL)
0168   002D             
0169   002D             ;RST 6
0170   0030             	.ORG ROMSTART+$30
0171   0030 E5              PUSH	HL
0172   0031 2A EE 3F    	LD	HL,(RST30)
0173   0034 E9          	JP	(HL)
0174   0035             
0175   0035             ;RST 7 Interrupt
0176   0038             	.ORG	ROMSTART+$38
0177   0038 E5          	PUSH	HL
0178   0039 2A FE 3F    	LD	HL,(INTVEC)
0179   003C E9          	JP	(HL)
0180   0040                 .ORG    ROMSTART+$40
0181   0040             ;hexadecimal to 7 segment display code table
0182   0040~            #IFDEF TEC-1
0183   0040~            sevensegment:
0184   0040~                        .DB 0EBH,28H,0CDH,0ADH ;0,1,2,3
0185   0040~                        .DB 2EH,0A7H,0E7H,29H ;4,5,6,7
0186   0040~                        .DB 0EFH,2FH,6FH,0E6H ;8,9,A,B
0187   0040~                        .DB 0C3H,0ECH,0C7H,47H ;C,D,E,F
0188   0040             #ELSE
0189   0040             sevensegment:
0190   0040 3F 06 5B 4F             .DB 3FH,06H,5BH,4FH ;0,1,2,3
0191   0044 66 6D 7D 07             .DB 66H,6DH,7DH,07H ;4,5,6,7
0192   0048 7F 6F 77 7C             .DB 7FH,6FH,77H,7CH ;8,9,A,B
0193   004C 39 5E 79 71             .DB 39H,5EH,79H,71H ;C,D,E,F
0194   0050             #ENDIF
0195   0050             
0196   0050~            #IFDEF TEC-1
0197   0050~            IOPorts:
0198   0050~            KEYBUF:    .db    $00           ;MM74C923 keyboard encoder
0199   0050~            SCAN:      .db    $01           ;display scan latch
0200   0050~            DISPLY:    .db    $02           ;display latch
0201   0050~            PORT3:     .db    $03           ;ST3 (8x8), strobe (relay board), datlatch (DAT board)
0202   0050~            PORT4:     .db    $04           ;ST4 (8x8), LCD 'E' (DAT board)
0203   0050~            PORT5:     .db    $05
0204   0050~            PORT6:     .db    $06
0205   0050~            PORT7:     .db    $07
0206   0050             #ELSE ;SC
0207   0050             IOPorts:
0208   0050             ;KEYBUF:    .db    $86           ;MM74C923 keyboard encoder buffer
0209   0050             ;SCAN:      .db    $85           ;display scan latch
0210   0050             ;DISPLY:    .db    $84           ;display latch
0211   0050             ;IO0:       .db    $80           ;IO port 0
0212   0050             ;IO1:       .db    $81           ;IO port 1
0213   0050             ;IO2:       .db    $82           ;IO port 2
0214   0050             ;IO3:       .db    $83           ;IO port 3
0215   0050             ;IO7:       .db    $87           ;enable disable single stepper if installed
0216   0050             #endif
0217   0050             ;---------------
0218   0050             ; BIT TIME DELAY
0219   0050             ;---------------
0220   0050             ;DELAY FOR ONE SERIAL BIT TIME
0221   0050             ;ENTRY : HL = DELAY TIME
0222   0050             ; NO REGISTERS MODIFIED
0223   0050             ;
0224   0050 21 00 20    PWRUP:   LD    hl,$2000
0225   0053             BITIME:
0226   0053 E5                   PUSH  HL
0227   0054 D5                   PUSH  DE
0228   0055 11 01 00             LD    DE,0001H
0229   0058 ED 52       BITIM1:  SBC   HL,DE
0230   005A D2 58 00             JP    NC,BITIM1
0231   005D D1                   POP   DE
0232   005E E1                   POP   HL
0233   005F C9          IntRet:  RET
0234   0060             ;RST 8  Non Maskable Interrupt
0235   0060             
0236   0066             	.ORG ROMSTART+$66
0237   0066 E5          	PUSH	HL
0238   0067 2A FC 3F    	LD	HL,(NMIVEC)
0239   006A E9          	JP	(HL)
0240   006B             
0241   006B 31 7E 3F    RESET:   ld   SP,stack
0242   006E~            #ifndef BITBANG
0243   006E~                   ld    a,MRESET
0244   006E~                   out   (CONTROL),a           ;reset the ACIA
0245   006E             #endif
0246   006E CD 50 00             call PWRUP
0247   0071 ED 56                IM  1
0248   0073 FB                   EI
0249   0074             #ifdef BITBANG
0250   0074             ;inline serial initialisation
0251   0074 3E 40                LD    A,$40
0252   0076 0E 85                LD    C,(SCAN)
0253   0078 ED 79                OUT   (C),A
0254   007A 21 1B 00             LD    HL,B4800
0255   007D 22 FA 3F             LD    (BAUD),HL
0256   0080~            #else ;6850      
0257   0080~                   ld     a,RTSLID+F8N2+DIV64
0258   0080~                   out   (CONTROL),a           ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
0259   0080             #endif
0260   0080             ;just going to send a char to let you know I'm here
0261   0080             #ifdef LOADER
0262   0080 3E 4C       Load:  ld     a,'L'  ; L for load
0263   0082 CD 92 00           call   TxChar
0264   0085 CD 00 07           call INTELH
0265   0088 CA 00 20           jp   z,RAMSTART
0266   008B 3E 30              ld   a,'0'   ;0 is false
0267   008D CD 92 00           call TxChar
IOSerial.asm line 0268: Label not found: (load)
IOSerial.asm line 0268: Range of relative branch exceeded. 
0268   0090 18 00              jr   load    ;if at first you don't succeed...
0269   0092~            #else
0270   0092~            stop:  jr   stop
0271   0092             #endif
0272   0092             
0273   0092             #ifdef  BITBANG
0274   0092             ;------------------------
0275   0092             ; SERIAL TRANSMIT ROUTINE
0276   0092             ;------------------------
0277   0092             ;TRANSMIT BYTE SERIALLY ON DOUT
0278   0092             ;
0279   0092             ; ENTRY : A = BYTE TO TRANSMIT
0280   0092             ;  EXIT : NO REGISTERS MODIFIED
0281   0092             ;
0282   0092             TxChar:
0283   0092             TXDATA:
0284   0092 F5          	PUSH	AF
0285   0093 C5          	PUSH	BC
0286   0094 E5          	PUSH	HL
0287   0095 2A FA 3F    	LD	HL,(BAUD)
0288   0098 4F          	LD	C,A
0289   0099             ;
0290   0099             ; TRANSMIT START BIT
0291   0099             ;
0292   0099 AF          	XOR	A
0293   009A D3 85       	OUT	(SCAN),A
0294   009C CD 53 00    	CALL	BITIME
0295   009F             ;
0296   009F             ; TRANSMIT DATA
0297   009F             ;
0298   009F 06 08       	LD	B,08H
0299   00A1 CB 09       	RRC	C
0300   00A3 CB 09       NXTBIT:	RRC	C	;SHIFT BITS TO D6,
0301   00A5 79          	LD	A,C	;LSB FIRST AND OUTPUT
0302   00A6 E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
0303   00A8 D3 85       	OUT	(SCAN),A
0304   00AA CD 53 00    	CALL	BITIME
0305   00AD 10 F4       	DJNZ	NXTBIT
0306   00AF             ;
0307   00AF             ; SEND STOP BITS
0308   00AF             ;
0309   00AF 3E 40             LD	A,40H
0310   00B1 D3 85             OUT	(SCAN),A
0311   00B3 CD 53 00          CALL  BITIME
0312   00B6 CD 53 00          CALL	BITIME
0313   00B9 E1          	POP	HL
0314   00BA C1          	POP	BC
0315   00BB F1          	POP	AF
0316   00BC C9          	RET
0317   00BD             ;-----------------------
0318   00BD             ; SERIAL RECEIVE ROUTINE
0319   00BD             ;-----------------------
0320   00BD             ;RECEIVE SERIAL BYTE FROM DIN
0321   00BD             ;
0322   00BD             ; ENTRY : NONE
0323   00BD             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
0324   00BD             ;
0325   00BD             ; REGISTERS MODIFIED A AND F
0326   00BD             ;
0327   00BD             RxChar:
0328   00BD             RXDATA:
0329   00BD C5          	PUSH	BC
0330   00BE E5          	PUSH	HL
0331   00BF             ;
0332   00BF             ; WAIT FOR START BIT 
0333   00BF             ;
0334   00BF DB 86       RXDAT1: IN	A,(KEYBUF)
0335   00C1 CB 7F       	    BIT	7,A
0336   00C3 20 FA       	    JR	NZ,RXDAT1	;NO START BIT
0337   00C5             ;
0338   00C5             ; DETECTED START BIT
0339   00C5             ;
0340   00C5 2A FA 3F    	LD	HL,(BAUD)
0341   00C8 CB 3C       	SRL	H
0342   00CA CB 1D       	RR	L 	;DELAY FOR HALF BIT TIME
0343   00CC CD 53 00    	CALL 	BITIME
0344   00CF DB 86       	IN	A,(KEYBUF)
0345   00D1 CB 7F       	BIT	7,A
0346   00D3 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
0347   00D5             ;
0348   00D5             ; DETECTED VALID START BIT,READ IN DATA
0349   00D5             ;
0350   00D5 06 08       	LD	B,08H
0351   00D7 2A FA 3F    RXDAT2:	LD	HL,(BAUD)
0352   00DA CD 53 00    	CALL	BITIME	;DELAY ONE BIT TIME
0353   00DD DB 86       	IN	A,(KEYBUF)
0354   00DF CB 17       	RL	A
0355   00E1 CB 19       	RR	C	;SHIFT BIT INTO DATA REG
0356   00E3 10 F2       	DJNZ	RXDAT2
0357   00E5 79          	LD	A,C
0358   00E6 B7          	OR	A	;CLEAR CARRY FLAG
0359   00E7 E1              POP	HL
0360   00E8 C1              POP	BC
0361   00E9 C9          	RET
0362   00EA                 
0363   00EA~            #else
0364   00EA~            ;
0365   00EA~            ; transmit a character in a
0366   00EA~            ;--------------------------
0367   00EA~            putchar:
0368   00EA~            TXDATA:
0369   00EA~            TxChar:  
0370   00EA~                     ld    b,a                   ;save the character  for later
0371   00EA~            TxChar1: in    a,(STATUS)            ;get the ACIA status 
0372   00EA~                     bit   TDRE,a                ;is the TDRE bit high?
0373   00EA~                     jr    z,TxChar1             ;no, the TDR is not empty
0374   00EA~                     ld    a,b                   ;yes, get the character
0375   00EA~                     out   (TDR),a               ;and put it in the TDR
0376   00EA~                     ret
0377   00EA~            ;
0378   00EA~            ; receive  a character in a
0379   00EA~            ;---------------------------------
0380   00EA~            getchar:
0381   00EA~            RXDATA:
0382   00EA~            RxChar:  in    a,(STATUS)         ;get the ACIA status
0383   00EA~                     bit   RDRF,a             ;is the RDRF bit high?
0384   00EA~                     jr    z,RxChar           ;no, the RDR is empty
0385   00EA~                     in    a,(RDR)            ;yes, read the received char
0386   00EA~                     ret
0387   00EA             #endif
0388   00EA             
0389   00EA             #ifdef LOADER
0390   0700                    .ORG   ROMSTART + $0700
0391   0700             ;-----------------------
0392   0700             ; RECEIVE INTEL HEX FILE
0393   0700             ;-----------------------
0394   0700 DD 21 80 3F INTELH	LD	IX,BUF
0395   0704             ;
0396   0704             ; WAIT FOR RECORD MARK
0397   0704             ;
0398   0704 AF          INTEL1	XOR	A
0399   0705 DD 77 03    	LD	(IX+3),A	;CLEAR CHECKSUM
0400   0708 CD BD 00    	CALL	RXDATA	;WAIT FOR THE RECORD MARK
0401   070B FE 3A       	CP	':'	;TO BE TRANSMITTED
0402   070D 20 F5       	JR	NZ,INTEL1	;NOT RECORD MARK
0403   070F             ;
0404   070F             ; GET RECORD LENGTH
0405   070F             ;
0406   070F CD 5C 07    	CALL	GETBYT
0407   0712 DD 77 00    	LD	(IX+0),A	;NUMBER OF DATA BYTES
0408   0715             ;
0409   0715             ; GET ADDRESS FIELD
0410   0715             ;
0411   0715 CD 5C 07    	CALL	GETBYT
0412   0718 DD 77 02    	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
0413   071B CD 5C 07    	CALL	GETBYT
0414   071E DD 77 01    	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
0415   0721             ;
0416   0721             ; GET RECORD TYPE
0417   0721             ;
0418   0721 CD 5C 07    	CALL	GETBYT
0419   0724 20 24       	JR	NZ,INTEL4	;END OF FILE RECORD
0420   0726             ;
0421   0726             ; READ IN THE DATA
0422   0726             ;
0423   0726 DD 46 00    	LD	B,(IX+0)	;NUMBER OF DATA BYTES
0424   0729 DD 66 02    	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
0425   072C DD 6E 01    	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
0426   072F             
0427   072F CD 5C 07    INTEL2	CALL	GETBYT	;GET DATA BYTE
0428   0732 77          	LD	(HL),A	;STORE DATA BYTE
0429   0733 23          	INC	HL
0430   0734 10 F9       	DJNZ	INTEL2	;LOAD MORE BYTES
0431   0736             ;
0432   0736             ; GET CHECKSUM AND COMPARE
0433   0736             ;
0434   0736 DD 7E 03    	LD	A,(IX+3)	;CONVERT CHECKSUM TO
0435   0739 ED 44       	NEG		;TWO'S COMPLEMENT
0436   073B DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
0437   073E CD 5C 07    	CALL	GETBYT
0438   0741 DD 77 03    	LD	(IX+3),A	;SAVE RECORD CHECKSUM
0439   0744 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
0440   0747 28 BB       	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
0441   0749 C9              RET             ;NZ=CHECKSUM ERROR
0442   074A             ;
0443   074A             ; END OF FILE RECORD
0444   074A             ;
0445   074A DD 7E 03    INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
0446   074D ED 44       	NEG		;TWO'S COMPLEMENT
0447   074F DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
0448   0752 CD 5C 07    	CALL	GETBYT
0449   0755 DD 77 03    	LD	(IX+3),A	;SAVE EOF CHECKSUM
0450   0758 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
0451   075B C9          	RET  	    ;NZ=CHECKSUM ERROR
0452   075C             ;--------------------------
0453   075C             ; GET BYTE FROM SERIAL PORT
0454   075C             ;--------------------------
0455   075C C5          GETBYT	PUSH	BC
0456   075D CD BD 00    	CALL	RXDATA
0457   0760 CB 77       	BIT	6,A
0458   0762 28 02       	JR	Z,GETBT1
0459   0764 C6 09       	ADD	A,09H
0460   0766 E6 0F       GETBT1	AND	0FH
0461   0768 CB 27       	SLA 	A
0462   076A CB 27       	SLA	A
0463   076C CB 27       	SLA	A
0464   076E CB 27       	SLA	A
0465   0770 4F          	LD	C,A
0466   0771             ;
0467   0771             ; GET LOW NYBBLE
0468   0771             ;
0469   0771 CD BD 00    	CALL	RXDATA
0470   0774 CB 77       	BIT	6,A
0471   0776 28 02       	JR	Z,GETBT2
0472   0778 C6 09       	ADD	A,09H
0473   077A E6 0F       GETBT2	AND	0FH
0474   077C B1          	OR	C
0475   077D 47          	LD	B,A
0476   077E DD 86 03    	ADD	A,(IX+3)
0477   0781 DD 77 03    	LD	(IX+3),A	;ADD TO CHECKSUM
0478   0784 78          	LD	A,B
0479   0785 A7          	AND	A	;CLEAR CARRY
0480   0786 C1              POP	BC
0481   0787 C9          	RET
0482   0788             #endif
0483   0788                 .END
tasm: Number of errors = 2
